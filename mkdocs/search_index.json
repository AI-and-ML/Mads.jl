{
    "docs": [
        {
            "location": "/", 
            "text": "MADS (Model Analysis \n Decision Support)\n\n\nMADS is an open-source \nJulia\n code designed as an integrated high-performance computational framework performing a wide range of model-based analyses:\n\n\n\n\nSensitivity Analysis\n\n\nParameter Estimation\n\n\nModel Inversion and Calibration\n\n\nUncertainty Quantification\n\n\nModel Selection and Averaging\n\n\nDecision Support\n\n\n\n\nMADS utilizes adaptive rules and techniques which allows the analyses to be performed with minimum user input.\nThe code provides a series of alternative algorithms to perform each type of model analyses.\n\n\nFor additional information:\n\n\n\n\nweb:\n\n\nmads.lanl.gov\n\n\nmadsjulia.lanl.gov\n \n\n\n\n\n\n\ndocumentation:\n\n\ngithub\n\n\nreadthedocs\n\n\n\n\n\n\nrepos:\n\n\ngithub\n\n\ngitlab\n\n\n\n\n\n\n\n\ngit:\n\n\ngit clone git@github.com:madsjulia/Mads.jl\n\n\ngit clone git@gitlab.com:mads/Mads.jl\n\n\n\n\n\n\nemail: \nmads@lanl.gov\n\n\n\n\nBuilds JuliaLang\n\n\n \n\n\nBuilds Travis-CI\n\n\n\n\nCoverage Status", 
            "title": "Home"
        }, 
        {
            "location": "/#mads-model-analysis-decision-support", 
            "text": "MADS is an open-source  Julia  code designed as an integrated high-performance computational framework performing a wide range of model-based analyses:   Sensitivity Analysis  Parameter Estimation  Model Inversion and Calibration  Uncertainty Quantification  Model Selection and Averaging  Decision Support   MADS utilizes adaptive rules and techniques which allows the analyses to be performed with minimum user input.\nThe code provides a series of alternative algorithms to perform each type of model analyses.  For additional information:   web:  mads.lanl.gov  madsjulia.lanl.gov      documentation:  github  readthedocs    repos:  github  gitlab     git:  git clone git@github.com:madsjulia/Mads.jl  git clone git@gitlab.com:mads/Mads.jl    email:  mads@lanl.gov   Builds JuliaLang     Builds Travis-CI   Coverage Status", 
            "title": "MADS (Model Analysis &amp; Decision Support)"
        }, 
        {
            "location": "/INSTALLATION/", 
            "text": "Installation\n\n\nAfter starting Julia, execute:\n\n\nPkg.add(\nMads\n)\n\n\n\n\nInstallation of MADS behind a firewall\n\n\nJulia uses git for package management. Add in the \n.gitconfig\n file in your home directory:\n\n\n[url \nhttps://\n]\n        insteadOf = git://\n\n\n\n\nor execute:\n\n\ngit config --global url.\nhttps://\n.insteadOf git://\n\n\n\n\nSet proxies:\n\n\nexport ftp_proxy=http://proxyout.\nyour_site\n:8080\nexport rsync_proxy=http://proxyout.\nyour_site\n:8080\nexport http_proxy=http://proxyout.\nyour_site\n:8080\nexport https_proxy=http://proxyout.\nyour_site\n:8080\nexport no_proxy=.\nyour_site\n\n\n\n\n\nFor example, if you are doing this at LANL, you will need to execute the \nfollowing lines in your bash command-line environment:\n\n\nexport ftp_proxy=http://proxyout.lanl.gov:8080\nexport rsync_proxy=http://proxyout.lanl.gov:8080\nexport http_proxy=http://proxyout.lanl.gov:8080\nexport https_proxy=http://proxyout.lanl.gov:8080\nexport no_proxy=.lanl.gov", 
            "title": "Installation"
        }, 
        {
            "location": "/INSTALLATION/#installation", 
            "text": "After starting Julia, execute:  Pkg.add( Mads )", 
            "title": "Installation"
        }, 
        {
            "location": "/INSTALLATION/#installation-of-mads-behind-a-firewall", 
            "text": "Julia uses git for package management. Add in the  .gitconfig  file in your home directory:  [url  https:// ]\n        insteadOf = git://  or execute:  git config --global url. https:// .insteadOf git://  Set proxies:  export ftp_proxy=http://proxyout. your_site :8080\nexport rsync_proxy=http://proxyout. your_site :8080\nexport http_proxy=http://proxyout. your_site :8080\nexport https_proxy=http://proxyout. your_site :8080\nexport no_proxy=. your_site   For example, if you are doing this at LANL, you will need to execute the \nfollowing lines in your bash command-line environment:  export ftp_proxy=http://proxyout.lanl.gov:8080\nexport rsync_proxy=http://proxyout.lanl.gov:8080\nexport http_proxy=http://proxyout.lanl.gov:8080\nexport https_proxy=http://proxyout.lanl.gov:8080\nexport no_proxy=.lanl.gov", 
            "title": "Installation of MADS behind a firewall"
        }, 
        {
            "location": "/GETTING_STARTED/", 
            "text": "MADS Getting Started\n\n\nInstall \nJulia\n and \nMADS\n (\nPkg.add(\"Mads\")\n) using the installation instruction in the \nREADME.md\n (\nsee also\n).\nIf you are not familiar with Julia, checkout \nJulia By Example\n, \nlearn X in Y minutes\n, \nJulia Express\n).\nYou can also explore the Julia examples in the \nexamples/learn_julia\n directory of the \nMads.jl\n repository (\ngithub\n).\n\n\nTo start using MADS, initiate the Julia REPL and execute \nimport Mads\n to load MADS modules.\n\n\nAll the MADS analyses are based on a MADS problem dictionary that defines the problem.\n\n\nThe MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:\n\n\nmadsdata = Mads.loadmadsfile(\"\ninput_file_name\n.mads\")\n\n\nFor example, you can execute:\n\n\nmadsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")\n\n\nThe file \ninternal-linear.mads\n is located in \nexamples/getting_started\n directory of the \nMads.jl\n repository.\n\n\nTypically, the MADS problem dictionary includes several classes:\n\n\n\n\nParameters\n : lists of model parameters\n\n\nObservations\n : lists of model observations\n\n\nModel\n : defines a model to predict the model observations using the model parameters\n\n\n\n\nThe file \ninternal-linear.mads\n looks like this:\n\n\nParameters:\n- a : { init:  1, dist: \nUniform(-10, 10)\n }\n- b : { init: -1, dist: \nUniform(-10, 10)\n }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl\n\n\n\n\nIn this case, there are two parameters, \na\n and \nb\n, defining a linear model, \nf(t) = a * t + b\n, described in \ninternal-linearmodel.jl\n.\n\n\nThe Julia file \ninternal-linearmodel.jl\n is specified under \nModel\n in the MADS problem dictionary above.\n\n\nExecute:\n\n\nMads.showallparameters(madsdata)\n to show all the parameters.\n\n\nMads.showobservations(madsdata)\n to list all the observations.\n\n\nMADS can perform various types of analyses:\n\n\n\n\nMads.forward(madsdata)\n will execute forward model simulation based on the initial parameter values.\n\n\nsaresults = Mads.efast(madsdata)\n will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.\n\n\noptparam, iaresults = Mads.calibrate(madsdata)\n will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.\n\n\nMads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values\noptparam` estimated by the inverse analyses above.\n\n\n\n\nMore complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the \nexamples\n subdirectories of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Command-line execution\n\n\nMADS can be executed at the command line using \nmadsjl.jl\n. Link this file in a directory in your search \nPATH\n.\n\n\nFor example, using \nmadsjl.jl\n you can execute:\n\n\nmadsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast\n\n\n\n\nin the \nexamples/getting_started\n subdirectory of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Documentation\n\n\nAll the available MADS modules and functions are described at \nmadsjulia.github.io\n\n\nMADS Licensing \n Copyright\n\n\nCheck the files \nCOPYING\n and \nLICENSE\n to see the licensing \n copyright information.", 
            "title": "Getting started"
        }, 
        {
            "location": "/GETTING_STARTED/#mads-getting-started", 
            "text": "Install  Julia  and  MADS  ( Pkg.add(\"Mads\") ) using the installation instruction in the  README.md  ( see also ).\nIf you are not familiar with Julia, checkout  Julia By Example ,  learn X in Y minutes ,  Julia Express ).\nYou can also explore the Julia examples in the  examples/learn_julia  directory of the  Mads.jl  repository ( github ).  To start using MADS, initiate the Julia REPL and execute  import Mads  to load MADS modules.  All the MADS analyses are based on a MADS problem dictionary that defines the problem.  The MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:  madsdata = Mads.loadmadsfile(\" input_file_name .mads\")  For example, you can execute:  madsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")  The file  internal-linear.mads  is located in  examples/getting_started  directory of the  Mads.jl  repository.  Typically, the MADS problem dictionary includes several classes:   Parameters  : lists of model parameters  Observations  : lists of model observations  Model  : defines a model to predict the model observations using the model parameters   The file  internal-linear.mads  looks like this:  Parameters:\n- a : { init:  1, dist:  Uniform(-10, 10)  }\n- b : { init: -1, dist:  Uniform(-10, 10)  }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl  In this case, there are two parameters,  a  and  b , defining a linear model,  f(t) = a * t + b , described in  internal-linearmodel.jl .  The Julia file  internal-linearmodel.jl  is specified under  Model  in the MADS problem dictionary above.  Execute:  Mads.showallparameters(madsdata)  to show all the parameters.  Mads.showobservations(madsdata)  to list all the observations.  MADS can perform various types of analyses:   Mads.forward(madsdata)  will execute forward model simulation based on the initial parameter values.  saresults = Mads.efast(madsdata)  will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.  optparam, iaresults = Mads.calibrate(madsdata)  will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.  Mads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values optparam` estimated by the inverse analyses above.   More complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the  examples  subdirectories of the  Mads.jl  repository ( github ).", 
            "title": "MADS Getting Started"
        }, 
        {
            "location": "/GETTING_STARTED/#mads-command-line-execution", 
            "text": "MADS can be executed at the command line using  madsjl.jl . Link this file in a directory in your search  PATH .  For example, using  madsjl.jl  you can execute:  madsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast  in the  examples/getting_started  subdirectory of the  Mads.jl  repository ( github ).", 
            "title": "MADS Command-line execution"
        }, 
        {
            "location": "/GETTING_STARTED/#mads-documentation", 
            "text": "All the available MADS modules and functions are described at  madsjulia.github.io", 
            "title": "MADS Documentation"
        }, 
        {
            "location": "/GETTING_STARTED/#mads-licensing-copyright", 
            "text": "Check the files  COPYING  and  LICENSE  to see the licensing   copyright information.", 
            "title": "MADS Licensing &amp; Copyright"
        }, 
        {
            "location": "/EXAMPLES/", 
            "text": "MADS examples\n\n\nIn Julia REPL, do the following commands:\n\n\nimport Mads\n\n\nTo explore getting-started instructions, execute:\n\n\nMads.help()\n\n\nThere are various examples located in the \nexamples\n directory of the \nMads\n repository.\n\n\nFor example, execute\n\n\ninclude(Mads.madsdir * \"/../examples/contamination/analysis.jl\")\n\n\nto perform various analyses related to contaminant transport, or execute\n\n\ninclude(Mads.madsdir * \"/../examples/bigdt/bigdt.jl\")\n\n\nto perform BIG-DT analysis.", 
            "title": "Examples"
        }, 
        {
            "location": "/EXAMPLES/#mads-examples", 
            "text": "In Julia REPL, do the following commands:  import Mads  To explore getting-started instructions, execute:  Mads.help()  There are various examples located in the  examples  directory of the  Mads  repository.  For example, execute  include(Mads.madsdir * \"/../examples/contamination/analysis.jl\")  to perform various analyses related to contaminant transport, or execute  include(Mads.madsdir * \"/../examples/bigdt/bigdt.jl\")  to perform BIG-DT analysis.", 
            "title": "MADS examples"
        }, 
        {
            "location": "/MODEL_COUPLING/", 
            "text": "Model Coupling\n\n\nMADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\n\n\nModel\n : Julia model defined in an external Julia file.\n\n\n\n\n\n\nMADS model\n : Julia model defined in an external Julia file using information from the MADS problem dictionary.\n\n\n\n\n\n\nJulia model\n : Julia model defined internally (already in the Julia workspace).\n\n\n\n\n\n\nCommand\n : external model executed by an UNIX command or script.\n\n\n\n\n\n\nJulia command\n : external model executed by a Julia script. The Julia script is defined in an external Julia file.\n\n\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model. Only \nCommand\n uses different approaches to get back the model outputs. The script defined under \nJulia command\n parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows.\n\n\n\n\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at \nmads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file", 
            "title": "Model coupling"
        }, 
        {
            "location": "/MODEL_COUPLING/#model-coupling", 
            "text": "MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:    Model  : Julia model defined in an external Julia file.    MADS model  : Julia model defined in an external Julia file using information from the MADS problem dictionary.    Julia model  : Julia model defined internally (already in the Julia workspace).    Command  : external model executed by an UNIX command or script.    Julia command  : external model executed by a Julia script. The Julia script is defined in an external Julia file.    Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model. Only  Command  uses different approaches to get back the model outputs. The script defined under  Julia command  parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows.    Options for writing model inputs:   Templates  : template files for writing model input files as defined at  mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file     Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file", 
            "title": "Model Coupling"
        }, 
        {
            "location": "/TEST/", 
            "text": "Testing \n Verification\n\n\nMADS includes a series of test and verification problems. These are also provided as examples how to run the code and perform various types of data and model analyses. All the MADS examples can be found in the MADS repository: \ngithub\n.\n\n\nAll the test and verification problems can be executed using:\n\n\nimport Mads\nMads.test()\n\n\n\n\nor\n\n\nPkg.test(\nMads\n)\nPkg.test(\nAnasol\n)\nPkg.test(\nBIGUQ\n)\nPkg.test(\nReusableFunctions\n)\nPkg.test(\nMetaProgTools\n)\nPkg.test(\nRobustPmap\n)", 
            "title": "Testing & Verification"
        }, 
        {
            "location": "/TEST/#testing-verification", 
            "text": "MADS includes a series of test and verification problems. These are also provided as examples how to run the code and perform various types of data and model analyses. All the MADS examples can be found in the MADS repository:  github .  All the test and verification problems can be executed using:  import Mads\nMads.test()  or  Pkg.test( Mads )\nPkg.test( Anasol )\nPkg.test( BIGUQ )\nPkg.test( ReusableFunctions )\nPkg.test( MetaProgTools )\nPkg.test( RobustPmap )", 
            "title": "Testing &amp; Verification"
        }, 
        {
            "location": "/FUNCTIONS/", 
            "text": "MADS Functions\n\n\nMADS includes several Modules. The modules include numerous functions. To list all the available functions execute:\n\n\nMads.functions()\n\n\nTo list all the functions in a module, do:\n\n\nMads.functions(BIGUQ)\n\n\nTo list all the functions containing \nget\n, execute:\n\n\nMads.functions(\nget\n)\nMads.functions(Mads, \nget\n)", 
            "title": "Functions"
        }, 
        {
            "location": "/FUNCTIONS/#mads-functions", 
            "text": "MADS includes several Modules. The modules include numerous functions. To list all the available functions execute:  Mads.functions()  To list all the functions in a module, do:  Mads.functions(BIGUQ)  To list all the functions containing  get , execute:  Mads.functions( get )\nMads.functions(Mads,  get )", 
            "title": "MADS Functions"
        }, 
        {
            "location": "/Modules/Mads/", 
            "text": "Mads\n\n\nMethods [Internal]\n\n\n\n\n\n\nallwellsoff!(madsdata::Associative{K, V})\n\n\nTurn off all the wells in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:247\n\n\n\n\n\n\nallwellson!(madsdata::Associative{K, V})\n\n\nTurn on all the wells in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:223\n\n\n\n\n\n\nasinetransform(params::Array{T, 1},  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})\n\n\nArcsine transformation of model parameters\n\n\nsource:\n\n\nMads/src/MadsSine.jl:2\n\n\n\n\n\n\nbayessampling(madsdata::Associative{K, V})\n\n\nBayes Sampling\n\n\nMads.bayessampling(madsdata; nsteps=100, burnin=1000, thinning=1)\nMads.bayessampling(madsdata, numsequences; nsteps=100, burnin=1000, thinning=1)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumsequences\n : number of sequences executed in parallel\n\n\nnsteps\n :  \n\n\nburnin\n :  \n\n\nthinning\n :   \n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n : \n\n\n\n\nsource:\n\n\nMads/src/MadsMC.jl:24\n\n\n\n\n\n\ncalibrate(madsdata::Associative{K, V})\n\n\nCalibrate\n\n\nMads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda \n\n\nlambda_mu\n : lambda multiplication factor [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver\n\n\n\n\nReturns:\n\n\n\n\nminimumdict\n : model parameter dictionary with the optimal values at the minimum\n\n\nresults\n : optimization algorithm results (e.g. results.minimum)\n\n\n\n\nsource:\n\n\nMads/src/MadsCalibrate.jl:82\n\n\n\n\n\n\ncalibratenlopt(madsdata::Associative{K, V})\n\n\nDo a calibration using NLopt \n\n\nsource:\n\n\nMads/src/MadsCalibrate.jl:124\n\n\n\n\n\n\ncalibraterandom(madsdata::Associative{K, V})\n\n\nCalibrate with random initial guesses\n\n\nMads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumberofsamples\n : number of random initial samples\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda \n\n\nlambda_mu\n : lambda multiplication factor [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver\n\n\nseed\n : initial random seed\n\n\n\n\nReturns:\n\n\n\n\nbestresult\n : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum)\n\n\n\n\nsource:\n\n\nMads/src/MadsCalibrate.jl:30\n\n\n\n\n\n\ncalibraterandom(madsdata::Associative{K, V},  numberofsamples)\n\n\nCalibrate with random initial guesses\n\n\nMads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumberofsamples\n : number of random initial samples\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda \n\n\nlambda_mu\n : lambda multiplication factor [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver\n\n\nseed\n : initial random seed\n\n\n\n\nReturns:\n\n\n\n\nbestresult\n : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum)\n\n\n\n\nsource:\n\n\nMads/src/MadsCalibrate.jl:30\n\n\n\n\n\n\ncmadsins_obs(obsid::Array{T, 1},  instructionfilename::AbstractString,  inputfilename::AbstractString)\n\n\nCall C MADS ins_obs() function from the MADS dynamic library\n\n\nsource:\n\n\nMads/src/MadsIO.jl:349\n\n\n\n\n\n\ncomputemass(madsdata::Associative{K, V})\n\n\nCompute injected/reduced contaminant mass\n\n\nMads.computemass(madsdata; time = 0)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ntime\n : computational time\n\n\n\n\nReturns:\n\n\n\n\nmass_injected\n : total injected mass\n\n\nmass_reduced\n : total reduced mass\n\n\n\n\nsource:\n\n\nMads/src/MadsAnasol.jl:192\n\n\n\n\n\n\ncomputemass(madsfiles)\n\n\nCompute injected/reduced contaminant mass for a given set of mads input files\n\n\nMads.computemass(madsfiles; time = 0, path = \".\")\n\n\nArguments:\n\n\n\n\nmadsfiles\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\ntime\n : computational time\n\n\npath\n : search directory for the mads input files \n\n\n\n\nReturns:\n\n\n\n\nlambda\n : array with all the lambda values\n\n\nmass_injected\n : array with associated total injected mass\n\n\nmass_reduced\n : array with associated total reduced mass\n\n\n\n\nsource:\n\n\nMads/src/MadsAnasol.jl:251\n\n\n\n\n\n\ncomputeparametersensitities(madsdata::Associative{K, V},  saresults::Associative{K, V})\n\n\nCompute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nsaresults\n : sensitivity analysis results\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:439\n\n\n\n\n\n\ncontamination(wellx,  welly,  wellz,  n,  lambda,  theta,  vx,  vy,  vz,  ax,  ay,  az,  H,  x,  y,  z,  dx,  dy,  dz,  f,  t0,  t1,  t)\n\n\nCompute concentration for a point in space and time (x,y,z,t)\n\n\nMads.contamination(wellx, welly, wellz, n, lambda, theta, vx, vy, vz, ax, ay, az, H, x, y, z, dx, dy, dz, f, t0, t1, t; anasolfunction=\"long_bbb_ddd_iir_c\")\n\n\nArguments:\n\n\n\n\nwellx\n - observation point (well) X coordinate\n\n\nwelly\n - observation point (well) Y coordinate\n\n\nwellz\n - observation point (well) Z coordinate\n\n\nn\n - porosity\n\n\nlambda\n - first-order reaction rate\n\n\ntheta\n - groundwater flow direction\n\n\nvx\n - advective transport velocity in X direction\n\n\nvy\n - advective transport velocity in Y direction\n\n\nvz\n - advective transport velocity in Z direction\n\n\nax\n - dispersivity in X direction (longitudinal)\n\n\nay\n - dispersivity in Y direction (transverse horizontal)\n\n\naz\n - dispersivity in Y direction (transverse vertical)\n\n\nH\n - Hurst coefficient for Fractional Brownian dispersion\n\n\nx\n - X coordinate of contaminant source location \n\n\ny\n - Y coordinate of contaminant source location\n\n\nz\n - Z coordinate of contaminant source location\n\n\ndx\n - source size (extent) in X direction\n\n\ndy\n - source size (extent) in Y direction\n\n\ndz\n - source size (extent) in Z direction\n\n\nf\n - source mass flux\n\n\nt0\n - source starting time\n\n\nt1\n - source termination time\n\n\nt\n - time to compute concentration at the observation point\n\n\nanasolfunction\n : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c]\n\n\n\n\nReturns:\n\n\n\n\npredicted concentration at (wellx, welly, wellz, t)\n\n\n\n\nsource:\n\n\nMads/src/MadsAnasol.jl:151\n\n\n\n\n\n\ncopyright()\n\n\nProduce MADS copyright information\n\n\nsource:\n\n\nMads/src/MadsHelp.jl:9\n\n\n\n\n\n\ncreate_documentation()\n\n\nCreate web documentation files for Mads functions\n\n\nsource:\n\n\nMads/src/MadsHelp.jl:62\n\n\n\n\n\n\ncreate_tests_off()\n\n\nTurn off the generation of MADS tests (default)\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:17\n\n\n\n\n\n\ncreate_tests_on()\n\n\nTurn on the generation of MADS tests (dangerous)\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:12\n\n\n\n\n\n\ncreatemadsproblem(infilename::AbstractString,  outfilename::AbstractString)\n\n\nCreate a new Mads problem where the observation targets are computed based on the model predictions\n\n\n\n\nMads.createmadsproblem(infilename, outfilename)\n\n\nMads.createmadsproblem(madsdata, outfilename)\n\n\n`Mads.createmadsproblem(madsdata, predictions, outfilename)\n\n\n\n\nArguments:\n\n\n\n\ninfilename\n : input Mads file\n\n\noutfilename\n : output Mads file\n\n\nmadsdata\n : MADS problem dictionary\n\n\npredictions\n : dictionary of model predictions\n\n\n\n\nsource:\n\n\nMads/src/MadsCreate.jl:16\n\n\n\n\n\n\ncreateobservations!(madsdata::Associative{K, V},  time,  observation)\n\n\nCreate observations in the MADS problem dictionary based on \ntime\n and \nobservation\n arrays \n\n\nsource:\n\n\nMads/src/MadsObservations.jl:185\n\n\n\n\n\n\ndeleteNaN!(df::DataFrames.DataFrame)\n\n\nDelete rows with NaN in a Dataframe \ndf\n\n\nsource:\n\n\nMads/src/MadsSA.jl:655\n\n\n\n\n\n\ndobigdt(madsdata::Associative{K, V},  nummodelruns::Int64)\n\n\nPerform BIG-DT analysis\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnummodelruns\n : number of model runs\n\n\nnumhorizons\n : number of info-gap horizons of uncertainty\n\n\nmaxHorizon\n : maximum info-gap horizons of uncertainty\n\n\nnumlikelihoods\n : number of Bayesian likelihoods\n\n\n\n\nReturns:\n\n\n\n\nbigdtresults\n : dictionary with BIG-DT results\n\n\n\n\nsource:\n\n\nMads/src/MadsBIG.jl:121\n\n\n\n\n\n\ndumpasciifile(filename::AbstractString,  data)\n\n\nDump ASCII file\n\n\nsource:\n\n\nMads/src/MadsASCII.jl:8\n\n\n\n\n\n\ndumpjsonfile(filename::AbstractString,  data)\n\n\nDump a JSON file\n\n\nsource:\n\n\nMads/src/MadsJSON.jl:8\n\n\n\n\n\n\ndumpwelldata(filename::AbstractString,  madsdata)\n\n\nDump well data from MADS problem dictionary into a ASCII file\n\n\nsource:\n\n\nMads/src/MadsYAML.jl:235\n\n\n\n\n\n\ndumpyamlfile(filename::AbstractString,  yamldata)\n\n\nDump YAML file in JSON format\n\n\nsource:\n\n\nMads/src/MadsYAML.jl:47\n\n\n\n\n\n\ndumpyamlmadsfile(madsdata,  filename::AbstractString)\n\n\nDump YAML Mads file\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : file name\n\n\n\n\nsource:\n\n\nMads/src/MadsYAML.jl:177\n\n\n\n\n\n\nefast(md::Associative{K, V})\n\n\nSensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nM\n : maximum number of harmonics\n\n\ngamma\n : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4)\n\n\nseed\n : initial random seed\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:691\n\n\n\n\n\n\nevaluatemadsexpression(expressionstring,  parameters)\n\n\nEvaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values\n\n\nsource:\n\n\nMads/src/MadsMisc.jl:60\n\n\n\n\n\n\nevaluatemadsexpressions(madsdata::Associative{K, V},  parameters)\n\n\nEvaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values\n\n\nsource:\n\n\nMads/src/MadsMisc.jl:69\n\n\n\n\n\n\nfilterkeys(dict::Associative{K, V},  key::Regex)\n\n\nFilter dictionary keys based on a string or regular expression\n\n\nsource:\n\n\nMads/src/MadsIO.jl:191\n\n\n\n\n\n\nforward(madsdata::Associative{K, V})\n\n\nPerform a forward run using the initial or provided values for the model parameters\n\n\n\n\nforward(madsdata)\n\n\nforward(madsdata, paramvalues)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamvalues\n : dictionary of model parameter values\n\n\n\n\nReturns:\n\n\n\n\nobsvalues\n : dictionary of model predictions\n\n\n\n\nsource:\n\n\nMads/src/MadsForward.jl:16\n\n\n\n\n\n\nforwardgrid(madsdata::Associative{K, V})\n\n\nPerform a forward run over a 3D grid defined in \nmadsdata\n using the initial or provided values for the model parameters\n\n\n\n\nforwardgrid(madsdata)\n  \n\n\nforwardgrid(madsdata, paramvalues))\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamvalues\n : dictionary of model parameter values\n\n\n\n\nReturns:\n\n\n\n\narray3d\n : 3D array with model predictions along a 3D grid\n\n\n\n\nsource:\n\n\nMads/src/MadsForward.jl:41\n\n\n\n\n\n\nfunctions()\n\n\nList available functions in the MADS modules:\n\n\nExamples:\n\n\nMads.functions()\nMads.functions(BIGUQ)\nMads.functions(\nget\n)\nMads.functions(Mads, \nget\n)\n\n\n\n\nArguments:\n\n\n\n\nmodule\n : MADS module\n\n\nstring\n : matching string\n\n\n\n\nsource:\n\n\nMads/src/MadsHelp.jl:30\n\n\n\n\n\n\nfunctions(string::AbstractString)\n\n\nList available functions in the MADS modules:\n\n\nExamples:\n\n\nMads.functions()\nMads.functions(BIGUQ)\nMads.functions(\nget\n)\nMads.functions(Mads, \nget\n)\n\n\n\n\nArguments:\n\n\n\n\nmodule\n : MADS module\n\n\nstring\n : matching string\n\n\n\n\nsource:\n\n\nMads/src/MadsHelp.jl:30\n\n\n\n\n\n\ngetextension(filename)\n\n\nGet file name extension\n\n\nExample:\n\n\next = Mads.getextension(\na.mads\n) # ext = \nmads\n \n\n\n\n\nsource:\n\n\nMads/src/MadsIO.jl:162\n\n\n\n\n\n\ngetmadsdir()\n\n\nGet the directory where currently Mads is running\n\n\nproblemdir = Mads.getmadsdir()\n\n\nsource:\n\n\nMads/src/MadsIO.jl:118\n\n\n\n\n\n\ngetmadsinputfile()\n\n\nGet the default MADS input file set as a MADS global variable using \nsetmadsinputfile(filename)\n\n\nMads.getmadsinputfile()\n\n\nArguments: \nnone\n\n\nReturns:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsIO.jl:82\n\n\n\n\n\n\ngetmadsproblemdir(madsdata::Associative{K, V})\n\n\nGet the directory where the Mads data file is located\n\n\nMads.getmadsproblemdir(madsdata)\n\n\nExample:\n\n\nmadsdata = Mads.loadmadsproblemdir(\n../../a.mads\n)\nmadsproblemdir = Mads.getmadsproblemdir(madsdata)\n\n\n\n\nwhere \nmadsproblemdir\n = \n\"../../\"\n\n\nsource:\n\n\nMads/src/MadsIO.jl:109\n\n\n\n\n\n\ngetmadsrootname(madsdata::Associative{K, V})\n\n\nGet the MADS problem root name\n\n\nmadsrootname = Mads.getmadsrootname(madsdata)\n\n\nsource:\n\n\nMads/src/MadsIO.jl:91\n\n\n\n\n\n\ngetobskeys(madsdata::Associative{K, V})\n\n\nGet keys for all observations in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:2\n\n\n\n\n\n\ngetparamdict(madsdata::Associative{K, V})\n\n\nGet dictionary with all parameters and their respective initial values\n\n\nMads.getparamdict(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nparamdict\n : dictionary with all parameters and their respective initial values\n\n\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:35\n\n\n\n\n\n\ngetparamdistributions(madsdata::Associative{K, V})\n\n\nGet probabilistic distributions of all parameters in the MADS problem dictionary\n\n\nMads.getparamdistributions(madsdata; init_dist=false)\n\n\nNote:\n\n\nProbabilistic distribution of parameters can be defined only if \ndist\n or \nmin\n/\nmax\n model parameter fields are specified in the MADS problem dictionary \nmadsdata\n.\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:459\n\n\n\n\n\n\ngetparamkeys(madsdata::Associative{K, V})\n\n\nGet keys of all parameters in the MADS dictionary\n\n\nMads.getparamkeys(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nparamkeys\n : array with the keys of all parameters in the MADS dictionary\n\n\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:16\n\n\n\n\n\n\ngetparamsinit_max(madsdata)\n\n\nGet an array with \ninit_max\n values for all the MADS model parameters\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:240\n\n\n\n\n\n\ngetparamsinit_max(madsdata,  paramkeys)\n\n\nGet an array with \ninit_max\n values for parameters defined by \nparamkeys\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:206\n\n\n\n\n\n\ngetparamsinit_min(madsdata)\n\n\nGet an array with \ninit_min\n values for all the MADS model parameters\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:200\n\n\n\n\n\n\ngetparamsinit_min(madsdata,  paramkeys)\n\n\nGet an array with \ninit_min\n values for parameters defined by \nparamkeys\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:166\n\n\n\n\n\n\ngetparamsmax(madsdata)\n\n\nGet an array with \nmin\n values for all the MADS model parameters\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:160\n\n\n\n\n\n\ngetparamsmax(madsdata,  paramkeys)\n\n\nGet an array with \nmax\n values for parameters defined by \nparamkeys\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:137\n\n\n\n\n\n\ngetparamsmin(madsdata)\n\n\nGet an array with \nmin\n values for all the MADS model parameters\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:131\n\n\n\n\n\n\ngetparamsmin(madsdata,  paramkeys)\n\n\nGet an array with \nmin\n values for parameters defined by \nparamkeys\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:108\n\n\n\n\n\n\ngetrootname(filename::AbstractString)\n\n\nGet file name root\n\n\nExample:\n\n\nr = Mads.getrootname(\na.rnd.dat\n) # r = \na\n\nr = Mads.getrootname(\na.rnd.dat\n, first=false) # r = \na.rnd\n\n\n\n\n\nsource:\n\n\nMads/src/MadsIO.jl:139\n\n\n\n\n\n\ngetsourcekeys(madsdata::Associative{K, V})\n\n\nGet keys of all source parameters in the MADS dictionary\n\n\nMads.getsourcekeys(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nsourcekeys\n : array with keys of all source parameters in the MADS dictionary\n\n\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:56\n\n\n\n\n\n\ngettarget(o::Associative{K, V})\n\n\nGet observation target\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:87\n\n\n\n\n\n\ngettargetkeys(madsdata::Associative{K, V})\n\n\nGet keys for all targets (observations with weights greater than zero) in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:7\n\n\n\n\n\n\ngettime(o::Associative{K, V})\n\n\nGet observation time\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:61\n\n\n\n\n\n\ngetweight(o::Associative{K, V})\n\n\nGet observation weight\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:74\n\n\n\n\n\n\ngetwellkeys(madsdata::Associative{K, V})\n\n\nGet keys for all wells in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:14\n\n\n\n\n\n\nhaskeyword(madsdata::Associative{K, V},  keyword::AbstractString)\n\n\nCheck for a \nkeyword\n in a class within the Mads dictionary \nmadsdata\n\n\n\n\nMads.haskeyword(madsdata, keyword)\n\n\nMads.haskeyword(madsdata, class, keyword)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nclass\n : dictionary class; if not provided searches for \nkeyword\n in \nProblem\n class\n\n\nkeyword\n : dictionary key\n\n\n\n\nReturns: \ntrue\n or \nfalse\n\n\nExamples:\n\n\n\n\nMads.haskeyword(madsdata, \"disp\")\n ... searches in \nProblem\n class by default\n\n\nMads.haskeyword(madsdata, \"Wells\", \"R-28\")\n ... searches in \nWells\n class for a keyword \"R-28\"\n\n\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:55\n\n\n\n\n\n\nhelp()\n\n\nProduce MADS help information\n\n\nsource:\n\n\nMads/src/MadsHelp.jl:4\n\n\n\n\n\n\nimporteverywhere(finename)\n\n\nImport function everywhere from a file.\nThe first function in the file is the one that will be called by Mads to perform the model simulations.\n\n\nsource:\n\n\nMads/src/MadsFunc.jl:220\n\n\n\n\n\n\nins_obs(instructionfilename::AbstractString,  inputfilename::AbstractString)\n\n\nApply Mads instruction file \ninstructionfilename\n to read model input file \ninputfilename\n\n\nsource:\n\n\nMads/src/MadsIO.jl:291\n\n\n\n\n\n\ninstline2regexs(instline::AbstractString)\n\n\nConvert an instruction line in the Mads instruction file into regular expressions\n\n\nsource:\n\n\nMads/src/MadsIO.jl:238\n\n\n\n\n\n\nislog(madsdata::Associative{K, V},  parameterkey::AbstractString)\n\n\nIs parameter with key \nparameterkey\n log-transformed?\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:273\n\n\n\n\n\n\nisopt(madsdata::Associative{K, V},  parameterkey::AbstractString)\n\n\nIs parameter with key \nparameterkey\n optimizable?\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:263\n\n\n\n\n\n\nlevenberg_marquardt(f::Function,  g::Function,  x0)\n\n\nLevenberg-Marquardt optimization\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\nroot\n : Mads problem root name\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda [eps(Float32)]\n\n\nlambda_scale\n : lambda scaling factor \n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nlambda_nu\n : lambda multiplication factor \u03bd [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nalwaysDoJacobian\n: computer Jacobian each iteration [false]\n\n\ncallback\n : call back function for debugging\n\n\n\n\nsource:\n\n\nMads/src/MadsLM.jl:163\n\n\n\n\n\n\nlevenberg_marquardt(f::Function,  g::Function,  x0,  o::Function)\n\n\nLevenberg-Marquardt optimization\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\nroot\n : Mads problem root name\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda [eps(Float32)]\n\n\nlambda_scale\n : lambda scaling factor \n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nlambda_nu\n : lambda multiplication factor \u03bd [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nalwaysDoJacobian\n: computer Jacobian each iteration [false]\n\n\ncallback\n : call back function for debugging\n\n\n\n\nsource:\n\n\nMads/src/MadsLM.jl:163\n\n\n\n\n\n\nloadasciifile(filename::AbstractString)\n\n\nLoad ASCII file\n\n\nsource:\n\n\nMads/src/MadsASCII.jl:2\n\n\n\n\n\n\nloadjsonfile(filename::AbstractString)\n\n\nLoad a JSON file\n\n\nsource:\n\n\nMads/src/MadsJSON.jl:2\n\n\n\n\n\n\nloadmadsfile(filename::AbstractString)\n\n\nLoad MADS input file defining a MADS problem dictionary\n\n\n\n\nMads.loadmadsfile(filename)\n\n\nMads.loadmadsfile(filename; julia=false)\n\n\nMads.loadmadsfile(filename; julia=true)\n\n\n\n\nArguments:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\njulia\n : if \ntrue\n, force using \njulia\n parsing functions; if \nfalse\n (default), use \npython\n parsing functions [boolean]\n\n\n\n\nReturns:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\n\n\nExample: \nmd = loadmadsfile(\"input_file_name.mads\")\n\n\nsource:\n\n\nMads/src/MadsIO.jl:19\n\n\n\n\n\n\nloadyamlfile(filename::AbstractString)\n\n\nLoad YAML file\n\n\nsource:\n\n\nMads/src/MadsYAML.jl:38\n\n\n\n\n\n\nloadyamlmadsfile(filename::AbstractString)\n\n\nLoad YAML Mads file\n\n\nArguments:\n\n\n\n\nfilename\n : file name\n\n\njulia=false\n : use Python YAML library (if available)\n\n\njulia=true\n : use Julia YAML library (if available)\n\n\n\n\nsource:\n\n\nMads/src/MadsYAML.jl:66\n\n\n\n\n\n\nlocalsa(madsdata::Associative{K, V})\n\n\nLocal sensitivity analysis based on eigen analysis of covariance matrix\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:74\n\n\n\n\n\n\nmadscritical(message::AbstractString)\n\n\nMADS critical error messages\n\n\nsource:\n\n\nMads/src/MadsLog.jl:31\n\n\n\n\n\n\nmadsdebug(message::AbstractString)\n\n\nMADS debug messages\n\n\nsource:\n\n\nMads/src/MadsLog.jl:9\n\n\n\n\n\n\nmadserror(message::AbstractString)\n\n\nMADS error messages\n\n\nsource:\n\n\nMads/src/MadsLog.jl:26\n\n\n\n\n\n\nmadsinfo(message::AbstractString)\n\n\nMADS information/status messages\n\n\nsource:\n\n\nMads/src/MadsLog.jl:16\n\n\n\n\n\n\nmadsoutput(message::AbstractString)\n\n\nMADS output\n\n\nsource:\n\n\nMads/src/MadsLog.jl:2\n\n\n\n\n\n\nmadswarn(message::AbstractString)\n\n\nMADS warning messages\n\n\nsource:\n\n\nMads/src/MadsLog.jl:21\n\n\n\n\n\n\nmakearrayconditionalloglikelihood(madsdata::Associative{K, V},  conditionalloglikelihood)\n\n\nMake a conditional log likelihood function that accepts an array containing the opt parameters' values\n\n\nsource:\n\n\nMads/src/MadsMisc.jl:25\n\n\n\n\n\n\nmakearrayfunction(madsdata::Associative{K, V},  f::Function)\n\n\nMake a version of the function \nf\n that accepts an array containing the optimal parameters' values\n\n\nMads.makearrayfunction(madsdata, f)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nf\n : ...\n\n\n\n\nReturns:\n\n\n\n\narrayfunction\n : function accepting an array containing the optimal parameters' values\n\n\n\n\nsource:\n\n\nMads/src/MadsMisc.jl:15\n\n\n\n\n\n\nmakearrayloglikelihood(madsdata::Associative{K, V},  loglikelihood)\n\n\nMake a log likelihood function that accepts an array containing the opt parameters' values\n\n\nsource:\n\n\nMads/src/MadsMisc.jl:38\n\n\n\n\n\n\nmakebigdt!(madsdata::Associative{K, V},  choice::Associative{K, V})\n\n\nSetup BIG-DT problem\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nchoice\n : dictionary of BIG-DT choices (scenarios)\n\n\n\n\nReturns:\n\n\n\n\nbigdtproblem\n : BIG-DT problem type\n\n\n\n\nsource:\n\n\nMads/src/MadsBIG.jl:32\n\n\n\n\n\n\nmakebigdt(madsdata::Associative{K, V},  choice::Associative{K, V})\n\n\nSetup BIG-DT problem\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nchoice\n : dictionary of BIG-DT choices (scenarios)\n\n\n\n\nReturns:\n\n\n\n\nbigdtproblem\n : BIG-DT problem type\n\n\n\n\nsource:\n\n\nMads/src/MadsBIG.jl:16\n\n\n\n\n\n\nmakecomputeconcentrations(madsdata::Associative{K, V})\n\n\nCreate a function to compute concentrations for all the observation points using Anasol\n\n\nMads.makecomputeconcentrations(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\ncomputeconcentrations\n : function to compute concentrations; \ncomputeconcentrations\n returns a dictionary of observations and model predicted concentrations\n\n\n\n\nExamples:\n\n\ncomputeconcentrations()\n\n\nor\n\n\ncomputeconcentrations = Mads.makecomputeconcentrations(madsdata)\nparamkeys = Mads.getparamkeys(madsdata)\nparamdict = OrderedDict(zip(paramkeys, map(key-\nmadsdata[\nParameters\n][key][\ninit\n], paramkeys)))\nforward_preds = computeconcentrations(paramdict)\n\n\n\n\nsource:\n\n\nMads/src/MadsAnasol.jl:30\n\n\n\n\n\n\nmakelmfunctions(madsdata)\n\n\nMake forward model functions needed for Levenberg-Marquardt optimization\n\n\nsource:\n\n\nMads/src/MadsLM.jl:4\n\n\n\n\n\n\nmakelogprior(madsdata::Associative{K, V})\n\n\nMake a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary \nmadsdata\n\n\nsource:\n\n\nMads/src/MadsFunc.jl:322\n\n\n\n\n\n\nmakemadscommandfunction(madsdata::Associative{K, V})\n\n\nMake MADS function to execute the model defined in the MADS problem dictionary \nmadsdata\n\n\nUsage:\n\n\nMads.makemadscommandfunction(madsdata)\n\n\n\n\nMADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\n\n\nModel\n : execute a Julia function defined in an input Julia file. The function that should accept a \nparameter\n dictionary with all the model parameters as an input argument and should return an \nobservation\n dictionary with all the model predicted observations. MADS will execute the first function defined in the file.\n\n\n\n\n\n\nMADS model\n : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\n\n\n\n\nJulia model\n : execute an internal Julia function that accepts a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\n\n\n\n\nCommand\n : execute an external UNIX command or script that will execute an external model.\n\n\n\n\n\n\nJulia command\n : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an \nobservation\n dictionary with model predictions.\n\n\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model.\n\n\nOnly \nCommand\n uses different approaches to get back the model outputs. The script defined under \nJulia command\n parses the model outputs using Julia.\n\n\nThe available options for writing model inputs and reading model outputs are as follows.\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at http://mads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at http://mads.lanl.gov\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file\n\n\n\n\nsource:\n\n\nMads/src/MadsFunc.jl:47\n\n\n\n\n\n\nmakemadscommandfunctionandgradient(madsdata::Associative{K, V})\n\n\nMake MADS forward \n gradient functions for the model defined in the MADS problem dictionary \nmadsdata\n\n\nsource:\n\n\nMads/src/MadsFunc.jl:252\n\n\n\n\n\n\nmakemadscommandgradient(madsdata::Associative{K, V})\n\n\nMake MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary \nmadsdata\n\n\nsource:\n\n\nMads/src/MadsFunc.jl:237\n\n\n\n\n\n\nmakemadsconditionalloglikelihood(madsdata::Associative{K, V})\n\n\nMake a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations.\nModel parameters and observations are defined in the MADS problem dictionary \nmadsdata\n.\n\n\nsource:\n\n\nMads/src/MadsFunc.jl:337\n\n\n\n\n\n\nmakemadsloglikelihood(madsdata::Associative{K, V})\n\n\nMake a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations.\nThe function can be provided as an external function in the MADS problem dictionary under \nLogLikelihood\n or computed internally.\n\n\nsource:\n\n\nMads/src/MadsFunc.jl:362\n\n\n\n\n\n\nmaxtorealmaxFloat32!(df::DataFrames.DataFrame)\n\n\nScale down values larger than max(Float32) in a Dataframe \ndf\n so that Gadfly can plot the data\n\n\nsource:\n\n\nMads/src/MadsSA.jl:667\n\n\n\n\n\n\nmontecarlo(madsdata::Associative{K, V})\n\n\nMonte Carlo analysis\n\n\nMads.montecarlo(madsdata; N=100)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples (default = 100)\n\n\n\n\nReturns:\n\n\n\n\noutputdicts\n : parameter dictionary containing the data arrays\n\n\n\n\nDumps:\n\n\n\n\nYAML output file with the parameter dictionary containing the data arrays (\nmads_root_name\n.mcresults.yaml\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsMC.jl:67\n\n\n\n\n\n\nnaive_get_deltax(JpJ::Array{T, 2},  Jp::Array{T, 2},  f0::Array{T, 1},  lambda::Real)\n\n\nNaive Levenberg-Marquardt optimization: get the LM parameter space step\n\n\nsource:\n\n\nMads/src/MadsLM.jl:83\n\n\n\n\n\n\nnaive_levenberg_marquardt(f::Function,  g::Function,  x0::Array{T, 1})\n\n\nNaive Levenberg-Marquardt optimization\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\no\n : objective function\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nlambda\n : initial Levenberg-Marquardt lambda [100]\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\n\n\nsource:\n\n\nMads/src/MadsLM.jl:121\n\n\n\n\n\n\nnaive_levenberg_marquardt(f::Function,  g::Function,  x0::Array{T, 1},  o::Function)\n\n\nNaive Levenberg-Marquardt optimization\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\no\n : objective function\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nlambda\n : initial Levenberg-Marquardt lambda [100]\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\n\n\nsource:\n\n\nMads/src/MadsLM.jl:121\n\n\n\n\n\n\nnaive_lm_iteration(f::Function,  g::Function,  o::Function,  x0::Array{T, 1},  f0::Array{T, 1},  lambdas::Array{T, 1})\n\n\nNaive Levenberg-Marquardt optimization: perform LM iteration\n\n\nsource:\n\n\nMads/src/MadsLM.jl:92\n\n\n\n\n\n\nobslineismatch(obsline::AbstractString,  regexs::Array{Regex, 1})\n\n\nMatch an instruction line in the Mads instruction file with model input file\n\n\nsource:\n\n\nMads/src/MadsIO.jl:269\n\n\n\n\n\n\nparamarray2dict(madsdata::Associative{K, V},  array)\n\n\nConvert parameter array to a parameter dictionary of arrays\n\n\nsource:\n\n\nMads/src/MadsMC.jl:117\n\n\n\n\n\n\nparametersample(madsdata::Associative{K, V},  numsamples::Integer)\n\n\nIndependent sampling of model parameters defined in the MADS problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumsamples\n : number of samples\n\n\nparameterkey\n : model parameter key\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:19\n\n\n\n\n\n\nparametersample(madsdata::Associative{K, V},  numsamples::Integer,  parameterkey::AbstractString)\n\n\nIndependent sampling of model parameters defined in the MADS problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumsamples\n : number of samples\n\n\nparameterkey\n : model parameter key\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:19\n\n\n\n\n\n\nparamrand(madsdata::Associative{K, V},  parameterkey::AbstractString)\n\n\nRandom numbers for a MADS model parameter defined by \nparameterkey\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparameterkey\n : model parameter key\n\n\nnumsamples\n : number of samples\n\n\nparamdist\n : dictionary with parameter distributions\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:42\n\n\n\n\n\n\nplotSAresults_monty(wellname,  madsdata,  result)\n\n\nPlot the sensitivity analysis results for each well (Specific plot requested by Monty)\n\n\nsource:\n\n\nMads/src/MadsSA.jl:1492\n\n\n\n\n\n\nplotgrid(madsdata::Associative{K, V},  s::Array{Float64, N})\n\n\nPlot a 3D grid solution based on model predictions in array \ns\n, initial parameters, or user provided parameter values\n\n\nplotgrid(madsdata, s; addtitle=true, title=\n, filename=\n, format=\n)\nplotgrid(madsdata; addtitle=true, title=\n, filename=\n, format=\n)\nplotgrid(madsdata, parameters; addtitle=true, title=\n, filename=\n, format=\n)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparameters\n : dictionary with model parameters\n\n\ns\n : model predictions array\n\n\naddtitle\n : add plot title [true]\n\n\ntitle\n : plot title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:135\n\n\n\n\n\n\nplotmadsproblem(madsdata::Associative{K, V})\n\n\nPlot contaminant sources and wells defined in MADS problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:53\n\n\n\n\n\n\nplotmass(lambda,  mass_injected,  mass_reduced,  filename::AbstractString)\n\n\nPlot injected/reduced contaminant mass\n\n\n\n\nMads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\")\n\n\n\n\nArguments:\n\n\n\n\nlambda\n : array with all the lambda values\n\n\nmass_injected\n : array with associated total injected mass\n\n\nmass_reduced\n : array with associated total reduced mass\n\n\nfilename\n : output filename for the generated plot\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nDumps: image file with name \nfilename\n and in specified \nformat\n\n\nsource:\n\n\nMads/src/MadsAnasol.jl:288\n\n\n\n\n\n\nplotmatches(madsdata_in::Associative{K, V})\n\n\nPlot the matches between model predictions and observations\n\n\nplotmatches(madsdata; filename=\n, format=\n)\nplotmatches(madsdata, result; filename=\n, format=\n)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : dictionary with model predictions\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:204\n\n\n\n\n\n\nplotobsSAresults(madsdata,  result)\n\n\nPlot the sensitivity analysis results for the observations\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nfilter\n : string or regex to plot only observations containing \nfilter\n\n\nkeyword\n : to be added in the auto-generated filename\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:501\n\n\n\n\n\n\nplotrobustnesscurves(madsdata::Associative{K, V},  bigdtresults::Dict{K, V})\n\n\nPlot BIG-DT robustness curves\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nbigdtresults\n : BIG-DT results\n\n\nfilename\n : output file name used to dump plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsBIG.jl:165\n\n\n\n\n\n\nplotwellSAresults(madsdata,  result)\n\n\nPlot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nxtitle\n : x-axis title\n\n\nytitle\n : y-axis title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:382\n\n\n\n\n\n\nplotwellSAresults(madsdata,  result,  wellname)\n\n\nPlot the sensitivity analysis results for a given well in the MADS problem dictionary (wells class expected)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nwellname\n : well name\n\n\nxtitle\n : x-axis title\n\n\nytitle\n : y-axis title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:407\n\n\n\n\n\n\nprintSAresults(madsdata::Associative{K, V},  results::Associative{K, V})\n\n\nPrint sensitivity analysis results\n\n\nsource:\n\n\nMads/src/MadsSA.jl:524\n\n\n\n\n\n\nquietoff()\n\n\nMake MADS not quiet\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:7\n\n\n\n\n\n\nquieton()\n\n\nMake MADS quiet\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:2\n\n\n\n\n\n\nreadasciipredictions(filename::AbstractString)\n\n\nRead MADS predictions from an ASCII file\n\n\nsource:\n\n\nMads/src/MadsASCII.jl:13\n\n\n\n\n\n\nreadjsonpredictions(filename::AbstractString)\n\n\nRead MADS model predictions from a JSON file\n\n\nsource:\n\n\nMads/src/MadsJSON.jl:15\n\n\n\n\n\n\nreadobservations(madsdata::Associative{K, V})\n\n\nRead observations\n\n\nsource:\n\n\nMads/src/MadsIO.jl:315\n\n\n\n\n\n\nreadobservations_cmads(madsdata::Associative{K, V})\n\n\nRead observations using C Mads library\n\n\nsource:\n\n\nMads/src/MadsIO.jl:335\n\n\n\n\n\n\nreadyamlpredictions(filename::AbstractString)\n\n\nRead MADS model predictions from a YAML file \nfilename\n\n\nsource:\n\n\nMads/src/MadsYAML.jl:230\n\n\n\n\n\n\nregexs2obs(obsline,  regexs,  obsnames,  getparamhere)\n\n\nGet observations for a set of regular expressions\n\n\nsource:\n\n\nMads/src/MadsIO.jl:275\n\n\n\n\n\n\nresetmodelruns()\n\n\nReset the model runs count to be equal to zero\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:32\n\n\n\n\n\n\nrosenbrock(x::Array{T, 1})\n\n\nRosenbrock test function\n\n\nsource:\n\n\nMads/src/MadsTestFunctions.jl:17\n\n\n\n\n\n\nrosenbrock2_gradient_lm(x)\n\n\nParameter gradients of the Rosenbrock test function\n\n\nsource:\n\n\nMads/src/MadsTestFunctions.jl:7\n\n\n\n\n\n\nrosenbrock2_lm(x)\n\n\nRosenbrock test function (more difficult to solve)\n\n\nsource:\n\n\nMads/src/MadsTestFunctions.jl:2\n\n\n\n\n\n\nrosenbrock_gradient!(x::Array{T, 1},  storage::Array{T, 1})\n\n\nParameter gradients of the Rosenbrock test function\n\n\nsource:\n\n\nMads/src/MadsTestFunctions.jl:27\n\n\n\n\n\n\nrosenbrock_gradient_lm(x::Array{T, 1})\n\n\nParameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely)\n\n\nsource:\n\n\nMads/src/MadsTestFunctions.jl:33\n\n\n\n\n\n\nrosenbrock_hessian!(x::Array{T, 1},  storage::Array{T, 2})\n\n\nParameter Hessian of the Rosenbrock test function\n\n\nsource:\n\n\nMads/src/MadsTestFunctions.jl:43\n\n\n\n\n\n\nrosenbrock_lm(x::Array{T, 1})\n\n\nRosenbrock test function for LM optimization (returns the 2 components separetely)\n\n\nsource:\n\n\nMads/src/MadsTestFunctions.jl:22\n\n\n\n\n\n\nsaltelli(madsdata::Associative{K, V})\n\n\nSaltelli sensitivity analysis\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nseed\n : initial random seed\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:304\n\n\n\n\n\n\nsaltellibrute(madsdata::Associative{K, V})\n\n\nSaltelli sensitivity analysis (brute force)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nseed\n : initial random seed\n\n\n\n\nsource:\n\n\nMads/src/MadsSA.jl:157\n\n\n\n\n\n\nsaltelliprintresults2(madsdata::Associative{K, V},  results::Associative{K, V})\n\n\nPrint sensitivity analysis results (method 2)\n\n\nsource:\n\n\nMads/src/MadsSA.jl:600\n\n\n\n\n\n\nsavemadsfile(madsdata)\n\n\nSave MADS problem dictionary \nmadsdata\n in MADS input file \nfilename\n\n\n\n\nMads.savemadsfile(madsdata)\n\n\nMads.savemadsfile(madsdata, \"test.mads\")\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsIO.jl:34\n\n\n\n\n\n\nsavemadsfile(madsdata,  filename::AbstractString)\n\n\nSave MADS problem dictionary \nmadsdata\n in MADS input file \nfilename\n\n\n\n\nMads.savemadsfile(madsdata)\n\n\nMads.savemadsfile(madsdata, \"test.mads\")\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsIO.jl:34\n\n\n\n\n\n\nscatterplotsamples(madsdata,  samples::Array{T, 2},  filename::AbstractString)\n\n\nCreate histogram/scatter plots of model parameter samples\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nsamples\n : matrix with model parameters\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:338\n\n\n\n\n\n\nsearchdir(key::Regex)\n\n\nGet files in the current directory or in a directory defined by \npath\n matching pattern \nkey\n which can be a string or regular expression\n\n\n\n\nMads.searchdir(key)\n\n\nMads.searchdir(key; path = \".\")\n\n\n\n\nArguments:\n\n\n\n\nkey\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\npath\n : search directory for the mads input files\n\n\n\n\nReturns:\n\n\n\n\nfilename\n : an array with file names matching the pattern in the specified directory\n\n\n\n\nsource:\n\n\nMads/src/MadsIO.jl:187\n\n\n\n\n\n\nsetallparamsoff!(madsdata::Associative{K, V})\n\n\nSet all parameters OFF\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:290\n\n\n\n\n\n\nsetallparamson!(madsdata::Associative{K, V})\n\n\nSet all parameters ON\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:282\n\n\n\n\n\n\nsetdebuglevel(level::Int64)\n\n\nSet MADS debug level\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:22\n\n\n\n\n\n\nsetdynamicmodel(madsdata::Associative{K, V},  f::Function)\n\n\nSet Dynamic Model for MADS model calls using internal Julia functions\n\n\nsource:\n\n\nMads/src/MadsMisc.jl:55\n\n\n\n\n\n\nsetimagefileformat(filename,  format)\n\n\nSet image file \nformat\n based on the \nfilename\n extension, or sets the \nfilename\n extension based on the requested \nformat\n. The default \nformat\n is \nSVG\n. \nPNG\n, \nPDF\n, \nESP\n, and \nPS\n are also supported.\n\n\nMads.setimagefileformat(filename, format)\n\n\nArguments:\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nReturns:\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:19\n\n\n\n\n\n\nsetmadsinputfile(filename::AbstractString)\n\n\nSet a default MADS input file\n\n\nMads.setmadsinputfile(filename)\n\n\nArguments:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsIO.jl:67\n\n\n\n\n\n\nsetobservationtargets!(madsdata::Associative{K, V},  predictions::Associative{K, V})\n\n\nSet observations (calibration targets) in the MADS problem dictionary based on \npredictions\n dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:207\n\n\n\n\n\n\nsetobstime!(madsdata::Associative{K, V},  separator::AbstractString)\n\n\nSet observation time based on the observation name in the MADS problem dictionary\n\n\nUsage:\n\n\nMads.setobstime!(madsdata, separator)\nMads.setobstime!(madsdata, regex)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nseparator\n : string to separator\n\n\nregex\n : regular expression to match\n\n\n\n\nExamples:\n\n\nMads.setobstime!(madsdata, \n_t\n)\nMads.setobstime!(madsdata, r\n[A-x]*_t([0-9,.]+)\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:121\n\n\n\n\n\n\nsetobsweights!(madsdata::Associative{K, V},  value::Number)\n\n\nSet observation weights in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:145\n\n\n\n\n\n\nsetparamoff!(madsdata::Associative{K, V},  parameterkey)\n\n\nSet a specific parameter with a key \nparameterkey\n OFF\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:303\n\n\n\n\n\n\nsetparamon!(madsdata::Associative{K, V},  parameterkey::AbstractString)\n\n\nSet a specific parameter with a key \nparameterkey\n ON\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:298\n\n\n\n\n\n\nsetparamsdistnormal!(madsdata::Associative{K, V},  mean,  stddev)\n\n\nSet normal parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMads.setparamsdistnormal!(madsdata, mean, stddev)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nmean\n : array with the mean values\n\n\nstddev\n : array with the standard deviation values\n\n\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:318\n\n\n\n\n\n\nsetparamsdistuniform!(madsdata::Associative{K, V},  min,  max)\n\n\nSet uniform parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMads.setparamsdistuniform!(madsdata, min, max)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nmin\n : array with the minimum values\n\n\nmax\n : array with the maximum values\n\n\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:336\n\n\n\n\n\n\nsetparamsinit!(madsdata::Associative{K, V},  paramdict::Associative{K, V})\n\n\nSet initial parameter guesses in the MADS dictionary\n\n\nMads.setparamsinit!(madsdata, paramdict)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdict\n : dictionary with initial model parameter values\n\n\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:255\n\n\n\n\n\n\nsetprocs()\n\n\nSet the available processors based on environmental variables\n\n\nsource:\n\n\nMads/src/MadsParallel.jl:23\n\n\n\n\n\n\nsetprocs(np)\n\n\nSet the number of processors to \nnp\n\n\nsource:\n\n\nMads/src/MadsParallel.jl:15\n\n\n\n\n\n\nsetprocs(np,  nt)\n\n\nSet the number of processors to \nnp\n and the number of threads to \nnt\n\n\nsource:\n\n\nMads/src/MadsParallel.jl:2\n\n\n\n\n\n\nsetverbositylevel(level::Int64)\n\n\nSet MADS verbosity level\n\n\nsource:\n\n\nMads/src/MadsHelpers.jl:27\n\n\n\n\n\n\nsetwellweights!(madsdata::Associative{K, V},  value::Number)\n\n\nSet well weights in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:153\n\n\n\n\n\n\nshowallparameters(madsdata::Associative{K, V})\n\n\nShow all parameters in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:406\n\n\n\n\n\n\nshowobservations(madsdata::Associative{K, V})\n\n\nShow observations in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:164\n\n\n\n\n\n\nshowparameters(madsdata::Associative{K, V})\n\n\nShow optimizable parameters in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsParameters.jl:375\n\n\n\n\n\n\nsinetransform(sineparams::Array{T, 1},  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})\n\n\nSine transformation of model parameters\n\n\nsource:\n\n\nMads/src/MadsSine.jl:10\n\n\n\n\n\n\nsinetransformfunction(f::Function,  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})\n\n\nSine transformation of a function\n\n\nsource:\n\n\nMads/src/MadsSine.jl:17\n\n\n\n\n\n\nsinetransformgradient(g::Function,  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})\n\n\nSine transformation of a gradient function\n\n\nsource:\n\n\nMads/src/MadsSine.jl:25\n\n\n\n\n\n\nspaghettiplot(madsdata::Associative{K, V},  number_of_samples::Int64)\n\n\nGenerate a combined spaghetti plot for the \nselected\n (\ntype != null\n) model parameter\n\n\nMads.spaghettiplot(madsdata, paramdictarray; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplot(madsdata, number_of_samples; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdictarray\n : dictionary containing the parameter data arrays to be plotted\n\n\nnumber_of_samples\n : number of samples\n\n\nfilename\n : output file name used to output the produced plots\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots (if \nfilename\n is not defined)\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : \nx\n axis title\n\n\nytitle\n : \ny\n axis title\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n [default] or \nfalse\n)\n\n\nseed\n : initial random seed\n\n\n\n\nReturns: \nnone\n\n\nDumps:\n\n\n\n\nImage file with a spaghetti plot (\nmads_rootname\n-\nkeyword\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:822\n\n\n\n\n\n\nspaghettiplots(madsdata::Associative{K, V},  number_of_samples::Int64)\n\n\nGenerate separate spaghetti plots for each \nselected\n (\ntype != null\n) model parameter\n\n\nMads.spaghettiplots(madsdata, paramdictarray; format=\n, keyword=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplots(madsdata, number_of_samples; format=\n, keyword=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdictarray\n : parameter dictionary containing the data arrays to be plotted\n\n\nnumber_of_samples\n : number of samples\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : \nx\n axis title\n\n\nytitle\n : \ny\n axis title\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n [default] or \nfalse\n)\n\n\nseed\n : initial random seed\n\n\n\n\nDumps:\n\n\n\n\nA series of image files with spaghetti plots for each \nselected\n (\ntype != null\n) model parameter (\nmads_rootname\n-\nkeyword\n-\nparam_key\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\nsource:\n\n\nMads/src/MadsPlot.jl:677\n\n\n\n\n\n\nsprintf(args...)\n\n\nConvert \n@sprintf\n macro into \nsprintf\n function\n\n\nsource:\n\n\nMads/src/MadsParallel.jl:20\n\n\n\n\n\n\ntest()\n\n\nExecute Mads tests (the tests will be in parallel if processors are defined)\n\n\nsource:\n\n\nMads/src/MadsTest.jl:12\n\n\n\n\n\n\ntest(test)\n\n\nExecute Mads tests (the tests will be in parallel if processors are defined)\n\n\nsource:\n\n\nMads/src/MadsTest.jl:12\n\n\n\n\n\n\ntestj()\n\n\nExecute Mads tests (the default tests are in serial)\n\n\nsource:\n\n\nMads/src/MadsTest.jl:2\n\n\n\n\n\n\nvoid2nan!(dict::Associative{K, V})\n\n\nConvert Void's into NaN's in a dictionary\n\n\nsource:\n\n\nMads/src/MadsSA.jl:635\n\n\n\n\n\n\nwelloff!(madsdata,  wellname::AbstractString)\n\n\nTurn off a specific well in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:255\n\n\n\n\n\n\nwellon!(madsdata::Associative{K, V},  wellname::AbstractString)\n\n\nTurn on a specific well in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:231\n\n\n\n\n\n\nwells2observations!(madsdata::Associative{K, V})\n\n\nConvert \nWells\n class to \nObservations\n class in the MADS problem dictionary\n\n\nsource:\n\n\nMads/src/MadsObservations.jl:271\n\n\n\n\n\n\nwriteparameters(madsdata::Associative{K, V})\n\n\nWrite initial parameters\n\n\nsource:\n\n\nMads/src/MadsIO.jl:222\n\n\n\n\n\n\nwriteparameters(madsdata::Associative{K, V},  parameters)\n\n\nWrite parameters\n\n\nsource:\n\n\nMads/src/MadsIO.jl:229\n\n\n\n\n\n\nwriteparametersviatemplate(parameters,  templatefilename,  outputfilename)\n\n\nWrite parameters via MADS template\n\n\nsource:\n\n\nMads/src/MadsIO.jl:195", 
            "title": "Mads"
        }, 
        {
            "location": "/Modules/Mads/#mads", 
            "text": "", 
            "title": "Mads"
        }, 
        {
            "location": "/Modules/Mads/#methods-internal", 
            "text": "", 
            "title": "Methods [Internal]"
        }, 
        {
            "location": "/Modules/Mads/#allwellsoffmadsdataassociativek-v", 
            "text": "Turn off all the wells in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:247", 
            "title": "allwellsoff!(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#allwellsonmadsdataassociativek-v", 
            "text": "Turn on all the wells in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:223", 
            "title": "allwellson!(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#asinetransformparamsarrayt-1-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1", 
            "text": "Arcsine transformation of model parameters  source:  Mads/src/MadsSine.jl:2", 
            "title": "asinetransform(params::Array{T, 1},  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#bayessamplingmadsdataassociativek-v", 
            "text": "Bayes Sampling  Mads.bayessampling(madsdata; nsteps=100, burnin=1000, thinning=1)\nMads.bayessampling(madsdata, numsequences; nsteps=100, burnin=1000, thinning=1)  Arguments:   madsdata  : MADS problem dictionary  numsequences  : number of sequences executed in parallel  nsteps  :    burnin  :    thinning  :      Returns:   mcmcchain  :    source:  Mads/src/MadsMC.jl:24", 
            "title": "bayessampling(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#calibratemadsdataassociativek-v", 
            "text": "Calibrate  Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Arguments:   madsdata  : MADS problem dictionary  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda   lambda_mu  : lambda multiplication factor [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  usenaive  : use naive Levenberg-Marquardt solver   Returns:   minimumdict  : model parameter dictionary with the optimal values at the minimum  results  : optimization algorithm results (e.g. results.minimum)   source:  Mads/src/MadsCalibrate.jl:82", 
            "title": "calibrate(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#calibratenloptmadsdataassociativek-v", 
            "text": "Do a calibration using NLopt   source:  Mads/src/MadsCalibrate.jl:124", 
            "title": "calibratenlopt(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#calibraterandommadsdataassociativek-v", 
            "text": "Calibrate with random initial guesses  Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Arguments:   madsdata  : MADS problem dictionary  numberofsamples  : number of random initial samples  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda   lambda_mu  : lambda multiplication factor [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  usenaive  : use naive Levenberg-Marquardt solver  seed  : initial random seed   Returns:   bestresult  : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum)   source:  Mads/src/MadsCalibrate.jl:30", 
            "title": "calibraterandom(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#calibraterandommadsdataassociativek-v-numberofsamples", 
            "text": "Calibrate with random initial guesses  Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Arguments:   madsdata  : MADS problem dictionary  numberofsamples  : number of random initial samples  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda   lambda_mu  : lambda multiplication factor [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  usenaive  : use naive Levenberg-Marquardt solver  seed  : initial random seed   Returns:   bestresult  : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum)   source:  Mads/src/MadsCalibrate.jl:30", 
            "title": "calibraterandom(madsdata::Associative{K, V},  numberofsamples)"
        }, 
        {
            "location": "/Modules/Mads/#cmadsins_obsobsidarrayt-1-instructionfilenameabstractstring-inputfilenameabstractstring", 
            "text": "Call C MADS ins_obs() function from the MADS dynamic library  source:  Mads/src/MadsIO.jl:349", 
            "title": "cmadsins_obs(obsid::Array{T, 1},  instructionfilename::AbstractString,  inputfilename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#computemassmadsdataassociativek-v", 
            "text": "Compute injected/reduced contaminant mass  Mads.computemass(madsdata; time = 0)  Arguments:   madsdata  : MADS problem dictionary  time  : computational time   Returns:   mass_injected  : total injected mass  mass_reduced  : total reduced mass   source:  Mads/src/MadsAnasol.jl:192", 
            "title": "computemass(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#computemassmadsfiles", 
            "text": "Compute injected/reduced contaminant mass for a given set of mads input files  Mads.computemass(madsfiles; time = 0, path = \".\")  Arguments:   madsfiles  : matching pattern for Mads input files (string or regular expression accepted)  time  : computational time  path  : search directory for the mads input files    Returns:   lambda  : array with all the lambda values  mass_injected  : array with associated total injected mass  mass_reduced  : array with associated total reduced mass   source:  Mads/src/MadsAnasol.jl:251", 
            "title": "computemass(madsfiles)"
        }, 
        {
            "location": "/Modules/Mads/#computeparametersensititiesmadsdataassociativek-v-saresultsassociativek-v", 
            "text": "Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range  Arguments:   madsdata  : MADS problem dictionary  saresults  : sensitivity analysis results   source:  Mads/src/MadsSA.jl:439", 
            "title": "computeparametersensitities(madsdata::Associative{K, V},  saresults::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#contaminationwellx-welly-wellz-n-lambda-theta-vx-vy-vz-ax-ay-az-h-x-y-z-dx-dy-dz-f-t0-t1-t", 
            "text": "Compute concentration for a point in space and time (x,y,z,t)  Mads.contamination(wellx, welly, wellz, n, lambda, theta, vx, vy, vz, ax, ay, az, H, x, y, z, dx, dy, dz, f, t0, t1, t; anasolfunction=\"long_bbb_ddd_iir_c\")  Arguments:   wellx  - observation point (well) X coordinate  welly  - observation point (well) Y coordinate  wellz  - observation point (well) Z coordinate  n  - porosity  lambda  - first-order reaction rate  theta  - groundwater flow direction  vx  - advective transport velocity in X direction  vy  - advective transport velocity in Y direction  vz  - advective transport velocity in Z direction  ax  - dispersivity in X direction (longitudinal)  ay  - dispersivity in Y direction (transverse horizontal)  az  - dispersivity in Y direction (transverse vertical)  H  - Hurst coefficient for Fractional Brownian dispersion  x  - X coordinate of contaminant source location   y  - Y coordinate of contaminant source location  z  - Z coordinate of contaminant source location  dx  - source size (extent) in X direction  dy  - source size (extent) in Y direction  dz  - source size (extent) in Z direction  f  - source mass flux  t0  - source starting time  t1  - source termination time  t  - time to compute concentration at the observation point  anasolfunction  : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c]   Returns:   predicted concentration at (wellx, welly, wellz, t)   source:  Mads/src/MadsAnasol.jl:151", 
            "title": "contamination(wellx,  welly,  wellz,  n,  lambda,  theta,  vx,  vy,  vz,  ax,  ay,  az,  H,  x,  y,  z,  dx,  dy,  dz,  f,  t0,  t1,  t)"
        }, 
        {
            "location": "/Modules/Mads/#copyright", 
            "text": "Produce MADS copyright information  source:  Mads/src/MadsHelp.jl:9", 
            "title": "copyright()"
        }, 
        {
            "location": "/Modules/Mads/#create_documentation", 
            "text": "Create web documentation files for Mads functions  source:  Mads/src/MadsHelp.jl:62", 
            "title": "create_documentation()"
        }, 
        {
            "location": "/Modules/Mads/#create_tests_off", 
            "text": "Turn off the generation of MADS tests (default)  source:  Mads/src/MadsHelpers.jl:17", 
            "title": "create_tests_off()"
        }, 
        {
            "location": "/Modules/Mads/#create_tests_on", 
            "text": "Turn on the generation of MADS tests (dangerous)  source:  Mads/src/MadsHelpers.jl:12", 
            "title": "create_tests_on()"
        }, 
        {
            "location": "/Modules/Mads/#createmadsprobleminfilenameabstractstring-outfilenameabstractstring", 
            "text": "Create a new Mads problem where the observation targets are computed based on the model predictions   Mads.createmadsproblem(infilename, outfilename)  Mads.createmadsproblem(madsdata, outfilename)  `Mads.createmadsproblem(madsdata, predictions, outfilename)   Arguments:   infilename  : input Mads file  outfilename  : output Mads file  madsdata  : MADS problem dictionary  predictions  : dictionary of model predictions   source:  Mads/src/MadsCreate.jl:16", 
            "title": "createmadsproblem(infilename::AbstractString,  outfilename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#createobservationsmadsdataassociativek-v-time-observation", 
            "text": "Create observations in the MADS problem dictionary based on  time  and  observation  arrays   source:  Mads/src/MadsObservations.jl:185", 
            "title": "createobservations!(madsdata::Associative{K, V},  time,  observation)"
        }, 
        {
            "location": "/Modules/Mads/#deletenandfdataframesdataframe", 
            "text": "Delete rows with NaN in a Dataframe  df  source:  Mads/src/MadsSA.jl:655", 
            "title": "deleteNaN!(df::DataFrames.DataFrame)"
        }, 
        {
            "location": "/Modules/Mads/#dobigdtmadsdataassociativek-v-nummodelrunsint64", 
            "text": "Perform BIG-DT analysis  Arguments:   madsdata  : MADS problem dictionary  nummodelruns  : number of model runs  numhorizons  : number of info-gap horizons of uncertainty  maxHorizon  : maximum info-gap horizons of uncertainty  numlikelihoods  : number of Bayesian likelihoods   Returns:   bigdtresults  : dictionary with BIG-DT results   source:  Mads/src/MadsBIG.jl:121", 
            "title": "dobigdt(madsdata::Associative{K, V},  nummodelruns::Int64)"
        }, 
        {
            "location": "/Modules/Mads/#dumpasciifilefilenameabstractstring-data", 
            "text": "Dump ASCII file  source:  Mads/src/MadsASCII.jl:8", 
            "title": "dumpasciifile(filename::AbstractString,  data)"
        }, 
        {
            "location": "/Modules/Mads/#dumpjsonfilefilenameabstractstring-data", 
            "text": "Dump a JSON file  source:  Mads/src/MadsJSON.jl:8", 
            "title": "dumpjsonfile(filename::AbstractString,  data)"
        }, 
        {
            "location": "/Modules/Mads/#dumpwelldatafilenameabstractstring-madsdata", 
            "text": "Dump well data from MADS problem dictionary into a ASCII file  source:  Mads/src/MadsYAML.jl:235", 
            "title": "dumpwelldata(filename::AbstractString,  madsdata)"
        }, 
        {
            "location": "/Modules/Mads/#dumpyamlfilefilenameabstractstring-yamldata", 
            "text": "Dump YAML file in JSON format  source:  Mads/src/MadsYAML.jl:47", 
            "title": "dumpyamlfile(filename::AbstractString,  yamldata)"
        }, 
        {
            "location": "/Modules/Mads/#dumpyamlmadsfilemadsdata-filenameabstractstring", 
            "text": "Dump YAML Mads file  Arguments:   madsdata  : MADS problem dictionary  filename  : file name   source:  Mads/src/MadsYAML.jl:177", 
            "title": "dumpyamlmadsfile(madsdata,  filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#efastmdassociativek-v", 
            "text": "Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  M  : maximum number of harmonics  gamma  : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4)  seed  : initial random seed   source:  Mads/src/MadsSA.jl:691", 
            "title": "efast(md::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#evaluatemadsexpressionexpressionstring-parameters", 
            "text": "Evaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values  source:  Mads/src/MadsMisc.jl:60", 
            "title": "evaluatemadsexpression(expressionstring,  parameters)"
        }, 
        {
            "location": "/Modules/Mads/#evaluatemadsexpressionsmadsdataassociativek-v-parameters", 
            "text": "Evaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values  source:  Mads/src/MadsMisc.jl:69", 
            "title": "evaluatemadsexpressions(madsdata::Associative{K, V},  parameters)"
        }, 
        {
            "location": "/Modules/Mads/#filterkeysdictassociativek-v-keyregex", 
            "text": "Filter dictionary keys based on a string or regular expression  source:  Mads/src/MadsIO.jl:191", 
            "title": "filterkeys(dict::Associative{K, V},  key::Regex)"
        }, 
        {
            "location": "/Modules/Mads/#forwardmadsdataassociativek-v", 
            "text": "Perform a forward run using the initial or provided values for the model parameters   forward(madsdata)  forward(madsdata, paramvalues)   Arguments:   madsdata  : MADS problem dictionary  paramvalues  : dictionary of model parameter values   Returns:   obsvalues  : dictionary of model predictions   source:  Mads/src/MadsForward.jl:16", 
            "title": "forward(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#forwardgridmadsdataassociativek-v", 
            "text": "Perform a forward run over a 3D grid defined in  madsdata  using the initial or provided values for the model parameters   forwardgrid(madsdata)     forwardgrid(madsdata, paramvalues))   Arguments:   madsdata  : MADS problem dictionary  paramvalues  : dictionary of model parameter values   Returns:   array3d  : 3D array with model predictions along a 3D grid   source:  Mads/src/MadsForward.jl:41", 
            "title": "forwardgrid(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#functions", 
            "text": "List available functions in the MADS modules:  Examples:  Mads.functions()\nMads.functions(BIGUQ)\nMads.functions( get )\nMads.functions(Mads,  get )  Arguments:   module  : MADS module  string  : matching string   source:  Mads/src/MadsHelp.jl:30", 
            "title": "functions()"
        }, 
        {
            "location": "/Modules/Mads/#functionsstringabstractstring", 
            "text": "List available functions in the MADS modules:  Examples:  Mads.functions()\nMads.functions(BIGUQ)\nMads.functions( get )\nMads.functions(Mads,  get )  Arguments:   module  : MADS module  string  : matching string   source:  Mads/src/MadsHelp.jl:30", 
            "title": "functions(string::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#getextensionfilename", 
            "text": "Get file name extension  Example:  ext = Mads.getextension( a.mads ) # ext =  mads    source:  Mads/src/MadsIO.jl:162", 
            "title": "getextension(filename)"
        }, 
        {
            "location": "/Modules/Mads/#getmadsdir", 
            "text": "Get the directory where currently Mads is running  problemdir = Mads.getmadsdir()  source:  Mads/src/MadsIO.jl:118", 
            "title": "getmadsdir()"
        }, 
        {
            "location": "/Modules/Mads/#getmadsinputfile", 
            "text": "Get the default MADS input file set as a MADS global variable using  setmadsinputfile(filename)  Mads.getmadsinputfile()  Arguments:  none  Returns:   filename  : input file name (e.g.  input_file_name.mads )   source:  Mads/src/MadsIO.jl:82", 
            "title": "getmadsinputfile()"
        }, 
        {
            "location": "/Modules/Mads/#getmadsproblemdirmadsdataassociativek-v", 
            "text": "Get the directory where the Mads data file is located  Mads.getmadsproblemdir(madsdata)  Example:  madsdata = Mads.loadmadsproblemdir( ../../a.mads )\nmadsproblemdir = Mads.getmadsproblemdir(madsdata)  where  madsproblemdir  =  \"../../\"  source:  Mads/src/MadsIO.jl:109", 
            "title": "getmadsproblemdir(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getmadsrootnamemadsdataassociativek-v", 
            "text": "Get the MADS problem root name  madsrootname = Mads.getmadsrootname(madsdata)  source:  Mads/src/MadsIO.jl:91", 
            "title": "getmadsrootname(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getobskeysmadsdataassociativek-v", 
            "text": "Get keys for all observations in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:2", 
            "title": "getobskeys(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getparamdictmadsdataassociativek-v", 
            "text": "Get dictionary with all parameters and their respective initial values  Mads.getparamdict(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   paramdict  : dictionary with all parameters and their respective initial values   source:  Mads/src/MadsParameters.jl:35", 
            "title": "getparamdict(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getparamdistributionsmadsdataassociativek-v", 
            "text": "Get probabilistic distributions of all parameters in the MADS problem dictionary  Mads.getparamdistributions(madsdata; init_dist=false)  Note:  Probabilistic distribution of parameters can be defined only if  dist  or  min / max  model parameter fields are specified in the MADS problem dictionary  madsdata .  Arguments:   madsdata  : MADS problem dictionary  init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field)   source:  Mads/src/MadsParameters.jl:459", 
            "title": "getparamdistributions(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getparamkeysmadsdataassociativek-v", 
            "text": "Get keys of all parameters in the MADS dictionary  Mads.getparamkeys(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   paramkeys  : array with the keys of all parameters in the MADS dictionary   source:  Mads/src/MadsParameters.jl:16", 
            "title": "getparamkeys(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getparamsinit_maxmadsdata", 
            "text": "Get an array with  init_max  values for all the MADS model parameters  source:  Mads/src/MadsParameters.jl:240", 
            "title": "getparamsinit_max(madsdata)"
        }, 
        {
            "location": "/Modules/Mads/#getparamsinit_maxmadsdata-paramkeys", 
            "text": "Get an array with  init_max  values for parameters defined by  paramkeys  source:  Mads/src/MadsParameters.jl:206", 
            "title": "getparamsinit_max(madsdata,  paramkeys)"
        }, 
        {
            "location": "/Modules/Mads/#getparamsinit_minmadsdata", 
            "text": "Get an array with  init_min  values for all the MADS model parameters  source:  Mads/src/MadsParameters.jl:200", 
            "title": "getparamsinit_min(madsdata)"
        }, 
        {
            "location": "/Modules/Mads/#getparamsinit_minmadsdata-paramkeys", 
            "text": "Get an array with  init_min  values for parameters defined by  paramkeys  source:  Mads/src/MadsParameters.jl:166", 
            "title": "getparamsinit_min(madsdata,  paramkeys)"
        }, 
        {
            "location": "/Modules/Mads/#getparamsmaxmadsdata", 
            "text": "Get an array with  min  values for all the MADS model parameters  source:  Mads/src/MadsParameters.jl:160", 
            "title": "getparamsmax(madsdata)"
        }, 
        {
            "location": "/Modules/Mads/#getparamsmaxmadsdata-paramkeys", 
            "text": "Get an array with  max  values for parameters defined by  paramkeys  source:  Mads/src/MadsParameters.jl:137", 
            "title": "getparamsmax(madsdata,  paramkeys)"
        }, 
        {
            "location": "/Modules/Mads/#getparamsminmadsdata", 
            "text": "Get an array with  min  values for all the MADS model parameters  source:  Mads/src/MadsParameters.jl:131", 
            "title": "getparamsmin(madsdata)"
        }, 
        {
            "location": "/Modules/Mads/#getparamsminmadsdata-paramkeys", 
            "text": "Get an array with  min  values for parameters defined by  paramkeys  source:  Mads/src/MadsParameters.jl:108", 
            "title": "getparamsmin(madsdata,  paramkeys)"
        }, 
        {
            "location": "/Modules/Mads/#getrootnamefilenameabstractstring", 
            "text": "Get file name root  Example:  r = Mads.getrootname( a.rnd.dat ) # r =  a \nr = Mads.getrootname( a.rnd.dat , first=false) # r =  a.rnd   source:  Mads/src/MadsIO.jl:139", 
            "title": "getrootname(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#getsourcekeysmadsdataassociativek-v", 
            "text": "Get keys of all source parameters in the MADS dictionary  Mads.getsourcekeys(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   sourcekeys  : array with keys of all source parameters in the MADS dictionary   source:  Mads/src/MadsParameters.jl:56", 
            "title": "getsourcekeys(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#gettargetoassociativek-v", 
            "text": "Get observation target  source:  Mads/src/MadsObservations.jl:87", 
            "title": "gettarget(o::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#gettargetkeysmadsdataassociativek-v", 
            "text": "Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:7", 
            "title": "gettargetkeys(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#gettimeoassociativek-v", 
            "text": "Get observation time  source:  Mads/src/MadsObservations.jl:61", 
            "title": "gettime(o::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getweightoassociativek-v", 
            "text": "Get observation weight  source:  Mads/src/MadsObservations.jl:74", 
            "title": "getweight(o::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#getwellkeysmadsdataassociativek-v", 
            "text": "Get keys for all wells in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:14", 
            "title": "getwellkeys(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#haskeywordmadsdataassociativek-v-keywordabstractstring", 
            "text": "Check for a  keyword  in a class within the Mads dictionary  madsdata   Mads.haskeyword(madsdata, keyword)  Mads.haskeyword(madsdata, class, keyword)   Arguments:   madsdata  : MADS problem dictionary  class  : dictionary class; if not provided searches for  keyword  in  Problem  class  keyword  : dictionary key   Returns:  true  or  false  Examples:   Mads.haskeyword(madsdata, \"disp\")  ... searches in  Problem  class by default  Mads.haskeyword(madsdata, \"Wells\", \"R-28\")  ... searches in  Wells  class for a keyword \"R-28\"   source:  Mads/src/MadsHelpers.jl:55", 
            "title": "haskeyword(madsdata::Associative{K, V},  keyword::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#help", 
            "text": "Produce MADS help information  source:  Mads/src/MadsHelp.jl:4", 
            "title": "help()"
        }, 
        {
            "location": "/Modules/Mads/#importeverywherefinename", 
            "text": "Import function everywhere from a file.\nThe first function in the file is the one that will be called by Mads to perform the model simulations.  source:  Mads/src/MadsFunc.jl:220", 
            "title": "importeverywhere(finename)"
        }, 
        {
            "location": "/Modules/Mads/#ins_obsinstructionfilenameabstractstring-inputfilenameabstractstring", 
            "text": "Apply Mads instruction file  instructionfilename  to read model input file  inputfilename  source:  Mads/src/MadsIO.jl:291", 
            "title": "ins_obs(instructionfilename::AbstractString,  inputfilename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#instline2regexsinstlineabstractstring", 
            "text": "Convert an instruction line in the Mads instruction file into regular expressions  source:  Mads/src/MadsIO.jl:238", 
            "title": "instline2regexs(instline::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#islogmadsdataassociativek-v-parameterkeyabstractstring", 
            "text": "Is parameter with key  parameterkey  log-transformed?  source:  Mads/src/MadsParameters.jl:273", 
            "title": "islog(madsdata::Associative{K, V},  parameterkey::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#isoptmadsdataassociativek-v-parameterkeyabstractstring", 
            "text": "Is parameter with key  parameterkey  optimizable?  source:  Mads/src/MadsParameters.jl:263", 
            "title": "isopt(madsdata::Associative{K, V},  parameterkey::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#levenberg_marquardtffunction-gfunction-x0", 
            "text": "Levenberg-Marquardt optimization  Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  root  : Mads problem root name  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda [eps(Float32)]  lambda_scale  : lambda scaling factor   lambda_mu  : lambda multiplication factor \u03bc [10]  lambda_nu  : lambda multiplication factor \u03bd [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  alwaysDoJacobian : computer Jacobian each iteration [false]  callback  : call back function for debugging   source:  Mads/src/MadsLM.jl:163", 
            "title": "levenberg_marquardt(f::Function,  g::Function,  x0)"
        }, 
        {
            "location": "/Modules/Mads/#levenberg_marquardtffunction-gfunction-x0-ofunction", 
            "text": "Levenberg-Marquardt optimization  Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  root  : Mads problem root name  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda [eps(Float32)]  lambda_scale  : lambda scaling factor   lambda_mu  : lambda multiplication factor \u03bc [10]  lambda_nu  : lambda multiplication factor \u03bd [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  alwaysDoJacobian : computer Jacobian each iteration [false]  callback  : call back function for debugging   source:  Mads/src/MadsLM.jl:163", 
            "title": "levenberg_marquardt(f::Function,  g::Function,  x0,  o::Function)"
        }, 
        {
            "location": "/Modules/Mads/#loadasciifilefilenameabstractstring", 
            "text": "Load ASCII file  source:  Mads/src/MadsASCII.jl:2", 
            "title": "loadasciifile(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#loadjsonfilefilenameabstractstring", 
            "text": "Load a JSON file  source:  Mads/src/MadsJSON.jl:2", 
            "title": "loadjsonfile(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#loadmadsfilefilenameabstractstring", 
            "text": "Load MADS input file defining a MADS problem dictionary   Mads.loadmadsfile(filename)  Mads.loadmadsfile(filename; julia=false)  Mads.loadmadsfile(filename; julia=true)   Arguments:   filename  : input file name (e.g.  input_file_name.mads )  julia  : if  true , force using  julia  parsing functions; if  false  (default), use  python  parsing functions [boolean]   Returns:   madsdata  : Mads problem dictionary   Example:  md = loadmadsfile(\"input_file_name.mads\")  source:  Mads/src/MadsIO.jl:19", 
            "title": "loadmadsfile(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#loadyamlfilefilenameabstractstring", 
            "text": "Load YAML file  source:  Mads/src/MadsYAML.jl:38", 
            "title": "loadyamlfile(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#loadyamlmadsfilefilenameabstractstring", 
            "text": "Load YAML Mads file  Arguments:   filename  : file name  julia=false  : use Python YAML library (if available)  julia=true  : use Julia YAML library (if available)   source:  Mads/src/MadsYAML.jl:66", 
            "title": "loadyamlmadsfile(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#localsamadsdataassociativek-v", 
            "text": "Local sensitivity analysis based on eigen analysis of covariance matrix  Arguments:   madsdata  : MADS problem dictionary  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsSA.jl:74", 
            "title": "localsa(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#madscriticalmessageabstractstring", 
            "text": "MADS critical error messages  source:  Mads/src/MadsLog.jl:31", 
            "title": "madscritical(message::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#madsdebugmessageabstractstring", 
            "text": "MADS debug messages  source:  Mads/src/MadsLog.jl:9", 
            "title": "madsdebug(message::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#madserrormessageabstractstring", 
            "text": "MADS error messages  source:  Mads/src/MadsLog.jl:26", 
            "title": "madserror(message::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#madsinfomessageabstractstring", 
            "text": "MADS information/status messages  source:  Mads/src/MadsLog.jl:16", 
            "title": "madsinfo(message::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#madsoutputmessageabstractstring", 
            "text": "MADS output  source:  Mads/src/MadsLog.jl:2", 
            "title": "madsoutput(message::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#madswarnmessageabstractstring", 
            "text": "MADS warning messages  source:  Mads/src/MadsLog.jl:21", 
            "title": "madswarn(message::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#makearrayconditionalloglikelihoodmadsdataassociativek-v-conditionalloglikelihood", 
            "text": "Make a conditional log likelihood function that accepts an array containing the opt parameters' values  source:  Mads/src/MadsMisc.jl:25", 
            "title": "makearrayconditionalloglikelihood(madsdata::Associative{K, V},  conditionalloglikelihood)"
        }, 
        {
            "location": "/Modules/Mads/#makearrayfunctionmadsdataassociativek-v-ffunction", 
            "text": "Make a version of the function  f  that accepts an array containing the optimal parameters' values  Mads.makearrayfunction(madsdata, f)  Arguments:   madsdata  : MADS problem dictionary  f  : ...   Returns:   arrayfunction  : function accepting an array containing the optimal parameters' values   source:  Mads/src/MadsMisc.jl:15", 
            "title": "makearrayfunction(madsdata::Associative{K, V},  f::Function)"
        }, 
        {
            "location": "/Modules/Mads/#makearrayloglikelihoodmadsdataassociativek-v-loglikelihood", 
            "text": "Make a log likelihood function that accepts an array containing the opt parameters' values  source:  Mads/src/MadsMisc.jl:38", 
            "title": "makearrayloglikelihood(madsdata::Associative{K, V},  loglikelihood)"
        }, 
        {
            "location": "/Modules/Mads/#makebigdtmadsdataassociativek-v-choiceassociativek-v", 
            "text": "Setup BIG-DT problem  Arguments:   madsdata  : MADS problem dictionary  choice  : dictionary of BIG-DT choices (scenarios)   Returns:   bigdtproblem  : BIG-DT problem type   source:  Mads/src/MadsBIG.jl:32", 
            "title": "makebigdt!(madsdata::Associative{K, V},  choice::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makebigdtmadsdataassociativek-v-choiceassociativek-v_1", 
            "text": "Setup BIG-DT problem  Arguments:   madsdata  : MADS problem dictionary  choice  : dictionary of BIG-DT choices (scenarios)   Returns:   bigdtproblem  : BIG-DT problem type   source:  Mads/src/MadsBIG.jl:16", 
            "title": "makebigdt(madsdata::Associative{K, V},  choice::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makecomputeconcentrationsmadsdataassociativek-v", 
            "text": "Create a function to compute concentrations for all the observation points using Anasol  Mads.makecomputeconcentrations(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   computeconcentrations  : function to compute concentrations;  computeconcentrations  returns a dictionary of observations and model predicted concentrations   Examples:  computeconcentrations()  or  computeconcentrations = Mads.makecomputeconcentrations(madsdata)\nparamkeys = Mads.getparamkeys(madsdata)\nparamdict = OrderedDict(zip(paramkeys, map(key- madsdata[ Parameters ][key][ init ], paramkeys)))\nforward_preds = computeconcentrations(paramdict)  source:  Mads/src/MadsAnasol.jl:30", 
            "title": "makecomputeconcentrations(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makelmfunctionsmadsdata", 
            "text": "Make forward model functions needed for Levenberg-Marquardt optimization  source:  Mads/src/MadsLM.jl:4", 
            "title": "makelmfunctions(madsdata)"
        }, 
        {
            "location": "/Modules/Mads/#makelogpriormadsdataassociativek-v", 
            "text": "Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary  madsdata  source:  Mads/src/MadsFunc.jl:322", 
            "title": "makelogprior(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makemadscommandfunctionmadsdataassociativek-v", 
            "text": "Make MADS function to execute the model defined in the MADS problem dictionary  madsdata  Usage:  Mads.makemadscommandfunction(madsdata)  MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:    Model  : execute a Julia function defined in an input Julia file. The function that should accept a  parameter  dictionary with all the model parameters as an input argument and should return an  observation  dictionary with all the model predicted observations. MADS will execute the first function defined in the file.    MADS model  : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.    Julia model  : execute an internal Julia function that accepts a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.    Command  : execute an external UNIX command or script that will execute an external model.    Julia command  : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an  observation  dictionary with model predictions.    Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model.  Only  Command  uses different approaches to get back the model outputs. The script defined under  Julia command  parses the model outputs using Julia.  The available options for writing model inputs and reading model outputs are as follows.  Options for writing model inputs:   Templates  : template files for writing model input files as defined at http://mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file   Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at http://mads.lanl.gov  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file   source:  Mads/src/MadsFunc.jl:47", 
            "title": "makemadscommandfunction(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makemadscommandfunctionandgradientmadsdataassociativek-v", 
            "text": "Make MADS forward   gradient functions for the model defined in the MADS problem dictionary  madsdata  source:  Mads/src/MadsFunc.jl:252", 
            "title": "makemadscommandfunctionandgradient(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makemadscommandgradientmadsdataassociativek-v", 
            "text": "Make MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary  madsdata  source:  Mads/src/MadsFunc.jl:237", 
            "title": "makemadscommandgradient(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makemadsconditionalloglikelihoodmadsdataassociativek-v", 
            "text": "Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations.\nModel parameters and observations are defined in the MADS problem dictionary  madsdata .  source:  Mads/src/MadsFunc.jl:337", 
            "title": "makemadsconditionalloglikelihood(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#makemadsloglikelihoodmadsdataassociativek-v", 
            "text": "Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations.\nThe function can be provided as an external function in the MADS problem dictionary under  LogLikelihood  or computed internally.  source:  Mads/src/MadsFunc.jl:362", 
            "title": "makemadsloglikelihood(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#maxtorealmaxfloat32dfdataframesdataframe", 
            "text": "Scale down values larger than max(Float32) in a Dataframe  df  so that Gadfly can plot the data  source:  Mads/src/MadsSA.jl:667", 
            "title": "maxtorealmaxFloat32!(df::DataFrames.DataFrame)"
        }, 
        {
            "location": "/Modules/Mads/#montecarlomadsdataassociativek-v", 
            "text": "Monte Carlo analysis  Mads.montecarlo(madsdata; N=100)  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples (default = 100)   Returns:   outputdicts  : parameter dictionary containing the data arrays   Dumps:   YAML output file with the parameter dictionary containing the data arrays ( mads_root_name .mcresults.yaml )   source:  Mads/src/MadsMC.jl:67", 
            "title": "montecarlo(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#naive_get_deltaxjpjarrayt-2-jparrayt-2-f0arrayt-1-lambdareal", 
            "text": "Naive Levenberg-Marquardt optimization: get the LM parameter space step  source:  Mads/src/MadsLM.jl:83", 
            "title": "naive_get_deltax(JpJ::Array{T, 2},  Jp::Array{T, 2},  f0::Array{T, 1},  lambda::Real)"
        }, 
        {
            "location": "/Modules/Mads/#naive_levenberg_marquardtffunction-gfunction-x0arrayt-1", 
            "text": "Naive Levenberg-Marquardt optimization  Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  o  : objective function  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  lambda  : initial Levenberg-Marquardt lambda [100]  lambda_mu  : lambda multiplication factor \u03bc [10]  np_lambda  : number of parallel lambda solves   source:  Mads/src/MadsLM.jl:121", 
            "title": "naive_levenberg_marquardt(f::Function,  g::Function,  x0::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#naive_levenberg_marquardtffunction-gfunction-x0arrayt-1-ofunction", 
            "text": "Naive Levenberg-Marquardt optimization  Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  o  : objective function  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  lambda  : initial Levenberg-Marquardt lambda [100]  lambda_mu  : lambda multiplication factor \u03bc [10]  np_lambda  : number of parallel lambda solves   source:  Mads/src/MadsLM.jl:121", 
            "title": "naive_levenberg_marquardt(f::Function,  g::Function,  x0::Array{T, 1},  o::Function)"
        }, 
        {
            "location": "/Modules/Mads/#naive_lm_iterationffunction-gfunction-ofunction-x0arrayt-1-f0arrayt-1-lambdasarrayt-1", 
            "text": "Naive Levenberg-Marquardt optimization: perform LM iteration  source:  Mads/src/MadsLM.jl:92", 
            "title": "naive_lm_iteration(f::Function,  g::Function,  o::Function,  x0::Array{T, 1},  f0::Array{T, 1},  lambdas::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#obslineismatchobslineabstractstring-regexsarrayregex-1", 
            "text": "Match an instruction line in the Mads instruction file with model input file  source:  Mads/src/MadsIO.jl:269", 
            "title": "obslineismatch(obsline::AbstractString,  regexs::Array{Regex, 1})"
        }, 
        {
            "location": "/Modules/Mads/#paramarray2dictmadsdataassociativek-v-array", 
            "text": "Convert parameter array to a parameter dictionary of arrays  source:  Mads/src/MadsMC.jl:117", 
            "title": "paramarray2dict(madsdata::Associative{K, V},  array)"
        }, 
        {
            "location": "/Modules/Mads/#parametersamplemadsdataassociativek-v-numsamplesinteger", 
            "text": "Independent sampling of model parameters defined in the MADS problem dictionary  Arguments:   madsdata  : MADS problem dictionary  numsamples  : number of samples  parameterkey  : model parameter key  init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field)   source:  Mads/src/MadsSA.jl:19", 
            "title": "parametersample(madsdata::Associative{K, V},  numsamples::Integer)"
        }, 
        {
            "location": "/Modules/Mads/#parametersamplemadsdataassociativek-v-numsamplesinteger-parameterkeyabstractstring", 
            "text": "Independent sampling of model parameters defined in the MADS problem dictionary  Arguments:   madsdata  : MADS problem dictionary  numsamples  : number of samples  parameterkey  : model parameter key  init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field)   source:  Mads/src/MadsSA.jl:19", 
            "title": "parametersample(madsdata::Associative{K, V},  numsamples::Integer,  parameterkey::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#paramrandmadsdataassociativek-v-parameterkeyabstractstring", 
            "text": "Random numbers for a MADS model parameter defined by  parameterkey  Arguments:   madsdata  : MADS problem dictionary  parameterkey  : model parameter key  numsamples  : number of samples  paramdist  : dictionary with parameter distributions   source:  Mads/src/MadsSA.jl:42", 
            "title": "paramrand(madsdata::Associative{K, V},  parameterkey::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#plotsaresults_montywellname-madsdata-result", 
            "text": "Plot the sensitivity analysis results for each well (Specific plot requested by Monty)  source:  Mads/src/MadsSA.jl:1492", 
            "title": "plotSAresults_monty(wellname,  madsdata,  result)"
        }, 
        {
            "location": "/Modules/Mads/#plotgridmadsdataassociativek-v-sarrayfloat64-n", 
            "text": "Plot a 3D grid solution based on model predictions in array  s , initial parameters, or user provided parameter values  plotgrid(madsdata, s; addtitle=true, title= , filename= , format= )\nplotgrid(madsdata; addtitle=true, title= , filename= , format= )\nplotgrid(madsdata, parameters; addtitle=true, title= , filename= , format= )  Arguments:   madsdata  : MADS problem dictionary  parameters  : dictionary with model parameters  s  : model predictions array  addtitle  : add plot title [true]  title  : plot title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:135", 
            "title": "plotgrid(madsdata::Associative{K, V},  s::Array{Float64, N})"
        }, 
        {
            "location": "/Modules/Mads/#plotmadsproblemmadsdataassociativek-v", 
            "text": "Plot contaminant sources and wells defined in MADS problem dictionary  Arguments:   madsdata  : MADS problem dictionary  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:53", 
            "title": "plotmadsproblem(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#plotmasslambda-mass_injected-mass_reduced-filenameabstractstring", 
            "text": "Plot injected/reduced contaminant mass   Mads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\")   Arguments:   lambda  : array with all the lambda values  mass_injected  : array with associated total injected mass  mass_reduced  : array with associated total reduced mass  filename  : output filename for the generated plot  format  : output plot format ( png ,  pdf , etc.)   Dumps: image file with name  filename  and in specified  format  source:  Mads/src/MadsAnasol.jl:288", 
            "title": "plotmass(lambda,  mass_injected,  mass_reduced,  filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#plotmatchesmadsdata_inassociativek-v", 
            "text": "Plot the matches between model predictions and observations  plotmatches(madsdata; filename= , format= )\nplotmatches(madsdata, result; filename= , format= )  Arguments:   madsdata  : MADS problem dictionary  result  : dictionary with model predictions  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:204", 
            "title": "plotmatches(madsdata_in::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#plotobssaresultsmadsdata-result", 
            "text": "Plot the sensitivity analysis results for the observations  Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  filter  : string or regex to plot only observations containing  filter  keyword  : to be added in the auto-generated filename  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:501", 
            "title": "plotobsSAresults(madsdata,  result)"
        }, 
        {
            "location": "/Modules/Mads/#plotrobustnesscurvesmadsdataassociativek-v-bigdtresultsdictk-v", 
            "text": "Plot BIG-DT robustness curves  Arguments:   madsdata  : MADS problem dictionary  bigdtresults  : BIG-DT results  filename  : output file name used to dump plots  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsBIG.jl:165", 
            "title": "plotrobustnesscurves(madsdata::Associative{K, V},  bigdtresults::Dict{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#plotwellsaresultsmadsdata-result", 
            "text": "Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)  Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  xtitle  : x-axis title  ytitle  : y-axis title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:382", 
            "title": "plotwellSAresults(madsdata,  result)"
        }, 
        {
            "location": "/Modules/Mads/#plotwellsaresultsmadsdata-result-wellname", 
            "text": "Plot the sensitivity analysis results for a given well in the MADS problem dictionary (wells class expected)  Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  wellname  : well name  xtitle  : x-axis title  ytitle  : y-axis title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:407", 
            "title": "plotwellSAresults(madsdata,  result,  wellname)"
        }, 
        {
            "location": "/Modules/Mads/#printsaresultsmadsdataassociativek-v-resultsassociativek-v", 
            "text": "Print sensitivity analysis results  source:  Mads/src/MadsSA.jl:524", 
            "title": "printSAresults(madsdata::Associative{K, V},  results::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#quietoff", 
            "text": "Make MADS not quiet  source:  Mads/src/MadsHelpers.jl:7", 
            "title": "quietoff()"
        }, 
        {
            "location": "/Modules/Mads/#quieton", 
            "text": "Make MADS quiet  source:  Mads/src/MadsHelpers.jl:2", 
            "title": "quieton()"
        }, 
        {
            "location": "/Modules/Mads/#readasciipredictionsfilenameabstractstring", 
            "text": "Read MADS predictions from an ASCII file  source:  Mads/src/MadsASCII.jl:13", 
            "title": "readasciipredictions(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#readjsonpredictionsfilenameabstractstring", 
            "text": "Read MADS model predictions from a JSON file  source:  Mads/src/MadsJSON.jl:15", 
            "title": "readjsonpredictions(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#readobservationsmadsdataassociativek-v", 
            "text": "Read observations  source:  Mads/src/MadsIO.jl:315", 
            "title": "readobservations(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#readobservations_cmadsmadsdataassociativek-v", 
            "text": "Read observations using C Mads library  source:  Mads/src/MadsIO.jl:335", 
            "title": "readobservations_cmads(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#readyamlpredictionsfilenameabstractstring", 
            "text": "Read MADS model predictions from a YAML file  filename  source:  Mads/src/MadsYAML.jl:230", 
            "title": "readyamlpredictions(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#regexs2obsobsline-regexs-obsnames-getparamhere", 
            "text": "Get observations for a set of regular expressions  source:  Mads/src/MadsIO.jl:275", 
            "title": "regexs2obs(obsline,  regexs,  obsnames,  getparamhere)"
        }, 
        {
            "location": "/Modules/Mads/#resetmodelruns", 
            "text": "Reset the model runs count to be equal to zero  source:  Mads/src/MadsHelpers.jl:32", 
            "title": "resetmodelruns()"
        }, 
        {
            "location": "/Modules/Mads/#rosenbrockxarrayt-1", 
            "text": "Rosenbrock test function  source:  Mads/src/MadsTestFunctions.jl:17", 
            "title": "rosenbrock(x::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#rosenbrock2_gradient_lmx", 
            "text": "Parameter gradients of the Rosenbrock test function  source:  Mads/src/MadsTestFunctions.jl:7", 
            "title": "rosenbrock2_gradient_lm(x)"
        }, 
        {
            "location": "/Modules/Mads/#rosenbrock2_lmx", 
            "text": "Rosenbrock test function (more difficult to solve)  source:  Mads/src/MadsTestFunctions.jl:2", 
            "title": "rosenbrock2_lm(x)"
        }, 
        {
            "location": "/Modules/Mads/#rosenbrock_gradientxarrayt-1-storagearrayt-1", 
            "text": "Parameter gradients of the Rosenbrock test function  source:  Mads/src/MadsTestFunctions.jl:27", 
            "title": "rosenbrock_gradient!(x::Array{T, 1},  storage::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#rosenbrock_gradient_lmxarrayt-1", 
            "text": "Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely)  source:  Mads/src/MadsTestFunctions.jl:33", 
            "title": "rosenbrock_gradient_lm(x::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#rosenbrock_hessianxarrayt-1-storagearrayt-2", 
            "text": "Parameter Hessian of the Rosenbrock test function  source:  Mads/src/MadsTestFunctions.jl:43", 
            "title": "rosenbrock_hessian!(x::Array{T, 1},  storage::Array{T, 2})"
        }, 
        {
            "location": "/Modules/Mads/#rosenbrock_lmxarrayt-1", 
            "text": "Rosenbrock test function for LM optimization (returns the 2 components separetely)  source:  Mads/src/MadsTestFunctions.jl:22", 
            "title": "rosenbrock_lm(x::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#saltellimadsdataassociativek-v", 
            "text": "Saltelli sensitivity analysis  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  seed  : initial random seed   source:  Mads/src/MadsSA.jl:304", 
            "title": "saltelli(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#saltellibrutemadsdataassociativek-v", 
            "text": "Saltelli sensitivity analysis (brute force)  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  seed  : initial random seed   source:  Mads/src/MadsSA.jl:157", 
            "title": "saltellibrute(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#saltelliprintresults2madsdataassociativek-v-resultsassociativek-v", 
            "text": "Print sensitivity analysis results (method 2)  source:  Mads/src/MadsSA.jl:600", 
            "title": "saltelliprintresults2(madsdata::Associative{K, V},  results::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#savemadsfilemadsdata", 
            "text": "Save MADS problem dictionary  madsdata  in MADS input file  filename   Mads.savemadsfile(madsdata)  Mads.savemadsfile(madsdata, \"test.mads\")   Arguments:   madsdata  : Mads problem dictionary  filename  : input file name (e.g.  input_file_name.mads )   source:  Mads/src/MadsIO.jl:34", 
            "title": "savemadsfile(madsdata)"
        }, 
        {
            "location": "/Modules/Mads/#savemadsfilemadsdata-filenameabstractstring", 
            "text": "Save MADS problem dictionary  madsdata  in MADS input file  filename   Mads.savemadsfile(madsdata)  Mads.savemadsfile(madsdata, \"test.mads\")   Arguments:   madsdata  : Mads problem dictionary  filename  : input file name (e.g.  input_file_name.mads )   source:  Mads/src/MadsIO.jl:34", 
            "title": "savemadsfile(madsdata,  filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#scatterplotsamplesmadsdata-samplesarrayt-2-filenameabstractstring", 
            "text": "Create histogram/scatter plots of model parameter samples  Arguments:   madsdata  : MADS problem dictionary  samples  : matrix with model parameters  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:338", 
            "title": "scatterplotsamples(madsdata,  samples::Array{T, 2},  filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#searchdirkeyregex", 
            "text": "Get files in the current directory or in a directory defined by  path  matching pattern  key  which can be a string or regular expression   Mads.searchdir(key)  Mads.searchdir(key; path = \".\")   Arguments:   key  : matching pattern for Mads input files (string or regular expression accepted)  path  : search directory for the mads input files   Returns:   filename  : an array with file names matching the pattern in the specified directory   source:  Mads/src/MadsIO.jl:187", 
            "title": "searchdir(key::Regex)"
        }, 
        {
            "location": "/Modules/Mads/#setallparamsoffmadsdataassociativek-v", 
            "text": "Set all parameters OFF  source:  Mads/src/MadsParameters.jl:290", 
            "title": "setallparamsoff!(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#setallparamsonmadsdataassociativek-v", 
            "text": "Set all parameters ON  source:  Mads/src/MadsParameters.jl:282", 
            "title": "setallparamson!(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#setdebuglevellevelint64", 
            "text": "Set MADS debug level  source:  Mads/src/MadsHelpers.jl:22", 
            "title": "setdebuglevel(level::Int64)"
        }, 
        {
            "location": "/Modules/Mads/#setdynamicmodelmadsdataassociativek-v-ffunction", 
            "text": "Set Dynamic Model for MADS model calls using internal Julia functions  source:  Mads/src/MadsMisc.jl:55", 
            "title": "setdynamicmodel(madsdata::Associative{K, V},  f::Function)"
        }, 
        {
            "location": "/Modules/Mads/#setimagefileformatfilename-format", 
            "text": "Set image file  format  based on the  filename  extension, or sets the  filename  extension based on the requested  format . The default  format  is  SVG .  PNG ,  PDF ,  ESP , and  PS  are also supported.  Mads.setimagefileformat(filename, format)  Arguments:   filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   Returns:   filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source:  Mads/src/MadsPlot.jl:19", 
            "title": "setimagefileformat(filename,  format)"
        }, 
        {
            "location": "/Modules/Mads/#setmadsinputfilefilenameabstractstring", 
            "text": "Set a default MADS input file  Mads.setmadsinputfile(filename)  Arguments:   filename  : input file name (e.g.  input_file_name.mads )   source:  Mads/src/MadsIO.jl:67", 
            "title": "setmadsinputfile(filename::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#setobservationtargetsmadsdataassociativek-v-predictionsassociativek-v", 
            "text": "Set observations (calibration targets) in the MADS problem dictionary based on  predictions  dictionary  source:  Mads/src/MadsObservations.jl:207", 
            "title": "setobservationtargets!(madsdata::Associative{K, V},  predictions::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#setobstimemadsdataassociativek-v-separatorabstractstring", 
            "text": "Set observation time based on the observation name in the MADS problem dictionary  Usage:  Mads.setobstime!(madsdata, separator)\nMads.setobstime!(madsdata, regex)  Arguments:   madsdata  : MADS problem dictionary  separator  : string to separator  regex  : regular expression to match   Examples:  Mads.setobstime!(madsdata,  _t )\nMads.setobstime!(madsdata, r [A-x]*_t([0-9,.]+) )  source:  Mads/src/MadsObservations.jl:121", 
            "title": "setobstime!(madsdata::Associative{K, V},  separator::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#setobsweightsmadsdataassociativek-v-valuenumber", 
            "text": "Set observation weights in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:145", 
            "title": "setobsweights!(madsdata::Associative{K, V},  value::Number)"
        }, 
        {
            "location": "/Modules/Mads/#setparamoffmadsdataassociativek-v-parameterkey", 
            "text": "Set a specific parameter with a key  parameterkey  OFF  source:  Mads/src/MadsParameters.jl:303", 
            "title": "setparamoff!(madsdata::Associative{K, V},  parameterkey)"
        }, 
        {
            "location": "/Modules/Mads/#setparamonmadsdataassociativek-v-parameterkeyabstractstring", 
            "text": "Set a specific parameter with a key  parameterkey  ON  source:  Mads/src/MadsParameters.jl:298", 
            "title": "setparamon!(madsdata::Associative{K, V},  parameterkey::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#setparamsdistnormalmadsdataassociativek-v-mean-stddev", 
            "text": "Set normal parameter distributions for all the model parameters in the MADS problem dictionary  Mads.setparamsdistnormal!(madsdata, mean, stddev)  Arguments:   madsdata  : MADS problem dictionary  mean  : array with the mean values  stddev  : array with the standard deviation values   source:  Mads/src/MadsParameters.jl:318", 
            "title": "setparamsdistnormal!(madsdata::Associative{K, V},  mean,  stddev)"
        }, 
        {
            "location": "/Modules/Mads/#setparamsdistuniformmadsdataassociativek-v-min-max", 
            "text": "Set uniform parameter distributions for all the model parameters in the MADS problem dictionary  Mads.setparamsdistuniform!(madsdata, min, max)  Arguments:   madsdata  : MADS problem dictionary  min  : array with the minimum values  max  : array with the maximum values   source:  Mads/src/MadsParameters.jl:336", 
            "title": "setparamsdistuniform!(madsdata::Associative{K, V},  min,  max)"
        }, 
        {
            "location": "/Modules/Mads/#setparamsinitmadsdataassociativek-v-paramdictassociativek-v", 
            "text": "Set initial parameter guesses in the MADS dictionary  Mads.setparamsinit!(madsdata, paramdict)  Arguments:   madsdata  : MADS problem dictionary  paramdict  : dictionary with initial model parameter values   source:  Mads/src/MadsParameters.jl:255", 
            "title": "setparamsinit!(madsdata::Associative{K, V},  paramdict::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#setprocs", 
            "text": "Set the available processors based on environmental variables  source:  Mads/src/MadsParallel.jl:23", 
            "title": "setprocs()"
        }, 
        {
            "location": "/Modules/Mads/#setprocsnp", 
            "text": "Set the number of processors to  np  source:  Mads/src/MadsParallel.jl:15", 
            "title": "setprocs(np)"
        }, 
        {
            "location": "/Modules/Mads/#setprocsnp-nt", 
            "text": "Set the number of processors to  np  and the number of threads to  nt  source:  Mads/src/MadsParallel.jl:2", 
            "title": "setprocs(np,  nt)"
        }, 
        {
            "location": "/Modules/Mads/#setverbositylevellevelint64", 
            "text": "Set MADS verbosity level  source:  Mads/src/MadsHelpers.jl:27", 
            "title": "setverbositylevel(level::Int64)"
        }, 
        {
            "location": "/Modules/Mads/#setwellweightsmadsdataassociativek-v-valuenumber", 
            "text": "Set well weights in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:153", 
            "title": "setwellweights!(madsdata::Associative{K, V},  value::Number)"
        }, 
        {
            "location": "/Modules/Mads/#showallparametersmadsdataassociativek-v", 
            "text": "Show all parameters in the MADS problem dictionary  source:  Mads/src/MadsParameters.jl:406", 
            "title": "showallparameters(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#showobservationsmadsdataassociativek-v", 
            "text": "Show observations in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:164", 
            "title": "showobservations(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#showparametersmadsdataassociativek-v", 
            "text": "Show optimizable parameters in the MADS problem dictionary  source:  Mads/src/MadsParameters.jl:375", 
            "title": "showparameters(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#sinetransformsineparamsarrayt-1-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1", 
            "text": "Sine transformation of model parameters  source:  Mads/src/MadsSine.jl:10", 
            "title": "sinetransform(sineparams::Array{T, 1},  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#sinetransformfunctionffunction-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1", 
            "text": "Sine transformation of a function  source:  Mads/src/MadsSine.jl:17", 
            "title": "sinetransformfunction(f::Function,  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#sinetransformgradientgfunction-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1", 
            "text": "Sine transformation of a gradient function  source:  Mads/src/MadsSine.jl:25", 
            "title": "sinetransformgradient(g::Function,  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"
        }, 
        {
            "location": "/Modules/Mads/#spaghettiplotmadsdataassociativek-v-number_of_samplesint64", 
            "text": "Generate a combined spaghetti plot for the  selected  ( type != null ) model parameter  Mads.spaghettiplot(madsdata, paramdictarray; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplot(madsdata, number_of_samples; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)  Arguments:   madsdata  : MADS problem dictionary  paramdictarray  : dictionary containing the parameter data arrays to be plotted  number_of_samples  : number of samples  filename  : output file name used to output the produced plots  keyword  : keyword to be added in the file name used to output the produced plots (if  filename  is not defined)  format  : output plot format ( png ,  pdf , etc.)  xtitle  :  x  axis title  ytitle  :  y  axis title  obs_plot_dots  : plot observation as dots ( true  [default] or  false )  seed  : initial random seed   Returns:  none  Dumps:   Image file with a spaghetti plot ( mads_rootname - keyword - number_of_samples -spaghetti. default_image_extension )   source:  Mads/src/MadsPlot.jl:822", 
            "title": "spaghettiplot(madsdata::Associative{K, V},  number_of_samples::Int64)"
        }, 
        {
            "location": "/Modules/Mads/#spaghettiplotsmadsdataassociativek-v-number_of_samplesint64", 
            "text": "Generate separate spaghetti plots for each  selected  ( type != null ) model parameter  Mads.spaghettiplots(madsdata, paramdictarray; format= , keyword= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplots(madsdata, number_of_samples; format= , keyword= , xtitle= X , ytitle= Y , obs_plot_dots=true)  Arguments:   madsdata  : MADS problem dictionary  paramdictarray  : parameter dictionary containing the data arrays to be plotted  number_of_samples  : number of samples  keyword  : keyword to be added in the file name used to output the produced plots  format  : output plot format ( png ,  pdf , etc.)  xtitle  :  x  axis title  ytitle  :  y  axis title  obs_plot_dots  : plot observation as dots ( true  [default] or  false )  seed  : initial random seed   Dumps:   A series of image files with spaghetti plots for each  selected  ( type != null ) model parameter ( mads_rootname - keyword - param_key - number_of_samples -spaghetti. default_image_extension )   source:  Mads/src/MadsPlot.jl:677", 
            "title": "spaghettiplots(madsdata::Associative{K, V},  number_of_samples::Int64)"
        }, 
        {
            "location": "/Modules/Mads/#sprintfargs", 
            "text": "Convert  @sprintf  macro into  sprintf  function  source:  Mads/src/MadsParallel.jl:20", 
            "title": "sprintf(args...)"
        }, 
        {
            "location": "/Modules/Mads/#test", 
            "text": "Execute Mads tests (the tests will be in parallel if processors are defined)  source:  Mads/src/MadsTest.jl:12", 
            "title": "test()"
        }, 
        {
            "location": "/Modules/Mads/#testtest", 
            "text": "Execute Mads tests (the tests will be in parallel if processors are defined)  source:  Mads/src/MadsTest.jl:12", 
            "title": "test(test)"
        }, 
        {
            "location": "/Modules/Mads/#testj", 
            "text": "Execute Mads tests (the default tests are in serial)  source:  Mads/src/MadsTest.jl:2", 
            "title": "testj()"
        }, 
        {
            "location": "/Modules/Mads/#void2nandictassociativek-v", 
            "text": "Convert Void's into NaN's in a dictionary  source:  Mads/src/MadsSA.jl:635", 
            "title": "void2nan!(dict::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#welloffmadsdata-wellnameabstractstring", 
            "text": "Turn off a specific well in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:255", 
            "title": "welloff!(madsdata,  wellname::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#wellonmadsdataassociativek-v-wellnameabstractstring", 
            "text": "Turn on a specific well in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:231", 
            "title": "wellon!(madsdata::Associative{K, V},  wellname::AbstractString)"
        }, 
        {
            "location": "/Modules/Mads/#wells2observationsmadsdataassociativek-v", 
            "text": "Convert  Wells  class to  Observations  class in the MADS problem dictionary  source:  Mads/src/MadsObservations.jl:271", 
            "title": "wells2observations!(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#writeparametersmadsdataassociativek-v", 
            "text": "Write initial parameters  source:  Mads/src/MadsIO.jl:222", 
            "title": "writeparameters(madsdata::Associative{K, V})"
        }, 
        {
            "location": "/Modules/Mads/#writeparametersmadsdataassociativek-v-parameters", 
            "text": "Write parameters  source:  Mads/src/MadsIO.jl:229", 
            "title": "writeparameters(madsdata::Associative{K, V},  parameters)"
        }, 
        {
            "location": "/Modules/Mads/#writeparametersviatemplateparameters-templatefilename-outputfilename", 
            "text": "Write parameters via MADS template  source:  Mads/src/MadsIO.jl:195", 
            "title": "writeparametersviatemplate(parameters,  templatefilename,  outputfilename)"
        }, 
        {
            "location": "/Modules/BIGUQ/", 
            "text": "BIGUQ\n\n\nMethods [Internal]\n\n\n\n\n\n\ngetmcmcchain(bigdt::BIGUQ.BigDT,  likelihoodparams)\n\n\nGet MCMC chain\n\n\nsource:\n\n\nBIGUQ/src/BIGDT.jl:23\n\n\n\n\n\n\nmakebigdts(bigoed::BIGUQ.BigOED)\n\n\nmakes the bigdts for each possible decision assuming that no more observations will be made\n\n\nsource:\n\n\nBIGUQ/src/BIGOED.jl:24\n\n\n\n\n\n\nmakebigdts(bigoed::BIGUQ.BigOED,  proposedindex,  proposedobs)\n\n\nmake bigdts for each possible decision assuming that the proposedobs are observed\n\n\nsource:\n\n\nBIGUQ/src/BIGOED.jl:51\n\n\nTypes [Internal]\n\n\n\n\n\n\nBIGUQ.BigOED\n\n\nBigOED type\n\n\nsource:\n\n\nBIGUQ/src/BIGOED.jl:2", 
            "title": "BIGUQ"
        }, 
        {
            "location": "/Modules/BIGUQ/#biguq", 
            "text": "", 
            "title": "BIGUQ"
        }, 
        {
            "location": "/Modules/BIGUQ/#methods-internal", 
            "text": "", 
            "title": "Methods [Internal]"
        }, 
        {
            "location": "/Modules/BIGUQ/#getmcmcchainbigdtbiguqbigdt-likelihoodparams", 
            "text": "Get MCMC chain  source:  BIGUQ/src/BIGDT.jl:23", 
            "title": "getmcmcchain(bigdt::BIGUQ.BigDT,  likelihoodparams)"
        }, 
        {
            "location": "/Modules/BIGUQ/#makebigdtsbigoedbiguqbigoed", 
            "text": "makes the bigdts for each possible decision assuming that no more observations will be made  source:  BIGUQ/src/BIGOED.jl:24", 
            "title": "makebigdts(bigoed::BIGUQ.BigOED)"
        }, 
        {
            "location": "/Modules/BIGUQ/#makebigdtsbigoedbiguqbigoed-proposedindex-proposedobs", 
            "text": "make bigdts for each possible decision assuming that the proposedobs are observed  source:  BIGUQ/src/BIGOED.jl:51", 
            "title": "makebigdts(bigoed::BIGUQ.BigOED,  proposedindex,  proposedobs)"
        }, 
        {
            "location": "/Modules/BIGUQ/#types-internal", 
            "text": "", 
            "title": "Types [Internal]"
        }, 
        {
            "location": "/Modules/BIGUQ/#biguqbigoed", 
            "text": "BigOED type  source:  BIGUQ/src/BIGOED.jl:2", 
            "title": "BIGUQ.BigOED"
        }, 
        {
            "location": "/Modules/Anasol/", 
            "text": "Anasol\n\n\nMacros [Internal]\n\n\n\n\n\n\n@code(e)\n\n\ncode\n the code macro is used to put a line of code (or a quote) onto the growing\ngen_code function.\n\n\nsource:\n\n\nAnasol/src/gencode.jl:32\n\n\n\n\n\n\n@gen_code(f)\n\n\ngen_code\n rejigs the standard julia \n@generate\n macro so that it creates a \ncode\n\nexpression variable that can be extended using the \n@code\n macro.  At the end of\nthe function it automatically outputs the result.\n\n\nsource:\n\n\nAnasol/src/gencode.jl:6", 
            "title": "Anasol"
        }, 
        {
            "location": "/Modules/Anasol/#anasol", 
            "text": "", 
            "title": "Anasol"
        }, 
        {
            "location": "/Modules/Anasol/#macros-internal", 
            "text": "", 
            "title": "Macros [Internal]"
        }, 
        {
            "location": "/Modules/Anasol/#codee", 
            "text": "code  the code macro is used to put a line of code (or a quote) onto the growing\ngen_code function.  source:  Anasol/src/gencode.jl:32", 
            "title": "@code(e)"
        }, 
        {
            "location": "/Modules/Anasol/#gen_codef", 
            "text": "gen_code  rejigs the standard julia  @generate  macro so that it creates a  code \nexpression variable that can be extended using the  @code  macro.  At the end of\nthe function it automatically outputs the result.  source:  Anasol/src/gencode.jl:6", 
            "title": "@gen_code(f)"
        }, 
        {
            "location": "/Modules/ReusableFunctions/", 
            "text": "ReusableFunctions\n\n\nMethods [Internal]\n\n\n\n\n\n\nmaker3function(f::Function,  dirname::ASCIIString)\n\n\nMake reusable function\n\n\nsource:\n\n\nReusableFunctions/src/ReusableFunctions.jl:43", 
            "title": "ReusableFunctions"
        }, 
        {
            "location": "/Modules/ReusableFunctions/#reusablefunctions", 
            "text": "", 
            "title": "ReusableFunctions"
        }, 
        {
            "location": "/Modules/ReusableFunctions/#methods-internal", 
            "text": "", 
            "title": "Methods [Internal]"
        }, 
        {
            "location": "/Modules/ReusableFunctions/#maker3functionffunction-dirnameasciistring", 
            "text": "Make reusable function  source:  ReusableFunctions/src/ReusableFunctions.jl:43", 
            "title": "maker3function(f::Function,  dirname::ASCIIString)"
        }, 
        {
            "location": "/Modules/MetaProgTools/", 
            "text": "MetaProgTools\n\n\nMethods [Internal]\n\n\n\n\n\n\ngetsymbols(needle::Number)\n\n\nGet symbols\n\n\nsource:\n\n\nMetaProgTools/src/MetaProgTools.jl:35\n\n\n\n\n\n\nin(needle,  haystack::Expr)\n\n\nFind a needle in a haystack\n\n\nsource:\n\n\nMetaProgTools/src/MetaProgTools.jl:128\n\n\n\n\n\n\npopulateexpression(haystack::Symbol,  vals::Dict{K, V})\n\n\nPopulate Expression\n\n\nsource:\n\n\nMetaProgTools/src/MetaProgTools.jl:61\n\n\n\n\n\n\nreplacesymbol(haystack::Symbol,  needle::Symbol,  replacement)\n\n\nReplace Symbol\n\n\nsource:\n\n\nMetaProgTools/src/MetaProgTools.jl:93", 
            "title": "MetaProgTools"
        }, 
        {
            "location": "/Modules/MetaProgTools/#metaprogtools", 
            "text": "", 
            "title": "MetaProgTools"
        }, 
        {
            "location": "/Modules/MetaProgTools/#methods-internal", 
            "text": "", 
            "title": "Methods [Internal]"
        }, 
        {
            "location": "/Modules/MetaProgTools/#getsymbolsneedlenumber", 
            "text": "Get symbols  source:  MetaProgTools/src/MetaProgTools.jl:35", 
            "title": "getsymbols(needle::Number)"
        }, 
        {
            "location": "/Modules/MetaProgTools/#inneedle-haystackexpr", 
            "text": "Find a needle in a haystack  source:  MetaProgTools/src/MetaProgTools.jl:128", 
            "title": "in(needle,  haystack::Expr)"
        }, 
        {
            "location": "/Modules/MetaProgTools/#populateexpressionhaystacksymbol-valsdictk-v", 
            "text": "Populate Expression  source:  MetaProgTools/src/MetaProgTools.jl:61", 
            "title": "populateexpression(haystack::Symbol,  vals::Dict{K, V})"
        }, 
        {
            "location": "/Modules/MetaProgTools/#replacesymbolhaystacksymbol-needlesymbol-replacement", 
            "text": "Replace Symbol  source:  MetaProgTools/src/MetaProgTools.jl:93", 
            "title": "replacesymbol(haystack::Symbol,  needle::Symbol,  replacement)"
        }, 
        {
            "location": "/Modules/RobustPmap/", 
            "text": "RobustPmap\n\n\nMethods [Internal]\n\n\n\n\n\n\ncheckexceptions(x,  t)\n\n\nCheck for type exceptions\n\n\nsource:\n\n\nRobustPmap/src/RobustPmap.jl:36\n\n\n\n\n\n\nrpmap(f,  args...)\n\n\nRobust pmap call\n\n\nsource:\n\n\nRobustPmap/src/RobustPmap.jl:48", 
            "title": "RobustPmap"
        }, 
        {
            "location": "/Modules/RobustPmap/#robustpmap", 
            "text": "", 
            "title": "RobustPmap"
        }, 
        {
            "location": "/Modules/RobustPmap/#methods-internal", 
            "text": "", 
            "title": "Methods [Internal]"
        }, 
        {
            "location": "/Modules/RobustPmap/#checkexceptionsx-t", 
            "text": "Check for type exceptions  source:  RobustPmap/src/RobustPmap.jl:36", 
            "title": "checkexceptions(x,  t)"
        }, 
        {
            "location": "/Modules/RobustPmap/#rpmapf-args", 
            "text": "Robust pmap call  source:  RobustPmap/src/RobustPmap.jl:48", 
            "title": "rpmap(f,  args...)"
        }
    ]
}
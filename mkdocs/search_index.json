{
    "docs": [
        {
            "location": "/", 
            "text": "MADS (Model Analysis \n Decision Support)\n\n\nMADS is an open-source \nJulia\n code designed as an integrated high-performance computational framework performing a wide range of data- \n model-based analyses:\n\n\n\n\nSensitivity Analysis\n\n\nParameter Estimation\n\n\nModel Inversion and Calibration\n\n\nUncertainty Quantification\n\n\nModel Selection and Averaging\n\n\nDecision Support\n\n\n\n\nMADS utilizes adaptive rules and techniques which allows the analyses to be performed with minimum user input.\nThe code provides a series of alternative algorithms to perform each type of model analyses.\n\n\nFor additional information:\n\n\n\n\nweb:\n\n\nmads.lanl.gov\n\n\nmadsc.lanl.gov\n (C version of MADS)\n\n\n\n\n\n\ndocumentation:\n\n\nreadthedocs\n\n\ngithub\n\n\nmadsjulia.lanl.gov\n \n\n\n\n\n\n\nrepos:\n\n\ngithub\n\n\ngitlab\n\n\n\n\n\n\ngit:\n\n\ngit clone git@github.com:madsjulia/Mads.jl\n\n\ngit clone git@gitlab.com:mads/Mads.jl\n\n\n\n\n\n\nemail: \nmads@lanl.gov\n\n\n\n\nBuilds \n Tests\n\n\nMads Build \n Test Status @ JuliaLang.org\n\n\n \n\n\nMads Build \n Test Status @ Travis Continuous Integration (CI) service (OS X \n linux)\n\n\n\n\nCoverage of the Build-in Mads Tests\n\n\n\n\nLA-CC-15-080", 
            "title": "Home"
        }, 
        {
            "location": "/#mads-model-analysis-decision-support", 
            "text": "MADS is an open-source  Julia  code designed as an integrated high-performance computational framework performing a wide range of data-   model-based analyses:   Sensitivity Analysis  Parameter Estimation  Model Inversion and Calibration  Uncertainty Quantification  Model Selection and Averaging  Decision Support   MADS utilizes adaptive rules and techniques which allows the analyses to be performed with minimum user input.\nThe code provides a series of alternative algorithms to perform each type of model analyses.  For additional information:   web:  mads.lanl.gov  madsc.lanl.gov  (C version of MADS)    documentation:  readthedocs  github  madsjulia.lanl.gov      repos:  github  gitlab    git:  git clone git@github.com:madsjulia/Mads.jl  git clone git@gitlab.com:mads/Mads.jl    email:  mads@lanl.gov", 
            "title": "MADS (Model Analysis &amp; Decision Support)"
        }, 
        {
            "location": "/#builds-tests", 
            "text": "Mads Build   Test Status @ JuliaLang.org     Mads Build   Test Status @ Travis Continuous Integration (CI) service (OS X   linux)   Coverage of the Build-in Mads Tests   LA-CC-15-080", 
            "title": "Builds &amp; Tests"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nAfter starting Julia, execute:\n\n\nPkg\n.\nadd\n(\nMads\n)\n\n\n\n\n\n\nInstallation of MADS without PYTHON\n\n\nMADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable:\n\n\n(bash)\n\n\nexport MADS_NO_PYTHON=\n\n\n\n\n\n\nor\n\n\n(tcsh)\n\n\nsetenv MADS_NO_PYTHON \n\n\n\n\n\n\nInstallation of MADS without plotting modules\n\n\nMADS uses Gadfly and matplotlib for plotting. To avoid using these libraries set the following environmental variable:\n\n\n(bash)\n\n\nexport MADS_NO_PLOT=\n\n\n\n\n\n\nor\n\n\n(tcsh)\n\n\nsetenv MADS_NO_PLOT \n\n\n\n\n\n\nInstallation of MADS behind a firewall\n\n\nJulia uses git for package management. Add in the \n.gitconfig\n file in your home directory:\n\n\n[url \nhttps://\n]\n\n        \ninsteadOf\n \n=\n \ngit://\n\n\n\n\n\n\nor execute:\n\n\ngit config --global url.\nhttps://\n.insteadOf git://\n\n\n\n\n\nSet proxies:\n\n\nexport ftp_proxy=http://proxyout.\nyour_site\n:8080\nexport rsync_proxy=http://proxyout.\nyour_site\n:8080\nexport http_proxy=http://proxyout.\nyour_site\n:8080\nexport https_proxy=http://proxyout.\nyour_site\n:8080\nexport no_proxy=.\nyour_site\n\n\n\n\n\n\nFor example, if you are doing this at LANL, you will need to execute the \nfollowing lines in your bash command-line environment:\n\n\nexport ftp_proxy=http://proxyout.lanl.gov:8080\nexport rsync_proxy=http://proxyout.lanl.gov:8080\nexport http_proxy=http://proxyout.lanl.gov:8080\nexport https_proxy=http://proxyout.lanl.gov:8080\nexport no_proxy=.lanl.gov", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "After starting Julia, execute:  Pkg . add ( Mads )", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation-of-mads-without-python", 
            "text": "MADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable:  (bash)  export MADS_NO_PYTHON=   or  (tcsh)  setenv MADS_NO_PYTHON", 
            "title": "Installation of MADS without PYTHON"
        }, 
        {
            "location": "/installation/#installation-of-mads-without-plotting-modules", 
            "text": "MADS uses Gadfly and matplotlib for plotting. To avoid using these libraries set the following environmental variable:  (bash)  export MADS_NO_PLOT=   or  (tcsh)  setenv MADS_NO_PLOT", 
            "title": "Installation of MADS without plotting modules"
        }, 
        {
            "location": "/installation/#installation-of-mads-behind-a-firewall", 
            "text": "Julia uses git for package management. Add in the  .gitconfig  file in your home directory:  [url  https:// ] \n         insteadOf   =   git://   or execute:  git config --global url. https:// .insteadOf git://  Set proxies:  export ftp_proxy=http://proxyout. your_site :8080\nexport rsync_proxy=http://proxyout. your_site :8080\nexport http_proxy=http://proxyout. your_site :8080\nexport https_proxy=http://proxyout. your_site :8080\nexport no_proxy=. your_site   For example, if you are doing this at LANL, you will need to execute the \nfollowing lines in your bash command-line environment:  export ftp_proxy=http://proxyout.lanl.gov:8080\nexport rsync_proxy=http://proxyout.lanl.gov:8080\nexport http_proxy=http://proxyout.lanl.gov:8080\nexport https_proxy=http://proxyout.lanl.gov:8080\nexport no_proxy=.lanl.gov", 
            "title": "Installation of MADS behind a firewall"
        }, 
        {
            "location": "/getting_started/", 
            "text": "MADS Getting Started\n\n\nInstall \nJulia\n and \nMADS\n (\nPkg.add(\"Mads\")\n) using the installation instruction in the \nREADME.md\n (\nsee also\n).\nIf you are not familiar with Julia, checkout \nJulia By Example\n, \nlearn X in Y minutes\n, \nJulia Express\n).\nYou can also explore the Julia examples in the \nexamples/learn_julia\n directory of the \nMads.jl\n repository (\ngithub\n).\n\n\nTo start using MADS, initiate the Julia REPL and execute \nimport Mads\n to load MADS modules.\n\n\nAll the MADS analyses are based on a MADS problem dictionary that defines the problem.\n\n\nThe MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:\n\n\nmadsdata = Mads.loadmadsfile(\"\ninput_file_name\n.mads\")\n\n\nFor example, you can execute:\n\n\nmadsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")\n\n\nThe file \ninternal-linear.mads\n is located in \nexamples/getting_started\n directory of the \nMads.jl\n repository.\n\n\nTypically, the MADS problem dictionary includes several classes:\n\n\n\n\nParameters\n : lists of model parameters\n\n\nObservations\n : lists of model observations\n\n\nModel\n : defines a model to predict the model observations using the model parameters\n\n\n\n\nThe file \ninternal-linear.mads\n looks like this:\n\n\nParameters:\n- a : { init:  1, dist: \nUniform(-10, 10)\n }\n- b : { init: -1, dist: \nUniform(-10, 10)\n }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl\n\n\n\n\n\nIn this case, there are two parameters, \na\n and \nb\n, defining a linear model, \nf(t) = a * t + b\n, described in \ninternal-linearmodel.jl\n.\n\n\nThe Julia file \ninternal-linearmodel.jl\n is specified under \nModel\n in the MADS problem dictionary above.\n\n\nExecute:\n\n\nMads.showallparameters(madsdata)\n to show all the parameters.\n\n\nMads.showobservations(madsdata)\n to list all the observations.\n\n\nMADS can perform various types of analyses:\n\n\n\n\nMads.forward(madsdata)\n will execute forward model simulation based on the initial parameter values.\n\n\nsaresults = Mads.efast(madsdata)\n will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.\n\n\noptparam, iaresults = Mads.calibrate(madsdata)\n will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.\n\n\nMads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values\noptparam` estimated by the inverse analyses above.\n\n\n\n\nMore complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the \nexamples\n subdirectories of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Command-line execution\n\n\nMADS can be executed at the command line using \nmadsjl.jl\n. Link this file in a directory in your search \nPATH\n.\n\n\nFor example, using \nmadsjl.jl\n you can execute:\n\n\nmadsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast\n\n\n\n\n\nin the \nexamples/getting_started\n subdirectory of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Documentation\n\n\nAll the available MADS modules and functions are described at \ngithub\n and \nreadthedocs\n\n\nMADS Licensing \n Copyright\n\n\nCheck the files \nCOPYING\n and \nLICENSE\n to see the licensing \n copyright information.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#mads-getting-started", 
            "text": "Install  Julia  and  MADS  ( Pkg.add(\"Mads\") ) using the installation instruction in the  README.md  ( see also ).\nIf you are not familiar with Julia, checkout  Julia By Example ,  learn X in Y minutes ,  Julia Express ).\nYou can also explore the Julia examples in the  examples/learn_julia  directory of the  Mads.jl  repository ( github ).  To start using MADS, initiate the Julia REPL and execute  import Mads  to load MADS modules.  All the MADS analyses are based on a MADS problem dictionary that defines the problem.  The MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:  madsdata = Mads.loadmadsfile(\" input_file_name .mads\")  For example, you can execute:  madsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")  The file  internal-linear.mads  is located in  examples/getting_started  directory of the  Mads.jl  repository.  Typically, the MADS problem dictionary includes several classes:   Parameters  : lists of model parameters  Observations  : lists of model observations  Model  : defines a model to predict the model observations using the model parameters   The file  internal-linear.mads  looks like this:  Parameters:\n- a : { init:  1, dist:  Uniform(-10, 10)  }\n- b : { init: -1, dist:  Uniform(-10, 10)  }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl  In this case, there are two parameters,  a  and  b , defining a linear model,  f(t) = a * t + b , described in  internal-linearmodel.jl .  The Julia file  internal-linearmodel.jl  is specified under  Model  in the MADS problem dictionary above.  Execute:  Mads.showallparameters(madsdata)  to show all the parameters.  Mads.showobservations(madsdata)  to list all the observations.  MADS can perform various types of analyses:   Mads.forward(madsdata)  will execute forward model simulation based on the initial parameter values.  saresults = Mads.efast(madsdata)  will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.  optparam, iaresults = Mads.calibrate(madsdata)  will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.  Mads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values optparam` estimated by the inverse analyses above.   More complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the  examples  subdirectories of the  Mads.jl  repository ( github ).", 
            "title": "MADS Getting Started"
        }, 
        {
            "location": "/getting_started/#mads-command-line-execution", 
            "text": "MADS can be executed at the command line using  madsjl.jl . Link this file in a directory in your search  PATH .  For example, using  madsjl.jl  you can execute:  madsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast  in the  examples/getting_started  subdirectory of the  Mads.jl  repository ( github ).", 
            "title": "MADS Command-line execution"
        }, 
        {
            "location": "/getting_started/#mads-documentation", 
            "text": "All the available MADS modules and functions are described at  github  and  readthedocs", 
            "title": "MADS Documentation"
        }, 
        {
            "location": "/getting_started/#mads-licensing-copyright", 
            "text": "Check the files  COPYING  and  LICENSE  to see the licensing   copyright information.", 
            "title": "MADS Licensing &amp; Copyright"
        }, 
        {
            "location": "/Examples/setup/", 
            "text": "Execution of MADS examples\n\n\nIn Julia REPL, do the following commands:\n\n\nimport Mads\n\n\nTo explore getting-started instructions, execute:\n\n\nMads.help()\n\n\nThere are various examples located in the \nexamples\n directory of the \nMads\n repository.\n\n\nFor example, execute\n\n\ninclude(Mads.madsdir * \"/../examples/contamination/contamination.jl\")\n\n\nto perform various analyses related to contaminant transport, or execute\n\n\ninclude(Mads.madsdir * \"/../examples/bigdt/source_termination.jl\")\n\n\nto perform BIG-DT decision analysis.", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/setup/#execution-of-mads-examples", 
            "text": "In Julia REPL, do the following commands:  import Mads  To explore getting-started instructions, execute:  Mads.help()  There are various examples located in the  examples  directory of the  Mads  repository.  For example, execute  include(Mads.madsdir * \"/../examples/contamination/contamination.jl\")  to perform various analyses related to contaminant transport, or execute  include(Mads.madsdir * \"/../examples/bigdt/source_termination.jl\")  to perform BIG-DT decision analysis.", 
            "title": "Execution of MADS examples"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/", 
            "text": "Contaminant Source Termination\n\n\nAll the figures below are generated using \nexamples/bigdt/source_termination.jl\n.\n\n\nModel setup\n\n\n\n\n\n\n\n\nContaminant source (orange rectangle)\n\n\n\n\n\n\n3 monitoring wells\n\n\n\n\n\n\nWe know some of the properties of the source (location, shape, strength, release start time, etc.).\nWe know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015).\nWe do \nNOT\n know:\n\n\n\n\n\n\ngroundwater flow velocity\n\n\n\n\n\n\nlongitudinal dispersion of the plume\n\n\n\n\n\n\nInverse modeling can be used to estimate these parameters.\nHowever, there are uncertainties with the inverse model estimates.\nBecause of these uncertainties, we perform a decision analysis.\n\n\nUncertainties\n\n\nProbabilistic uncertainties\n\n\n\n\n\n\nprior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion)\n\n\n\n\n\n\nmeasurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights)\n\n\n\n\n\n\nposterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)\n\n\n\n\n\n\nNon-probabilistic uncertainties\n\n\n\n\n\n\nconceptual uncertainties in the applied model\n\n\n\n\n\n\nuncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.\n\n\n\n\n\n\nGoal\n\n\nFuture concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb\n\n\nScenarios\n\n\n\n\nTerminate the source in 2015 (now)\n\n\nTerminate the source in 2020 (in 5 years)\n\n\nTerminate the source in 2025 (in 10 years)\n\n\nTerminate the source in 2030 (in 15 years)\n\n\n\n\nTask\n\n\nEvaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.\n\n\nMethod\n\n\nBayesian Information Gap Decision Theory (BIG-DT).\n\n\n\n\nO'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089.\n\n\nGrasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80.\n\n\nO'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621.\n\n\nO'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.\n\n\n\n\nHorizon (level) of uncertainty\n\n\nHorizon (level) of uncertainty is a non-negative index that defines\n(1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and\n(2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation.\n\n\nThe likelihood functions differ in the variance.\nThe set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty.\nThe set of variances is\n\n\n$$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$\n\n\nwhere $\u03c3^2_0$ is the nominal variance (500; the nominal standard deviation $\u03c3_0$ is ~22) and $h$ is the horizon of uncertainty.\nAs the index increases, these sets become bigger, allowing for more possibilities.\n\n\nRobustness\n\n\nThe horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached\n\n\nResults\n\n\nFigures representing robustness of model predictions:\n\n\n(a) Complete robustness curves\n\n\n\n\n(b) Zoomed-in robustness curves\n\n\n\n\nDiscussion\n\n\nWe nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb.\nThis is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero.\nThe zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties.\n\n\nOn the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case.\nThe sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high.\nAnother possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25.\n\n\nHere we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure.\nIn this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030.\nAt this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness.\nHowever, it may not be enough to merit action in the short term.\n\n\nBased on the robustness of the model predictions the decision makers can decide the course of action.\nTheir decision can also rely on\n(1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and\n(2) financial constraints (e.g., costs associated with the source termination over different time frames).\n\n\nModel\n\n\nAnalytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl).\nThe contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the $x$ and $y$ axes; the contaminant is released in 1985.\n\n\nThe presented analyses required ~4,000 forward model runs (~1,000 per scenario).\nThe analysis took about 5 minutes in a serial mode using the Julia version of Mads.\nThe runs are independent and can be computed efficiently in parallel.", 
            "title": "Decision Analysis"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#contaminant-source-termination", 
            "text": "All the figures below are generated using  examples/bigdt/source_termination.jl .", 
            "title": "Contaminant Source Termination"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#model-setup", 
            "text": "Contaminant source (orange rectangle)    3 monitoring wells    We know some of the properties of the source (location, shape, strength, release start time, etc.).\nWe know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015).\nWe do  NOT  know:    groundwater flow velocity    longitudinal dispersion of the plume    Inverse modeling can be used to estimate these parameters.\nHowever, there are uncertainties with the inverse model estimates.\nBecause of these uncertainties, we perform a decision analysis.", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#uncertainties", 
            "text": "", 
            "title": "Uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#probabilistic-uncertainties", 
            "text": "prior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion)    measurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights)    posterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)", 
            "title": "Probabilistic uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#non-probabilistic-uncertainties", 
            "text": "conceptual uncertainties in the applied model    uncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.", 
            "title": "Non-probabilistic uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#goal", 
            "text": "Future concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb", 
            "title": "Goal"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#scenarios", 
            "text": "Terminate the source in 2015 (now)  Terminate the source in 2020 (in 5 years)  Terminate the source in 2025 (in 10 years)  Terminate the source in 2030 (in 15 years)", 
            "title": "Scenarios"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#task", 
            "text": "Evaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.", 
            "title": "Task"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#method", 
            "text": "Bayesian Information Gap Decision Theory (BIG-DT).   O'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089.  Grasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80.  O'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621.  O'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.", 
            "title": "Method"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#horizon-level-of-uncertainty", 
            "text": "Horizon (level) of uncertainty is a non-negative index that defines\n(1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and\n(2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation.  The likelihood functions differ in the variance.\nThe set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty.\nThe set of variances is  $$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$  where $\u03c3^2_0$ is the nominal variance (500; the nominal standard deviation $\u03c3_0$ is ~22) and $h$ is the horizon of uncertainty.\nAs the index increases, these sets become bigger, allowing for more possibilities.", 
            "title": "Horizon (level) of uncertainty"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#robustness", 
            "text": "The horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached", 
            "title": "Robustness"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#results", 
            "text": "Figures representing robustness of model predictions:  (a) Complete robustness curves   (b) Zoomed-in robustness curves", 
            "title": "Results"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#discussion", 
            "text": "We nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb.\nThis is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero.\nThe zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties.  On the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case.\nThe sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high.\nAnother possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25.  Here we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure.\nIn this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030.\nAt this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness.\nHowever, it may not be enough to merit action in the short term.  Based on the robustness of the model predictions the decision makers can decide the course of action.\nTheir decision can also rely on\n(1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and\n(2) financial constraints (e.g., costs associated with the source termination over different time frames).", 
            "title": "Discussion"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#model", 
            "text": "Analytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl).\nThe contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the $x$ and $y$ axes; the contaminant is released in 1985.  The presented analyses required ~4,000 forward model runs (~1,000 per scenario).\nThe analysis took about 5 minutes in a serial mode using the Julia version of Mads.\nThe runs are independent and can be computed efficiently in parallel.", 
            "title": "Model"
        }, 
        {
            "location": "/Examples/infogap/", 
            "text": "Information Gap Analysis\n\n\nAll the figures below are generated using \nexamples/model_analysis/infogap.jl\n.\n\n\nSetup\n\n\n\n\n\n\n\n\nThere are 4 uncertain observations at times t = [1,2,3,4]\n\n\n\n\n\n\nThere are 4 possible models that can be applied to match the data\n\n\n\n\n\n\ny(t) = a * t + c\n\n\n\n\n\n\ny(t) = a * t^(1.1) + b * t + c\n\n\n\n\n\n\ny(t) = a * t^n + b * t + c\n\n\n\n\n\n\ny(t) = a * exp(t * n) + b * t + c\n\n\n\n\n\n\n\n\n\n\nThere are 4 unknown model parameters with uniform prior probability functions:\n\n\n\n\n\n\na = Uniform(-10, 10)\n\n\n\n\n\n\nb = Uniform(-10, 10)\n\n\n\n\n\n\nc = Uniform(-5, 5)\n\n\n\n\n\n\nn = Uniform(-3, 3)\n\n\n\n\n\n\n\n\n\n\nThe model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated\n\n\n\n\n\n\nThe horizon of information gap uncertainty \nh\n is applied to define the acceptable deviations in the 4 uncertain observations.\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t^(1.1) + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t^n + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * exp(t * n) + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpportuneness and Robustness of the 4 models", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/infogap/#information-gap-analysis", 
            "text": "All the figures below are generated using  examples/model_analysis/infogap.jl .", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/infogap/#setup", 
            "text": "There are 4 uncertain observations at times t = [1,2,3,4]    There are 4 possible models that can be applied to match the data    y(t) = a * t + c    y(t) = a * t^(1.1) + b * t + c    y(t) = a * t^n + b * t + c    y(t) = a * exp(t * n) + b * t + c      There are 4 unknown model parameters with uniform prior probability functions:    a = Uniform(-10, 10)    b = Uniform(-10, 10)    c = Uniform(-5, 5)    n = Uniform(-3, 3)      The model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated    The horizon of information gap uncertainty  h  is applied to define the acceptable deviations in the 4 uncertain observations.", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-t11-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t^(1.1) + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-tn-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t^n + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-expt-n-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * exp(t * n) + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#opportuneness-and-robustness-of-the-4-models", 
            "text": "", 
            "title": "Opportuneness and Robustness of the 4 models"
        }, 
        {
            "location": "/Examples/bayesian_sampling/", 
            "text": "Bayesian Sampling\n\n\nAll the figures below are generated using \nexamples/bayesian_sampling/bayesian_sampling.jl\n.\n\n\nModel setup\n\n\n\n\n\n\n\n\nContaminant source (orange rectangle)\n\n\n\n\n\n\n3 monitoring wells\n\n\n\n\n\n\nPrior spaghetti plots\n\n\nSpaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells.\n\n\nJoint spaghetti plots\n\n\nAll model parameters are changed simultaneously within their prior uncertainty ranges.\n\n\n\n\nIndividual spaghetti plots\n\n\nA single model parameter is changed at a time.\n\n\nSource $x$ location\n\n\n\n\nSource $y$ location\n\n\n\n\nSource size along $x$ axis\n\n\n\n\nSource size along $y$ axis\n\n\n\n\nSource release time $t_0$\n\n\n\n\nSource termination time $t_1$\n\n\n\n\nModel calibration match\n\n\n\n\nBayesian sampling results\n\n\n\n\nPosterior spaghetti plots\n\n\nSpaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells.\n\n\nJoint spaghetti plots\n\n\nAll model parameters are changed simultaneously within their prior uncertainty ranges.\n\n\n\n\nIndividual spaghetti plots\n\n\nA single model parameter is changed at a time.\n\n\nNote that only the posterior uncertainties in the source release time ($t_0$)  and the source termination time ($t_1$) are producing large impact in the model predictions.\n\n\nSource $x$ location (all the 1000 model predictions are overlapping)\n\n\n\n\nSource $y$ location (all the 1000 model predictions are overlapping\n\n\n\n\nSource size along $x$ axis (all the 1000 model predictions are overlapping\n\n\n\n\nSource size along $y$ axis (all the 1000 model predictions are overlapping\n\n\n\n\nSource release time $t_0$\n\n\n\n\nSource termination time $t_1$", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#bayesian-sampling", 
            "text": "All the figures below are generated using  examples/bayesian_sampling/bayesian_sampling.jl .", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#model-setup", 
            "text": "Contaminant source (orange rectangle)    3 monitoring wells", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#prior-spaghetti-plots", 
            "text": "Spaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells.", 
            "title": "Prior spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#joint-spaghetti-plots", 
            "text": "All model parameters are changed simultaneously within their prior uncertainty ranges.", 
            "title": "Joint spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#individual-spaghetti-plots", 
            "text": "A single model parameter is changed at a time.  Source $x$ location   Source $y$ location   Source size along $x$ axis   Source size along $y$ axis   Source release time $t_0$   Source termination time $t_1$", 
            "title": "Individual spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#model-calibration-match", 
            "text": "", 
            "title": "Model calibration match"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#bayesian-sampling-results", 
            "text": "", 
            "title": "Bayesian sampling results"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#posterior-spaghetti-plots", 
            "text": "Spaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells.", 
            "title": "Posterior spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#joint-spaghetti-plots_1", 
            "text": "All model parameters are changed simultaneously within their prior uncertainty ranges.", 
            "title": "Joint spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#individual-spaghetti-plots_1", 
            "text": "A single model parameter is changed at a time.  Note that only the posterior uncertainties in the source release time ($t_0$)  and the source termination time ($t_1$) are producing large impact in the model predictions.  Source $x$ location (all the 1000 model predictions are overlapping)   Source $y$ location (all the 1000 model predictions are overlapping   Source size along $x$ axis (all the 1000 model predictions are overlapping   Source size along $y$ axis (all the 1000 model predictions are overlapping   Source release time $t_0$   Source termination time $t_1$", 
            "title": "Individual spaghetti plots"
        }, 
        {
            "location": "/Examples/blind_source_separation/", 
            "text": "Blind Source Separation\n\n\nFrequently there are several different physical phenomena or mechanisms (sources) than may can cause transients in the observed data.\n\n\nFor example, in the case of water-level (hydraulic pressure) data, these might me barometric pressure fluctuations, tidal effects, pumping effects, etc.\nIn the case of geochemical concentrations, these may represent a mixture of different groundwater sources with different initial geochemical compositions.\n\n\nThe separation of the different signals observed in the data is important for conceptualization of the site conditions.\n\n\nBelow a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals.\n\n\nMore complicated Blind Source Separation (BSS) analyses can be found in:\n\n\nAlexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research 50.9 (2014): 7332-7347.\n\n\nAll the figures below are generated using \nexamples/blind_source_separation.jl\n. BSS can be performed using different methods. The examples below use the \nIpopt\n implementation in the \nJuMP\n Julia module.\n\n\nSources generated using sine functions and random noise\n\n\nOriginal sources (assumed unknown)\n\n\n\n\nMixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)\n\n\n\n\nReconstructed (unmixed) original sources based on the observed data\n\n\n\n\nSources generated using sine functions\n\n\nOriginal sources (assumed unknown)\n\n\n\n\nMixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)\n\n\n\n\nReconstructed (unmixed) sources based on the observed data\n\n\n\n\nSources generated using random noise\n\n\nOriginal sources (assumed unknown)\n\n\n\n\nMixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)\n\n\n\n\nReconstructed (unmixed) original sources based on the observed data", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/blind_source_separation/#blind-source-separation", 
            "text": "Frequently there are several different physical phenomena or mechanisms (sources) than may can cause transients in the observed data.  For example, in the case of water-level (hydraulic pressure) data, these might me barometric pressure fluctuations, tidal effects, pumping effects, etc.\nIn the case of geochemical concentrations, these may represent a mixture of different groundwater sources with different initial geochemical compositions.  The separation of the different signals observed in the data is important for conceptualization of the site conditions.  Below a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals.  More complicated Blind Source Separation (BSS) analyses can be found in:  Alexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research 50.9 (2014): 7332-7347.  All the figures below are generated using  examples/blind_source_separation.jl . BSS can be performed using different methods. The examples below use the  Ipopt  implementation in the  JuMP  Julia module.", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-sine-functions-and-random-noise", 
            "text": "", 
            "title": "Sources generated using sine functions and random noise"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown", 
            "text": "", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-4-different-monitoring-locations-representing-4-different-signals-or-observation-streams", 
            "text": "", 
            "title": "Mixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-sources-based-on-the-observed-data", 
            "text": "", 
            "title": "Reconstructed (unmixed) original sources based on the observed data"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-sine-functions", 
            "text": "", 
            "title": "Sources generated using sine functions"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown_1", 
            "text": "", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-4-different-monitoring-locations-representing-4-different-signals-or-observation-streams_1", 
            "text": "", 
            "title": "Mixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-sources-based-on-the-observed-data", 
            "text": "", 
            "title": "Reconstructed (unmixed) sources based on the observed data"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-random-noise", 
            "text": "", 
            "title": "Sources generated using random noise"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown_2", 
            "text": "", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-4-different-monitoring-locations-representing-4-different-signals-or-observation-streams_2", 
            "text": "", 
            "title": "Mixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-sources-based-on-the-observed-data_1", 
            "text": "", 
            "title": "Reconstructed (unmixed) original sources based on the observed data"
        }, 
        {
            "location": "/Examples/contamination/", 
            "text": "Analysis of contaminant transport in an aquifer\n\n\nAll the figures below are generated using \nexamples/contamination/contamination.jl\n.\n\n\nModel setup\n\n\n\n\nThere are 20 monitoring wells.\nEach well has 2 measurement ports: shallow (3 m below the water table labeled \na\n) and deep (33 m below the water table labeled \nb\n).\nContaminant concentrations are observed for 50 years at each well.\nThe contaminant transport is solved using the \nAnasol\n package in Mads.\n\n\nUnknown model parameters\n\n\n\n\nStart time of contaminant release $t_0$\n\n\nEnd time of contaminant release $t_1$\n\n\nAdvective pore velocity $v$\n\n\n\n\nReduced model setup\n\n\nAnalysis of the data from only 2 monitoring locations: \nw13a\n and \nw20a\n.\n\n\n\n\nExample model solution\n\n\n\n\nModel parameter values:\n\n\n\n\n$t_0 = 4$ \n\n\n$t_1 = 15$\n\n\n$v = 40$\n\n\n\n\nModel calibration\n\n\nA calibration match between observations and model predictions obtained by model inversion:\n\n\n\n\nPrior parameter uncertainties\n\n\nProbabilistic distributions of the prior parameter uncertainties are:\n\n\n\n\n$t_0$ = Uniform(0, 10)\n\n\n$t_1$ = Uniform(5, 40)\n\n\n$v$ = LogUniform(0.1, 200)\n\n\n\n\nSpaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data):\n\n\n\n\nThe observation data are plotted as red dots.\n\n\nBayesian global sensitivity analysis\n\n\nHistograms and scatter plots of the Bayesian MCMC results:\n\n\n\n\nPosterior parameter uncertainties\n\n\nSpaghetti plots representing the posterior uncertainties:\n\n\n\n\nNote that the parameter uncertainties are constrained by the observation data.\nThe observation data are plotted as red dots.\n\n\neFAST global sensitivity analysis\n\n\neFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli \n Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999). \n\n\nTotal and main sensitivity indices over time for monitoring wells w13a and w20a:\n\n\n\n\n\n\n\n\n\n\nThe differences between main and total effect estimates suggest correlations among the parameters.\n\n\nSaltelli's global sensitivity analysis\n\n\nClassical Saltelli's (Sobol's) global sensitivity analysis.\n\n\nTotal and main sensitivity indices over time for monitoring wells w13a and w20a:\n\n\n\n\n\n\n\n\n\n\nThere are differences between eFAST \n Saltelli estimates. The eFAST results should be considered more reliable.", 
            "title": "Contaminant Transport"
        }, 
        {
            "location": "/Examples/contamination/#analysis-of-contaminant-transport-in-an-aquifer", 
            "text": "All the figures below are generated using  examples/contamination/contamination.jl .", 
            "title": "Analysis of contaminant transport in an aquifer"
        }, 
        {
            "location": "/Examples/contamination/#model-setup", 
            "text": "There are 20 monitoring wells.\nEach well has 2 measurement ports: shallow (3 m below the water table labeled  a ) and deep (33 m below the water table labeled  b ).\nContaminant concentrations are observed for 50 years at each well.\nThe contaminant transport is solved using the  Anasol  package in Mads.", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/contamination/#unknown-model-parameters", 
            "text": "Start time of contaminant release $t_0$  End time of contaminant release $t_1$  Advective pore velocity $v$", 
            "title": "Unknown model parameters"
        }, 
        {
            "location": "/Examples/contamination/#reduced-model-setup", 
            "text": "Analysis of the data from only 2 monitoring locations:  w13a  and  w20a .", 
            "title": "Reduced model setup"
        }, 
        {
            "location": "/Examples/contamination/#example-model-solution", 
            "text": "Model parameter values:   $t_0 = 4$   $t_1 = 15$  $v = 40$", 
            "title": "Example model solution"
        }, 
        {
            "location": "/Examples/contamination/#model-calibration", 
            "text": "A calibration match between observations and model predictions obtained by model inversion:", 
            "title": "Model calibration"
        }, 
        {
            "location": "/Examples/contamination/#prior-parameter-uncertainties", 
            "text": "Probabilistic distributions of the prior parameter uncertainties are:   $t_0$ = Uniform(0, 10)  $t_1$ = Uniform(5, 40)  $v$ = LogUniform(0.1, 200)   Spaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data):   The observation data are plotted as red dots.", 
            "title": "Prior parameter uncertainties"
        }, 
        {
            "location": "/Examples/contamination/#bayesian-global-sensitivity-analysis", 
            "text": "Histograms and scatter plots of the Bayesian MCMC results:", 
            "title": "Bayesian global sensitivity analysis"
        }, 
        {
            "location": "/Examples/contamination/#posterior-parameter-uncertainties", 
            "text": "Spaghetti plots representing the posterior uncertainties:   Note that the parameter uncertainties are constrained by the observation data.\nThe observation data are plotted as red dots.", 
            "title": "Posterior parameter uncertainties"
        }, 
        {
            "location": "/Examples/contamination/#efast-global-sensitivity-analysis", 
            "text": "eFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli   Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999).   Total and main sensitivity indices over time for monitoring wells w13a and w20a:      The differences between main and total effect estimates suggest correlations among the parameters.", 
            "title": "eFAST global sensitivity analysis"
        }, 
        {
            "location": "/Examples/contamination/#saltellis-global-sensitivity-analysis", 
            "text": "Classical Saltelli's (Sobol's) global sensitivity analysis.  Total and main sensitivity indices over time for monitoring wells w13a and w20a:      There are differences between eFAST   Saltelli estimates. The eFAST results should be considered more reliable.", 
            "title": "Saltelli's global sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/", 
            "text": "Analysis of an Ordinary Differential Equation (ODE)\n\n\nAll the figures below are generated using \nexamples/ode/ode.jl\n.\n\n\nODE\n\n\n$$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$\n\n\nUnknown ODE parameters\n\n\n\n\nk\n\n\n$\\omega$\n\n\n\n\nExample ODE solution\n\n\n\n\nFor model parameters:\n\n\n\n\nk = 0.1\n\n\n$\\omega$ = 0.2\n\n\n\n\nLocal sensitivity analysis\n\n\n\n\n\n\nGlobal sensitivity analysis (using eFAST)\n\n\n\n\nProbabilistic distributions of the prior parameter uncertainties are:\n\n\n\n\nk = LogUniform(0.01, 0.1)\n\n\n$\\omega$ = Uniform(0.1, 0.3)\n\n\n\n\nBayesian sensitivity analysis\n\n\nObservations\n\n\nSynthetic observations are applied to constrain the ODE parameters\n\n\n\n\nObservation errors are equal for all the sample locations with standard deviation equal to 1 (\nobservation weight\n =  1 / \nobservation standard deviation\n = 1 / 1 = 1)\n\n\nPrior parameter uncertainties\n\n\nk\n only\n\n\n\n\n$\\omega$\n only\n\n\n\n\nBoth\n parameters\n\n\n\n\nThe observation data are plotted as a solid black line.\n\n\nHistograms/scatter plots of Bayesian MCMC results\n\n\n\n\nPosterior parameter uncertainties\n\n\nNote that now the parameter uncertainties are constrained by the observation data.\n\n\nk\n only\n\n\n\n\n$\\omega$\n only\n\n\n\n\nBoth\n parameters\n\n\n\n\nThe observation data are plotted as a solid black line.", 
            "title": "ODE Analysis"
        }, 
        {
            "location": "/Examples/ode/#analysis-of-an-ordinary-differential-equation-ode", 
            "text": "All the figures below are generated using  examples/ode/ode.jl .", 
            "title": "Analysis of an Ordinary Differential Equation (ODE)"
        }, 
        {
            "location": "/Examples/ode/#ode", 
            "text": "$$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$", 
            "title": "ODE"
        }, 
        {
            "location": "/Examples/ode/#unknown-ode-parameters", 
            "text": "k  $\\omega$", 
            "title": "Unknown ODE parameters"
        }, 
        {
            "location": "/Examples/ode/#example-ode-solution", 
            "text": "For model parameters:   k = 0.1  $\\omega$ = 0.2", 
            "title": "Example ODE solution"
        }, 
        {
            "location": "/Examples/ode/#local-sensitivity-analysis", 
            "text": "", 
            "title": "Local sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/#global-sensitivity-analysis-using-efast", 
            "text": "Probabilistic distributions of the prior parameter uncertainties are:   k = LogUniform(0.01, 0.1)  $\\omega$ = Uniform(0.1, 0.3)", 
            "title": "Global sensitivity analysis (using eFAST)"
        }, 
        {
            "location": "/Examples/ode/#bayesian-sensitivity-analysis", 
            "text": "", 
            "title": "Bayesian sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/#observations", 
            "text": "Synthetic observations are applied to constrain the ODE parameters   Observation errors are equal for all the sample locations with standard deviation equal to 1 ( observation weight  =  1 /  observation standard deviation  = 1 / 1 = 1)", 
            "title": "Observations"
        }, 
        {
            "location": "/Examples/ode/#prior-parameter-uncertainties", 
            "text": "", 
            "title": "Prior parameter uncertainties"
        }, 
        {
            "location": "/Examples/ode/#k-only", 
            "text": "", 
            "title": "k only"
        }, 
        {
            "location": "/Examples/ode/#omega-only", 
            "text": "", 
            "title": "$\\omega$ only"
        }, 
        {
            "location": "/Examples/ode/#both-parameters", 
            "text": "The observation data are plotted as a solid black line.", 
            "title": "Both parameters"
        }, 
        {
            "location": "/Examples/ode/#histogramsscatter-plots-of-bayesian-mcmc-results", 
            "text": "", 
            "title": "Histograms/scatter plots of Bayesian MCMC results"
        }, 
        {
            "location": "/Examples/ode/#posterior-parameter-uncertainties", 
            "text": "Note that now the parameter uncertainties are constrained by the observation data.", 
            "title": "Posterior parameter uncertainties"
        }, 
        {
            "location": "/Examples/ode/#k-only_1", 
            "text": "", 
            "title": "k only"
        }, 
        {
            "location": "/Examples/ode/#omega-only_1", 
            "text": "", 
            "title": "$\\omega$ only"
        }, 
        {
            "location": "/Examples/ode/#both-parameters_1", 
            "text": "The observation data are plotted as a solid black line.", 
            "title": "Both parameters"
        }, 
        {
            "location": "/model_coupling/", 
            "text": "Model Coupling\n\n\nMADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\n\n\nModel\n : Julia model defined in an external Julia file.\n\n\n\n\n\n\nMADS model\n : Julia model defined in an external Julia file using information from the MADS problem dictionary.\n\n\n\n\n\n\nJulia model\n : Julia model defined internally (already in the Julia workspace).\n\n\n\n\n\n\nCommand\n : external model executed by an UNIX command or script.\n\n\n\n\n\n\nJulia command\n : external model executed by a Julia script. The Julia script is defined in an external Julia file.\n\n\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model. Only \nCommand\n uses different approaches to get back the model outputs. The script defined under \nJulia command\n parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows.\n\n\n\n\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at \nmads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file", 
            "title": "Model Coupling"
        }, 
        {
            "location": "/model_coupling/#model-coupling", 
            "text": "MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:    Model  : Julia model defined in an external Julia file.    MADS model  : Julia model defined in an external Julia file using information from the MADS problem dictionary.    Julia model  : Julia model defined internally (already in the Julia workspace).    Command  : external model executed by an UNIX command or script.    Julia command  : external model executed by a Julia script. The Julia script is defined in an external Julia file.    Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model. Only  Command  uses different approaches to get back the model outputs. The script defined under  Julia command  parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows.    Options for writing model inputs:   Templates  : template files for writing model input files as defined at  mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file     Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file", 
            "title": "Model Coupling"
        }, 
        {
            "location": "/test/", 
            "text": "Testing \n Verification\n\n\nMADS includes a series of test and verification problems. These are also provided as examples how to run the code and perform various types of data and model analyses. All the MADS examples can be found in the MADS repository: \ngithub\n.\n\n\nAll the test and verification problems can be executed using:\n\n\nimport\n \nMads\n\n\nMads\n.\ntest\n()\n\n\n\n\n\n\nor\n\n\nPkg.test(\nMads\n)\nPkg.test(\nAnasol\n)\nPkg.test(\nBIGUQ\n)\nPkg.test(\nReusableFunctions\n)\nPkg.test(\nMetaProgTools\n)\nPkg.test(\nRobustPmap\n)", 
            "title": "Testing & Verification"
        }, 
        {
            "location": "/test/#testing-verification", 
            "text": "MADS includes a series of test and verification problems. These are also provided as examples how to run the code and perform various types of data and model analyses. All the MADS examples can be found in the MADS repository:  github .  All the test and verification problems can be executed using:  import   Mads  Mads . test ()   or  Pkg.test( Mads )\nPkg.test( Anasol )\nPkg.test( BIGUQ )\nPkg.test( ReusableFunctions )\nPkg.test( MetaProgTools )\nPkg.test( RobustPmap )", 
            "title": "Testing &amp; Verification"
        }, 
        {
            "location": "/functions/", 
            "text": "MADS Functions\n\n\nMADS includes several Modules. The modules include numerous functions. To list all the available functions execute:\n\n\nMads.functions()\n\n\nTo list all the functions in a module, do:\n\n\nMads.functions(BIGUQ)\n\n\nTo list all the functions containing \nget\n, execute:\n\n\nMads\n.\nfunctions\n(\nget\n)\n\n\nMads\n.\nfunctions\n(\nMads\n,\n \nget\n)", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#mads-functions", 
            "text": "MADS includes several Modules. The modules include numerous functions. To list all the available functions execute:  Mads.functions()  To list all the functions in a module, do:  Mads.functions(BIGUQ)  To list all the functions containing  get , execute:  Mads . functions ( get )  Mads . functions ( Mads ,   get )", 
            "title": "MADS Functions"
        }, 
        {
            "location": "/Modules/Mads/", 
            "text": "Mads.jl\n\n\nDocumentation for Mads.jl\n\n\n#\n\n\nMads.addsource!\n \n \nFunction\n.\n\n\nAdd an additional contamination source\n\n\n#\n\n\nMads.addsourceparameters!\n \n \nMethod\n.\n\n\nAdd contaminant source parameters\n\n\n#\n\n\nMads.allwellsoff!\n \n \nMethod\n.\n\n\nTurn off all the wells in the MADS problem dictionary\n\n\n#\n\n\nMads.allwellson!\n \n \nMethod\n.\n\n\nTurn on all the wells in the MADS problem dictionary\n\n\n#\n\n\nMads.amanzi\n \n \nFunction\n.\n\n\nExecute amanzi external groundwater flow and transport simulator \n\n\nArguments:\n\n\n\n\nfilename\n : amanzi input file name\n\n\nnproc\n : number of processor to be used by amanzi\n\n\nquiet\n : : suppress output [default \ntrue\n]\n\n\nobservation_filename\n : amanzi observation filename [default \"observations.out\"]\n\n\nsetup\n : bash script to setup amanzi environmental variables\n\n\namanzi_exe\n : full path to the location of the amanzi executable\n\n\n\n\n#\n\n\nMads.amanzi_output_parser\n \n \nFunction\n.\n\n\nParse Amanzi output provided in an external file (\nfilename\n)\n\n\nMads.amanzi_output_parser()\nMads.amanzi_output_parser(\nobservations.out\n)\n\n\n\n\n\nArguments:\n\n\n\n\nfilename\n : external file name (optional)\n\n\n\n\nReturns:\n\n\n\n\ndict\n : a dictionary with model observations following MADS requirements\n\n\n\n\n#\n\n\nMads.asinetransform\n \n \nMethod\n.\n\n\nArcsine transformation of model parameters\n\n\n#\n\n\nMads.bayessampling\n \n \nMethod\n.\n\n\nBayesian Sampling\n\n\nMads.bayessampling(madsdata; nsteps=1000, burnin=100, thinning=1, seed=2016)\nMads.bayessampling(madsdata, numsequences; nsteps=1000, burnin=100, thinning=1, seed=2016)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumsequences\n : number of sequences executed in parallel\n\n\nnsteps\n : number of final realizations in the chain\n\n\nburnin\n :  number of initial realizations before the MCMC are recorded\n\n\nthinning\n : removal of any \nthinning\n realization\n\n\nseed\n : initial random number seed\n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n :\n\n\n\n\n#\n\n\nMads.calibrate\n \n \nMethod\n.\n\n\nCalibrate\n\n\nMads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda\n\n\nlambda_mu\n : lambda multiplication factor [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nsave_results\n : save intermediate results [default=true]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver\n\n\n\n\nReturns:\n\n\n\n\nminimumdict\n : model parameter dictionary with the optimal values at the minimum\n\n\nresults\n : optimization algorithm results (e.g. results.minimum)\n\n\n\n\n#\n\n\nMads.calibratenlopt\n \n \nMethod\n.\n\n\nDo a calibration using NLopt \n\n\n#\n\n\nMads.calibraterandom\n \n \nFunction\n.\n\n\nCalibrate with random initial guesses\n\n\nMads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumberofsamples\n : number of random initial samples\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda\n\n\nlambda_mu\n : lambda multiplication factor [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nsave_results\n : save intermediate results [default=true]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver\n\n\nseed\n : initial random seed\n\n\n\n\nReturns:\n\n\n\n\nbestresult\n : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum)\n\n\n\n\n#\n\n\nMads.checkout\n \n \nFunction\n.\n\n\nCheckout the latest version of the Mads modules\n\n\n#\n\n\nMads.cleancoverage\n \n \nMethod\n.\n\n\nRemove Mads coverage files\n\n\n#\n\n\nMads.cmadsins_obs\n \n \nMethod\n.\n\n\nCall C MADS ins_obs() function from the MADS dynamic library\n\n\n#\n\n\nMads.computemass\n \n \nMethod\n.\n\n\nCompute injected/reduced contaminant mass for a given set of mads input files\n\n\nMads.computemass(madsfiles; time = 0, path = \".\")\n\n\nArguments:\n\n\n\n\nmadsfiles\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\ntime\n : computational time\n\n\npath\n : search directory for the mads input files\n\n\n\n\nReturns:\n\n\n\n\nlambda\n : array with all the lambda values\n\n\nmass_injected\n : array with associated total injected mass\n\n\nmass_reduced\n : array with associated total reduced mass\n\n\n\n\n#\n\n\nMads.computemass\n \n \nMethod\n.\n\n\nCompute injected/reduced contaminant mass\n\n\nMads.computemass(madsdata; time = 0)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ntime\n : computational time\n\n\n\n\nReturns:\n\n\n\n\nmass_injected\n : total injected mass\n\n\nmass_reduced\n : total reduced mass\n\n\n\n\n#\n\n\nMads.computeparametersensitities\n \n \nMethod\n.\n\n\nCompute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nsaresults\n : sensitivity analysis results\n\n\n\n\n#\n\n\nMads.contamination\n \n \nMethod\n.\n\n\nCompute concentration for a point in space and time (x,y,z,t)\n\n\nMads.contamination(wellx, welly, wellz, n, lambda, theta, vx, vy, vz, ax, ay, az, H, x, y, z, dx, dy, dz, f, t0, t1, t; anasolfunction=\"long_bbb_ddd_iir_c\")\n\n\nArguments:\n\n\n\n\nwellx\n - observation point (well) X coordinate\n\n\nwelly\n - observation point (well) Y coordinate\n\n\nwellz\n - observation point (well) Z coordinate\n\n\nn\n - porosity\n\n\nlambda\n - first-order reaction rate\n\n\ntheta\n - groundwater flow direction\n\n\nvx\n - advective transport velocity in X direction\n\n\nvy\n - advective transport velocity in Y direction\n\n\nvz\n - advective transport velocity in Z direction\n\n\nax\n - dispersivity in X direction (longitudinal)\n\n\nay\n - dispersivity in Y direction (transverse horizontal)\n\n\naz\n - dispersivity in Y direction (transverse vertical)\n\n\nH\n - Hurst coefficient for Fractional Brownian dispersion\n\n\nx\n - X coordinate of contaminant source location\n\n\ny\n - Y coordinate of contaminant source location\n\n\nz\n - Z coordinate of contaminant source location\n\n\ndx\n - source size (extent) in X direction\n\n\ndy\n - source size (extent) in Y direction\n\n\ndz\n - source size (extent) in Z direction\n\n\nf\n - source mass flux\n\n\nt0\n - source starting time\n\n\nt1\n - source termination time\n\n\nt\n - time to compute concentration at the observation point\n\n\nanasolfunction\n : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c]\n\n\n\n\nReturns:\n\n\n\n\npredicted concentration at (wellx, welly, wellz, t)\n\n\n\n\n#\n\n\nMads.copyright\n \n \nMethod\n.\n\n\nProduce MADS copyright information\n\n\n#\n\n\nMads.create_documentation\n \n \nMethod\n.\n\n\nCreate web documentation files for Mads functions\n\n\n#\n\n\nMads.create_tests_off\n \n \nMethod\n.\n\n\nTurn off the generation of MADS tests (default)\n\n\n#\n\n\nMads.create_tests_on\n \n \nMethod\n.\n\n\nTurn on the generation of MADS tests (dangerous)\n\n\n#\n\n\nMads.createmadsproblem\n \n \nMethod\n.\n\n\nCreate a new Mads problem where the observation targets are computed based on the model predictions\n\n\n\n\nMads.createmadsproblem(infilename::AbstractString, outfilename::AbstractString)\n\n\nMads.createmadsproblem(madsdata::Associative, outfilename::AbstractString)\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative)\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::AbstractString)\n\n\n\n\nArguments:\n\n\n\n\ninfilename\n : input Mads file\n\n\noutfilename\n : output Mads file\n\n\nmadsdata\n : MADS problem dictionary\n\n\npredictions\n : dictionary of model predictions\n\n\n\n\n#\n\n\nMads.createobservations!\n \n \nMethod\n.\n\n\nCreate observations in the MADS problem dictionary based on \ntime\n and \nobservation\n arrays\n\n\n#\n\n\nMads.deleteNaN!\n \n \nMethod\n.\n\n\nDelete rows with NaN in a Dataframe \ndf\n\n\n#\n\n\nMads.display\n \n \nMethod\n.\n\n\nDisplay image file\n\n\n#\n\n\nMads.dobigdt\n \n \nMethod\n.\n\n\nPerform BIG-DT analysis\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnummodelruns\n : number of model runs\n\n\nnumhorizons\n : number of info-gap horizons of uncertainty\n\n\nmaxHorizon\n : maximum info-gap horizons of uncertainty\n\n\nnumlikelihoods\n : number of Bayesian likelihoods\n\n\n\n\nReturns:\n\n\n\n\nbigdtresults\n : dictionary with BIG-DT results\n\n\n\n\n#\n\n\nMads.dumpasciifile\n \n \nMethod\n.\n\n\nDump ASCII file\n\n\n#\n\n\nMads.dumpjsonfile\n \n \nMethod\n.\n\n\nDump a JSON file\n\n\n#\n\n\nMads.dumpwelldata\n \n \nMethod\n.\n\n\nDump well data from MADS problem dictionary into a ASCII file\n\n\n#\n\n\nMads.dumpyamlmadsfile\n \n \nMethod\n.\n\n\nDump YAML Mads file\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : file name\n\n\n\n\n#\n\n\nMads.efast\n \n \nMethod\n.\n\n\nSensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nM\n : maximum number of harmonics\n\n\ngamma\n : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4)\n\n\nseed\n : initial random seed\n\n\n\n\n#\n\n\nMads.emcee\n \n \nFunction\n.\n\n\nBayesian sampling with emcee: Goodman \n Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler\n\n\nEmcee.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1)\n\n\n\n\n\nArguments:\n\n\n\n\nllhood\n : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood())\n\n\nnumwalkers\n : number of walkers\n\n\nx0\n : normalized initial parameters (matrix of size (length(params), numwalkers))\n\n\nthinning\n : removal of any \nthinning\n realization\n\n\na\n :\n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n : final MCMC chain\n\n\nllhoodvals\n : log likelihoods of the final samples in the chain\n\n\n\n\n#\n\n\nMads.emcee\n \n \nMethod\n.\n\n\nBayesian sampling with emcee: Goodman \n Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler\n\n\nMads.emcee(madsdata; numwalkers=10, nsteps=100, burnin=100, thinning=1, seed=2016, sigma=0.01)\nMads.emcee(madsdata, p0; numwalkers=10, nsteps=100, burnin=10, thinning=1, seed=2016)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\np0\n : initial parameters (matrix of size (length(optparams), numwalkers))\n\n\nnumwalkers\n : number of walkers (if in parallel this can be the number of available processors)\n\n\nnsteps\n : number of final realizations in the chain\n\n\nburnin\n :  number of initial realizations before the MCMC are recorded\n\n\nthinning\n : removal of any \nthinning\n realization\n\n\nseed\n : initial random number seed\n\n\nsigma\n : a standard deviation parameter used to initialize the walkers\n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n : MCMC chain\n\n\nllhoodvals\n : log likelihoods of the final samples in the chain\n\n\n\n\n#\n\n\nMads.evaluatemadsexpression\n \n \nMethod\n.\n\n\nEvaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values\n\n\n#\n\n\nMads.evaluatemadsexpressions\n \n \nMethod\n.\n\n\nEvaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values\n\n\n#\n\n\nMads.filterkeys\n \n \nFunction\n.\n\n\nFilter dictionary keys based on a string or regular expression\n\n\n#\n\n\nMads.flattenmcmcarray\n \n \nMethod\n.\n\n\nFlatten the MCMC arrays\n\n\n#\n\n\nMads.forward\n \n \nMethod\n.\n\n\nPerform a forward run using the initial or provided values for the model parameters\n\n\n\n\nforward(madsdata)\n\n\nforward(madsdata, paramdict)\n\n\nforward(madsdata, paramarray)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdict\n : dictionary of model parameter values\n\n\nparamarray\n : array of model parameter values\n\n\n\n\nReturns:\n\n\n\n\nobsvalues\n : dictionary of model predictions\n\n\n\n\n#\n\n\nMads.forwardgrid\n \n \nMethod\n.\n\n\nPerform a forward run over a 3D grid defined in \nmadsdata\n using the initial or provided values for the model parameters\n\n\n\n\nforwardgrid(madsdata)\n\n\nforwardgrid(madsdata, paramvalues))\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamvalues\n : dictionary of model parameter values\n\n\n\n\nReturns:\n\n\n\n\narray3d\n : 3D array with model predictions along a 3D grid\n\n\n\n\n#\n\n\nMads.free\n \n \nMethod\n.\n\n\nUse the latest tagged versions of the Mads modules\n\n\n#\n\n\nMads.functions\n \n \nFunction\n.\n\n\nList available functions in the MADS modules:\n\n\nExamples:\n\n\nMads\n.\nfunctions\n()\n\n\nMads\n.\nfunctions\n(\nBIGUQ\n)\n\n\nMads\n.\nfunctions\n(\nget\n)\n\n\nMads\n.\nfunctions\n(\nMads\n,\n \nget\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nmodule\n : MADS module\n\n\nstring\n : matching string\n\n\n\n\n#\n\n\nMads.getdictvalues\n \n \nFunction\n.\n\n\nGet dictionary values for keys based on a string or regular expression\n\n\n#\n\n\nMads.getextension\n \n \nMethod\n.\n\n\nGet file name extension\n\n\nExample:\n\n\next = Mads.getextension(\na.mads\n) # ext = \nmads\n \n\n\n\n\n\n#\n\n\nMads.getimportantsamples\n \n \nMethod\n.\n\n\nGet important samples\n\n\nArguments:\n\n\n\n\nsamples\n : array of samples\n\n\nllhoods\n : vector of log-likelihoods\n\n\n\n\nReturns:\n\n\n\n\nimp_samples\n : array of important samples\n\n\n\n\n#\n\n\nMads.getlogparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are log-transformed (\nlog\n)\n\n\n#\n\n\nMads.getmadsdir\n \n \nMethod\n.\n\n\nGet the directory where currently Mads is running\n\n\nproblemdir = Mads.getmadsdir()\n\n\n#\n\n\nMads.getmadsinputfile\n \n \nMethod\n.\n\n\nGet the default MADS input file set as a MADS global variable using \nsetmadsinputfile(filename)\n\n\nMads.getmadsinputfile()\n\n\nArguments: \nnone\n\n\nReturns:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\n#\n\n\nMads.getmadsproblemdir\n \n \nMethod\n.\n\n\nGet the directory where the Mads data file is located\n\n\nMads.getmadsproblemdir(madsdata)\n\n\nExample:\n\n\nmadsdata = Mads.loadmadsproblemdir(\n../../a.mads\n)\nmadsproblemdir = Mads.getmadsproblemdir(madsdata)\n\n\n\n\n\nwhere \nmadsproblemdir\n = \n\"../../\"\n\n\n#\n\n\nMads.getmadsrootname\n \n \nMethod\n.\n\n\nGet the MADS problem root name\n\n\nmadsrootname = Mads.getmadsrootname(madsdata)\n\n\n#\n\n\nMads.getnonlogparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are NOT log-transformed (\nlog\n)\n\n\n#\n\n\nMads.getnonoptparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are NOT optimized (\nopt\n)\n\n\n#\n\n\nMads.getobsdist\n \n \nMethod\n.\n\n\nGet an array with \ndist\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\n#\n\n\nMads.getobsdist\n \n \nMethod\n.\n\n\nGet an array with \ndist\n values for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getobskeys\n \n \nMethod\n.\n\n\nGet keys for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getobslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\n#\n\n\nMads.getobslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getobsmax\n \n \nMethod\n.\n\n\nGet an array with \nmax\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\n#\n\n\nMads.getobsmax\n \n \nMethod\n.\n\n\nGet an array with \nmax\n values for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getobsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\n#\n\n\nMads.getobsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getobstarget\n \n \nMethod\n.\n\n\nGet an array with \ntarget\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\n#\n\n\nMads.getobstarget\n \n \nMethod\n.\n\n\nGet an array with \ntarget\n values for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getobstime\n \n \nMethod\n.\n\n\nGet an array with \ntime\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\n#\n\n\nMads.getobstime\n \n \nMethod\n.\n\n\nGet an array with \ntime\n values for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getobsweight\n \n \nMethod\n.\n\n\nGet an array with \nweight\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\n#\n\n\nMads.getobsweight\n \n \nMethod\n.\n\n\nGet an array with \nweight\n values for all observations in the MADS problem dictionary\n\n\n#\n\n\nMads.getoptparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are optimized (\nopt\n)\n\n\n#\n\n\nMads.getparamdict\n \n \nMethod\n.\n\n\nGet dictionary with all parameters and their respective initial values\n\n\nMads.getparamdict(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nparamdict\n : dictionary with all parameters and their respective initial values\n\n\n\n\n#\n\n\nMads.getparamdistributions\n \n \nMethod\n.\n\n\nGet probabilistic distributions of all parameters in the MADS problem dictionary\n\n\nMads.getparamdistributions(madsdata; init_dist=false)\n\n\nNote:\n\n\nProbabilistic distribution of parameters can be defined only if \ndist\n or \nmin\n/\nmax\n model parameter fields are specified in the MADS problem dictionary \nmadsdata\n.\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\n\n\n#\n\n\nMads.getparamkeys\n \n \nMethod\n.\n\n\nGet keys of all parameters in the MADS dictionary\n\n\nMads.getparamkeys(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nparamkeys\n : array with the keys of all parameters in the MADS dictionary\n\n\n\n\n#\n\n\nMads.getparamsinit\n \n \nMethod\n.\n\n\nGet an array with \ninit\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamsinit\n \n \nMethod\n.\n\n\nGet an array with \ninit\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamsinit_max\n \n \nMethod\n.\n\n\nGet an array with \ninit_max\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamsinit_max\n \n \nMethod\n.\n\n\nGet an array with \ninit_max\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamsinit_min\n \n \nMethod\n.\n\n\nGet an array with \ninit_min\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamsinit_min\n \n \nMethod\n.\n\n\nGet an array with \ninit_min\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamslongname\n \n \nMethod\n.\n\n\nGet an array with \nlongname\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamslongname\n \n \nMethod\n.\n\n\nGet an array with \nlongname\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamsmax\n \n \nMethod\n.\n\n\nGet an array with \nmax\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamsmax\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamsplotname\n \n \nMethod\n.\n\n\nGet an array with \nplotname\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamsplotname\n \n \nMethod\n.\n\n\nGet an array with \nplotname\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamsstep\n \n \nMethod\n.\n\n\nGet an array with \nstep\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamsstep\n \n \nMethod\n.\n\n\nGet an array with \nstep\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getparamstype\n \n \nMethod\n.\n\n\nGet an array with \ntype\n values for parameters defined by \nparamkeys\n\n\n#\n\n\nMads.getparamstype\n \n \nMethod\n.\n\n\nGet an array with \ntype\n values for all the MADS model parameters\n\n\n#\n\n\nMads.getprocs\n \n \nMethod\n.\n\n\nGet the number of processors\n\n\n#\n\n\nMads.getrestartdir\n \n \nFunction\n.\n\n\nGet the directory where restarts will be stored.\n\n\n#\n\n\nMads.getrootname\n \n \nMethod\n.\n\n\nGet file name root\n\n\nExample:\n\n\nr = Mads.getrootname(\na.rnd.dat\n) # r = \na\n\nr = Mads.getrootname(\na.rnd.dat\n, first=false) # r = \na.rnd\n\n\n\n\n\n\n#\n\n\nMads.getsourcekeys\n \n \nMethod\n.\n\n\nGet keys of all source parameters in the MADS dictionary\n\n\nMads.getsourcekeys(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nsourcekeys\n : array with keys of all source parameters in the MADS dictionary\n\n\n\n\n#\n\n\nMads.gettarget\n \n \nMethod\n.\n\n\nGet observation target\n\n\n#\n\n\nMads.gettargetkeys\n \n \nMethod\n.\n\n\nGet keys for all targets (observations with weights greater than zero) in the MADS problem dictionary\n\n\n#\n\n\nMads.gettime\n \n \nMethod\n.\n\n\nGet observation time\n\n\n#\n\n\nMads.getweight\n \n \nMethod\n.\n\n\nGet observation weight\n\n\n#\n\n\nMads.getwellkeys\n \n \nMethod\n.\n\n\nGet keys for all wells in the MADS problem dictionary\n\n\n#\n\n\nMads.getwellsdata\n \n \nMethod\n.\n\n\nGer \nWells\n class spatial and temporal data\n\n\n#\n\n\nMads.haskeyword\n \n \nMethod\n.\n\n\nCheck for a \nkeyword\n in a class within the Mads dictionary \nmadsdata\n\n\n\n\nMads.haskeyword(madsdata, keyword)\n\n\nMads.haskeyword(madsdata, class, keyword)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nclass\n : dictionary class; if not provided searches for \nkeyword\n in \nProblem\n class\n\n\nkeyword\n : dictionary key\n\n\n\n\nReturns: \ntrue\n or \nfalse\n\n\nExamples:\n\n\n\n\nMads.haskeyword(madsdata, \"disp\")\n ... searches in \nProblem\n class by default\n\n\nMads.haskeyword(madsdata, \"Wells\", \"R-28\")\n ... searches in \nWells\n class for a keyword \"R-28\"\n\n\n\n\n#\n\n\nMads.help\n \n \nMethod\n.\n\n\nProduce MADS help information\n\n\n#\n\n\nMads.importeverywhere\n \n \nMethod\n.\n\n\nImport function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations.\n\n\n#\n\n\nMads.indexkeys\n \n \nFunction\n.\n\n\nFind indexes for dictionary keys based on a string or regular expression\n\n\n#\n\n\nMads.ins_obs\n \n \nMethod\n.\n\n\nApply Mads instruction file \ninstructionfilename\n to read model input file \ninputfilename\n\n\n#\n\n\nMads.instline2regexs\n \n \nMethod\n.\n\n\nConvert an instruction line in the Mads instruction file into regular expressions\n\n\n#\n\n\nMads.invobsweights!\n \n \nMethod\n.\n\n\nInversely proportional observation weights in the MADS problem dictionary\n\n\n#\n\n\nMads.invwellweights!\n \n \nMethod\n.\n\n\nInversely proportional observation weights in the MADS problem dictionary\n\n\n#\n\n\nMads.islog\n \n \nMethod\n.\n\n\nIs parameter with key \nparameterkey\n log-transformed?\n\n\n#\n\n\nMads.isobs\n \n \nMethod\n.\n\n\nIs a dictionary containing all the observations\n\n\n#\n\n\nMads.isopt\n \n \nMethod\n.\n\n\nIs parameter with key \nparameterkey\n optimizable?\n\n\n#\n\n\nMads.isparam\n \n \nMethod\n.\n\n\nIs the dictionary containing all the parameters\n\n\n#\n\n\nMads.levenberg_marquardt\n \n \nFunction\n.\n\n\nLevenberg-Marquardt optimization\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\nroot\n : Mads problem root name\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda [eps(Float32)]\n\n\nlambda_scale\n : lambda scaling factor\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nlambda_nu\n : lambda multiplication factor \u03bd [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nalwaysDoJacobian\n: computer Jacobian each iteration [false]\n\n\ncallback\n : call back function for debugging\n\n\n\n\n#\n\n\nMads.loadasciifile\n \n \nMethod\n.\n\n\nLoad ASCII file\n\n\n#\n\n\nMads.loadjsonfile\n \n \nMethod\n.\n\n\nLoad a JSON file\n\n\n#\n\n\nMads.loadmadsfile\n \n \nMethod\n.\n\n\nLoad MADS input file defining a MADS problem dictionary\n\n\n\n\nMads.loadmadsfile(filename)\n\n\nMads.loadmadsfile(filename; julia=false)\n\n\nMads.loadmadsfile(filename; julia=true)\n\n\n\n\nArguments:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\njulia\n : if \ntrue\n, force using \njulia\n parsing functions; if \nfalse\n (default), use \npython\n parsing functions [boolean]\n\n\n\n\nReturns:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\n\n\nExample: \nmd = loadmadsfile(\"input_file_name.mads\")\n\n\n#\n\n\nMads.localsa\n \n \nMethod\n.\n\n\nLocal sensitivity analysis based on eigen analysis of covariance matrix\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\npar\n : parameter set\n\n\nobs\n : observations for the parameter set\n\n\n\n\n#\n\n\nMads.long_tests_off\n \n \nMethod\n.\n\n\nTurn off execution of long MADS tests (default)\n\n\n#\n\n\nMads.long_tests_on\n \n \nMethod\n.\n\n\nTurn on execution of long MADS tests (dangerous)\n\n\n#\n\n\nMads.madscritical\n \n \nMethod\n.\n\n\nMADS critical error messages\n\n\n#\n\n\nMads.madsdebug\n \n \nFunction\n.\n\n\nMADS debug messages (controlled by \nquiet\n and \ndebuglevel\n)\n\n\n#\n\n\nMads.madserror\n \n \nMethod\n.\n\n\nMADS error messages\n\n\n#\n\n\nMads.madsinfo\n \n \nFunction\n.\n\n\nMADS information/status messages (controlled by quiet\nand\nverbositylevel`)\n\n\n#\n\n\nMads.madsoutput\n \n \nFunction\n.\n\n\nMADS output (controlled by quiet\nand\nverbositylevel`)\n\n\n#\n\n\nMads.madswarn\n \n \nMethod\n.\n\n\nMADS warning messages\n\n\n#\n\n\nMads.makearrayconditionalloglikelihood\n \n \nMethod\n.\n\n\nMake a conditional log likelihood function that accepts an array containing the opt parameters' values\n\n\n#\n\n\nMads.makearrayfunction\n \n \nFunction\n.\n\n\nMake a version of the function \nf\n that accepts an array containing the optimal parameters' values\n\n\nMads.makearrayfunction(madsdata, f)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nf\n : ...\n\n\n\n\nReturns:\n\n\n\n\narrayfunction\n : function accepting an array containing the optimal parameters' values\n\n\n\n\n#\n\n\nMads.makearrayloglikelihood\n \n \nMethod\n.\n\n\nMake a log likelihood function that accepts an array containing the opt parameters' values\n\n\n#\n\n\nMads.makebigdt!\n \n \nMethod\n.\n\n\nSetup BIG-DT problem\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nchoice\n : dictionary of BIG-DT choices (scenarios)\n\n\n\n\nReturns:\n\n\n\n\nbigdtproblem\n : BIG-DT problem type\n\n\n\n\n#\n\n\nMads.makebigdt\n \n \nMethod\n.\n\n\nSetup BIG-DT problem\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nchoice\n : dictionary of BIG-DT choices (scenarios)\n\n\n\n\nReturns:\n\n\n\n\nbigdtproblem\n : BIG-DT problem type\n\n\n\n\n#\n\n\nMads.makecomputeconcentrations\n \n \nMethod\n.\n\n\nCreate a function to compute concentrations for all the observation points using Anasol\n\n\nMads.makecomputeconcentrations(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\ncomputeconcentrations\n : function to compute concentrations; \ncomputeconcentrations\n returns a dictionary of observations and model predicted concentrations\n\n\n\n\nExamples:\n\n\ncomputeconcentrations()\n\n\nor\n\n\ncomputeconcentrations = Mads.makecomputeconcentrations(madsdata)\nparamkeys = Mads.getparamkeys(madsdata)\nparamdict = OrderedDict(zip(paramkeys, map(key-\nmadsdata[\nParameters\n][key][\ninit\n], paramkeys)))\nforward_preds = computeconcentrations(paramdict)\n\n\n\n\n\n#\n\n\nMads.makedoublearrayfunction\n \n \nFunction\n.\n\n\nMake a version of the function \nf\n that accepts an array containing the optimal parameters' values, and returns an array of observations\n\n\nMads.makedoublearrayfunction(madsdata, f)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nf\n : ...\n\n\n\n\nReturns:\n\n\n\n\ndoublearrayfunction\n : function accepting an array containing the optimal parameters' values, and returning an array of observations\n\n\n\n\n#\n\n\nMads.makelmfunctions\n \n \nMethod\n.\n\n\nMake forward model, gradient, objective functions needed for Levenberg-Marquardt optimization\n\n\n#\n\n\nMads.makelocalsafunction\n \n \nMethod\n.\n\n\nMake gradient function needed for local sensitivity analysis\n\n\n#\n\n\nMads.makelogprior\n \n \nMethod\n.\n\n\nMake a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary \nmadsdata\n\n\n#\n\n\nMads.makemadscommandfunction\n \n \nMethod\n.\n\n\nMake MADS function to execute the model defined in the MADS problem dictionary \nmadsdata\n\n\nUsage:\n\n\nMads\n.\nmakemadscommandfunction\n(\nmadsdata\n)\n\n\n\n\n\n\nMADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\nModel\n : execute a Julia function defined in an input Julia file. The function that should accept a \nparameter\n dictionary with all the model parameters as an input argument and should return an \nobservation\n dictionary with all the model predicted observations. MADS will execute the first function defined in the file.\n\n\nMADS model\n : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\nJulia model\n : execute an internal Julia function that accepts a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\nCommand\n : execute an external UNIX command or script that will execute an external model.\n\n\nJulia command\n : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an \nobservation\n dictionary with model predictions.\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model.\n\n\nOnly \nCommand\n uses different approaches to get back the model outputs. The script defined under \nJulia command\n parses the model outputs using Julia.\n\n\nThe available options for writing model inputs and reading model outputs are as follows.\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at http://mads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at http://mads.lanl.gov\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file\n\n\n\n\n#\n\n\nMads.makemadscommandfunctionandgradient\n \n \nMethod\n.\n\n\nMake MADS forward \n gradient functions for the model defined in the MADS problem dictionary \nmadsdata\n\n\n#\n\n\nMads.makemadscommandgradient\n \n \nMethod\n.\n\n\nMake MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary \nmadsdata\n\n\n#\n\n\nMads.makemadsconditionalloglikelihood\n \n \nMethod\n.\n\n\nMake a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary \nmadsdata\n.\n\n\n#\n\n\nMads.makemadsloglikelihood\n \n \nMethod\n.\n\n\nMake a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under \nLogLikelihood\n or computed internally.\n\n\n#\n\n\nMads.maxtorealmaxFloat32!\n \n \nMethod\n.\n\n\nScale down values larger than max(Float32) in a Dataframe \ndf\n so that Gadfly can plot the data\n\n\n#\n\n\nMads.modelinformationcriteria\n \n \nFunction\n.\n\n\nModel section information criteria\n\n\n#\n\n\nMads.modobsweights!\n \n \nMethod\n.\n\n\nModify (multiply) observation weights in the MADS problem dictionary\n\n\n#\n\n\nMads.modwellweights!\n \n \nMethod\n.\n\n\nModify (multiply) well weights in the MADS problem dictionary\n\n\n#\n\n\nMads.montecarlo\n \n \nMethod\n.\n\n\nMonte Carlo analysis\n\n\nMads.montecarlo(madsdata; N=100)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary sampling uniformly between mins/maxs\n\n\nN\n : number of samples (default = 100)\n\n\n\n\nReturns:\n\n\n\n\noutputdicts\n : parameter dictionary containing the data arrays\n\n\n\n\nDumps:\n\n\n\n\nYAML output file with the parameter dictionary containing the data arrays (\nmads_root_name\n.mcresults.yaml\n)\n\n\n\n\n#\n\n\nMads.naive_get_deltax\n \n \nMethod\n.\n\n\nNaive Levenberg-Marquardt optimization: get the LM parameter space step\n\n\n#\n\n\nMads.naive_levenberg_marquardt\n \n \nFunction\n.\n\n\nNaive Levenberg-Marquardt optimization\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\no\n : objective function\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nlambda\n : initial Levenberg-Marquardt lambda [100]\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\n\n\n#\n\n\nMads.naive_lm_iteration\n \n \nMethod\n.\n\n\nNaive Levenberg-Marquardt optimization: perform LM iteration\n\n\n#\n\n\nMads.noplot\n \n \nMethod\n.\n\n\nDisable MADS plotting\n\n\n#\n\n\nMads.obslineismatch\n \n \nMethod\n.\n\n\nMatch an instruction line in the Mads instruction file with model input file\n\n\n#\n\n\nMads.of\n \n \nMethod\n.\n\n\nCompute objective function\n\n\n#\n\n\nMads.paramarray2dict\n \n \nMethod\n.\n\n\nConvert parameter array to a parameter dictionary of arrays\n\n\n#\n\n\nMads.parametersample\n \n \nFunction\n.\n\n\nIndependent sampling of model parameters defined in the MADS problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumsamples\n : number of samples\n\n\nparameterkey\n : model parameter key\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\n\n\n#\n\n\nMads.paramrand\n \n \nMethod\n.\n\n\nRandom numbers for a MADS model parameter defined by \nparameterkey\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparameterkey\n : model parameter key\n\n\nnumsamples\n : number of samples\n\n\nparamdist\n : dictionary with parameter distributions\n\n\n\n\n#\n\n\nMads.parsemadsdata!\n \n \nMethod\n.\n\n\nParse loaded Mads problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\n\n\n#\n\n\nMads.partialof\n \n \nMethod\n.\n\n\nCompute the sum of squared residuals for observations that match a regular expression\n\n\n#\n\n\nMads.plotgrid\n \n \nMethod\n.\n\n\nPlot a 3D grid solution based on model predictions in array \ns\n, initial parameters, or user provided parameter values\n\n\nplotgrid(madsdata, s; addtitle=true, title=\n, filename=\n, format=\n)\nplotgrid(madsdata; addtitle=true, title=\n, filename=\n, format=\n)\nplotgrid(madsdata, parameters; addtitle=true, title=\n, filename=\n, format=\n)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparameters\n : dictionary with model parameters\n\n\ns\n : model predictions array\n\n\naddtitle\n : add plot title [true]\n\n\ntitle\n : plot title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.plotmadsproblem\n \n \nMethod\n.\n\n\nPlot contaminant sources and wells defined in MADS problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nkeyword\n : to be added in the filename\n\n\n\n\n#\n\n\nMads.plotmass\n \n \nMethod\n.\n\n\nPlot injected/reduced contaminant mass\n\n\n\n\nMads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\")\n\n\n\n\nArguments:\n\n\n\n\nlambda\n : array with all the lambda values\n\n\nmass_injected\n : array with associated total injected mass\n\n\nmass_reduced\n : array with associated total reduced mass\n\n\nfilename\n : output filename for the generated plot\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nDumps: image file with name \nfilename\n and in specified \nformat\n\n\n#\n\n\nMads.plotmatches\n \n \nMethod\n.\n\n\nPlot the matches between model predictions and observations\n\n\nplotmatches(madsdata; filename=\n, format=\n)\nplotmatches(madsdata, param; filename=\n, format=\n)\nplotmatches(madsdata, result; filename=\n, format=\n)\nplotmatches(madsdata, result, r\nNO3\n; filename=\n, format=\n)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparam\n : dictionary with model parameters\n\n\nresult\n : dictionary with model predictions\n\n\nrx\n : regular expression to filter the outputs\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.plotobsSAresults\n \n \nMethod\n.\n\n\nPlot the sensitivity analysis results for the observations\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nfilter\n : string or regex to plot only observations containing \nfilter\n\n\nkeyword\n : to be added in the auto-generated filename\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.plotrobustnesscurves\n \n \nMethod\n.\n\n\nPlot BIG-DT robustness curves\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nbigdtresults\n : BIG-DT results\n\n\nfilename\n : output file name used to dump plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.plotseries\n \n \nMethod\n.\n\n\nCreate plots of data series\n\n\nArguments:\n\n\n\n\nX\n : matrix with the series data\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : x-axis title\n\n\nytitle\n : y-axis title\n\n\ntitle\n : plot title\n\n\nname\n : series name\n\n\ncombined\n : \ntrue\n by default\n\n\n\n\n#\n\n\nMads.plotwellSAresults\n \n \nMethod\n.\n\n\nPlot the sensitivity analysis results for a given well in the MADS problem dictionary (wells class expected)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nwellname\n : well name\n\n\nxtitle\n : x-axis title\n\n\nytitle\n : y-axis title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.plotwellSAresults\n \n \nMethod\n.\n\n\nPlot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nxtitle\n : x-axis title\n\n\nytitle\n : y-axis title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.printSAresults\n \n \nMethod\n.\n\n\nPrint sensitivity analysis results\n\n\n#\n\n\nMads.quietoff\n \n \nMethod\n.\n\n\nMake MADS not quiet\n\n\n#\n\n\nMads.quieton\n \n \nMethod\n.\n\n\nMake MADS quiet\n\n\n#\n\n\nMads.readasciipredictions\n \n \nMethod\n.\n\n\nRead MADS predictions from an ASCII file\n\n\n#\n\n\nMads.readjsonpredictions\n \n \nMethod\n.\n\n\nRead MADS model predictions from a JSON file\n\n\n#\n\n\nMads.readobservations\n \n \nFunction\n.\n\n\nRead observations\n\n\n#\n\n\nMads.readobservations_cmads\n \n \nMethod\n.\n\n\nRead observations using C Mads library\n\n\n#\n\n\nMads.readyamlpredictions\n \n \nMethod\n.\n\n\nRead MADS model predictions from a YAML file \nfilename\n\n\n#\n\n\nMads.regexs2obs\n \n \nMethod\n.\n\n\nGet observations for a set of regular expressions\n\n\n#\n\n\nMads.reload\n \n \nMethod\n.\n\n\nReload Mads modules\n\n\n#\n\n\nMads.resetmodelruns\n \n \nMethod\n.\n\n\nReset the model runs count to be equal to zero\n\n\n#\n\n\nMads.residuals\n \n \nMethod\n.\n\n\nCompute residuals\n\n\n#\n\n\nMads.reweighsamples\n \n \nMethod\n.\n\n\nReweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\npredictions\n : the model predictions for each of the samples\n\n\noldllhoods\n : the log likelihoods of the parameters in the old distribution\n\n\n\n\nReturns:\n\n\n\n\nnewllhoods\n : vector of log-likelihoods after reweighing\n\n\n\n\n#\n\n\nMads.rosenbrock\n \n \nMethod\n.\n\n\nRosenbrock test function\n\n\n#\n\n\nMads.rosenbrock2_gradient_lm\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function\n\n\n#\n\n\nMads.rosenbrock2_lm\n \n \nMethod\n.\n\n\nRosenbrock test function (more difficult to solve)\n\n\n#\n\n\nMads.rosenbrock_gradient!\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function\n\n\n#\n\n\nMads.rosenbrock_gradient_lm\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely)\n\n\n#\n\n\nMads.rosenbrock_hessian!\n \n \nMethod\n.\n\n\nParameter Hessian of the Rosenbrock test function\n\n\n#\n\n\nMads.rosenbrock_lm\n \n \nMethod\n.\n\n\nRosenbrock test function for LM optimization (returns the 2 components separetely)\n\n\n#\n\n\nMads.runcmd\n \n \nFunction\n.\n\n\nRun external command and pipe stdout and stderr\n\n\n#\n\n\nMads.saltelli\n \n \nMethod\n.\n\n\nSaltelli sensitivity analysis\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nseed\n : initial random seed\n\n\nrestartdir\n : directory where files will be stored containing model results for fast simulation restarts\n\n\nparallel\n : set to true if the model runs should be performed in parallel\n\n\n\n\n#\n\n\nMads.saltellibrute\n \n \nMethod\n.\n\n\nSaltelli sensitivity analysis (brute force)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nseed\n : initial random seed\n\n\n\n\n#\n\n\nMads.saltellibruteparallel\n \n \nMethod\n.\n\n\nParallel version of saltellibrute\n\n\n#\n\n\nMads.saltelliparallel\n \n \nMethod\n.\n\n\nParallel version of saltelli\n\n\n#\n\n\nMads.saltelliprintresults2\n \n \nMethod\n.\n\n\nPrint sensitivity analysis results (method 2)\n\n\n#\n\n\nMads.savecalibrationresults\n \n \nMethod\n.\n\n\nSave calibration results\n\n\n#\n\n\nMads.savemadsfile\n \n \nFunction\n.\n\n\nSave MADS problem dictionary \nmadsdata\n in MADS input file \nfilename\n\n\n\n\nMads.savemadsfile(madsdata)\n\n\nMads.savemadsfile(madsdata, \"test.mads\")\n\n\nMads.savemadsfile(madsdata, parameters, \"test.mads\")\n\n\nMads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\nparameters\n : Dictinary with parameters (optional)\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\njulia\n : if \ntrue\n use Julia JSON module to save\n\n\nexplicit\n : if \ntrue\n ignores MADS YAML file modifications and rereads the original input file\n\n\n\n\n#\n\n\nMads.savemcmcresults\n \n \nMethod\n.\n\n\nSave MCMC chain in a file\n\n\n#\n\n\nMads.scatterplotsamples\n \n \nMethod\n.\n\n\nCreate histogram/scatter plots of model parameter samples\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nsamples\n : matrix with model parameters\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.searchdir\n \n \nMethod\n.\n\n\nGet files in the current directory or in a directory defined by \npath\n matching pattern \nkey\n which can be a string or regular expression\n\n\n\n\nMads.searchdir(key)\n\n\nMads.searchdir(key; path = \".\")\n\n\n\n\nArguments:\n\n\n\n\nkey\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\npath\n : search directory for the mads input files\n\n\n\n\nReturns:\n\n\n\n\nfilename\n : an array with file names matching the pattern in the specified directory\n\n\n\n\n#\n\n\nMads.set_nprocs_per_task\n \n \nFunction\n.\n\n\nSet number of processors needed for each parallel task at each node\n\n\n#\n\n\nMads.setallparamsoff!\n \n \nMethod\n.\n\n\nSet all parameters OFF\n\n\n#\n\n\nMads.setallparamson!\n \n \nMethod\n.\n\n\nSet all parameters ON\n\n\n#\n\n\nMads.setdebuglevel\n \n \nMethod\n.\n\n\nSet MADS debug level\n\n\n#\n\n\nMads.setdefaultplotformat\n \n \nMethod\n.\n\n\nSet the default plot format (\nSVG\n is the default format)\n\n\n#\n\n\nMads.setdir\n \n \nMethod\n.\n\n\nSet the working directory (for parallel environments)\n\n\n@everywhere Mads.setdir()\n@everywhere Mads.setdir(\n/home/monty\n)\n\n\n\n\n\n#\n\n\nMads.setdynamicmodel\n \n \nMethod\n.\n\n\nSet Dynamic Model for MADS model calls using internal Julia functions\n\n\n#\n\n\nMads.setmadsinputfile\n \n \nMethod\n.\n\n\nSet a default MADS input file\n\n\nMads.setmadsinputfile(filename)\n\n\nArguments:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\n#\n\n\nMads.setnewmadsfilename\n \n \nMethod\n.\n\n\nSet new mads file name\n\n\n#\n\n\nMads.setobservationtargets!\n \n \nMethod\n.\n\n\nSet observations (calibration targets) in the MADS problem dictionary based on a \npredictions\n dictionary\n\n\n#\n\n\nMads.setobstime!\n \n \nFunction\n.\n\n\nSet observation time based on the observation name in the MADS problem dictionary\n\n\nUsage:\n\n\nMads.setobstime!(madsdata, separator)\nMads.setobstime!(madsdata, regex)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nseparator\n : string to separator\n\n\nregex\n : regular expression to match\n\n\n\n\nExamples:\n\n\nMads.setobstime!(madsdata, \n_t\n)\nMads.setobstime!(madsdata, r\n[A-x]*_t([0-9,.]+)\n)\n\n\n\n\n\n#\n\n\nMads.setobsweights!\n \n \nMethod\n.\n\n\nSet observation weights in the MADS problem dictionary\n\n\n#\n\n\nMads.setparamoff!\n \n \nMethod\n.\n\n\nSet a specific parameter with a key \nparameterkey\n OFF\n\n\n#\n\n\nMads.setparamon!\n \n \nMethod\n.\n\n\nSet a specific parameter with a key \nparameterkey\n ON\n\n\n#\n\n\nMads.setparamsdistnormal!\n \n \nMethod\n.\n\n\nSet normal parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMads.setparamsdistnormal!(madsdata, mean, stddev)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nmean\n : array with the mean values\n\n\nstddev\n : array with the standard deviation values\n\n\n\n\n#\n\n\nMads.setparamsdistuniform!\n \n \nMethod\n.\n\n\nSet uniform parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMads.setparamsdistuniform!(madsdata, min, max)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nmin\n : array with the minimum values\n\n\nmax\n : array with the maximum values\n\n\n\n\n#\n\n\nMads.setparamsinit!\n \n \nMethod\n.\n\n\nSet initial parameter guesses in the MADS dictionary\n\n\nMads.setparamsinit!(madsdata, paramdict)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdict\n : dictionary with initial model parameter values\n\n\n\n\n#\n\n\nMads.setplotfileformat\n \n \nMethod\n.\n\n\nSet image file \nformat\n based on the \nfilename\n extension, or sets the \nfilename\n extension based on the requested \nformat\n. The default \nformat\n is \nSVG\n. \nPNG\n, \nPDF\n, \nESP\n, and \nPS\n are also supported.\n\n\nMads.setplotfileformat(filename::AbstractString, format::AbstractString)\n\n\nArguments:\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nReturns:\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\n#\n\n\nMads.setprocs\n \n \nMethod\n.\n\n\nSet the number of processors to \nnp\n and the number of threads to \nnt\n\n\nUsage:\n\n\nMads.setprocs(4)\nMads.setprocs(4, 8)\n\n\n\n\n\nArguments:\n\n\n\n\nnp\n : number of processors\n\n\nnt\n : number of threads\n\n\n\n\n#\n\n\nMads.setprocs\n \n \nMethod\n.\n\n\nSet the available processors based on environmental variables. Supports SLURM only at the moment.\n\n\nUsage:\n\n\nMads.setprocs()\nMads.setprocs(ntasks_per_node=4)\nMads.setprocs(ntasks_per_node=32, mads_servers=true)\nMads.setprocs(ntasks_per_node=64, machinenames=[\nmadsmax\n, \nmadszem\n])\nMads.setprocs(ntasks_per_node=64, mads_servers=true, exename=\n/home/monty/bin/julia\n, dir=\n/home/monty\n)\n\n\n\n\n\nOptional arguments:\n\n\n\n\nntasks_per_node\n : number of parallel tasks per\n\n\nnprocs_per_task\n : number of processors needed for each parallel task at each node\n\n\nmachinenames\n : array with machines names to invoked\n\n\ndir\n : common directory shared by all the jobs\n\n\nexename\n : location of the julia executable (the same version of julia is needed on all the workers)\n\n\nmads_servers\n : if \ntrue\n use MADS servers (LANL only)\n\n\nquiet\n : suppress output [default \ntrue\n]\n\n\ntest\n : test the servers and connect to each one ones at a time [default \nfalse\n]\n\n\n\n\n#\n\n\nMads.setseed\n \n \nMethod\n.\n\n\nSet current seed\n\n\n#\n\n\nMads.settarget!\n \n \nMethod\n.\n\n\nSet observation target\n\n\n#\n\n\nMads.settime!\n \n \nMethod\n.\n\n\nSet observation time\n\n\n#\n\n\nMads.setverbositylevel\n \n \nMethod\n.\n\n\nSet MADS verbosity level\n\n\n#\n\n\nMads.setweight!\n \n \nMethod\n.\n\n\nSet observation weight\n\n\n#\n\n\nMads.setwellweights!\n \n \nMethod\n.\n\n\nSet well weights in the MADS problem dictionary\n\n\n#\n\n\nMads.showallparameters\n \n \nMethod\n.\n\n\nShow all parameters in the MADS problem dictionary\n\n\n#\n\n\nMads.showobservations\n \n \nMethod\n.\n\n\nShow observations in the MADS problem dictionary\n\n\n#\n\n\nMads.showparameters\n \n \nMethod\n.\n\n\nShow optimizable parameters in the MADS problem dictionary\n\n\n#\n\n\nMads.sinetransform\n \n \nMethod\n.\n\n\nSine transformation of model parameters\n\n\n#\n\n\nMads.sinetransformfunction\n \n \nMethod\n.\n\n\nSine transformation of a function\n\n\n#\n\n\nMads.sinetransformgradient\n \n \nMethod\n.\n\n\nSine transformation of a gradient function\n\n\n#\n\n\nMads.spaghettiplot\n \n \nMethod\n.\n\n\nGenerate a combined spaghetti plot for the \nselected\n (\ntype != null\n) model parameter\n\n\nMads.spaghettiplot(madsdata, paramdictarray; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplot(madsdata, obsmdictarray; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplot(madsdata, number_of_samples; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdictarray\n : parameter dictionary array containing the data arrays to be plotted\n\n\nobsdictarray\n : observation dictionary array containing the data arrays to be plotted\n\n\nnumber_of_samples\n : number of samples\n\n\nfilename\n : output file name used to output the produced plots\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots (if \nfilename\n is not defined)\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : \nx\n axis title\n\n\nytitle\n : \ny\n axis title\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n [default] or \nfalse\n)\n\n\nseed\n : initial random seed\n\n\n\n\nReturns: \nnone\n\n\nDumps:\n\n\n\n\nImage file with a spaghetti plot (\nmads_rootname\n-\nkeyword\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\n#\n\n\nMads.spaghettiplots\n \n \nMethod\n.\n\n\nGenerate separate spaghetti plots for each \nselected\n (\ntype != null\n) model parameter\n\n\nMads.spaghettiplots(madsdata, paramdictarray; format=\n, keyword=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplots(madsdata, number_of_samples; format=\n, keyword=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdictarray\n : parameter dictionary containing the data arrays to be plotted\n\n\nnumber_of_samples\n : number of samples\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : \nx\n axis title\n\n\nytitle\n : \ny\n axis title\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n [default] or \nfalse\n)\n\n\nseed\n : initial random seed\n\n\n\n\nDumps:\n\n\n\n\nA series of image files with spaghetti plots for each \nselected\n (\ntype != null\n) model parameter (\nmads_rootname\n-\nkeyword\n-\nparam_key\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\n#\n\n\nMads.sprintf\n \n \nMethod\n.\n\n\nConvert \n@sprintf\n macro into \nsprintf\n function\n\n\n#\n\n\nMads.status\n \n \nMethod\n.\n\n\nStatus of the Mads modules\n\n\n#\n\n\nMads.tag\n \n \nFunction\n.\n\n\nTag the Mads modules with a default argument \n:patch\n\n\n#\n\n\nMads.test\n \n \nFunction\n.\n\n\nExecute Mads tests (the tests will be in parallel if processors are defined)\n\n\n#\n\n\nMads.testj\n \n \nFunction\n.\n\n\nExecute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial)\n\n\n#\n\n\nMads.void2nan!\n \n \nMethod\n.\n\n\nConvert Void's into NaN's in a dictionary\n\n\n#\n\n\nMads.weightedstats\n \n \nMethod\n.\n\n\nGet weighted mean and variance samples\n\n\nArguments:\n\n\n\n\nsamples\n : array of samples\n\n\nllhoods\n : vector of log-likelihoods\n\n\n\n\nReturns:\n\n\n\n\nmean\n : vector of sample means\n\n\nvar\n : vector of sample variances\n\n\n\n\n#\n\n\nMads.welloff!\n \n \nMethod\n.\n\n\nTurn off a specific well in the MADS problem dictionary\n\n\n#\n\n\nMads.wellon!\n \n \nMethod\n.\n\n\nTurn on a specific well in the MADS problem dictionary\n\n\n#\n\n\nMads.wells2observations!\n \n \nMethod\n.\n\n\nConvert \nWells\n class to \nObservations\n class in the MADS problem dictionary\n\n\n#\n\n\nMads.writeparameters\n \n \nMethod\n.\n\n\nWrite parameters\n\n\n#\n\n\nMads.writeparameters\n \n \nMethod\n.\n\n\nWrite initial parameters\n\n\n#\n\n\nMads.writeparametersviatemplate\n \n \nMethod\n.\n\n\nWrite \nparameters\n via MADS template (\ntemplatefilename\n) to an output file (\noutputfilename\n)", 
            "title": "Mads"
        }, 
        {
            "location": "/Modules/Mads/#madsjl", 
            "text": "Documentation for Mads.jl  #  Mads.addsource!     Function .  Add an additional contamination source  #  Mads.addsourceparameters!     Method .  Add contaminant source parameters  #  Mads.allwellsoff!     Method .  Turn off all the wells in the MADS problem dictionary  #  Mads.allwellson!     Method .  Turn on all the wells in the MADS problem dictionary  #  Mads.amanzi     Function .  Execute amanzi external groundwater flow and transport simulator   Arguments:   filename  : amanzi input file name  nproc  : number of processor to be used by amanzi  quiet  : : suppress output [default  true ]  observation_filename  : amanzi observation filename [default \"observations.out\"]  setup  : bash script to setup amanzi environmental variables  amanzi_exe  : full path to the location of the amanzi executable   #  Mads.amanzi_output_parser     Function .  Parse Amanzi output provided in an external file ( filename )  Mads.amanzi_output_parser()\nMads.amanzi_output_parser( observations.out )  Arguments:   filename  : external file name (optional)   Returns:   dict  : a dictionary with model observations following MADS requirements   #  Mads.asinetransform     Method .  Arcsine transformation of model parameters  #  Mads.bayessampling     Method .  Bayesian Sampling  Mads.bayessampling(madsdata; nsteps=1000, burnin=100, thinning=1, seed=2016)\nMads.bayessampling(madsdata, numsequences; nsteps=1000, burnin=100, thinning=1, seed=2016)  Arguments:   madsdata  : MADS problem dictionary  numsequences  : number of sequences executed in parallel  nsteps  : number of final realizations in the chain  burnin  :  number of initial realizations before the MCMC are recorded  thinning  : removal of any  thinning  realization  seed  : initial random number seed   Returns:   mcmcchain  :   #  Mads.calibrate     Method .  Calibrate  Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Arguments:   madsdata  : MADS problem dictionary  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda  lambda_mu  : lambda multiplication factor [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  save_results  : save intermediate results [default=true]  usenaive  : use naive Levenberg-Marquardt solver   Returns:   minimumdict  : model parameter dictionary with the optimal values at the minimum  results  : optimization algorithm results (e.g. results.minimum)   #  Mads.calibratenlopt     Method .  Do a calibration using NLopt   #  Mads.calibraterandom     Function .  Calibrate with random initial guesses  Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Arguments:   madsdata  : MADS problem dictionary  numberofsamples  : number of random initial samples  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda  lambda_mu  : lambda multiplication factor [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  save_results  : save intermediate results [default=true]  usenaive  : use naive Levenberg-Marquardt solver  seed  : initial random seed   Returns:   bestresult  : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum)   #  Mads.checkout     Function .  Checkout the latest version of the Mads modules  #  Mads.cleancoverage     Method .  Remove Mads coverage files  #  Mads.cmadsins_obs     Method .  Call C MADS ins_obs() function from the MADS dynamic library  #  Mads.computemass     Method .  Compute injected/reduced contaminant mass for a given set of mads input files  Mads.computemass(madsfiles; time = 0, path = \".\")  Arguments:   madsfiles  : matching pattern for Mads input files (string or regular expression accepted)  time  : computational time  path  : search directory for the mads input files   Returns:   lambda  : array with all the lambda values  mass_injected  : array with associated total injected mass  mass_reduced  : array with associated total reduced mass   #  Mads.computemass     Method .  Compute injected/reduced contaminant mass  Mads.computemass(madsdata; time = 0)  Arguments:   madsdata  : MADS problem dictionary  time  : computational time   Returns:   mass_injected  : total injected mass  mass_reduced  : total reduced mass   #  Mads.computeparametersensitities     Method .  Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range  Arguments:   madsdata  : MADS problem dictionary  saresults  : sensitivity analysis results   #  Mads.contamination     Method .  Compute concentration for a point in space and time (x,y,z,t)  Mads.contamination(wellx, welly, wellz, n, lambda, theta, vx, vy, vz, ax, ay, az, H, x, y, z, dx, dy, dz, f, t0, t1, t; anasolfunction=\"long_bbb_ddd_iir_c\")  Arguments:   wellx  - observation point (well) X coordinate  welly  - observation point (well) Y coordinate  wellz  - observation point (well) Z coordinate  n  - porosity  lambda  - first-order reaction rate  theta  - groundwater flow direction  vx  - advective transport velocity in X direction  vy  - advective transport velocity in Y direction  vz  - advective transport velocity in Z direction  ax  - dispersivity in X direction (longitudinal)  ay  - dispersivity in Y direction (transverse horizontal)  az  - dispersivity in Y direction (transverse vertical)  H  - Hurst coefficient for Fractional Brownian dispersion  x  - X coordinate of contaminant source location  y  - Y coordinate of contaminant source location  z  - Z coordinate of contaminant source location  dx  - source size (extent) in X direction  dy  - source size (extent) in Y direction  dz  - source size (extent) in Z direction  f  - source mass flux  t0  - source starting time  t1  - source termination time  t  - time to compute concentration at the observation point  anasolfunction  : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c]   Returns:   predicted concentration at (wellx, welly, wellz, t)   #  Mads.copyright     Method .  Produce MADS copyright information  #  Mads.create_documentation     Method .  Create web documentation files for Mads functions  #  Mads.create_tests_off     Method .  Turn off the generation of MADS tests (default)  #  Mads.create_tests_on     Method .  Turn on the generation of MADS tests (dangerous)  #  Mads.createmadsproblem     Method .  Create a new Mads problem where the observation targets are computed based on the model predictions   Mads.createmadsproblem(infilename::AbstractString, outfilename::AbstractString)  Mads.createmadsproblem(madsdata::Associative, outfilename::AbstractString)  Mads.createmadsproblem(madsdata::Associative, predictions::Associative)  Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::AbstractString)   Arguments:   infilename  : input Mads file  outfilename  : output Mads file  madsdata  : MADS problem dictionary  predictions  : dictionary of model predictions   #  Mads.createobservations!     Method .  Create observations in the MADS problem dictionary based on  time  and  observation  arrays  #  Mads.deleteNaN!     Method .  Delete rows with NaN in a Dataframe  df  #  Mads.display     Method .  Display image file  #  Mads.dobigdt     Method .  Perform BIG-DT analysis  Arguments:   madsdata  : MADS problem dictionary  nummodelruns  : number of model runs  numhorizons  : number of info-gap horizons of uncertainty  maxHorizon  : maximum info-gap horizons of uncertainty  numlikelihoods  : number of Bayesian likelihoods   Returns:   bigdtresults  : dictionary with BIG-DT results   #  Mads.dumpasciifile     Method .  Dump ASCII file  #  Mads.dumpjsonfile     Method .  Dump a JSON file  #  Mads.dumpwelldata     Method .  Dump well data from MADS problem dictionary into a ASCII file  #  Mads.dumpyamlmadsfile     Method .  Dump YAML Mads file  Arguments:   madsdata  : MADS problem dictionary  filename  : file name   #  Mads.efast     Method .  Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  M  : maximum number of harmonics  gamma  : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4)  seed  : initial random seed   #  Mads.emcee     Function .  Bayesian sampling with emcee: Goodman   Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler  Emcee.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1)  Arguments:   llhood  : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood())  numwalkers  : number of walkers  x0  : normalized initial parameters (matrix of size (length(params), numwalkers))  thinning  : removal of any  thinning  realization  a  :   Returns:   mcmcchain  : final MCMC chain  llhoodvals  : log likelihoods of the final samples in the chain   #  Mads.emcee     Method .  Bayesian sampling with emcee: Goodman   Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler  Mads.emcee(madsdata; numwalkers=10, nsteps=100, burnin=100, thinning=1, seed=2016, sigma=0.01)\nMads.emcee(madsdata, p0; numwalkers=10, nsteps=100, burnin=10, thinning=1, seed=2016)  Arguments:   madsdata  : MADS problem dictionary  p0  : initial parameters (matrix of size (length(optparams), numwalkers))  numwalkers  : number of walkers (if in parallel this can be the number of available processors)  nsteps  : number of final realizations in the chain  burnin  :  number of initial realizations before the MCMC are recorded  thinning  : removal of any  thinning  realization  seed  : initial random number seed  sigma  : a standard deviation parameter used to initialize the walkers   Returns:   mcmcchain  : MCMC chain  llhoodvals  : log likelihoods of the final samples in the chain   #  Mads.evaluatemadsexpression     Method .  Evaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values  #  Mads.evaluatemadsexpressions     Method .  Evaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values  #  Mads.filterkeys     Function .  Filter dictionary keys based on a string or regular expression  #  Mads.flattenmcmcarray     Method .  Flatten the MCMC arrays  #  Mads.forward     Method .  Perform a forward run using the initial or provided values for the model parameters   forward(madsdata)  forward(madsdata, paramdict)  forward(madsdata, paramarray)   Arguments:   madsdata  : MADS problem dictionary  paramdict  : dictionary of model parameter values  paramarray  : array of model parameter values   Returns:   obsvalues  : dictionary of model predictions   #  Mads.forwardgrid     Method .  Perform a forward run over a 3D grid defined in  madsdata  using the initial or provided values for the model parameters   forwardgrid(madsdata)  forwardgrid(madsdata, paramvalues))   Arguments:   madsdata  : MADS problem dictionary  paramvalues  : dictionary of model parameter values   Returns:   array3d  : 3D array with model predictions along a 3D grid   #  Mads.free     Method .  Use the latest tagged versions of the Mads modules  #  Mads.functions     Function .  List available functions in the MADS modules:  Examples:  Mads . functions ()  Mads . functions ( BIGUQ )  Mads . functions ( get )  Mads . functions ( Mads ,   get )   Arguments:   module  : MADS module  string  : matching string   #  Mads.getdictvalues     Function .  Get dictionary values for keys based on a string or regular expression  #  Mads.getextension     Method .  Get file name extension  Example:  ext = Mads.getextension( a.mads ) # ext =  mads    #  Mads.getimportantsamples     Method .  Get important samples  Arguments:   samples  : array of samples  llhoods  : vector of log-likelihoods   Returns:   imp_samples  : array of important samples   #  Mads.getlogparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are log-transformed ( log )  #  Mads.getmadsdir     Method .  Get the directory where currently Mads is running  problemdir = Mads.getmadsdir()  #  Mads.getmadsinputfile     Method .  Get the default MADS input file set as a MADS global variable using  setmadsinputfile(filename)  Mads.getmadsinputfile()  Arguments:  none  Returns:   filename  : input file name (e.g.  input_file_name.mads )   #  Mads.getmadsproblemdir     Method .  Get the directory where the Mads data file is located  Mads.getmadsproblemdir(madsdata)  Example:  madsdata = Mads.loadmadsproblemdir( ../../a.mads )\nmadsproblemdir = Mads.getmadsproblemdir(madsdata)  where  madsproblemdir  =  \"../../\"  #  Mads.getmadsrootname     Method .  Get the MADS problem root name  madsrootname = Mads.getmadsrootname(madsdata)  #  Mads.getnonlogparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are NOT log-transformed ( log )  #  Mads.getnonoptparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are NOT optimized ( opt )  #  Mads.getobsdist     Method .  Get an array with  dist  values for observations in the MADS problem dictionary defined by  obskeys  #  Mads.getobsdist     Method .  Get an array with  dist  values for all observations in the MADS problem dictionary  #  Mads.getobskeys     Method .  Get keys for all observations in the MADS problem dictionary  #  Mads.getobslog     Method .  Get an array with  log  values for observations in the MADS problem dictionary defined by  obskeys  #  Mads.getobslog     Method .  Get an array with  log  values for all observations in the MADS problem dictionary  #  Mads.getobsmax     Method .  Get an array with  max  values for observations in the MADS problem dictionary defined by  obskeys  #  Mads.getobsmax     Method .  Get an array with  max  values for all observations in the MADS problem dictionary  #  Mads.getobsmin     Method .  Get an array with  min  values for observations in the MADS problem dictionary defined by  obskeys  #  Mads.getobsmin     Method .  Get an array with  min  values for all observations in the MADS problem dictionary  #  Mads.getobstarget     Method .  Get an array with  target  values for observations in the MADS problem dictionary defined by  obskeys  #  Mads.getobstarget     Method .  Get an array with  target  values for all observations in the MADS problem dictionary  #  Mads.getobstime     Method .  Get an array with  time  values for observations in the MADS problem dictionary defined by  obskeys  #  Mads.getobstime     Method .  Get an array with  time  values for all observations in the MADS problem dictionary  #  Mads.getobsweight     Method .  Get an array with  weight  values for observations in the MADS problem dictionary defined by  obskeys  #  Mads.getobsweight     Method .  Get an array with  weight  values for all observations in the MADS problem dictionary  #  Mads.getoptparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are optimized ( opt )  #  Mads.getparamdict     Method .  Get dictionary with all parameters and their respective initial values  Mads.getparamdict(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   paramdict  : dictionary with all parameters and their respective initial values   #  Mads.getparamdistributions     Method .  Get probabilistic distributions of all parameters in the MADS problem dictionary  Mads.getparamdistributions(madsdata; init_dist=false)  Note:  Probabilistic distribution of parameters can be defined only if  dist  or  min / max  model parameter fields are specified in the MADS problem dictionary  madsdata .  Arguments:   madsdata  : MADS problem dictionary  init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field)   #  Mads.getparamkeys     Method .  Get keys of all parameters in the MADS dictionary  Mads.getparamkeys(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   paramkeys  : array with the keys of all parameters in the MADS dictionary   #  Mads.getparamsinit     Method .  Get an array with  init  values for parameters defined by  paramkeys  #  Mads.getparamsinit     Method .  Get an array with  init  values for all the MADS model parameters  #  Mads.getparamsinit_max     Method .  Get an array with  init_max  values for parameters defined by  paramkeys  #  Mads.getparamsinit_max     Method .  Get an array with  init_max  values for all the MADS model parameters  #  Mads.getparamsinit_min     Method .  Get an array with  init_min  values for parameters defined by  paramkeys  #  Mads.getparamsinit_min     Method .  Get an array with  init_min  values for all the MADS model parameters  #  Mads.getparamslog     Method .  Get an array with  log  values for parameters defined by  paramkeys  #  Mads.getparamslog     Method .  Get an array with  log  values for all the MADS model parameters  #  Mads.getparamslongname     Method .  Get an array with  longname  values for parameters defined by  paramkeys  #  Mads.getparamslongname     Method .  Get an array with  longname  values for all the MADS model parameters  #  Mads.getparamsmax     Method .  Get an array with  max  values for parameters defined by  paramkeys  #  Mads.getparamsmax     Method .  Get an array with  min  values for all the MADS model parameters  #  Mads.getparamsmin     Method .  Get an array with  min  values for parameters defined by  paramkeys  #  Mads.getparamsmin     Method .  Get an array with  min  values for all the MADS model parameters  #  Mads.getparamsplotname     Method .  Get an array with  plotname  values for parameters defined by  paramkeys  #  Mads.getparamsplotname     Method .  Get an array with  plotname  values for all the MADS model parameters  #  Mads.getparamsstep     Method .  Get an array with  step  values for parameters defined by  paramkeys  #  Mads.getparamsstep     Method .  Get an array with  step  values for all the MADS model parameters  #  Mads.getparamstype     Method .  Get an array with  type  values for parameters defined by  paramkeys  #  Mads.getparamstype     Method .  Get an array with  type  values for all the MADS model parameters  #  Mads.getprocs     Method .  Get the number of processors  #  Mads.getrestartdir     Function .  Get the directory where restarts will be stored.  #  Mads.getrootname     Method .  Get file name root  Example:  r = Mads.getrootname( a.rnd.dat ) # r =  a \nr = Mads.getrootname( a.rnd.dat , first=false) # r =  a.rnd   #  Mads.getsourcekeys     Method .  Get keys of all source parameters in the MADS dictionary  Mads.getsourcekeys(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   sourcekeys  : array with keys of all source parameters in the MADS dictionary   #  Mads.gettarget     Method .  Get observation target  #  Mads.gettargetkeys     Method .  Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary  #  Mads.gettime     Method .  Get observation time  #  Mads.getweight     Method .  Get observation weight  #  Mads.getwellkeys     Method .  Get keys for all wells in the MADS problem dictionary  #  Mads.getwellsdata     Method .  Ger  Wells  class spatial and temporal data  #  Mads.haskeyword     Method .  Check for a  keyword  in a class within the Mads dictionary  madsdata   Mads.haskeyword(madsdata, keyword)  Mads.haskeyword(madsdata, class, keyword)   Arguments:   madsdata  : MADS problem dictionary  class  : dictionary class; if not provided searches for  keyword  in  Problem  class  keyword  : dictionary key   Returns:  true  or  false  Examples:   Mads.haskeyword(madsdata, \"disp\")  ... searches in  Problem  class by default  Mads.haskeyword(madsdata, \"Wells\", \"R-28\")  ... searches in  Wells  class for a keyword \"R-28\"   #  Mads.help     Method .  Produce MADS help information  #  Mads.importeverywhere     Method .  Import function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations.  #  Mads.indexkeys     Function .  Find indexes for dictionary keys based on a string or regular expression  #  Mads.ins_obs     Method .  Apply Mads instruction file  instructionfilename  to read model input file  inputfilename  #  Mads.instline2regexs     Method .  Convert an instruction line in the Mads instruction file into regular expressions  #  Mads.invobsweights!     Method .  Inversely proportional observation weights in the MADS problem dictionary  #  Mads.invwellweights!     Method .  Inversely proportional observation weights in the MADS problem dictionary  #  Mads.islog     Method .  Is parameter with key  parameterkey  log-transformed?  #  Mads.isobs     Method .  Is a dictionary containing all the observations  #  Mads.isopt     Method .  Is parameter with key  parameterkey  optimizable?  #  Mads.isparam     Method .  Is the dictionary containing all the parameters  #  Mads.levenberg_marquardt     Function .  Levenberg-Marquardt optimization  Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  root  : Mads problem root name  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda [eps(Float32)]  lambda_scale  : lambda scaling factor  lambda_mu  : lambda multiplication factor \u03bc [10]  lambda_nu  : lambda multiplication factor \u03bd [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  alwaysDoJacobian : computer Jacobian each iteration [false]  callback  : call back function for debugging   #  Mads.loadasciifile     Method .  Load ASCII file  #  Mads.loadjsonfile     Method .  Load a JSON file  #  Mads.loadmadsfile     Method .  Load MADS input file defining a MADS problem dictionary   Mads.loadmadsfile(filename)  Mads.loadmadsfile(filename; julia=false)  Mads.loadmadsfile(filename; julia=true)   Arguments:   filename  : input file name (e.g.  input_file_name.mads )  julia  : if  true , force using  julia  parsing functions; if  false  (default), use  python  parsing functions [boolean]   Returns:   madsdata  : Mads problem dictionary   Example:  md = loadmadsfile(\"input_file_name.mads\")  #  Mads.localsa     Method .  Local sensitivity analysis based on eigen analysis of covariance matrix  Arguments:   madsdata  : MADS problem dictionary  madsdata  : MADS problem dictionary  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  par  : parameter set  obs  : observations for the parameter set   #  Mads.long_tests_off     Method .  Turn off execution of long MADS tests (default)  #  Mads.long_tests_on     Method .  Turn on execution of long MADS tests (dangerous)  #  Mads.madscritical     Method .  MADS critical error messages  #  Mads.madsdebug     Function .  MADS debug messages (controlled by  quiet  and  debuglevel )  #  Mads.madserror     Method .  MADS error messages  #  Mads.madsinfo     Function .  MADS information/status messages (controlled by quiet and verbositylevel`)  #  Mads.madsoutput     Function .  MADS output (controlled by quiet and verbositylevel`)  #  Mads.madswarn     Method .  MADS warning messages  #  Mads.makearrayconditionalloglikelihood     Method .  Make a conditional log likelihood function that accepts an array containing the opt parameters' values  #  Mads.makearrayfunction     Function .  Make a version of the function  f  that accepts an array containing the optimal parameters' values  Mads.makearrayfunction(madsdata, f)  Arguments:   madsdata  : MADS problem dictionary  f  : ...   Returns:   arrayfunction  : function accepting an array containing the optimal parameters' values   #  Mads.makearrayloglikelihood     Method .  Make a log likelihood function that accepts an array containing the opt parameters' values  #  Mads.makebigdt!     Method .  Setup BIG-DT problem  Arguments:   madsdata  : MADS problem dictionary  choice  : dictionary of BIG-DT choices (scenarios)   Returns:   bigdtproblem  : BIG-DT problem type   #  Mads.makebigdt     Method .  Setup BIG-DT problem  Arguments:   madsdata  : MADS problem dictionary  choice  : dictionary of BIG-DT choices (scenarios)   Returns:   bigdtproblem  : BIG-DT problem type   #  Mads.makecomputeconcentrations     Method .  Create a function to compute concentrations for all the observation points using Anasol  Mads.makecomputeconcentrations(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   computeconcentrations  : function to compute concentrations;  computeconcentrations  returns a dictionary of observations and model predicted concentrations   Examples:  computeconcentrations()  or  computeconcentrations = Mads.makecomputeconcentrations(madsdata)\nparamkeys = Mads.getparamkeys(madsdata)\nparamdict = OrderedDict(zip(paramkeys, map(key- madsdata[ Parameters ][key][ init ], paramkeys)))\nforward_preds = computeconcentrations(paramdict)  #  Mads.makedoublearrayfunction     Function .  Make a version of the function  f  that accepts an array containing the optimal parameters' values, and returns an array of observations  Mads.makedoublearrayfunction(madsdata, f)  Arguments:   madsdata  : MADS problem dictionary  f  : ...   Returns:   doublearrayfunction  : function accepting an array containing the optimal parameters' values, and returning an array of observations   #  Mads.makelmfunctions     Method .  Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization  #  Mads.makelocalsafunction     Method .  Make gradient function needed for local sensitivity analysis  #  Mads.makelogprior     Method .  Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary  madsdata  #  Mads.makemadscommandfunction     Method .  Make MADS function to execute the model defined in the MADS problem dictionary  madsdata  Usage:  Mads . makemadscommandfunction ( madsdata )   MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:   Model  : execute a Julia function defined in an input Julia file. The function that should accept a  parameter  dictionary with all the model parameters as an input argument and should return an  observation  dictionary with all the model predicted observations. MADS will execute the first function defined in the file.  MADS model  : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.  Julia model  : execute an internal Julia function that accepts a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.  Command  : execute an external UNIX command or script that will execute an external model.  Julia command  : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an  observation  dictionary with model predictions.   Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model.  Only  Command  uses different approaches to get back the model outputs. The script defined under  Julia command  parses the model outputs using Julia.  The available options for writing model inputs and reading model outputs are as follows.  Options for writing model inputs:   Templates  : template files for writing model input files as defined at http://mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file   Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at http://mads.lanl.gov  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file   #  Mads.makemadscommandfunctionandgradient     Method .  Make MADS forward   gradient functions for the model defined in the MADS problem dictionary  madsdata  #  Mads.makemadscommandgradient     Method .  Make MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary  madsdata  #  Mads.makemadsconditionalloglikelihood     Method .  Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary  madsdata .  #  Mads.makemadsloglikelihood     Method .  Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under  LogLikelihood  or computed internally.  #  Mads.maxtorealmaxFloat32!     Method .  Scale down values larger than max(Float32) in a Dataframe  df  so that Gadfly can plot the data  #  Mads.modelinformationcriteria     Function .  Model section information criteria  #  Mads.modobsweights!     Method .  Modify (multiply) observation weights in the MADS problem dictionary  #  Mads.modwellweights!     Method .  Modify (multiply) well weights in the MADS problem dictionary  #  Mads.montecarlo     Method .  Monte Carlo analysis  Mads.montecarlo(madsdata; N=100)  Arguments:   madsdata  : MADS problem dictionary sampling uniformly between mins/maxs  N  : number of samples (default = 100)   Returns:   outputdicts  : parameter dictionary containing the data arrays   Dumps:   YAML output file with the parameter dictionary containing the data arrays ( mads_root_name .mcresults.yaml )   #  Mads.naive_get_deltax     Method .  Naive Levenberg-Marquardt optimization: get the LM parameter space step  #  Mads.naive_levenberg_marquardt     Function .  Naive Levenberg-Marquardt optimization  Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  o  : objective function  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  lambda  : initial Levenberg-Marquardt lambda [100]  lambda_mu  : lambda multiplication factor \u03bc [10]  np_lambda  : number of parallel lambda solves   #  Mads.naive_lm_iteration     Method .  Naive Levenberg-Marquardt optimization: perform LM iteration  #  Mads.noplot     Method .  Disable MADS plotting  #  Mads.obslineismatch     Method .  Match an instruction line in the Mads instruction file with model input file  #  Mads.of     Method .  Compute objective function  #  Mads.paramarray2dict     Method .  Convert parameter array to a parameter dictionary of arrays  #  Mads.parametersample     Function .  Independent sampling of model parameters defined in the MADS problem dictionary  Arguments:   madsdata  : MADS problem dictionary  numsamples  : number of samples  parameterkey  : model parameter key  init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field)   #  Mads.paramrand     Method .  Random numbers for a MADS model parameter defined by  parameterkey  Arguments:   madsdata  : MADS problem dictionary  parameterkey  : model parameter key  numsamples  : number of samples  paramdist  : dictionary with parameter distributions   #  Mads.parsemadsdata!     Method .  Parse loaded Mads problem dictionary  Arguments:   madsdata  : Mads problem dictionary   #  Mads.partialof     Method .  Compute the sum of squared residuals for observations that match a regular expression  #  Mads.plotgrid     Method .  Plot a 3D grid solution based on model predictions in array  s , initial parameters, or user provided parameter values  plotgrid(madsdata, s; addtitle=true, title= , filename= , format= )\nplotgrid(madsdata; addtitle=true, title= , filename= , format= )\nplotgrid(madsdata, parameters; addtitle=true, title= , filename= , format= )  Arguments:   madsdata  : MADS problem dictionary  parameters  : dictionary with model parameters  s  : model predictions array  addtitle  : add plot title [true]  title  : plot title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   #  Mads.plotmadsproblem     Method .  Plot contaminant sources and wells defined in MADS problem dictionary  Arguments:   madsdata  : MADS problem dictionary  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  keyword  : to be added in the filename   #  Mads.plotmass     Method .  Plot injected/reduced contaminant mass   Mads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\")   Arguments:   lambda  : array with all the lambda values  mass_injected  : array with associated total injected mass  mass_reduced  : array with associated total reduced mass  filename  : output filename for the generated plot  format  : output plot format ( png ,  pdf , etc.)   Dumps: image file with name  filename  and in specified  format  #  Mads.plotmatches     Method .  Plot the matches between model predictions and observations  plotmatches(madsdata; filename= , format= )\nplotmatches(madsdata, param; filename= , format= )\nplotmatches(madsdata, result; filename= , format= )\nplotmatches(madsdata, result, r NO3 ; filename= , format= )  Arguments:   madsdata  : MADS problem dictionary  param  : dictionary with model parameters  result  : dictionary with model predictions  rx  : regular expression to filter the outputs  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   #  Mads.plotobsSAresults     Method .  Plot the sensitivity analysis results for the observations  Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  filter  : string or regex to plot only observations containing  filter  keyword  : to be added in the auto-generated filename  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   #  Mads.plotrobustnesscurves     Method .  Plot BIG-DT robustness curves  Arguments:   madsdata  : MADS problem dictionary  bigdtresults  : BIG-DT results  filename  : output file name used to dump plots  format  : output plot format ( png ,  pdf , etc.)   #  Mads.plotseries     Method .  Create plots of data series  Arguments:   X  : matrix with the series data  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  xtitle  : x-axis title  ytitle  : y-axis title  title  : plot title  name  : series name  combined  :  true  by default   #  Mads.plotwellSAresults     Method .  Plot the sensitivity analysis results for a given well in the MADS problem dictionary (wells class expected)  Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  wellname  : well name  xtitle  : x-axis title  ytitle  : y-axis title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   #  Mads.plotwellSAresults     Method .  Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)  Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  xtitle  : x-axis title  ytitle  : y-axis title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   #  Mads.printSAresults     Method .  Print sensitivity analysis results  #  Mads.quietoff     Method .  Make MADS not quiet  #  Mads.quieton     Method .  Make MADS quiet  #  Mads.readasciipredictions     Method .  Read MADS predictions from an ASCII file  #  Mads.readjsonpredictions     Method .  Read MADS model predictions from a JSON file  #  Mads.readobservations     Function .  Read observations  #  Mads.readobservations_cmads     Method .  Read observations using C Mads library  #  Mads.readyamlpredictions     Method .  Read MADS model predictions from a YAML file  filename  #  Mads.regexs2obs     Method .  Get observations for a set of regular expressions  #  Mads.reload     Method .  Reload Mads modules  #  Mads.resetmodelruns     Method .  Reset the model runs count to be equal to zero  #  Mads.residuals     Method .  Compute residuals  #  Mads.reweighsamples     Method .  Reweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing  Arguments:   madsdata  : MADS problem dictionary  predictions  : the model predictions for each of the samples  oldllhoods  : the log likelihoods of the parameters in the old distribution   Returns:   newllhoods  : vector of log-likelihoods after reweighing   #  Mads.rosenbrock     Method .  Rosenbrock test function  #  Mads.rosenbrock2_gradient_lm     Method .  Parameter gradients of the Rosenbrock test function  #  Mads.rosenbrock2_lm     Method .  Rosenbrock test function (more difficult to solve)  #  Mads.rosenbrock_gradient!     Method .  Parameter gradients of the Rosenbrock test function  #  Mads.rosenbrock_gradient_lm     Method .  Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely)  #  Mads.rosenbrock_hessian!     Method .  Parameter Hessian of the Rosenbrock test function  #  Mads.rosenbrock_lm     Method .  Rosenbrock test function for LM optimization (returns the 2 components separetely)  #  Mads.runcmd     Function .  Run external command and pipe stdout and stderr  #  Mads.saltelli     Method .  Saltelli sensitivity analysis  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  seed  : initial random seed  restartdir  : directory where files will be stored containing model results for fast simulation restarts  parallel  : set to true if the model runs should be performed in parallel   #  Mads.saltellibrute     Method .  Saltelli sensitivity analysis (brute force)  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  seed  : initial random seed   #  Mads.saltellibruteparallel     Method .  Parallel version of saltellibrute  #  Mads.saltelliparallel     Method .  Parallel version of saltelli  #  Mads.saltelliprintresults2     Method .  Print sensitivity analysis results (method 2)  #  Mads.savecalibrationresults     Method .  Save calibration results  #  Mads.savemadsfile     Function .  Save MADS problem dictionary  madsdata  in MADS input file  filename   Mads.savemadsfile(madsdata)  Mads.savemadsfile(madsdata, \"test.mads\")  Mads.savemadsfile(madsdata, parameters, \"test.mads\")  Mads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true)   Arguments:   madsdata  : Mads problem dictionary  parameters  : Dictinary with parameters (optional)  filename  : input file name (e.g.  input_file_name.mads )  julia  : if  true  use Julia JSON module to save  explicit  : if  true  ignores MADS YAML file modifications and rereads the original input file   #  Mads.savemcmcresults     Method .  Save MCMC chain in a file  #  Mads.scatterplotsamples     Method .  Create histogram/scatter plots of model parameter samples  Arguments:   madsdata  : MADS problem dictionary  samples  : matrix with model parameters  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   #  Mads.searchdir     Method .  Get files in the current directory or in a directory defined by  path  matching pattern  key  which can be a string or regular expression   Mads.searchdir(key)  Mads.searchdir(key; path = \".\")   Arguments:   key  : matching pattern for Mads input files (string or regular expression accepted)  path  : search directory for the mads input files   Returns:   filename  : an array with file names matching the pattern in the specified directory   #  Mads.set_nprocs_per_task     Function .  Set number of processors needed for each parallel task at each node  #  Mads.setallparamsoff!     Method .  Set all parameters OFF  #  Mads.setallparamson!     Method .  Set all parameters ON  #  Mads.setdebuglevel     Method .  Set MADS debug level  #  Mads.setdefaultplotformat     Method .  Set the default plot format ( SVG  is the default format)  #  Mads.setdir     Method .  Set the working directory (for parallel environments)  @everywhere Mads.setdir()\n@everywhere Mads.setdir( /home/monty )  #  Mads.setdynamicmodel     Method .  Set Dynamic Model for MADS model calls using internal Julia functions  #  Mads.setmadsinputfile     Method .  Set a default MADS input file  Mads.setmadsinputfile(filename)  Arguments:   filename  : input file name (e.g.  input_file_name.mads )   #  Mads.setnewmadsfilename     Method .  Set new mads file name  #  Mads.setobservationtargets!     Method .  Set observations (calibration targets) in the MADS problem dictionary based on a  predictions  dictionary  #  Mads.setobstime!     Function .  Set observation time based on the observation name in the MADS problem dictionary  Usage:  Mads.setobstime!(madsdata, separator)\nMads.setobstime!(madsdata, regex)  Arguments:   madsdata  : MADS problem dictionary  separator  : string to separator  regex  : regular expression to match   Examples:  Mads.setobstime!(madsdata,  _t )\nMads.setobstime!(madsdata, r [A-x]*_t([0-9,.]+) )  #  Mads.setobsweights!     Method .  Set observation weights in the MADS problem dictionary  #  Mads.setparamoff!     Method .  Set a specific parameter with a key  parameterkey  OFF  #  Mads.setparamon!     Method .  Set a specific parameter with a key  parameterkey  ON  #  Mads.setparamsdistnormal!     Method .  Set normal parameter distributions for all the model parameters in the MADS problem dictionary  Mads.setparamsdistnormal!(madsdata, mean, stddev)  Arguments:   madsdata  : MADS problem dictionary  mean  : array with the mean values  stddev  : array with the standard deviation values   #  Mads.setparamsdistuniform!     Method .  Set uniform parameter distributions for all the model parameters in the MADS problem dictionary  Mads.setparamsdistuniform!(madsdata, min, max)  Arguments:   madsdata  : MADS problem dictionary  min  : array with the minimum values  max  : array with the maximum values   #  Mads.setparamsinit!     Method .  Set initial parameter guesses in the MADS dictionary  Mads.setparamsinit!(madsdata, paramdict)  Arguments:   madsdata  : MADS problem dictionary  paramdict  : dictionary with initial model parameter values   #  Mads.setplotfileformat     Method .  Set image file  format  based on the  filename  extension, or sets the  filename  extension based on the requested  format . The default  format  is  SVG .  PNG ,  PDF ,  ESP , and  PS  are also supported.  Mads.setplotfileformat(filename::AbstractString, format::AbstractString)  Arguments:   filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   Returns:   filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   #  Mads.setprocs     Method .  Set the number of processors to  np  and the number of threads to  nt  Usage:  Mads.setprocs(4)\nMads.setprocs(4, 8)  Arguments:   np  : number of processors  nt  : number of threads   #  Mads.setprocs     Method .  Set the available processors based on environmental variables. Supports SLURM only at the moment.  Usage:  Mads.setprocs()\nMads.setprocs(ntasks_per_node=4)\nMads.setprocs(ntasks_per_node=32, mads_servers=true)\nMads.setprocs(ntasks_per_node=64, machinenames=[ madsmax ,  madszem ])\nMads.setprocs(ntasks_per_node=64, mads_servers=true, exename= /home/monty/bin/julia , dir= /home/monty )  Optional arguments:   ntasks_per_node  : number of parallel tasks per  nprocs_per_task  : number of processors needed for each parallel task at each node  machinenames  : array with machines names to invoked  dir  : common directory shared by all the jobs  exename  : location of the julia executable (the same version of julia is needed on all the workers)  mads_servers  : if  true  use MADS servers (LANL only)  quiet  : suppress output [default  true ]  test  : test the servers and connect to each one ones at a time [default  false ]   #  Mads.setseed     Method .  Set current seed  #  Mads.settarget!     Method .  Set observation target  #  Mads.settime!     Method .  Set observation time  #  Mads.setverbositylevel     Method .  Set MADS verbosity level  #  Mads.setweight!     Method .  Set observation weight  #  Mads.setwellweights!     Method .  Set well weights in the MADS problem dictionary  #  Mads.showallparameters     Method .  Show all parameters in the MADS problem dictionary  #  Mads.showobservations     Method .  Show observations in the MADS problem dictionary  #  Mads.showparameters     Method .  Show optimizable parameters in the MADS problem dictionary  #  Mads.sinetransform     Method .  Sine transformation of model parameters  #  Mads.sinetransformfunction     Method .  Sine transformation of a function  #  Mads.sinetransformgradient     Method .  Sine transformation of a gradient function  #  Mads.spaghettiplot     Method .  Generate a combined spaghetti plot for the  selected  ( type != null ) model parameter  Mads.spaghettiplot(madsdata, paramdictarray; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplot(madsdata, obsmdictarray; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplot(madsdata, number_of_samples; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)  Arguments:   madsdata  : MADS problem dictionary  paramdictarray  : parameter dictionary array containing the data arrays to be plotted  obsdictarray  : observation dictionary array containing the data arrays to be plotted  number_of_samples  : number of samples  filename  : output file name used to output the produced plots  keyword  : keyword to be added in the file name used to output the produced plots (if  filename  is not defined)  format  : output plot format ( png ,  pdf , etc.)  xtitle  :  x  axis title  ytitle  :  y  axis title  obs_plot_dots  : plot observation as dots ( true  [default] or  false )  seed  : initial random seed   Returns:  none  Dumps:   Image file with a spaghetti plot ( mads_rootname - keyword - number_of_samples -spaghetti. default_image_extension )   #  Mads.spaghettiplots     Method .  Generate separate spaghetti plots for each  selected  ( type != null ) model parameter  Mads.spaghettiplots(madsdata, paramdictarray; format= , keyword= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplots(madsdata, number_of_samples; format= , keyword= , xtitle= X , ytitle= Y , obs_plot_dots=true)  Arguments:   madsdata  : MADS problem dictionary  paramdictarray  : parameter dictionary containing the data arrays to be plotted  number_of_samples  : number of samples  keyword  : keyword to be added in the file name used to output the produced plots  format  : output plot format ( png ,  pdf , etc.)  xtitle  :  x  axis title  ytitle  :  y  axis title  obs_plot_dots  : plot observation as dots ( true  [default] or  false )  seed  : initial random seed   Dumps:   A series of image files with spaghetti plots for each  selected  ( type != null ) model parameter ( mads_rootname - keyword - param_key - number_of_samples -spaghetti. default_image_extension )   #  Mads.sprintf     Method .  Convert  @sprintf  macro into  sprintf  function  #  Mads.status     Method .  Status of the Mads modules  #  Mads.tag     Function .  Tag the Mads modules with a default argument  :patch  #  Mads.test     Function .  Execute Mads tests (the tests will be in parallel if processors are defined)  #  Mads.testj     Function .  Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial)  #  Mads.void2nan!     Method .  Convert Void's into NaN's in a dictionary  #  Mads.weightedstats     Method .  Get weighted mean and variance samples  Arguments:   samples  : array of samples  llhoods  : vector of log-likelihoods   Returns:   mean  : vector of sample means  var  : vector of sample variances   #  Mads.welloff!     Method .  Turn off a specific well in the MADS problem dictionary  #  Mads.wellon!     Method .  Turn on a specific well in the MADS problem dictionary  #  Mads.wells2observations!     Method .  Convert  Wells  class to  Observations  class in the MADS problem dictionary  #  Mads.writeparameters     Method .  Write parameters  #  Mads.writeparameters     Method .  Write initial parameters  #  Mads.writeparametersviatemplate     Method .  Write  parameters  via MADS template ( templatefilename ) to an output file ( outputfilename )", 
            "title": "Mads.jl"
        }, 
        {
            "location": "/Modules/BIGUQ/", 
            "text": "BIGUQ.jl\n\n\nDocumentation for BIGUQ.jl module (all functions):\n\n\n#\n\n\nBIGUQ.getmcmcchain\n \n \nMethod\n.\n\n\nGet MCMC chain\n\n\n#\n\n\nBIGUQ.makebigdts\n \n \nMethod\n.\n\n\nMake BIGDT analyses for each possible decision assuming that the proposed observations \nproposedobs\n are observed\n\n\n#\n\n\nBIGUQ.makebigdts\n \n \nMethod\n.\n\n\nMakes BIGDT analyses for each possible decision assuming that no more observations will be made\n\n\n#\n\n\nBIGUQ.BigOED\n \n \nType\n.\n\n\nBigOED type", 
            "title": "BIGUQ"
        }, 
        {
            "location": "/Modules/BIGUQ/#biguqjl", 
            "text": "Documentation for BIGUQ.jl module (all functions):  #  BIGUQ.getmcmcchain     Method .  Get MCMC chain  #  BIGUQ.makebigdts     Method .  Make BIGDT analyses for each possible decision assuming that the proposed observations  proposedobs  are observed  #  BIGUQ.makebigdts     Method .  Makes BIGDT analyses for each possible decision assuming that no more observations will be made  #  BIGUQ.BigOED     Type .  BigOED type", 
            "title": "BIGUQ.jl"
        }, 
        {
            "location": "/Modules/Anasol/", 
            "text": "Anasol.jl\n\n\nDocumentation for Anasol.jl module (all functions):", 
            "title": "Anasol"
        }, 
        {
            "location": "/Modules/Anasol/#anasoljl", 
            "text": "Documentation for Anasol.jl module (all functions):", 
            "title": "Anasol.jl"
        }, 
        {
            "location": "/Modules/ReusableFunctions/", 
            "text": "ReusableFunctions.jl\n\n\nDocumentation for ReusableFunctions.jl module (all functions):\n\n\n#\n\n\nReusableFunctions.gethashfilename\n \n \nMethod\n.\n\n\nDefine a filename based on hash\n\n\n#\n\n\nReusableFunctions.maker3function\n \n \nMethod\n.\n\n\nMake reusable function", 
            "title": "ReusableFunctions"
        }, 
        {
            "location": "/Modules/ReusableFunctions/#reusablefunctionsjl", 
            "text": "Documentation for ReusableFunctions.jl module (all functions):  #  ReusableFunctions.gethashfilename     Method .  Define a filename based on hash  #  ReusableFunctions.maker3function     Method .  Make reusable function", 
            "title": "ReusableFunctions.jl"
        }, 
        {
            "location": "/Modules/MetaProgTools/", 
            "text": "MetaProgTools.jl\n\n\nDocumentation for MetaProgTools.jl module (all functions):\n\n\n#\n\n\nMetaProgTools.getsymbols\n \n \nMethod\n.\n\n\nGet symbols\n\n\n#\n\n\nMetaProgTools.in\n \n \nMethod\n.\n\n\nFind a needle in a haystack\n\n\n#\n\n\nMetaProgTools.populateexpression\n \n \nMethod\n.\n\n\nPopulate Expression\n\n\n#\n\n\nMetaProgTools.replacesymbol\n \n \nMethod\n.\n\n\nReplace Symbol", 
            "title": "MetaProgTools"
        }, 
        {
            "location": "/Modules/MetaProgTools/#metaprogtoolsjl", 
            "text": "Documentation for MetaProgTools.jl module (all functions):  #  MetaProgTools.getsymbols     Method .  Get symbols  #  MetaProgTools.in     Method .  Find a needle in a haystack  #  MetaProgTools.populateexpression     Method .  Populate Expression  #  MetaProgTools.replacesymbol     Method .  Replace Symbol", 
            "title": "MetaProgTools.jl"
        }, 
        {
            "location": "/Modules/RobustPmap/", 
            "text": "RobustPmap.jl\n\n\nDocumentation for RobustPmap.jl module (all functions):\n\n\n#\n\n\nRobustPmap.checkexceptions\n \n \nFunction\n.\n\n\nCheck for type exceptions\n\n\n#\n\n\nRobustPmap.crpmap\n \n \nMethod\n.\n\n\nRobust pmap call with checkpoints\n\n\n#\n\n\nRobustPmap.rpmap\n \n \nMethod\n.\n\n\nRobust pmap call", 
            "title": "RobustPmap"
        }, 
        {
            "location": "/Modules/RobustPmap/#robustpmapjl", 
            "text": "Documentation for RobustPmap.jl module (all functions):  #  RobustPmap.checkexceptions     Function .  Check for type exceptions  #  RobustPmap.crpmap     Method .  Robust pmap call with checkpoints  #  RobustPmap.rpmap     Method .  Robust pmap call", 
            "title": "RobustPmap.jl"
        }, 
        {
            "location": "/acknowledgments/", 
            "text": "ACKNOWLEDGMENTS\n\n\nMADS development has been supported by:\n\n\n\n\nLos Alamos National Laboratory Environmental Programs (LANL-ADEP)\n\n\nLos Alamos National Laboratory Exploratory Research (LANL-ER)\n\n\nDepartment of Energy (DOE) DiaMonD project: An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions", 
            "title": "Acknowledgments"
        }, 
        {
            "location": "/acknowledgments/#acknowledgments", 
            "text": "MADS development has been supported by:   Los Alamos National Laboratory Environmental Programs (LANL-ADEP)  Los Alamos National Laboratory Exploratory Research (LANL-ER)  Department of Energy (DOE) DiaMonD project: An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions", 
            "title": "ACKNOWLEDGMENTS"
        }, 
        {
            "location": "/copying/", 
            "text": "Licensing: GPLv3: http://www.gnu.org/licenses/gpl-3.0.html\n\n\nCopyright 2016.  Los Alamos National Security, LLC.  All rights reserved.\n\n\nCopyright 2016.  Los Alamos National Security, LLC. This material was produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), which is operated by Los Alamos National Security, LLC for the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative works, such modified software should be clearly marked, so as not to confuse it with the version available from LANL.\n\n\nAdditionally, this program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. Accordingly, this program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n\nLA-CC-15-080; Copyright Number Assigned: C16008", 
            "title": "License"
        }
    ]
}
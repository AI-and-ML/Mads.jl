{
    "docs": [
        {
            "location": "/", 
            "text": "MADS (Model Analysis \n Decision Support)\n\n\nMADS is an integrated open-source high-performance computational (HPC) framework in \nJulia\n.\nMADS can execute a wide range of data- and model-based analyses:\n\n\n\n\nSensitivity Analysis\n\n\nParameter Estimation\n\n\nModel Inversion and Calibration\n\n\nUncertainty Quantification\n\n\nModel Selection and Model Averaging\n\n\nModel Reduction and Surrogate Modeling\n\n\nMachine Learning and Blind Source Separation\n\n\nDecision Analysis and Support\n\n\n\n\nMADS has been tested to perform HPC simulations on a wide-range multi-processor clusters and parallel environments (Moab, Slurm, etc.).\nMADS utilizes adaptive rules and techniques which allows the analyses to be performed with a minimum user input.\nThe code provides a series of alternative algorithms to execute each type of data- and model-based analyses.\n\n\nFor additional information:\n\n\n\n\nweb:\n\n\nmads.lanl.gov\n\n\nmadsc.lanl.gov\n (C version of MADS)\n\n\n\n\n\n\ndocumentation:\n\n\nreadthedocs\n\n\ngithub\n\n\nmadsjulia.lanl.gov\n\n\n\n\n\n\nrepos:\n\n\ngithub\n\n\ngitlab\n\n\n\n\n\n\ngit:\n\n\ngit clone git@github.com:madsjulia/Mads.jl\n\n\ngit clone git@gitlab.com:mads/Mads.jl\n\n\n\n\n\n\nemail: \nmads@lanl.gov\n\n\n\n\nBuilds \n Tests\n\n\nMads Build \n Test Status @ JuliaLang.org\n\n\n\n\nMads Build \n Test Status @ Travis Continuous Integration (CI) service (OS X \n linux)\n\n\n\n\nCoverage of the Build-in Mads Tests\n\n\n\n\nLA-CC-15-080", 
            "title": "Home"
        }, 
        {
            "location": "/#mads-model-analysis-decision-support", 
            "text": "MADS is an integrated open-source high-performance computational (HPC) framework in  Julia .\nMADS can execute a wide range of data- and model-based analyses:   Sensitivity Analysis  Parameter Estimation  Model Inversion and Calibration  Uncertainty Quantification  Model Selection and Model Averaging  Model Reduction and Surrogate Modeling  Machine Learning and Blind Source Separation  Decision Analysis and Support   MADS has been tested to perform HPC simulations on a wide-range multi-processor clusters and parallel environments (Moab, Slurm, etc.).\nMADS utilizes adaptive rules and techniques which allows the analyses to be performed with a minimum user input.\nThe code provides a series of alternative algorithms to execute each type of data- and model-based analyses.  For additional information:   web:  mads.lanl.gov  madsc.lanl.gov  (C version of MADS)    documentation:  readthedocs  github  madsjulia.lanl.gov    repos:  github  gitlab    git:  git clone git@github.com:madsjulia/Mads.jl  git clone git@gitlab.com:mads/Mads.jl    email:  mads@lanl.gov", 
            "title": "MADS (Model Analysis &amp; Decision Support)"
        }, 
        {
            "location": "/#builds-tests", 
            "text": "Mads Build   Test Status @ JuliaLang.org   Mads Build   Test Status @ Travis Continuous Integration (CI) service (OS X   linux)   Coverage of the Build-in Mads Tests   LA-CC-15-080", 
            "title": "Builds &amp; Tests"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nAfter starting Julia, execute:\n\n\nPkg\n.\nadd\n(\nMads\n)\n\n\n\n\n\n\nInstallation of MADS without PYTHON\n\n\nMADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable:\n\n\n(bash)\n\n\nexport\n \nMADS_NO_PYTHON\n=\n\n\n\n\n\n\nor\n\n\n(tcsh)\n\n\nsetenv \nMADS_NO_PYTHON \n\n\n\n\n\n\nInstallation of MADS without plotting modules\n\n\nMADS uses Gadfly and matplotlib for plotting. To avoid using these libraries set the following environmental variable:\n\n\n(bash)\n\n\nexport\n \nMADS_NO_PLOT\n=\n\n\n\n\n\n\nor\n\n\n(tcsh)\n\n\nsetenv \nMADS_NO_PLOT \n\n\n\n\n\n\nInstallation of MADS behind a firewall\n\n\nJulia uses git for package management. Add in the \n.gitconfig\n file in your home directory:\n\n\n[url \nhttps://\n]\n\n        \ninsteadOf\n \n=\n \ngit://\n\n\n\n\n\n\nor execute:\n\n\ngit config --global url.\nhttps://\n.insteadOf git://\n\n\n\n\n\nSet proxies:\n\n\nexport\n \nftp_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nrsync_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nhttp_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nhttps_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nno_proxy\n=\n.\nyour_site\n\n\n\n\n\n\nFor example, if you are doing this at LANL, you will need to execute the\nfollowing lines in your bash command-line environment:\n\n\nexport\n \nftp_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nrsync_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nhttp_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nhttps_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nno_proxy\n=\n.lanl.gov", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "After starting Julia, execute:  Pkg . add ( Mads )", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation-of-mads-without-python", 
            "text": "MADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable:  (bash)  export   MADS_NO_PYTHON =   or  (tcsh)  setenv  MADS_NO_PYTHON", 
            "title": "Installation of MADS without PYTHON"
        }, 
        {
            "location": "/installation/#installation-of-mads-without-plotting-modules", 
            "text": "MADS uses Gadfly and matplotlib for plotting. To avoid using these libraries set the following environmental variable:  (bash)  export   MADS_NO_PLOT =   or  (tcsh)  setenv  MADS_NO_PLOT", 
            "title": "Installation of MADS without plotting modules"
        }, 
        {
            "location": "/installation/#installation-of-mads-behind-a-firewall", 
            "text": "Julia uses git for package management. Add in the  .gitconfig  file in your home directory:  [url  https:// ] \n         insteadOf   =   git://   or execute:  git config --global url. https:// .insteadOf git://  Set proxies:  export   ftp_proxy = http://proxyout. your_site :8080 export   rsync_proxy = http://proxyout. your_site :8080 export   http_proxy = http://proxyout. your_site :8080 export   https_proxy = http://proxyout. your_site :8080 export   no_proxy = . your_site   For example, if you are doing this at LANL, you will need to execute the\nfollowing lines in your bash command-line environment:  export   ftp_proxy = http://proxyout.lanl.gov:8080 export   rsync_proxy = http://proxyout.lanl.gov:8080 export   http_proxy = http://proxyout.lanl.gov:8080 export   https_proxy = http://proxyout.lanl.gov:8080 export   no_proxy = .lanl.gov", 
            "title": "Installation of MADS behind a firewall"
        }, 
        {
            "location": "/getting_started/", 
            "text": "MADS Getting Started\n\n\nInstall \nJulia\n and \nMADS\n (\nPkg.add(\"Mads\")\n) using the installation instruction in the \nREADME.md\n (\nsee also\n).\nIf you are not familiar with Julia, checkout \nJulia By Example\n, \nlearn X in Y minutes\n, \nJulia Express\n).\nYou can also explore the Julia examples in the \nexamples/learn_julia\n directory of the \nMads.jl\n repository (\ngithub\n).\n\n\nTo start using MADS, initiate the Julia REPL and execute \nimport Mads\n to load MADS modules.\n\n\nAll the MADS analyses are based on a MADS problem dictionary that defines the problem.\n\n\nThe MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:\n\n\nmadsdata = Mads.loadmadsfile(\"\ninput_file_name\n.mads\")\n\n\nFor example, you can execute:\n\n\nmadsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")\n\n\nThe file \ninternal-linear.mads\n is located in \nexamples/getting_started\n directory of the \nMads.jl\n repository.\n\n\nTypically, the MADS problem dictionary includes several classes:\n\n\n\n\nParameters\n : lists of model parameters\n\n\nObservations\n : lists of model observations\n\n\nModel\n : defines a model to predict the model observations using the model parameters\n\n\n\n\nThe file \ninternal-linear.mads\n looks like this:\n\n\nParameters:\n- a : { init:  1, dist: \nUniform(-10, 10)\n }\n- b : { init: -1, dist: \nUniform(-10, 10)\n }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl\n\n\n\n\n\nIn this case, there are two parameters, \na\n and \nb\n, defining a linear model, \nf(t) = a * t + b\n, described in \ninternal-linearmodel.jl\n.\n\n\nThe Julia file \ninternal-linearmodel.jl\n is specified under \nModel\n in the MADS problem dictionary above.\n\n\nExecute:\n\n\nMads.showallparameters(madsdata)\n to show all the parameters.\n\n\nMads.showobservations(madsdata)\n to list all the observations.\n\n\nMADS can perform various types of analyses:\n\n\n\n\nMads.forward(madsdata)\n will execute forward model simulation based on the initial parameter values.\n\n\nsaresults = Mads.efast(madsdata)\n will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.\n\n\noptparam, iaresults = Mads.calibrate(madsdata)\n will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.\n\n\nMads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values\noptparam` estimated by the inverse analyses above.\n\n\n\n\nMore complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the \nexamples\n subdirectories of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Command-line execution\n\n\nMADS can be executed at the command line using \nmadsjl.jl\n. Link this file in a directory in your search \nPATH\n.\n\n\nFor example, using \nmadsjl.jl\n you can execute:\n\n\nmadsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast\n\n\n\n\n\nin the \nexamples/getting_started\n subdirectory of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Documentation\n\n\nAll the available MADS modules and functions are described at \ngithub\n and \nreadthedocs\n\n\nMADS Licensing \n Copyright\n\n\nCheck the files \nCOPYING\n and \nLICENSE\n to see the licensing \n copyright information.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#mads-getting-started", 
            "text": "Install  Julia  and  MADS  ( Pkg.add(\"Mads\") ) using the installation instruction in the  README.md  ( see also ).\nIf you are not familiar with Julia, checkout  Julia By Example ,  learn X in Y minutes ,  Julia Express ).\nYou can also explore the Julia examples in the  examples/learn_julia  directory of the  Mads.jl  repository ( github ).  To start using MADS, initiate the Julia REPL and execute  import Mads  to load MADS modules.  All the MADS analyses are based on a MADS problem dictionary that defines the problem.  The MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:  madsdata = Mads.loadmadsfile(\" input_file_name .mads\")  For example, you can execute:  madsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")  The file  internal-linear.mads  is located in  examples/getting_started  directory of the  Mads.jl  repository.  Typically, the MADS problem dictionary includes several classes:   Parameters  : lists of model parameters  Observations  : lists of model observations  Model  : defines a model to predict the model observations using the model parameters   The file  internal-linear.mads  looks like this:  Parameters:\n- a : { init:  1, dist:  Uniform(-10, 10)  }\n- b : { init: -1, dist:  Uniform(-10, 10)  }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl  In this case, there are two parameters,  a  and  b , defining a linear model,  f(t) = a * t + b , described in  internal-linearmodel.jl .  The Julia file  internal-linearmodel.jl  is specified under  Model  in the MADS problem dictionary above.  Execute:  Mads.showallparameters(madsdata)  to show all the parameters.  Mads.showobservations(madsdata)  to list all the observations.  MADS can perform various types of analyses:   Mads.forward(madsdata)  will execute forward model simulation based on the initial parameter values.  saresults = Mads.efast(madsdata)  will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.  optparam, iaresults = Mads.calibrate(madsdata)  will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.  Mads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values optparam` estimated by the inverse analyses above.   More complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the  examples  subdirectories of the  Mads.jl  repository ( github ).", 
            "title": "MADS Getting Started"
        }, 
        {
            "location": "/getting_started/#mads-command-line-execution", 
            "text": "MADS can be executed at the command line using  madsjl.jl . Link this file in a directory in your search  PATH .  For example, using  madsjl.jl  you can execute:  madsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast  in the  examples/getting_started  subdirectory of the  Mads.jl  repository ( github ).", 
            "title": "MADS Command-line execution"
        }, 
        {
            "location": "/getting_started/#mads-documentation", 
            "text": "All the available MADS modules and functions are described at  github  and  readthedocs", 
            "title": "MADS Documentation"
        }, 
        {
            "location": "/getting_started/#mads-licensing-copyright", 
            "text": "Check the files  COPYING  and  LICENSE  to see the licensing   copyright information.", 
            "title": "MADS Licensing &amp; Copyright"
        }, 
        {
            "location": "/Examples/setup/", 
            "text": "MADS examples\n\n\nIn Julia REPL, do the following commands:\n\n\nimport\n \nMads\n\n\n\n\n\n\nTo explore getting-started instructions, execute:\n\n\nMads\n.\nhelp\n()\n\n\n\n\n\n\nThere are various examples located in the \nexamples\n directory of the \nMads\n repository.\n\n\nFor example, execute\n\n\ninclude\n(\nMads\n.\nmadsdir\n \n*\n \n/../examples/contamination/contamination.jl\n)\n\n\n\n\n\n\nto perform various example analyses related to groundwater contaminant transport, or execute\n\n\ninclude\n(\nMads\n.\nmadsdir\n \n*\n \n/../examples/bigdt/bigdt.jl\n)\n\n\n\n\n\n\nto perform Bayesian Information Gap Decision Theory (BIG-DT) analysis.", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/setup/#mads-examples", 
            "text": "In Julia REPL, do the following commands:  import   Mads   To explore getting-started instructions, execute:  Mads . help ()   There are various examples located in the  examples  directory of the  Mads  repository.  For example, execute  include ( Mads . madsdir   *   /../examples/contamination/contamination.jl )   to perform various example analyses related to groundwater contaminant transport, or execute  include ( Mads . madsdir   *   /../examples/bigdt/bigdt.jl )   to perform Bayesian Information Gap Decision Theory (BIG-DT) analysis.", 
            "title": "MADS examples"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/", 
            "text": "Contaminant Source Termination\n\n\nAll the figures below are generated using \nexamples/bigdt/source_termination.jl\n.\n\n\nModel setup\n\n\n\n\n\n\n\n\nContaminant source (orange rectangle)\n\n\n\n\n\n\n3 monitoring wells\n\n\n\n\n\n\nWe know some of the properties of the source (location, shape, strength, release start time, etc.).\nWe know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015).\nWe do \nNOT\n know:\n\n\n\n\n\n\ngroundwater flow velocity\n\n\n\n\n\n\nlongitudinal dispersion of the plume\n\n\n\n\n\n\nInverse modeling can be used to estimate these parameters.\nHowever, there are uncertainties with the inverse model estimates.\nBecause of these uncertainties, we perform a decision analysis.\n\n\nUncertainties\n\n\nProbabilistic uncertainties\n\n\n\n\n\n\nprior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion)\n\n\n\n\n\n\nmeasurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights)\n\n\n\n\n\n\nposterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)\n\n\n\n\n\n\nNon-probabilistic uncertainties\n\n\n\n\n\n\nconceptual uncertainties in the applied model\n\n\n\n\n\n\nuncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.\n\n\n\n\n\n\nGoal\n\n\nFuture concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb\n\n\nScenarios\n\n\n\n\nTerminate the source in 2015 (now)\n\n\nTerminate the source in 2020 (in 5 years)\n\n\nTerminate the source in 2025 (in 10 years)\n\n\nTerminate the source in 2030 (in 15 years)\n\n\n\n\nTask\n\n\nEvaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.\n\n\nMethod\n\n\nBayesian Information Gap Decision Theory (BIG-DT).\n\n\n\n\nO'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089.\n\n\nGrasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80.\n\n\nO'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621.\n\n\nO'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.\n\n\n\n\nHorizon (level) of uncertainty\n\n\nHorizon (level) of uncertainty is a non-negative index that defines\n(1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and\n(2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation.\n\n\nThe likelihood functions differ in the variance.\nThe set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty.\nThe set of variances is\n\n\n$$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$\n\n\nwhere $\u03c3^2_0$ is the nominal variance (500; the nominal standard deviation $\u03c3_0$ is ~22) and $h$ is the horizon of uncertainty.\nAs the index increases, these sets become bigger, allowing for more possibilities.\n\n\nRobustness\n\n\nThe horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached\n\n\nResults\n\n\nFigures representing robustness of model predictions:\n\n\n(a) Complete robustness curves\n\n\n\n\n(b) Zoomed-in robustness curves\n\n\n\n\nDiscussion\n\n\nWe nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb.\nThis is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero.\nThe zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties.\n\n\nOn the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case.\nThe sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high.\nAnother possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25.\n\n\nHere we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure.\nIn this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030.\nAt this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness.\nHowever, it may not be enough to merit action in the short term.\n\n\nBased on the robustness of the model predictions the decision makers can decide the course of action.\nTheir decision can also rely on\n(1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and\n(2) financial constraints (e.g., costs associated with the source termination over different time frames).\n\n\nModel\n\n\nAnalytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl).\nThe contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the $x$ and $y$ axes; the contaminant is released in 1985.\n\n\nThe presented analyses required ~4,000 forward model runs (~1,000 per scenario).\nThe analysis took about 5 minutes in a serial mode using the Julia version of Mads.\nThe runs are independent and can be computed efficiently in parallel.", 
            "title": "Decision Analysis"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#contaminant-source-termination", 
            "text": "All the figures below are generated using  examples/bigdt/source_termination.jl .", 
            "title": "Contaminant Source Termination"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#model-setup", 
            "text": "Contaminant source (orange rectangle)    3 monitoring wells    We know some of the properties of the source (location, shape, strength, release start time, etc.).\nWe know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015).\nWe do  NOT  know:    groundwater flow velocity    longitudinal dispersion of the plume    Inverse modeling can be used to estimate these parameters.\nHowever, there are uncertainties with the inverse model estimates.\nBecause of these uncertainties, we perform a decision analysis.", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#uncertainties", 
            "text": "", 
            "title": "Uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#probabilistic-uncertainties", 
            "text": "prior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion)    measurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights)    posterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)", 
            "title": "Probabilistic uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#non-probabilistic-uncertainties", 
            "text": "conceptual uncertainties in the applied model    uncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.", 
            "title": "Non-probabilistic uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#goal", 
            "text": "Future concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb", 
            "title": "Goal"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#scenarios", 
            "text": "Terminate the source in 2015 (now)  Terminate the source in 2020 (in 5 years)  Terminate the source in 2025 (in 10 years)  Terminate the source in 2030 (in 15 years)", 
            "title": "Scenarios"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#task", 
            "text": "Evaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.", 
            "title": "Task"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#method", 
            "text": "Bayesian Information Gap Decision Theory (BIG-DT).   O'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089.  Grasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80.  O'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621.  O'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.", 
            "title": "Method"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#horizon-level-of-uncertainty", 
            "text": "Horizon (level) of uncertainty is a non-negative index that defines\n(1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and\n(2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation.  The likelihood functions differ in the variance.\nThe set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty.\nThe set of variances is  $$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$  where $\u03c3^2_0$ is the nominal variance (500; the nominal standard deviation $\u03c3_0$ is ~22) and $h$ is the horizon of uncertainty.\nAs the index increases, these sets become bigger, allowing for more possibilities.", 
            "title": "Horizon (level) of uncertainty"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#robustness", 
            "text": "The horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached", 
            "title": "Robustness"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#results", 
            "text": "Figures representing robustness of model predictions:  (a) Complete robustness curves   (b) Zoomed-in robustness curves", 
            "title": "Results"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#discussion", 
            "text": "We nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb.\nThis is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero.\nThe zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties.  On the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case.\nThe sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high.\nAnother possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25.  Here we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure.\nIn this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030.\nAt this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness.\nHowever, it may not be enough to merit action in the short term.  Based on the robustness of the model predictions the decision makers can decide the course of action.\nTheir decision can also rely on\n(1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and\n(2) financial constraints (e.g., costs associated with the source termination over different time frames).", 
            "title": "Discussion"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#model", 
            "text": "Analytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl).\nThe contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the $x$ and $y$ axes; the contaminant is released in 1985.  The presented analyses required ~4,000 forward model runs (~1,000 per scenario).\nThe analysis took about 5 minutes in a serial mode using the Julia version of Mads.\nThe runs are independent and can be computed efficiently in parallel.", 
            "title": "Model"
        }, 
        {
            "location": "/Examples/infogap/", 
            "text": "Information Gap Analysis\n\n\nAll the figures below are generated using \nexamples/model_analysis/infogap.jl\n.\n\n\nSetup\n\n\n\n\n\n\n\n\nThere are 4 uncertain observations at times t = [1,2,3,4]\n\n\n\n\n\n\nThere are 4 possible models that can be applied to match the data\n\n\n\n\n\n\ny(t) = a * t + c\n\n\n\n\n\n\ny(t) = a * t^(1.1) + b * t + c\n\n\n\n\n\n\ny(t) = a * t^n + b * t + c\n\n\n\n\n\n\ny(t) = a * exp(t * n) + b * t + c\n\n\n\n\n\n\n\n\n\n\nThere are 4 unknown model parameters with uniform prior probability functions:\n\n\n\n\n\n\na = Uniform(-10, 10)\n\n\n\n\n\n\nb = Uniform(-10, 10)\n\n\n\n\n\n\nc = Uniform(-5, 5)\n\n\n\n\n\n\nn = Uniform(-3, 3)\n\n\n\n\n\n\n\n\n\n\nThe model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated\n\n\n\n\n\n\nThe horizon of information gap uncertainty \nh\n is applied to define the acceptable deviations in the 4 uncertain observations.\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t^(1.1) + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t^n + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * exp(t * n) + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpportuneness and Robustness of the 4 models", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/infogap/#information-gap-analysis", 
            "text": "All the figures below are generated using  examples/model_analysis/infogap.jl .", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/infogap/#setup", 
            "text": "There are 4 uncertain observations at times t = [1,2,3,4]    There are 4 possible models that can be applied to match the data    y(t) = a * t + c    y(t) = a * t^(1.1) + b * t + c    y(t) = a * t^n + b * t + c    y(t) = a * exp(t * n) + b * t + c      There are 4 unknown model parameters with uniform prior probability functions:    a = Uniform(-10, 10)    b = Uniform(-10, 10)    c = Uniform(-5, 5)    n = Uniform(-3, 3)      The model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated    The horizon of information gap uncertainty  h  is applied to define the acceptable deviations in the 4 uncertain observations.", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-t11-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t^(1.1) + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-tn-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t^n + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-expt-n-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * exp(t * n) + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#opportuneness-and-robustness-of-the-4-models", 
            "text": "", 
            "title": "Opportuneness and Robustness of the 4 models"
        }, 
        {
            "location": "/Examples/bayesian_sampling/", 
            "text": "Bayesian Sampling\n\n\nAll the figures below are generated using \nexamples/bayesian_sampling/bayesian_sampling.jl\n.\n\n\nModel setup\n\n\n\n\n\n\n\n\nContaminant source (orange rectangle)\n\n\n\n\n\n\n3 monitoring wells\n\n\n\n\n\n\nPrior spaghetti plots\n\n\nSpaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells.\n\n\nJoint spaghetti plots\n\n\nAll model parameters are changed simultaneously within their prior uncertainty ranges.\n\n\n\n\nIndividual spaghetti plots\n\n\nA single model parameter is changed at a time.\n\n\nSource $x$ location\n\n\n\n\nSource $y$ location\n\n\n\n\nSource size along $x$ axis\n\n\n\n\nSource size along $y$ axis\n\n\n\n\nSource release time $t_0$\n\n\n\n\nSource termination time $t_1$\n\n\n\n\nModel calibration match\n\n\n\n\nBayesian sampling results\n\n\n\n\nPosterior spaghetti plots\n\n\nSpaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells.\n\n\nJoint spaghetti plots\n\n\nAll model parameters are changed simultaneously within their prior uncertainty ranges.\n\n\n\n\nIndividual spaghetti plots\n\n\nA single model parameter is changed at a time.\n\n\nNote that only the posterior uncertainties in the source release time ($t_0$)  and the source termination time ($t_1$) are producing large impact in the model predictions.\n\n\nSource $x$ location (all the 1000 model predictions are overlapping)\n\n\n\n\nSource $y$ location (all the 1000 model predictions are overlapping\n\n\n\n\nSource size along $x$ axis (all the 1000 model predictions are overlapping\n\n\n\n\nSource size along $y$ axis (all the 1000 model predictions are overlapping\n\n\n\n\nSource release time $t_0$\n\n\n\n\nSource termination time $t_1$", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#bayesian-sampling", 
            "text": "All the figures below are generated using  examples/bayesian_sampling/bayesian_sampling.jl .", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#model-setup", 
            "text": "Contaminant source (orange rectangle)    3 monitoring wells", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#prior-spaghetti-plots", 
            "text": "Spaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells.", 
            "title": "Prior spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#joint-spaghetti-plots", 
            "text": "All model parameters are changed simultaneously within their prior uncertainty ranges.", 
            "title": "Joint spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#individual-spaghetti-plots", 
            "text": "A single model parameter is changed at a time.  Source $x$ location   Source $y$ location   Source size along $x$ axis   Source size along $y$ axis   Source release time $t_0$   Source termination time $t_1$", 
            "title": "Individual spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#model-calibration-match", 
            "text": "", 
            "title": "Model calibration match"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#bayesian-sampling-results", 
            "text": "", 
            "title": "Bayesian sampling results"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#posterior-spaghetti-plots", 
            "text": "Spaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells.", 
            "title": "Posterior spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#joint-spaghetti-plots_1", 
            "text": "All model parameters are changed simultaneously within their prior uncertainty ranges.", 
            "title": "Joint spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#individual-spaghetti-plots_1", 
            "text": "A single model parameter is changed at a time.  Note that only the posterior uncertainties in the source release time ($t_0$)  and the source termination time ($t_1$) are producing large impact in the model predictions.  Source $x$ location (all the 1000 model predictions are overlapping)   Source $y$ location (all the 1000 model predictions are overlapping   Source size along $x$ axis (all the 1000 model predictions are overlapping   Source size along $y$ axis (all the 1000 model predictions are overlapping   Source release time $t_0$   Source termination time $t_1$", 
            "title": "Individual spaghetti plots"
        }, 
        {
            "location": "/Examples/blind_source_separation/", 
            "text": "Blind Source Separation\n\n\nFrequently there are several different physical phenomena or mechanisms (sources/signals) than may can cause transients in the observed data.\n\n\nFor example, in the case of water-level (hydraulic pressure) data, these might be barometric pressure fluctuations, tidal effects, pumping effects, etc.\nIn the case of geochemical concentrations, these may represent a mixture of different groundwater types (groundwater sources) with different initial geochemical compositions.\n\n\nThe separation of the different signals observed in the data is important for many tasks including model conceptualization and setup.\n\n\nBelow a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals.\n\n\nMore complicated Blind Source Separation (BSS) analyses can be found in:\n\n\nAlexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research, \ndoi: 0.1002/2013WR015037\n, 50.9, 7332-7347, 2014.\n\n\nAll the figures below are generated using \nexamples/blind_source_separation.jl\n. BSS can be performed using different methods.\nThe examples below use the \nIpopt\n implementation in the \nJuMP\n Julia module.\n\n\nSources generated using sine functions and random noise\n\n\nOriginal signals (assumed unknown)\n\n\nLet us assume there are 3 unknown sources (physical processes/phenomena) causing transients in some observable state variable.\nLet us assume the transients (signals) associated with these 3 unknown sources look like this:\n\n\n\n\nMixed signals observed at 4 different monitoring locations (representing 4 different observation streams)\n\n\nLet us assume that the transients of the original unknown sources are observed as a mixture at 4 different monitoring locations (observation points).\nLet us assume that the mixtures looks like this:\n\n\n\n\nReconstructed (unmixed) original signals (sources) based on the observed data\n\n\nWe want to find the original unknown signals (sources) based on the observed mixtures above.\nBSS method in MADS allow us to do this.\nFrom the mixture at the 4 monitoring locations (observation points), we can reconstruct (unmix) original signals (sources) almost perfectly:\n\n\n\n\nSources generated using sine functions and random noise representing a disturbance of normal pace of life\n\n\nOriginal sources (assumed unknown)\n\n\n\n\nMixed sources observed at 7 different observation points\n\n\n\n\nReconstructed (unmixed) original signals based on the observed data\n\n\n\n\nSources generated using sine functions\n\n\nOriginal sources (assumed unknown)\n\n\n\n\nMixed sources observed at 4 different observation points\n\n\n\n\nReconstructed (unmixed) original signals based on the observed data\n\n\n\n\nSources generated using random noise\n\n\nOriginal signals (assumed unknown)\n\n\n\n\nMixed signals observed at 4 different observation points\n\n\n\n\nReconstructed (unmixed) original signals based on the observed data", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/blind_source_separation/#blind-source-separation", 
            "text": "Frequently there are several different physical phenomena or mechanisms (sources/signals) than may can cause transients in the observed data.  For example, in the case of water-level (hydraulic pressure) data, these might be barometric pressure fluctuations, tidal effects, pumping effects, etc.\nIn the case of geochemical concentrations, these may represent a mixture of different groundwater types (groundwater sources) with different initial geochemical compositions.  The separation of the different signals observed in the data is important for many tasks including model conceptualization and setup.  Below a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals.  More complicated Blind Source Separation (BSS) analyses can be found in:  Alexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research,  doi: 0.1002/2013WR015037 , 50.9, 7332-7347, 2014.  All the figures below are generated using  examples/blind_source_separation.jl . BSS can be performed using different methods.\nThe examples below use the  Ipopt  implementation in the  JuMP  Julia module.", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-sine-functions-and-random-noise", 
            "text": "", 
            "title": "Sources generated using sine functions and random noise"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-signals-assumed-unknown", 
            "text": "Let us assume there are 3 unknown sources (physical processes/phenomena) causing transients in some observable state variable.\nLet us assume the transients (signals) associated with these 3 unknown sources look like this:", 
            "title": "Original signals (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-signals-observed-at-4-different-monitoring-locations-representing-4-different-observation-streams", 
            "text": "Let us assume that the transients of the original unknown sources are observed as a mixture at 4 different monitoring locations (observation points).\nLet us assume that the mixtures looks like this:", 
            "title": "Mixed signals observed at 4 different monitoring locations (representing 4 different observation streams)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-signals-sources-based-on-the-observed-data", 
            "text": "We want to find the original unknown signals (sources) based on the observed mixtures above.\nBSS method in MADS allow us to do this.\nFrom the mixture at the 4 monitoring locations (observation points), we can reconstruct (unmix) original signals (sources) almost perfectly:", 
            "title": "Reconstructed (unmixed) original signals (sources) based on the observed data"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-sine-functions-and-random-noise-representing-a-disturbance-of-normal-pace-of-life", 
            "text": "", 
            "title": "Sources generated using sine functions and random noise representing a disturbance of normal pace of life"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown", 
            "text": "", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-7-different-observation-points", 
            "text": "", 
            "title": "Mixed sources observed at 7 different observation points"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-signals-based-on-the-observed-data", 
            "text": "", 
            "title": "Reconstructed (unmixed) original signals based on the observed data"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-sine-functions", 
            "text": "", 
            "title": "Sources generated using sine functions"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown_1", 
            "text": "", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-4-different-observation-points", 
            "text": "", 
            "title": "Mixed sources observed at 4 different observation points"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-signals-based-on-the-observed-data_1", 
            "text": "", 
            "title": "Reconstructed (unmixed) original signals based on the observed data"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-random-noise", 
            "text": "", 
            "title": "Sources generated using random noise"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-signals-assumed-unknown_1", 
            "text": "", 
            "title": "Original signals (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-signals-observed-at-4-different-observation-points", 
            "text": "", 
            "title": "Mixed signals observed at 4 different observation points"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-signals-based-on-the-observed-data_2", 
            "text": "", 
            "title": "Reconstructed (unmixed) original signals based on the observed data"
        }, 
        {
            "location": "/Examples/contamination/", 
            "text": "Analysis of contaminant transport in an aquifer\n\n\nAll the figures below are generated using \nexamples/contamination/contamination.jl\n.\n\n\nModel setup\n\n\n\n\nThere are 20 monitoring wells.\nEach well has 2 measurement ports: shallow (3 m below the water table labeled \na\n) and deep (33 m below the water table labeled \nb\n).\nContaminant concentrations are observed for 50 years at each well.\nThe contaminant transport is solved using the \nAnasol\n package in Mads.\n\n\nUnknown model parameters\n\n\n\n\nStart time of contaminant release $t_0$\n\n\nEnd time of contaminant release $t_1$\n\n\nAdvective pore velocity $v$\n\n\n\n\nReduced model setup\n\n\nAnalysis of the data from only 2 monitoring locations: \nw13a\n and \nw20a\n.\n\n\n\n\nExample model solution\n\n\n\n\nModel parameter values:\n\n\n\n\n$t_0 = 4$ \n\n\n$t_1 = 15$\n\n\n$v = 40$\n\n\n\n\nModel calibration\n\n\nA calibration match between observations and model predictions obtained by model inversion:\n\n\n\n\nPrior parameter uncertainties\n\n\nProbabilistic distributions of the prior parameter uncertainties are:\n\n\n\n\n$t_0$ = Uniform(0, 10)\n\n\n$t_1$ = Uniform(5, 40)\n\n\n$v$ = LogUniform(0.1, 200)\n\n\n\n\nSpaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data):\n\n\n\n\nThe observation data are plotted as red dots.\n\n\nBayesian global sensitivity analysis\n\n\nHistograms and scatter plots of the Bayesian MCMC results:\n\n\n\n\nPosterior parameter uncertainties\n\n\nSpaghetti plots representing the posterior uncertainties:\n\n\n\n\nNote that the parameter uncertainties are constrained by the observation data.\nThe observation data are plotted as red dots.\n\n\neFAST global sensitivity analysis\n\n\neFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli \n Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999). \n\n\nTotal and main sensitivity indices over time for monitoring wells w13a and w20a:\n\n\n\n\n\n\n\n\n\n\nThe differences between main and total effect estimates suggest correlations among the parameters.\n\n\nSaltelli's global sensitivity analysis\n\n\nClassical Saltelli's (Sobol's) global sensitivity analysis.\n\n\nTotal and main sensitivity indices over time for monitoring wells w13a and w20a:\n\n\n\n\n\n\n\n\n\n\nThere are differences between eFAST \n Saltelli estimates. The eFAST results should be considered more reliable.", 
            "title": "Contaminant Transport"
        }, 
        {
            "location": "/Examples/contamination/#analysis-of-contaminant-transport-in-an-aquifer", 
            "text": "All the figures below are generated using  examples/contamination/contamination.jl .", 
            "title": "Analysis of contaminant transport in an aquifer"
        }, 
        {
            "location": "/Examples/contamination/#model-setup", 
            "text": "There are 20 monitoring wells.\nEach well has 2 measurement ports: shallow (3 m below the water table labeled  a ) and deep (33 m below the water table labeled  b ).\nContaminant concentrations are observed for 50 years at each well.\nThe contaminant transport is solved using the  Anasol  package in Mads.", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/contamination/#unknown-model-parameters", 
            "text": "Start time of contaminant release $t_0$  End time of contaminant release $t_1$  Advective pore velocity $v$", 
            "title": "Unknown model parameters"
        }, 
        {
            "location": "/Examples/contamination/#reduced-model-setup", 
            "text": "Analysis of the data from only 2 monitoring locations:  w13a  and  w20a .", 
            "title": "Reduced model setup"
        }, 
        {
            "location": "/Examples/contamination/#example-model-solution", 
            "text": "Model parameter values:   $t_0 = 4$   $t_1 = 15$  $v = 40$", 
            "title": "Example model solution"
        }, 
        {
            "location": "/Examples/contamination/#model-calibration", 
            "text": "A calibration match between observations and model predictions obtained by model inversion:", 
            "title": "Model calibration"
        }, 
        {
            "location": "/Examples/contamination/#prior-parameter-uncertainties", 
            "text": "Probabilistic distributions of the prior parameter uncertainties are:   $t_0$ = Uniform(0, 10)  $t_1$ = Uniform(5, 40)  $v$ = LogUniform(0.1, 200)   Spaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data):   The observation data are plotted as red dots.", 
            "title": "Prior parameter uncertainties"
        }, 
        {
            "location": "/Examples/contamination/#bayesian-global-sensitivity-analysis", 
            "text": "Histograms and scatter plots of the Bayesian MCMC results:", 
            "title": "Bayesian global sensitivity analysis"
        }, 
        {
            "location": "/Examples/contamination/#posterior-parameter-uncertainties", 
            "text": "Spaghetti plots representing the posterior uncertainties:   Note that the parameter uncertainties are constrained by the observation data.\nThe observation data are plotted as red dots.", 
            "title": "Posterior parameter uncertainties"
        }, 
        {
            "location": "/Examples/contamination/#efast-global-sensitivity-analysis", 
            "text": "eFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli   Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999).   Total and main sensitivity indices over time for monitoring wells w13a and w20a:      The differences between main and total effect estimates suggest correlations among the parameters.", 
            "title": "eFAST global sensitivity analysis"
        }, 
        {
            "location": "/Examples/contamination/#saltellis-global-sensitivity-analysis", 
            "text": "Classical Saltelli's (Sobol's) global sensitivity analysis.  Total and main sensitivity indices over time for monitoring wells w13a and w20a:      There are differences between eFAST   Saltelli estimates. The eFAST results should be considered more reliable.", 
            "title": "Saltelli's global sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/", 
            "text": "Analysis of an Ordinary Differential Equation (ODE)\n\n\nAll the figures below are generated using \nexamples/ode/ode.jl\n.\n\n\nODE\n\n\n$$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$\n\n\nUnknown ODE parameters\n\n\n\n\nk\n\n\n$\\omega$\n\n\n\n\nExample ODE solution\n\n\n\n\nFor model parameters:\n\n\n\n\nk = 0.1\n\n\n$\\omega$ = 0.2\n\n\n\n\nLocal sensitivity analysis\n\n\n\n\n\n\nGlobal sensitivity analysis (using eFAST)\n\n\n\n\nProbabilistic distributions of the prior parameter uncertainties are:\n\n\n\n\nk = LogUniform(0.01, 0.1)\n\n\n$\\omega$ = Uniform(0.1, 0.3)\n\n\n\n\nBayesian sensitivity analysis\n\n\nObservations\n\n\nSynthetic observations are applied to constrain the ODE parameters\n\n\n\n\nObservation errors are equal for all the sample locations with standard deviation equal to 1 (\nobservation weight\n =  1 / \nobservation standard deviation\n = 1 / 1 = 1)\n\n\nPrior parameter uncertainties\n\n\nk\n only\n\n\n\n\n$\\omega$\n only\n\n\n\n\nBoth\n parameters\n\n\n\n\nThe observation data are plotted as a solid black line.\n\n\nHistograms/scatter plots of Bayesian MCMC results\n\n\n\n\nPosterior parameter uncertainties\n\n\nNote that now the parameter uncertainties are constrained by the observation data.\n\n\nk\n only\n\n\n\n\n$\\omega$\n only\n\n\n\n\nBoth\n parameters\n\n\n\n\nThe observation data are plotted as a solid black line.", 
            "title": "ODE Analysis"
        }, 
        {
            "location": "/Examples/ode/#analysis-of-an-ordinary-differential-equation-ode", 
            "text": "All the figures below are generated using  examples/ode/ode.jl .", 
            "title": "Analysis of an Ordinary Differential Equation (ODE)"
        }, 
        {
            "location": "/Examples/ode/#ode", 
            "text": "$$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$", 
            "title": "ODE"
        }, 
        {
            "location": "/Examples/ode/#unknown-ode-parameters", 
            "text": "k  $\\omega$", 
            "title": "Unknown ODE parameters"
        }, 
        {
            "location": "/Examples/ode/#example-ode-solution", 
            "text": "For model parameters:   k = 0.1  $\\omega$ = 0.2", 
            "title": "Example ODE solution"
        }, 
        {
            "location": "/Examples/ode/#local-sensitivity-analysis", 
            "text": "", 
            "title": "Local sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/#global-sensitivity-analysis-using-efast", 
            "text": "Probabilistic distributions of the prior parameter uncertainties are:   k = LogUniform(0.01, 0.1)  $\\omega$ = Uniform(0.1, 0.3)", 
            "title": "Global sensitivity analysis (using eFAST)"
        }, 
        {
            "location": "/Examples/ode/#bayesian-sensitivity-analysis", 
            "text": "", 
            "title": "Bayesian sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/#observations", 
            "text": "Synthetic observations are applied to constrain the ODE parameters   Observation errors are equal for all the sample locations with standard deviation equal to 1 ( observation weight  =  1 /  observation standard deviation  = 1 / 1 = 1)", 
            "title": "Observations"
        }, 
        {
            "location": "/Examples/ode/#prior-parameter-uncertainties", 
            "text": "", 
            "title": "Prior parameter uncertainties"
        }, 
        {
            "location": "/Examples/ode/#k-only", 
            "text": "", 
            "title": "k only"
        }, 
        {
            "location": "/Examples/ode/#omega-only", 
            "text": "", 
            "title": "$\\omega$ only"
        }, 
        {
            "location": "/Examples/ode/#both-parameters", 
            "text": "The observation data are plotted as a solid black line.", 
            "title": "Both parameters"
        }, 
        {
            "location": "/Examples/ode/#histogramsscatter-plots-of-bayesian-mcmc-results", 
            "text": "", 
            "title": "Histograms/scatter plots of Bayesian MCMC results"
        }, 
        {
            "location": "/Examples/ode/#posterior-parameter-uncertainties", 
            "text": "Note that now the parameter uncertainties are constrained by the observation data.", 
            "title": "Posterior parameter uncertainties"
        }, 
        {
            "location": "/Examples/ode/#k-only_1", 
            "text": "", 
            "title": "k only"
        }, 
        {
            "location": "/Examples/ode/#omega-only_1", 
            "text": "", 
            "title": "$\\omega$ only"
        }, 
        {
            "location": "/Examples/ode/#both-parameters_1", 
            "text": "The observation data are plotted as a solid black line.", 
            "title": "Both parameters"
        }, 
        {
            "location": "/Notebooks/", 
            "text": "Mads examples using Jupyter notebooks:\n\n\n\n\nContaminant transport\n \n \ndownload\n -:- \nview\n\n\nBlind Source Separation\n \n \ndownload\n -:- \nview", 
            "title": "Notebooks"
        }, 
        {
            "location": "/Notebooks/#mads-examples-using-jupyter-notebooks", 
            "text": "Contaminant transport     download  -:-  view  Blind Source Separation     download  -:-  view", 
            "title": "Mads examples using Jupyter notebooks:"
        }, 
        {
            "location": "/Examples/", 
            "text": "Mads Examples\n\n\nSetup\n\n\nContaminant transport\n\n\nContaminant transport\n\n\nInformation Gap Analysis\n\n\nBayesian Sampling\n\n\nBlind Source Separation\n\n\nContaminant Transport\n\n\nODE Analysis", 
            "title": "Examples Links"
        }, 
        {
            "location": "/Examples/#mads-examples", 
            "text": "", 
            "title": "Mads Examples"
        }, 
        {
            "location": "/Examples/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/#contaminant-transport", 
            "text": "", 
            "title": "Contaminant transport"
        }, 
        {
            "location": "/Examples/#contaminant-transport_1", 
            "text": "", 
            "title": "Contaminant transport"
        }, 
        {
            "location": "/Examples/#information-gap-analysis", 
            "text": "", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/#bayesian-sampling", 
            "text": "", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/#blind-source-separation", 
            "text": "", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/#contaminant-transport_2", 
            "text": "", 
            "title": "Contaminant Transport"
        }, 
        {
            "location": "/Examples/#ode-analysis", 
            "text": "", 
            "title": "ODE Analysis"
        }, 
        {
            "location": "/model_coupling/", 
            "text": "Model Coupling\n\n\nMADS can be coupled with any internal or external model.\nThe model coupling is defined in the MADS problem dictionary.\nThe expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS.\nThe fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\n\n\nModel\n : Julia model defined in an external Julia file.\n\n\n\n\n\n\nMADS model\n : Julia model defined in an external Julia file using information from the MADS problem dictionary.\n\n\n\n\n\n\nJulia model\n : Julia model defined internally (already in the Julia workspace).\n\n\n\n\n\n\nCommand\n : external model executed by an UNIX command or script.\n\n\n\n\n\n\nJulia command\n : external model executed by a Julia script. The Julia script is defined in an external Julia file.\n\n\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model.\nOnly \nCommand\n uses different approaches to get back the model outputs.\nThe script defined under \nJulia command\n parses the model outputs using Julia.\nThe available options for writing model inputs and reading model outputs are as follows.\n\n\n\n\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at \nmads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file", 
            "title": "Model Coupling"
        }, 
        {
            "location": "/model_coupling/#model-coupling", 
            "text": "MADS can be coupled with any internal or external model.\nThe model coupling is defined in the MADS problem dictionary.\nThe expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS.\nThe fields in the MADS problem dictionary that can be used to define the model coupling are:    Model  : Julia model defined in an external Julia file.    MADS model  : Julia model defined in an external Julia file using information from the MADS problem dictionary.    Julia model  : Julia model defined internally (already in the Julia workspace).    Command  : external model executed by an UNIX command or script.    Julia command  : external model executed by a Julia script. The Julia script is defined in an external Julia file.    Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model.\nOnly  Command  uses different approaches to get back the model outputs.\nThe script defined under  Julia command  parses the model outputs using Julia.\nThe available options for writing model inputs and reading model outputs are as follows.    Options for writing model inputs:   Templates  : template files for writing model input files as defined at  mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file     Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file", 
            "title": "Model Coupling"
        }, 
        {
            "location": "/test/", 
            "text": "Testing \n Verification\n\n\nMADS includes a series of test and verification problems.\nThese are also provided as examples how to run the code and perform various types of data and model analyses.\nAll the MADS examples can be found in the MADS repository: \ngithub\n.\n\n\nAll the test and verification problems can be executed using:\n\n\nimport\n \nMads\n\n\nMads\n.\ntest\n()\n\n\n\n\n\n\nor\n\n\nPkg\n.\ntest\n(\nMads\n)\n\n\nPkg\n.\ntest\n(\nAnasol\n)\n\n\nPkg\n.\ntest\n(\nBIGUQ\n)\n\n\nPkg\n.\ntest\n(\nReusableFunctions\n)\n\n\nPkg\n.\ntest\n(\nMetaProgTools\n)\n\n\nPkg\n.\ntest\n(\nRobustPmap\n)", 
            "title": "Testing & Verification"
        }, 
        {
            "location": "/test/#testing-verification", 
            "text": "MADS includes a series of test and verification problems.\nThese are also provided as examples how to run the code and perform various types of data and model analyses.\nAll the MADS examples can be found in the MADS repository:  github .  All the test and verification problems can be executed using:  import   Mads  Mads . test ()   or  Pkg . test ( Mads )  Pkg . test ( Anasol )  Pkg . test ( BIGUQ )  Pkg . test ( ReusableFunctions )  Pkg . test ( MetaProgTools )  Pkg . test ( RobustPmap )", 
            "title": "Testing &amp; Verification"
        }, 
        {
            "location": "/functions/", 
            "text": "MADS Functions\n\n\nMADS includes several Modules. The modules include numerous functions. To list all the available functions execute:\n\n\nMads\n.\nfunctions\n()\n\n\n\n\n\n\nTo list all the functions in a module, do:\n\n\nMads\n.\nfunctions\n(\nBIGUQ\n)\n\n\n\n\n\n\nTo list all the functions containing \nget\n, execute:\n\n\nMads\n.\nfunctions\n(\nget\n)\n\n\nMads\n.\nfunctions\n(\nMads\n,\n \nget\n)", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#mads-functions", 
            "text": "MADS includes several Modules. The modules include numerous functions. To list all the available functions execute:  Mads . functions ()   To list all the functions in a module, do:  Mads . functions ( BIGUQ )   To list all the functions containing  get , execute:  Mads . functions ( get )  Mads . functions ( Mads ,   get )", 
            "title": "MADS Functions"
        }, 
        {
            "location": "/Modules/Mads/", 
            "text": "Mads.jl\n\n\nDocumentation for Mads.jl\n\n\n#\n\n\nMads.MFlm\n \n \nMethod\n.\n\n\nMatrix Factorization via Levenberg Marquardt\n\n\nMethods\n\n\n\n\nMads.MFlm(X::Array{T\n:Any,2}, nk::Integer; mads, log_W, log_H, retries, maxiter, tol, initW, initH)\n : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:82\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\nnk::Integer\n\n\n\n\nKeywords\n\n\n\n\ninitH\n\n\ninitW\n\n\nlog_H\n\n\nlog_W\n\n\nmads\n\n\nmaxiter\n\n\nretries\n\n\ntol\n\n\n\n\nsource\n\n\n#\n\n\nMads.NMFipopt\n \n \nMethod\n.\n\n\nNon-negative Matrix Factorization using JuMP/Ipopt\n\n\nMethods\n\n\n\n\nMads.NMFipopt(X::Array{T\n:Any,2}, nk::Integer; retries, tol, random, maxiter, maxguess, initW, initH, verbosity, quiet)\n : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:36\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\nnk::Integer\n\n\n\n\nKeywords\n\n\n\n\ninitH\n\n\ninitW\n\n\nmaxguess\n\n\nmaxiter\n\n\nquiet\n\n\nrandom\n\n\nretries\n\n\ntol\n\n\nverbosity\n\n\n\n\nsource\n\n\n#\n\n\nMads.NMFm\n \n \nMethod\n.\n\n\nNon-negative Matrix Factorization using NMF\n\n\nMethods\n\n\n\n\nMads.NMFm(X::Array, nk::Integer; retries, maxiter, tol)\n : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:12\n\n\n\n\nArguments\n\n\n\n\nX::Array\n\n\nnk::Integer\n\n\n\n\nKeywords\n\n\n\n\nmaxiter\n\n\nretries\n\n\ntol\n\n\n\n\nsource\n\n\n#\n\n\nMads.addkeyword!\n \n \nFunction\n.\n\n\nAdd a \nkeyword\n in a \nclass\n within the Mads dictionary \nmadsdata\n\n\nMethods\n\n\n\n\nMads.addkeyword!(madsdata::Associative, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:183\n\n\nMads.addkeyword!(madsdata::Associative, class::String, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:187\n\n\n\n\nArguments\n\n\n\n\nclass::String\n : dictionary class; if not provided searches for \nkeyword\n in \nProblem\n class\n\n\nkeyword::String\n : dictionary key\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.addsource!\n \n \nFunction\n.\n\n\nAdd an additional contamination source\n\n\nMethods\n\n\n\n\nMads.addsource!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:14\n\n\nMads.addsource!(madsdata::Associative, sourceid::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:14\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nsourceid::Int64\n : source id [default=\n0\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.addsourceparameters!\n \n \nMethod\n.\n\n\nAdd contaminant source parameters\n\n\nMethods\n\n\n\n\nMads.addsourceparameters!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:64\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.allwellsoff!\n \n \nMethod\n.\n\n\nTurn off all the wells in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.allwellsoff!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:551\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.allwellson!\n \n \nMethod\n.\n\n\nTurn on all the wells in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.allwellson!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:516\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.amanzi\n \n \nFunction\n.\n\n\nExecute amanzi external groundwater flow and transport simulator \n\n\nArguments:\n\n\n\n\nfilename\n : amanzi input file name\n\n\nnproc\n : number of processor to be used by amanzi\n\n\nquiet\n : : suppress output [default \ntrue\n]\n\n\nobservation_filename\n : amanzi observation filename [default \"observations.out\"]\n\n\nsetup\n : bash script to setup amanzi environmental variables\n\n\namanzi_exe\n : full path to the location of the amanzi executable\n\n\n\n\nsource\n\n\n#\n\n\nMads.amanzi_output_parser\n \n \nFunction\n.\n\n\nParse Amanzi output provided in an external file (\nfilename\n)\n\n\nUsage:\n\n\nMads\n.\namanzi_output_parser\n()\n\n\nMads\n.\namanzi_output_parser\n(\nobservations.out\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nfilename\n : external file name (optional)\n\n\n\n\nReturns:\n\n\n\n\na dictionary with model observations following MADS requirements\n\n\n\n\nsource\n\n\n#\n\n\nMads.asinetransform\n \n \nMethod\n.\n\n\nArcsine transformation of model parameters\n\n\nMethods\n\n\n\n\nMads.asinetransform(params::Array{T\n:Any,1}, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:17\n\n\n\n\nArguments\n\n\n\n\nindexlogtransformed::Array{T\n:Any,1}\n : index vector of log-transformed parameters\n\n\nlowerbounds::Array{T\n:Any,1}\n : lower bounds\n\n\nparams::Array{T\n:Any,1}\n : model parameters\n\n\nupperbounds::Array{T\n:Any,1}\n : upper bounds\n\n\n\n\nReturns:\n\n\n\n\nArcsine transformation of model parameters\n\n\n\n\nsource\n\n\n#\n\n\nMads.bayessampling\n \n \nFunction\n.\n\n\nBayesian Sampling\n\n\nMethods\n\n\n\n\nMads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:69\n\n\nMads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:94\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumsequences::Integer\n : number of sequences executed in parallel\n\n\n\n\nKeywords\n\n\n\n\nburnin\n : number of initial realizations before the MCMC are recorded [default=\n100\n]\n\n\nnsteps\n : number of final realizations in the chain [default=\n1000\n]\n\n\nseed\n : initial random number seed [default=\n0\n]\n\n\nthinning\n : removal of any \nthinning\n realization [default=\n1\n]\n\n\n\n\nReturns:\n\n\n\n\nMCMC chain\n\n\n\n\nExamples:\n\n\nMads\n.\nbayessampling\n(\nmadsdata\n;\n \nnsteps\n=\n1000\n,\n \nburnin\n=\n100\n,\n \nthinning\n=\n1\n,\n \nseed\n=\n2016\n)\n\n\nMads\n.\nbayessampling\n(\nmadsdata\n,\n \nnumsequences\n;\n \nnsteps\n=\n1000\n,\n \nburnin\n=\n100\n,\n \nthinning\n=\n1\n,\n \nseed\n=\n2016\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.calibrate\n \n \nMethod\n.\n\n\nCalibrate\n\n\nMads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\nMethods\n\n\n\n\nMads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:166\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nlambda\n : initial Levenberg-Marquardt lambda [default=\n100.0\n]\n\n\nlambda_mu\n : lambda multiplication factor [default=\n10.0\n]\n\n\nlocalsa\n : perform local sensitivity analysis [default=\nfalse\n]\n\n\nmaxEval\n : maximum number of model evaluations [default=\n1000\n]\n\n\nmaxIter\n : maximum number of optimization iterations [default=\n100\n]\n\n\nmaxJacobians\n : maximum number of Jacobian solves [default=\n100\n]\n\n\nnp_lambda\n : number of parallel lambda solves [default=\n10\n]\n\n\nsave_results\n : save intermediate results [default=\ntrue\n]\n\n\nshow_trace\n : shows solution trace [default=\nfalse\n]\n\n\ntolG\n : parameter space update tolerance [default=\n1e-6\n]\n\n\ntolOF\n : objective function tolerance [default=\n1e-3\n]\n\n\ntolX\n : parameter space tolerance [default=\n1e-4\n]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nmodel parameter dictionary with the optimal values at the minimum\n\n\noptimization algorithm results (e.g. results.minimizer)\n\n\n\n\nsource\n\n\n#\n\n\nMads.calibraterandom\n \n \nFunction\n.\n\n\nCalibrate with random initial guesses\n\n\nMethods\n\n\n\n\nMads.calibraterandom(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:39\n\n\nMads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:39\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumberofsamples::Integer\n : number of random initial samples [default=\n1\n]\n\n\n\n\nKeywords\n\n\n\n\nall\n : all model results are returned [default=\nfalse\n]\n\n\nlambda\n : initial Levenberg-Marquardt lambda [default=\n100.0\n]\n\n\nlambda_mu\n : lambda multiplication factor [default=\n10.0\n]\n\n\nmaxEval\n : maximum number of model evaluations [default=\n1000\n]\n\n\nmaxIter\n : maximum number of optimization iterations [default=\n100\n]\n\n\nmaxJacobians\n : maximum number of Jacobian solves [default=\n100\n]\n\n\nnp_lambda\n : number of parallel lambda solves [default=\n10\n]\n\n\nquiet\n : [default=\ntrue\n]\n\n\nsave_results\n : save intermediate results [default=\ntrue\n]\n\n\nseed\n : random seed [default=\n0\n]\n\n\nshow_trace\n : shows solution trace [default=\nfalse\n]\n\n\ntolG\n : parameter space update tolerance [default=\n1e-6\n]\n\n\ntolOF\n : objective function tolerance [default=\n1e-3\n]\n\n\ntolX\n : parameter space tolerance [default=\n1e-4\n]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nmodel parameter dictionary with the optimal values at the minimum\n\n\noptimization algorithm results (e.g. bestresult[2].minimizer)\n\n\n\n\nExample:\n\n\nMads\n.\ncalibraterandom\n(\nmadsdata\n;\n \ntolX\n=\n1e-3\n,\n \ntolG\n=\n1e-6\n,\n \nmaxEval\n=\n1000\n,\n \nmaxIter\n=\n100\n,\n \nmaxJacobians\n=\n100\n,\n \nlambda\n=\n100.0\n,\n \nlambda_mu\n=\n10.0\n,\n \nnp_lambda\n=\n10\n,\n \nshow_trace\n=\nfalse\n,\n \nusenaive\n=\nfalse\n)\n\n\nMads\n.\ncalibraterandom\n(\nmadsdata\n,\n \nnumberofsamples\n;\n \ntolX\n=\n1e-3\n,\n \ntolG\n=\n1e-6\n,\n \nmaxEval\n=\n1000\n,\n \nmaxIter\n=\n100\n,\n \nmaxJacobians\n=\n100\n,\n \nlambda\n=\n100.0\n,\n \nlambda_mu\n=\n10.0\n,\n \nnp_lambda\n=\n10\n,\n \nshow_trace\n=\nfalse\n,\n \nusenaive\n=\nfalse\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.calibraterandom_parallel\n \n \nFunction\n.\n\n\nCalibrate with random initial guesses in parallel\n\n\nMethods\n\n\n\n\nMads.calibraterandom_parallel(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:109\n\n\nMads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results, localsa)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:109\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumberofsamples::Integer\n : number of random initial samples [default=\n1\n]\n\n\n\n\nKeywords\n\n\n\n\nlambda\n : initial Levenberg-Marquardt lambda [default=\n100.0\n]\n\n\nlambda_mu\n : lambda multiplication factor [default=\n10.0\n]\n\n\nlocalsa\n : perform local sensitivity analysis [default=\nfalse\n]\n\n\nmaxEval\n : maximum number of model evaluations [default=\n1000\n]\n\n\nmaxIter\n : maximum number of optimization iterations [default=\n100\n]\n\n\nmaxJacobians\n : maximum number of Jacobian solves [default=\n100\n]\n\n\nnp_lambda\n : number of parallel lambda solves [default=\n10\n]\n\n\nquiet\n : suppress output [default=\ntrue\n]\n\n\nsave_results\n : save intermediate results [default=\ntrue\n]\n\n\nseed\n : random seed [default=\n0\n]\n\n\nshow_trace\n : shows solution trace [default=\nfalse\n]\n\n\ntolG\n : parameter space update tolerance [default=\n1e-6\n]\n\n\ntolOF\n : objective function tolerance [default=\n1e-3\n]\n\n\ntolX\n : parameter space tolerance [default=\n1e-4\n]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nvector with all objective function values\n\n\nboolean vector (converged/not converged)\n\n\narray with estimate model parameters\n\n\n\n\nsource\n\n\n#\n\n\nMads.checkmodeloutputdirs\n \n \nMethod\n.\n\n\nCheck the directories where model outputs should be saved for MADS\n\n\nMethods\n\n\n\n\nMads.checkmodeloutputdirs(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:465\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\ntrue or false\n\n\n\n\nsource\n\n\n#\n\n\nMads.checknodedir\n \n \nFunction\n.\n\n\nCheck if a directory is readable\n\n\nMethods\n\n\n\n\nMads.checknodedir(dir::String, waittime::Float64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:13\n\n\nMads.checknodedir(dir::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:13\n\n\nMads.checknodedir(node::String, dir::String, waittime::Float64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:4\n\n\nMads.checknodedir(node::String, dir::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:4\n\n\n\n\nArguments\n\n\n\n\ndir::String\n : directory\n\n\nnode::String\n : computational node name (e.g. \nmadsmax.lanl.gov\n, \nwf03\n, or \n127.0.0.1\n)\n\n\nwaittime::Float64\n : wait time in seconds [default=\n10\n]\n\n\n\n\nReturns:\n\n\n\n\ntrue\n if the directory is readable, \nfalse\n otherwise\n\n\n\n\nsource\n\n\n#\n\n\nMads.checkout\n \n \nFunction\n.\n\n\nCheckout (pull) the latest version of the Mads / Julia modules\n\n\nMethods\n\n\n\n\nMads.checkout(modulename::String; git, master, force, pull, required, all)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:72\n\n\nMads.checkout()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:72\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nKeywords\n\n\n\n\nall\n\n\nforce\n\n\ngit\n\n\nmaster\n\n\npull\n\n\nrequired\n\n\n\n\nsource\n\n\n#\n\n\nMads.checkparameterranges\n \n \nMethod\n.\n\n\nCheck parameter ranges for model parameters\n\n\nMethods\n\n\n\n\nMads.checkparameterranges(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:661\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.cleancoverage\n \n \nMethod\n.\n\n\nRemove Mads coverage files\n\n\nMethods\n\n\n\n\nMads.cleancoverage()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:20\n\n\n\n\nsource\n\n\n#\n\n\nMads.cmadsins_obs\n \n \nMethod\n.\n\n\nCall C MADS ins_obs() function from the MADS dynamic library\n\n\nMethods\n\n\n\n\nMads.cmadsins_obs(obsid::Array{T\n:Any,1}, instructionfilename::String, inputfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:27\n\n\n\n\nArguments\n\n\n\n\ninputfilename::String\n\n\ninstructionfilename::String\n\n\nobsid::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.commit\n \n \nFunction\n.\n\n\nCommit the latest version of the Mads / Julia modules in the repo\n\n\nMethods\n\n\n\n\nMads.commit(commitmsg::String, modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:166\n\n\nMads.commit(commitmsg::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:166\n\n\n\n\nArguments\n\n\n\n\ncommitmsg::String\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.computemass\n \n \nFunction\n.\n\n\nCompute injected/reduced contaminant mass (for a given set of mads input files when \"path\" is provided)\n\n\nMethods\n\n\n\n\nMads.computemass(madsdata::Associative; time)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:282\n\n\nMads.computemass(madsfiles::Union{Regex,String}; time, path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:323\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nmadsfiles::Union{Regex,String}\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\n\n\nKeywords\n\n\n\n\npath\n : search directory for the mads input files [default=\n\".\"\n]\n\n\ntime\n : computational time [default=\n0\n]\n\n\n\n\nReturns:\n\n\n\n\narray with all the lambda values\n\n\narray with associated total injected mass\n\n\narray with associated total reduced mass\n\n\n\n\nExample:\n\n\nMads\n.\ncomputemass\n(\nmadsfiles\n;\n \ntime\n=\n0\n,\n \npath\n=\n.\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.computeparametersensitities\n \n \nMethod\n.\n\n\nCompute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range\n\n\nMethods\n\n\n\n\nMads.computeparametersensitities(madsdata::Associative, saresults::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:812\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nsaresults::Associative\n : dictionary with sensitivity analysis results\n\n\n\n\nsource\n\n\n#\n\n\nMads.contamination\n \n \nMethod\n.\n\n\nCompute concentration for a point in space and time (x,y,z,t)\n\n\nMethods\n\n\n\n\nMads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Number; anasolfunction)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:256\n\n\n\n\nArguments\n\n\n\n\nH::Number\n : Hurst coefficient for Fractional Brownian dispersion\n\n\nax::Number\n : dispersivity in X direction (longitudinal)\n\n\nay::Number\n : dispersivity in Y direction (transverse horizontal)\n\n\naz::Number\n : dispersivity in Y direction (transverse vertical)\n\n\ndx::Number\n : source size (extent) in X direction\n\n\ndy::Number\n : source size (extent) in Y direction\n\n\ndz::Number\n : source size (extent) in Z direction\n\n\nf::Number\n : source mass flux\n\n\nlambda::Number\n : first-order reaction rate\n\n\nn::Number\n : porosity\n\n\nt0::Number\n : source starting time\n\n\nt1::Number\n : source termination time\n\n\nt::Number\n : time to compute concentration at the observation point\n\n\ntheta::Number\n : groundwater flow direction\n\n\nvx::Number\n : advective transport velocity in X direction\n\n\nvy::Number\n : advective transport velocity in Y direction\n\n\nvz::Number\n : advective transport velocity in Z direction\n\n\nwellx::Number\n : observation point (well) X coordinate\n\n\nwelly::Number\n : observation point (well) Y coordinate\n\n\nwellz::Number\n : observation point (well) Z coordinate\n\n\nx::Number\n : X coordinate of contaminant source location\n\n\ny::Number\n : Y coordinate of contaminant source location\n\n\nz::Number\n : Z coordinate of contaminant source location\n\n\n\n\nKeywords\n\n\n\n\nanasolfunction\n : Anasol function to call (check out the Anasol module) [default=\n\"long_bbb_ddd_iir_c\"\n]\n\n\n\n\nReturns:\n\n\n\n\npredicted concentration at (wellx, welly, wellz, t)\n\n\n\n\nsource\n\n\n#\n\n\nMads.copyright\n \n \nMethod\n.\n\n\nProduce MADS copyright information\n\n\nMethods\n\n\n\n\nMads.copyright()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:19\n\n\n\n\nsource\n\n\n#\n\n\nMads.create_documentation\n \n \nMethod\n.\n\n\nCreate web documentation files for Mads functions\n\n\nMethods\n\n\n\n\nMads.create_documentation()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:270\n\n\n\n\nsource\n\n\n#\n\n\nMads.create_tests_off\n \n \nMethod\n.\n\n\nTurn off the generation of MADS tests (default)\n\n\nMethods\n\n\n\n\nMads.create_tests_off()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:84\n\n\n\n\nsource\n\n\n#\n\n\nMads.create_tests_on\n \n \nMethod\n.\n\n\nTurn on the generation of MADS tests (dangerous)\n\n\nMethods\n\n\n\n\nMads.create_tests_on()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:75\n\n\n\n\nsource\n\n\n#\n\n\nMads.createmadsproblem\n \n \nFunction\n.\n\n\nCreate a new Mads problem where the observation targets are computed based on the model predictions\n\n\nMethods\n\n\n\n\nMads.createmadsproblem(infilename::String, outfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:5\n\n\nMads.createmadsproblem(madsdata::Associative, outfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:30\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:39\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:35\n\n\n\n\nArguments\n\n\n\n\ninfilename::String\n : input Mads file\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\noutfilename::String\n : output Mads file\n\n\npredictions::Associative\n : dictionary of model predictions\n\n\n\n\nsource\n\n\n#\n\n\nMads.createobservations!\n \n \nFunction\n.\n\n\nCreate observations in the MADS problem dictionary based on \ntime\n and \nobservation\n vectors\n\n\nMethods\n\n\n\n\nMads.createobservations!(madsdata::Associative, time::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:411\n\n\nMads.createobservations!(madsdata::Associative, time::Array{T\n:Any,1}, observation::Array{T\n:Any,1}; logtransform, weight_type, weight)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:411\n\n\nMads.createobservations!(madsdata::Associative, observation::Associative; logtransform, weight_type, weight)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:455\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nobservation::Array{T\n:Any,1}\n : dictionary of observations\n\n\nobservation::Associative\n : dictionary of observations\n\n\ntime::Array{T\n:Any,1}\n : vector of observation times\n\n\n\n\nKeywords\n\n\n\n\nlogtransform\n : log transform observations [default=\nfalse\n]\n\n\nweight\n : weight value [default=\n1\n]\n\n\nweight_type\n : weight type [default=\nconstant\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.createtempdir\n \n \nMethod\n.\n\n\nCreate temporary directory\n\n\nMethods\n\n\n\n\nMads.createtempdir(tempdirname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1037\n\n\n\n\nArguments\n\n\n\n\ntempdirname::String\n : temporary directory name\n\n\n\n\nsource\n\n\n#\n\n\nMads.deleteNaN!\n \n \nMethod\n.\n\n\nDelete rows with NaN in a dataframe \ndf\n\n\nMethods\n\n\n\n\nMads.deleteNaN!(df::DataFrames.DataFrame)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1036\n\n\n\n\nArguments\n\n\n\n\ndf::DataFrames.DataFrame\n : dataframe\n\n\n\n\nsource\n\n\n#\n\n\nMads.deletekeyword!\n \n \nFunction\n.\n\n\nDelete a \nkeyword\n in a \nclass\n within the Mads dictionary \nmadsdata\n\n\nMethods\n\n\n\n\nMads.deletekeyword!(madsdata::Associative, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:210\n\n\nMads.deletekeyword!(madsdata::Associative, class::String, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:216\n\n\n\n\nArguments\n\n\n\n\nclass::String\n : dictionary class; if not provided searches for \nkeyword\n in \nProblem\n class\n\n\nkeyword::String\n : dictionary key\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.dependents\n \n \nFunction\n.\n\n\nLists modules dependents on a module (Mads by default)\n\n\nMethods\n\n\n\n\nMads.dependents(modulename::String, filter::Bool)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45\n\n\nMads.dependents(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45\n\n\nMads.dependents()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45\n\n\n\n\nArguments\n\n\n\n\nfilter::Bool\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.display\n \n \nMethod\n.\n\n\nDisplay image file\n\n\nMethods\n\n\n\n\nMads.display(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsDisplay.jl:9\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.dobigdt\n \n \nMethod\n.\n\n\nPerform Bayesian Information Gap Decision Theory (BIG-DT) analysis\n\n\nMethods\n\n\n\n\nMads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, numlikelihoods, maxHorizon)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:123\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnummodelruns::Int64\n : number of model runs\n\n\n\n\nKeywords\n\n\n\n\nmaxHorizon\n : maximum info-gap horizons of uncertainty [default=\n3\n]\n\n\nnumhorizons\n : number of info-gap horizons of uncertainty [default=\n100\n]\n\n\nnumlikelihoods\n : number of Bayesian likelihoods [default=\n25\n]\n\n\n\n\nReturns:\n\n\n\n\ndictionary with BIG-DT results\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpasciifile\n \n \nMethod\n.\n\n\nDump ASCII file\n\n\nMethods\n\n\n\n\nMads.dumpasciifile(filename::String, data)\n : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:30\n\n\n\n\nArguments\n\n\n\n\ndata\n : data to dump\n\n\nfilename::String\n : ASCII file name\n\n\n\n\nDumps:\n\n\n\n\nASCII file with the name in \"filename\"\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpjsonfile\n \n \nMethod\n.\n\n\nDump a JSON file\n\n\nMethods\n\n\n\n\nMads.dumpjsonfile(filename::String, data)\n : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:38\n\n\n\n\nArguments\n\n\n\n\ndata\n : data to dump\n\n\nfilename::String\n : JSON file name\n\n\n\n\nDumps:\n\n\n\n\nJSON file with the name in \"filename\"\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpwelldata\n \n \nMethod\n.\n\n\nDump well data from MADS problem dictionary into a ASCII file\n\n\nMethods\n\n\n\n\nMads.dumpwelldata(madsdata::Associative, filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:916\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : output file name\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nDumps:\n\n\n\n\nfilename\n : a ASCII file\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpyamlfile\n \n \nMethod\n.\n\n\nDump YAML file\n\n\nMethods\n\n\n\n\nMads.dumpyamlfile(filename::String, data; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:44\n\n\n\n\nArguments\n\n\n\n\ndata\n : YAML data\n\n\nfilename::String\n : output file name\n\n\n\n\nKeywords\n\n\n\n\njulia\n : if \ntrue\n, use \njulia\n YAML library (if available); if \nfalse\n (default), use \npython\n YAML library (if available)\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpyamlmadsfile\n \n \nMethod\n.\n\n\nDump YAML Mads file\n\n\nMethods\n\n\n\n\nMads.dumpyamlmadsfile(madsdata::Associative, filename::String; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:63\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : output file name\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\njulia\n : use julia YAML [default=\nfalse\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.efast\n \n \nMethod\n.\n\n\nSensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method\n\n\nMethods\n\n\n\n\nMads.efast(md::Associative; N, M, gamma, plotresults, seed, issvr, truncateRanges, checkpointfrequency, restartdir, restart)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1124\n\n\n\n\nArguments\n\n\n\n\nmd::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nM\n : maximum number of harmonics [default=\n6\n]\n\n\nN\n : number of samples [default=\n100\n]\n\n\ncheckpointfrequency\n : check point frequency [default=\nN\n]\n\n\ngamma\n : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) [default=\n4\n]\n\n\nissvr\n : use SVR [default=\nfalse\n]\n\n\nplotresults\n : plot results [default=\nMads.graphoutput\n]\n\n\nrestart\n : save restart information [default=\nfalse\n]\n\n\nrestartdir\n : directory where files will be stored containing model results for fast simulation restarts [default=\n\"efastcheckpoints\"\n]\n\n\nseed\n : random seed [default=\n0\n]\n\n\ntruncateRanges\n : truncate parameter ranges [default=\n0\n]\n\n\n\n\nDumps:\n\n\n\n\nplot of results, default from \ngraphoutput\n\n\n\n\nsource\n\n\n#\n\n\nMads.emceesampling\n \n \nFunction\n.\n\n\nBayesian sampling with Goodman \n Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)\n\n\nMethods\n\n\n\n\nMads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:10\n\n\nMads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:32\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\np0::Array\n : initial parameters (matrix of size (length(optparams), numwalkers))\n\n\n\n\nKeywords\n\n\n\n\nburnin\n : number of initial realizations before the MCMC are recorded [default=\n10\n]\n\n\nnsteps\n : number of final realizations in the chain [default=\n100\n]\n\n\nnumwalkers\n : number of walkers (if in parallel this can be the number of available processors) [default=\n10\n]\n\n\nseed\n : initial random number seed [default=\n0\n]\n\n\nsigma\n : a standard deviation parameter used to initialize the walkers [default=\n0.01\n]\n\n\nthinning\n : removal of any \nthinning\n realization [default=\n1\n]\n\n\nweightfactor\n : weight factor [default=\n1.0\n]\n\n\n\n\nReturns:\n\n\n\n\nMCMC chain\n\n\nlog likelihoods of the final samples in the chain\n\n\n\n\nExamples:\n\n\nMads\n.\nemceesampling\n(\nmadsdata\n;\n \nnumwalkers\n=\n10\n,\n \nnsteps\n=\n100\n,\n \nburnin\n=\n100\n,\n \nthinning\n=\n1\n,\n \nseed\n=\n2016\n,\n \nsigma\n=\n0.01\n)\n\n\nMads\n.\nemceesampling\n(\nmadsdata\n,\n \np0\n;\n \nnumwalkers\n=\n10\n,\n \nnsteps\n=\n100\n,\n \nburnin\n=\n10\n,\n \nthinning\n=\n1\n,\n \nseed\n=\n2016\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.estimationerror\n \n \nFunction\n.\n\n\nEstimate kriging error\n\n\nMethods\n\n\n\n\nMads.estimationerror(w::Array{T\n:Any,1}, x0::Array{T\n:Any,1}, X::Array{T\n:Any,2}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:190\n\n\nMads.estimationerror(w::Array{T\n:Any,1}, covmat::Array{T\n:Any,2}, covvec::Array{T\n:Any,1}, cov0::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:197\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n : observation matrix\n\n\ncov0::Number\n : zero-separation covariance\n\n\ncov::Function\n : spatial covariance function\n\n\ncovmat::Array{T\n:Any,2}\n : covariance matrix\n\n\ncovvec::Array{T\n:Any,1}\n : covariance vector\n\n\nw::Array{T\n:Any,1}\n : kriging weights\n\n\nx0::Array{T\n:Any,1}\n : estimated locations\n\n\n\n\nReturns:\n\n\n\n\nestimation kriging error\n\n\n\n\nsource\n\n\n#\n\n\nMads.evaluatemadsexpression\n \n \nMethod\n.\n\n\nEvaluate an expression string based on a parameter dictionary\n\n\nMethods\n\n\n\n\nMads.evaluatemadsexpression(expressionstring::String, parameters::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:125\n\n\n\n\nArguments\n\n\n\n\nexpressionstring::String\n : expression string\n\n\nparameters::Associative\n : parameter dictionary applied to evaluate the expression string\n\n\n\n\nReturns:\n\n\n\n\ndictionary containing the expression names as keys, and the values of the expression as values\n\n\n\n\nsource\n\n\n#\n\n\nMads.evaluatemadsexpressions\n \n \nMethod\n.\n\n\nEvaluate all the expressions in the Mads problem dictiorany based on a parameter dictionary\n\n\nMethods\n\n\n\n\nMads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:144\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameters::Associative\n : parameter dictionary applied to evaluate the expression strings\n\n\n\n\nReturns:\n\n\n\n\ndictionary containing the expression names as keys, and the values of the expression as values\n\n\n\n\nsource\n\n\n#\n\n\nMads.expcov\n \n \nMethod\n.\n\n\nExponential spatial covariance function\n\n\nMethods\n\n\n\n\nMads.expcov(h::Number, maxcov::Number, scale::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:29\n\n\n\n\nArguments\n\n\n\n\nh::Number\n : separation distance\n\n\nmaxcov::Number\n : maximum covariance\n\n\nscale::Number\n : scale\n\n\n\n\nReturns:\n\n\n\n\ncovariance\n\n\n\n\nsource\n\n\n#\n\n\nMads.exponentialvariogram\n \n \nMethod\n.\n\n\nExponential variogram\n\n\nMethods\n\n\n\n\nMads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:82\n\n\n\n\nArguments\n\n\n\n\nh::Number\n : separation distance\n\n\nnugget::Number\n : nugget\n\n\nrange::Number\n : range\n\n\nsill::Number\n : sill\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.filterkeys\n \n \nFunction\n.\n\n\nFilter dictionary keys based on a string or regular expression\n\n\nMethods\n\n\n\n\nMads.filterkeys(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:632\n\n\nMads.filterkeys(dict::Associative, key::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:631\n\n\nMads.filterkeys(dict::Associative, key::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:632\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n : dictionary\n\n\nkey::Regex\n : the regular expression or string used to filter dictionary keys\n\n\nkey::String\n : the regular expression or string used to filter dictionary keys\n\n\n\n\nsource\n\n\n#\n\n\nMads.forward\n \n \nFunction\n.\n\n\nPerform a forward run using the initial or provided values for the model parameters\n\n\nMethods\n\n\n\n\nMads.forward(madsdata::Associative; all)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:7\n\n\nMads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:11\n\n\nMads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:41\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparamarray::Array\n : array of model parameter values\n\n\nparamdict::Associative\n : dictionary of model parameter values\n\n\n\n\nKeywords\n\n\n\n\nall\n : all model results are returned [default=\nfalse\n]\n\n\ncheckpointfilename\n : check point file name [default=\"checkpoint_forward\"]\n\n\ncheckpointfrequency\n : check point frequency for storing restart information [default=\n0\n]\n\n\n\n\nReturns:\n\n\n\n\ndictionary of model predictions\n\n\n\n\nsource\n\n\n#\n\n\nMads.forwardgrid\n \n \nFunction\n.\n\n\nPerform a forward run over a 3D grid defined in \nmadsdata\n using the initial or provided values for the model parameters\n\n\nMethods\n\n\n\n\nMads.forwardgrid(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:113\n\n\nMads.forwardgrid(madsdatain::Associative, paramvalues::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:118\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nmadsdatain::Associative\n : MADS problem dictionary\n\n\nparamvalues::Associative\n : dictionary of model parameter values\n\n\n\n\nReturns:\n\n\n\n\n3D array with model predictions along a 3D grid\n\n\n\n\nsource\n\n\n#\n\n\nMads.free\n \n \nFunction\n.\n\n\nFree Mads / Julia modules\n\n\nMethods\n\n\n\n\nMads.free(modulename::String; required, all)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:144\n\n\nMads.free()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:144\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nKeywords\n\n\n\n\nall\n\n\nrequired\n\n\n\n\nsource\n\n\n#\n\n\nMads.functions\n \n \nFunction\n.\n\n\nList available functions in the MADS modules:\n\n\nMethods\n\n\n\n\nMads.functions(string::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:23\n\n\nMads.functions()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:23\n\n\nMads.functions(m::Union{Module,Symbol})\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:29\n\n\nMads.functions(m::Union{Module,Symbol}, string::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:29\n\n\n\n\nArguments\n\n\n\n\nm::Union{Module,Symbol}\n : MADS module\n\n\nstring::String\n : string to display functions with matching names\n\n\n\n\nExamples:\n\n\nMads\n.\nfunctions\n()\n\n\nMads\n.\nfunctions\n(\nBIGUQ\n)\n\n\nMads\n.\nfunctions\n(\nget\n)\n\n\nMads\n.\nfunctions\n(\nMads\n,\n \nget\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.gaussiancov\n \n \nMethod\n.\n\n\nGaussian spatial covariance function\n\n\nMethods\n\n\n\n\nMads.gaussiancov(h::Number, maxcov::Number, scale::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:15\n\n\n\n\nArguments\n\n\n\n\nh::Number\n : separation distance\n\n\nmaxcov::Number\n : maximum covariance\n\n\nscale::Number\n : scale\n\n\n\n\nReturns:\n\n\n\n\ncovariance\n\n\n\n\nsource\n\n\n#\n\n\nMads.gaussianvariogram\n \n \nMethod\n.\n\n\nGaussian variogram\n\n\nMethods\n\n\n\n\nMads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:103\n\n\n\n\nArguments\n\n\n\n\nh::Number\n : separation distance\n\n\nnugget::Number\n : nugget\n\n\nrange::Number\n : range\n\n\nsill::Number\n : sill\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.getcovmat\n \n \nMethod\n.\n\n\nGet spatial covariance matrix\n\n\nMethods\n\n\n\n\nMads.getcovmat(X::Array{T\n:Any,2}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:152\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n : matrix with coordinates of the data points (x or y)\n\n\ncov::Function\n : spatial covariance function\n\n\n\n\nsource\n\n\n#\n\n\nMads.getcovvec!\n \n \nMethod\n.\n\n\nGet spatial covariance vector\n\n\nMethods\n\n\n\n\nMads.getcovvec!(covvec::Array{T\n:Any,1}, x0::Array{T\n:Any,1}, X::Array{T\n:Any,2}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:178\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n : matrix with coordinates of the data points\n\n\ncov::Function\n : spatial covariance function\n\n\ncovvec::Array{T\n:Any,1}\n : spatial covariance vector\n\n\nx0::Array{T\n:Any,1}\n : vector with coordinates of the estimation points (x or y)\n\n\n\n\nReturns:\n\n\n\n\nspatial covariance vector\n\n\n\n\nsource\n\n\n#\n\n\nMads.getdictvalues\n \n \nFunction\n.\n\n\nGet dictionary values for keys based on a string or regular expression\n\n\nMethods\n\n\n\n\nMads.getdictvalues(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:654\n\n\nMads.getdictvalues(dict::Associative, key::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:653\n\n\nMads.getdictvalues(dict::Associative, key::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:654\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n : dictionary\n\n\nkey::Regex\n : the key to find value for\n\n\nkey::String\n : the key to find value for\n\n\n\n\nsource\n\n\n#\n\n\nMads.getdir\n \n \nMethod\n.\n\n\nGet directory\n\n\nMethods\n\n\n\n\nMads.getdir(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:271\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\n\n\nReturns:\n\n\n\n\ndirectory in file name\n\n\n\n\nExample:\n\n\nd\n \n=\n \nMads\n.\ngetdir\n(\na.mads\n)\n \n# d = \n.\n\n\nd\n \n=\n \nMads\n.\ngetdir\n(\ntest/a.mads\n)\n \n# d = \ntest\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.getdistribution\n \n \nMethod\n.\n\n\nParse parameter distribution from a string\n\n\nMethods\n\n\n\n\nMads.getdistribution(dist::String, i::String, inputtype::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:171\n\n\n\n\nArguments\n\n\n\n\ndist::String\n : parameter distribution\n\n\ni::String\n\n\ninputtype::String\n : input type (parameter or observation)\n\n\n\n\nReturns:\n\n\n\n\ndistribution\n\n\n\n\nsource\n\n\n#\n\n\nMads.getextension\n \n \nMethod\n.\n\n\nGet file name extension\n\n\nMethods\n\n\n\n\nMads.getextension(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:445\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\n\n\nReturns:\n\n\n\n\nfile name extension\n\n\n\n\nExample:\n\n\next\n \n=\n \nMads\n.\ngetextension\n(\na.mads\n)\n \n# ext = \nmads\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.getimportantsamples\n \n \nMethod\n.\n\n\nGet important samples\n\n\nMethods\n\n\n\n\nMads.getimportantsamples(samples::Array, llhoods::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:325\n\n\n\n\nArguments\n\n\n\n\nllhoods::Array{T\n:Any,1}\n : vector of log-likelihoods\n\n\nsamples::Array\n : array of samples\n\n\n\n\nReturns:\n\n\n\n\narray of important samples\n\n\n\n\nsource\n\n\n#\n\n\nMads.getlogparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are log-transformed (\nlog\n)\n\n\nsource\n\n\n#\n\n\nMads.getmadsdir\n \n \nMethod\n.\n\n\nGet the directory where currently Mads is running\n\n\nMethods\n\n\n\n\nMads.getmadsdir()\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:313\n\n\n\n\nExample:\n\n\nproblemdir\n \n=\n \nMads\n.\ngetmadsdir\n()\n\n\n\n\n\n\nReturns:\n\n\n\n\nMads problem directory\n\n\n\n\nsource\n\n\n#\n\n\nMads.getmadsinputfile\n \n \nMethod\n.\n\n\nGet the default MADS input file set as a MADS global variable using \nsetmadsinputfile(filename)\n\n\nMethods\n\n\n\n\nMads.getmadsinputfile()\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:228\n\n\n\n\nReturns:\n\n\n\n\ninput file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nsource\n\n\n#\n\n\nMads.getmadsproblemdir\n \n \nMethod\n.\n\n\nGet the directory where the Mads data file is located\n\n\nMethods\n\n\n\n\nMads.getmadsproblemdir(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:294\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nExample:\n\n\nmadsdata\n \n=\n \nMads\n.\nloadmadsproblem\n(\n../../a.mads\n)\n\n\nmadsproblemdir\n \n=\n \nMads\n.\ngetmadsproblemdir\n(\nmadsdata\n)\n\n\n\n\n\n\nwhere \nmadsproblemdir\n = \n\"../../\"\n\n\nsource\n\n\n#\n\n\nMads.getmadsrootname\n \n \nMethod\n.\n\n\nGet the MADS problem root name\n\n\nMethods\n\n\n\n\nMads.getmadsrootname(madsdata::Associative; first, version)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:250\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nfirst\n : use the first . in filename as the seperator between root name and extention [default=\ntrue\n]\n\n\nversion\n : delete version information from filename for the returned rootname [default=\nfalse\n]\n\n\n\n\nExample:\n\n\nmadsrootname\n \n=\n \nMads\n.\ngetmadsrootname\n(\nmadsdata\n)\n\n\n\n\n\n\nReturns:\n\n\n\n\nroot of file name\n\n\n\n\nsource\n\n\n#\n\n\nMads.getnextmadsfilename\n \n \nMethod\n.\n\n\nGet next mads file name\n\n\nMethods\n\n\n\n\nMads.getnextmadsfilename(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:408\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\n\n\nReturns:\n\n\n\n\nnext mads file name\n\n\n\n\nsource\n\n\n#\n\n\nMads.getnonlogparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are NOT log-transformed (\nlog\n)\n\n\nsource\n\n\n#\n\n\nMads.getnonoptparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are NOT optimized (\nopt\n)\n\n\nsource\n\n\n#\n\n\nMads.getobsdist\n \n \nMethod\n.\n\n\nGet an array with \ndist\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsdist\n \n \nMethod\n.\n\n\nGet an array with \ndist\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobskeys\n \n \nMethod\n.\n\n\nGet keys for all observations in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.getobskeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:43\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nkeys for all observations in the MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.getobslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobsmax\n \n \nMethod\n.\n\n\nGet an array with \nmax\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsmax\n \n \nMethod\n.\n\n\nGet an array with \nmax\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobstarget\n \n \nMethod\n.\n\n\nGet an array with \ntarget\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobstarget\n \n \nMethod\n.\n\n\nGet an array with \ntarget\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobstime\n \n \nMethod\n.\n\n\nGet an array with \ntime\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobstime\n \n \nMethod\n.\n\n\nGet an array with \ntime\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobsweight\n \n \nMethod\n.\n\n\nGet an array with \nweight\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsweight\n \n \nMethod\n.\n\n\nGet an array with \nweight\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getoptparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are optimized (\nopt\n)\n\n\nsource\n\n\n#\n\n\nMads.getoptparams\n \n \nFunction\n.\n\n\nGet optimizable parameters\n\n\nMethods\n\n\n\n\nMads.getoptparams(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:325\n\n\nMads.getoptparams(madsdata::Associative, parameterarray::Array)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:328\n\n\nMads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:328\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\noptparameterkey::Array\n : optimizable parameter keys\n\n\nparameterarray::Array\n : parameter array\n\n\n\n\nReturns:\n\n\n\n\nparameter array\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamdict\n \n \nMethod\n.\n\n\nGet dictionary with all parameters and their respective initial values\n\n\nMethods\n\n\n\n\nMads.getparamdict(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:60\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\ndictionary with all parameters and their respective initial values\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamdistributions\n \n \nMethod\n.\n\n\nGet probabilistic distributions of all parameters in the MADS problem dictionary\n\n\nNote:\n\n\nProbabilistic distribution of parameters can be defined only if \ndist\n or \nmin\n/\nmax\n model parameter fields are specified in the MADS problem dictionary \nmadsdata\n.\n\n\nMethods\n\n\n\n\nMads.getparamdistributions(madsdata::Associative; init_dist)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:616\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nprobabilistic distributions\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamkeys\n \n \nMethod\n.\n\n\nGet keys of all parameters in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.getparamkeys(madsdata::Associative; filter)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:44\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nfilter\n : parameter filter\n\n\n\n\nReturns:\n\n\n\n\narray with the keys of all parameters in the MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamrandom\n \n \nFunction\n.\n\n\nGet independent sampling of model parameters defined in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.getparamrandom(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:361\n\n\nMads.getparamrandom(madsdata::Associative, numsamples::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:361\n\n\nMads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:361\n\n\nMads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, init_dist, paramdist)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:374\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumsamples::Integer\n : number of samples,  [default=\n1\n]\n\n\nparameterkey::String\n : model parameter key\n\n\n\n\nKeywords\n\n\n\n\ninit_dist\n : if \ntrue\n use the distribution set for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); if \nfalse\n (default) use the regular distribution set in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\nnumsamples\n : number of samples\n\n\nparamdist\n : dictionary of parameter distributions\n\n\n\n\nReturns:\n\n\n\n\ngenerated sample\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit\n \n \nMethod\n.\n\n\nGet an array with \ninit\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit\n \n \nMethod\n.\n\n\nGet an array with \ninit\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit_max\n \n \nFunction\n.\n\n\nGet an array with \ninit_max\n values for parameters defined by \nparamkeys\n\n\nMethods\n\n\n\n\nMads.getparamsinit_max(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:294\n\n\nMads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:260\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparamkeys::Array{T\n:Any,1}\n : parameter keys\n\n\n\n\nReturns:\n\n\n\n\nthe parameter values\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit_min\n \n \nFunction\n.\n\n\nGet an array with \ninit_min\n values for parameters\n\n\nMethods\n\n\n\n\nMads.getparamsinit_min(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:243\n\n\nMads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:209\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparamkeys::Array{T\n:Any,1}\n : parameter keys\n\n\n\n\nReturns:\n\n\n\n\nthe parameter values\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamslongname\n \n \nMethod\n.\n\n\nGet an array with \nlongname\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamslongname\n \n \nMethod\n.\n\n\nGet an array with \nlongname\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamsmax\n \n \nFunction\n.\n\n\nGet an array with \nmax\n values for parameters defined by \nparamkeys\n\n\nMethods\n\n\n\n\nMads.getparamsmax(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:192\n\n\nMads.getparamsmax(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:170\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparamkeys::Array{T\n:Any,1}\n : parameter keys\n\n\n\n\nReturns:\n\n\n\n\nreturns the parameter values\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsmin\n \n \nFunction\n.\n\n\nGet an array with \nmin\n values for parameters defined by \nparamkeys\n\n\nMethods\n\n\n\n\nMads.getparamsmin(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:153\n\n\nMads.getparamsmin(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:131\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparamkeys::Array{T\n:Any,1}\n : parameter keys\n\n\n\n\nReturns:\n\n\n\n\nthe parameter values\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsplotname\n \n \nMethod\n.\n\n\nGet an array with \nplotname\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamsplotname\n \n \nMethod\n.\n\n\nGet an array with \nplotname\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamsstep\n \n \nMethod\n.\n\n\nGet an array with \nstep\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamsstep\n \n \nMethod\n.\n\n\nGet an array with \nstep\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamstype\n \n \nMethod\n.\n\n\nGet an array with \ntype\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamstype\n \n \nMethod\n.\n\n\nGet an array with \ntype\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getprocs\n \n \nMethod\n.\n\n\nGet the number of processors\n\n\nMethods\n\n\n\n\nMads.getprocs()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:34\n\n\n\n\nsource\n\n\n#\n\n\nMads.getrestart\n \n \nMethod\n.\n\n\nGet MADS restart status\n\n\nMethods\n\n\n\n\nMads.getrestart(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:28\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.getrestartdir\n \n \nFunction\n.\n\n\nGet the directory where Mads restarts will be stored\n\n\nMethods\n\n\n\n\nMads.getrestartdir(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:277\n\n\nMads.getrestartdir(madsdata::Associative, suffix::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:277\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nsuffix::String\n : Suffix to be added to the name of restart directory\n\n\n\n\nReturns:\n\n\n\n\nrestart directory where reusable model results will be stored\n\n\n\n\nsource\n\n\n#\n\n\nMads.getrootname\n \n \nMethod\n.\n\n\nGet file name root\n\n\nMethods\n\n\n\n\nMads.getrootname(filename::String; first, version)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:343\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\n\n\nKeywords\n\n\n\n\nfirst\n : use the first . in filename as the seperator between root name and extention [default=\ntrue\n]\n\n\nversion\n : delete version information from filename for the returned rootname [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nroot of file name\n\n\n\n\nExample:\n\n\nr\n \n=\n \nMads\n.\ngetrootname\n(\na.rnd.dat\n)\n \n# r = \na\n\n\nr\n \n=\n \nMads\n.\ngetrootname\n(\na.rnd.dat\n,\n \nfirst\n=\nfalse\n)\n \n# r = \na.rnd\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.getsindx\n \n \nMethod\n.\n\n\nGet sin-space dx\n\n\nMethods\n\n\n\n\nMads.getsindx(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:248\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nsin-space dx\n\n\n\n\nsource\n\n\n#\n\n\nMads.getsourcekeys\n \n \nMethod\n.\n\n\nGet keys of all source parameters in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.getsourcekeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:78\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\narray with keys of all source parameters in the MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.gettarget\n \n \nMethod\n.\n\n\nGet observation target\n\n\nMethods\n\n\n\n\nMads.gettarget(o::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:218\n\n\n\n\nArguments\n\n\n\n\no::Associative\n : observation data\n\n\n\n\nReturns:\n\n\n\n\nobservation target\n\n\n\n\nsource\n\n\n#\n\n\nMads.gettargetkeys\n \n \nMethod\n.\n\n\nGet keys for all targets (observations with weights greater than zero) in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.gettargetkeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:57\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nkeys for all targets in the MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.gettime\n \n \nMethod\n.\n\n\nGet observation time\n\n\nMethods\n\n\n\n\nMads.gettime(o::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:140\n\n\n\n\nArguments\n\n\n\n\no::Associative\n : observation data\n\n\n\n\nReturns:\n\n\n\n\nobservation time (\"NaN\" it time is missing)\n\n\n\n\nsource\n\n\n#\n\n\nMads.getweight\n \n \nMethod\n.\n\n\nGet observation weight\n\n\nMethods\n\n\n\n\nMads.getweight(o::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:179\n\n\n\n\nArguments\n\n\n\n\no::Associative\n : observation data\n\n\n\n\nReturns:\n\n\n\n\nobservation weight (\"NaN\" when weight is missing)\n\n\n\n\nsource\n\n\n#\n\n\nMads.getwellkeys\n \n \nMethod\n.\n\n\nGet keys for all wells in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.getwellkeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:74\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nkeys for all wells in the MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.getwellsdata\n \n \nMethod\n.\n\n\nGet spatial and temporal data in the \nWells\n class\n\n\nMethods\n\n\n\n\nMads.getwellsdata(madsdata::Associative; time)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:624\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\ntime\n : get observation times [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\narray with spatial and temporal data in the \nWells\n class\n\n\n\n\nsource\n\n\n#\n\n\nMads.graphoff\n \n \nMethod\n.\n\n\nMADS graph output off\n\n\nMethods\n\n\n\n\nMads.graphoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:66\n\n\n\n\nsource\n\n\n#\n\n\nMads.graphon\n \n \nMethod\n.\n\n\nMADS graph output on\n\n\nMethods\n\n\n\n\nMads.graphon()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:57\n\n\n\n\nsource\n\n\n#\n\n\nMads.haskeyword\n \n \nFunction\n.\n\n\nCheck for a \nkeyword\n in a \nclass\n within the Mads dictionary \nmadsdata\n\n\nMethods\n\n\n\n\nMads.haskeyword(madsdata::Associative, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:145\n\n\nMads.haskeyword(madsdata::Associative, class::String, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:148\n\n\n\n\nArguments\n\n\n\n\nclass::String\n : dictionary class; if not provided searches for \nkeyword\n in \nProblem\n class\n\n\nkeyword::String\n : dictionary key\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns: \ntrue\n or \nfalse\n\n\nExamples:\n\n\n-\n \n`Mads.haskeyword(madsdata, \ndisp\n)`\n \n...\n \nsearches\n \nin\n \n`Problem`\n \nclass\n \nby\n \ndefault\n\n\n-\n \n`Mads.haskeyword(madsdata, \nWells\n, \nR-28\n)`\n \n...\n \nsearches\n \nin\n \n`Wells`\n \nclass\n \nfor\n \na\n \nkeyword\n \nR-28\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.help\n \n \nMethod\n.\n\n\nProduce MADS help information\n\n\nMethods\n\n\n\n\nMads.help()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:10\n\n\n\n\nsource\n\n\n#\n\n\nMads.importeverywhere\n \n \nMethod\n.\n\n\nImport function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations.\n\n\nMethods\n\n\n\n\nMads.importeverywhere(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:332\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\n\n\nReturns:\n\n\n\n\nmadscommandfunction\n to execute the model\n\n\n\n\nsource\n\n\n#\n\n\nMads.indexkeys\n \n \nFunction\n.\n\n\nFind indexes for dictionary keys based on a string or regular expression\n\n\nMethods\n\n\n\n\nMads.indexkeys(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:643\n\n\nMads.indexkeys(dict::Associative, key::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:642\n\n\nMads.indexkeys(dict::Associative, key::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:643\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n : dictionary\n\n\nkey::Regex\n : the key to find index for\n\n\nkey::String\n : the key to find index for\n\n\n\n\nsource\n\n\n#\n\n\nMads.ins_obs\n \n \nMethod\n.\n\n\nApply Mads instruction file \ninstructionfilename\n to read model output file \nmodeloutputfilename\n\n\nMethods\n\n\n\n\nMads.ins_obs(instructionfilename::String, modeloutputfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:841\n\n\n\n\nArguments\n\n\n\n\ninstructionfilename::String\n : instruction file name\n\n\nmodeloutputfilename::String\n : model output file name\n\n\n\n\nReturns:\n\n\n\n\nobsdict\n : observation dictionary with the model outputs\n\n\n\n\nsource\n\n\n#\n\n\nMads.instline2regexs\n \n \nMethod\n.\n\n\nConvert an instruction line in the Mads instruction file into regular expressions\n\n\nMethods\n\n\n\n\nMads.instline2regexs(instline::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:744\n\n\n\n\nArguments\n\n\n\n\ninstline::String\n : instruction line\n\n\n\n\nReturns:\n\n\n\n\nregexs\n : regular expressions\n\n\nobsnames\n : observation names\n\n\ngetparamhere\n : parameters\n\n\n\n\nsource\n\n\n#\n\n\nMads.invobsweights!\n \n \nMethod\n.\n\n\nSet inversely proportional observation weights in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.invobsweights!(madsdata::Associative, multiplier::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:321\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nmultiplier::Number\n : weight multiplier\n\n\n\n\nsource\n\n\n#\n\n\nMads.invwellweights!\n \n \nMethod\n.\n\n\nSet inversely proportional well weights in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.invwellweights!(madsdata::Associative, multiplier::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:372\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nmultiplier::Number\n : weight multiplier\n\n\n\n\nsource\n\n\n#\n\n\nMads.islog\n \n \nMethod\n.\n\n\nIs parameter with key \nparameterkey\n log-transformed?\n\n\nMethods\n\n\n\n\nMads.islog(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:401\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameterkey::String\n : parameter key\n\n\n\n\nReturns:\n\n\n\n\ntrue\n if log-transformed, \nfalse\n otherwise\n\n\n\n\nsource\n\n\n#\n\n\nMads.isobs\n \n \nMethod\n.\n\n\nIs a dictionary containing all the observations\n\n\nMethods\n\n\n\n\nMads.isobs(madsdata::Associative, dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:17\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n : dictionary\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\ntrue\n if the dictionary contain all the observations, \nfalse\n otherwise\n\n\n\n\nsource\n\n\n#\n\n\nMads.isopt\n \n \nMethod\n.\n\n\nIs parameter with key \nparameterkey\n optimizable?\n\n\nMethods\n\n\n\n\nMads.isopt(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:381\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameterkey::String\n : parameter key\n\n\n\n\nReturns:\n\n\n\n\nture\n if optimizable, \nfalse\n if not\n\n\n\n\nsource\n\n\n#\n\n\nMads.isparam\n \n \nMethod\n.\n\n\nCheck if a dictionary containing all the Mads model parameters\n\n\nMethods\n\n\n\n\nMads.isparam(madsdata::Associative, dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:17\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n : dictionary\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\ntrue\n if the dictionary containing all the parameters, \nfalse\n otherwise\n\n\n\n\nsource\n\n\n#\n\n\nMads.ispkgavailable\n \n \nMethod\n.\n\n\nChecks of package is available\n\n\nMethods\n\n\n\n\nMads.ispkgavailable(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:9\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.krige\n \n \nMethod\n.\n\n\nKriging\n\n\nMethods\n\n\n\n\nMads.krige(x0mat::Array{T\n:Any,2}, X::Array{T\n:Any,2}, Z::Array{T\n:Any,1}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:124\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n : coordinates of the observation (conditioning) data\n\n\nZ::Array{T\n:Any,1}\n : values for the observation (conditioning) data\n\n\ncov::Function\n : spatial covariance function\n\n\nx0mat::Array{T\n:Any,2}\n : point coordinates at which to obtain kriging estimates\n\n\n\n\nReturns:\n\n\n\n\nkriging estimates at \nx0mat\n\n\n\n\nsource\n\n\n#\n\n\nMads.levenberg_marquardt\n \n \nFunction\n.\n\n\nLevenberg-Marquardt optimization\n\n\nMethods\n\n\n\n\nMads.levenberg_marquardt(f::Function, g::Function, x0)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:330\n\n\nMads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callbackiteration, callbackjacobian)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:330\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : forward model function\n\n\ng::Function\n : gradient function for the forward model\n\n\no::Function\n : objective function [default=\nx-\n(x'*x)[1]\n]\n\n\nx0\n : initial parameter guess\n\n\n\n\nKeywords\n\n\n\n\nalwaysDoJacobian\n : computer Jacobian each iteration [default=\nfalse\n]\n\n\ncallbackiteration\n : call back function for each iteration [default=\n(best_x::Vector, of::Number, lambda::Number)-\nnothing\n]\n\n\ncallbackjacobian\n : call back function for each Jacobian [default=\n(x::Vector, J::Matrix)-\nnothing\n]\n\n\nlambda\n : initial Levenberg-Marquardt lambda [default=\neps(Float32)\n]\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [default=\n10\n]\n\n\nlambda_nu\n : lambda multiplication factor \u03bd [default=\n2\n]\n\n\nlambda_scale\n : lambda scaling factor [default=\n1e-3,\n]\n\n\nmaxEval\n : maximum number of model evaluations [default=\n1001\n]\n\n\nmaxIter\n : maximum number of optimization iterations [default=\n100\n]\n\n\nmaxJacobians\n : maximum number of Jacobian solves [default=\n100\n]\n\n\nnp_lambda\n : number of parallel lambda solves [default=\n10\n]\n\n\nroot\n : Mads problem root name\n\n\nshow_trace\n : shows solution trace [default=\nfalse\n]\n\n\ntolG\n : parameter space update tolerance [default=\n1e-6\n]\n\n\ntolOF\n : objective function update tolerance [default=\n1e-3\n]\n\n\ntolX\n : parameter space tolerance [default=\n1e-4\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.linktempdir\n \n \nMethod\n.\n\n\nLink files in a temporary directory\n\n\nMethods\n\n\n\n\nMads.linktempdir(madsproblemdir::String, tempdirname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1064\n\n\n\n\nArguments\n\n\n\n\nmadsproblemdir::String\n : Mads problem directory\n\n\ntempdirname::String\n : temporary directory name\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadasciifile\n \n \nMethod\n.\n\n\nLoad ASCII file\n\n\nMethods\n\n\n\n\nMads.loadasciifile(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:14\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : ASCII file name\n\n\n\n\nReturns:\n\n\n\n\ndata from the file\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadjsonfile\n \n \nMethod\n.\n\n\nLoad a JSON file\n\n\nMethods\n\n\n\n\nMads.loadjsonfile(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:16\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : JSON file name\n\n\n\n\nReturns:\n\n\n\n\ndata from the JSON file\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadmadsfile\n \n \nMethod\n.\n\n\nLoad MADS input file defining a MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.loadmadsfile(filename::String; julia, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:22\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nKeywords\n\n\n\n\nformat\n : acceptable formats are \nyaml\n and \njson\n [default=\nyaml\n]\n\n\njulia\n : if \ntrue\n, force using \njulia\n parsing functions; if \nfalse\n (default), use \npython\n parsing functions\n\n\n\n\nReturns:\n\n\n\n\nMADS problem dictionary\n\n\n\n\nExample:\n\n\nmd\n \n=\n \nMads\n.\nloadmadsfile\n(\ninput_file_name.mads\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadsaltellirestart!\n \n \nMethod\n.\n\n\nLoad Saltelli sensitivity analysis results for fast simulation restarts\n\n\nMethods\n\n\n\n\nMads.loadsaltellirestart!(evalmat::Array, matname::String, restartdir::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:568\n\n\n\n\nArguments\n\n\n\n\nevalmat::Array\n : loaded array\n\n\nmatname::String\n : matrix (array) name (defines the name of the loaded file)\n\n\nrestartdir::String\n : directory where files will be stored containing model results for fast simulation restarts\n\n\n\n\nReturns:\n\n\n\n\ntrue\n when successfully loaded, \nfalse\n when it is not\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadyamlfile\n \n \nMethod\n.\n\n\nLoad YAML file\n\n\nMethods\n\n\n\n\nMads.loadyamlfile(filename::String; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:17\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\n\n\nKeywords\n\n\n\n\njulia\n : if \ntrue\n, use \njulia\n YAML library (if available); if \nfalse\n (default), use \npython\n YAML library (if available)\n\n\n\n\nReturns:\n\n\n\n\ndata in the yaml input file\n\n\n\n\nsource\n\n\n#\n\n\nMads.localsa\n \n \nMethod\n.\n\n\nLocal sensitivity analysis based on eigen analysis of the parameter covariance matrix\n\n\nMethods\n\n\n\n\nMads.localsa(madsdata::Associative; sinspace, keyword, filename, format, datafiles, imagefiles, par, obs, J)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:118\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nJ\n : Jacobian matrix\n\n\ndatafiles\n : flag to write data files [default=\ntrue\n]\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nimagefiles\n : flag to create image files [default=\nMads.graphoutput\n]\n\n\nkeyword\n : keyword to be added in the filename root\n\n\nobs\n : observations for the parameter set\n\n\npar\n : parameter set\n\n\nsinspace\n : apply sin transformation [default=\ntrue\n]\n\n\n\n\nDumps:\n\n\n\n\nfilename\n : output plot file\n\n\n\n\nsource\n\n\n#\n\n\nMads.long_tests_off\n \n \nMethod\n.\n\n\nTurn off execution of long MADS tests (default)\n\n\nMethods\n\n\n\n\nMads.long_tests_off()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:102\n\n\n\n\nsource\n\n\n#\n\n\nMads.long_tests_on\n \n \nMethod\n.\n\n\nTurn on execution of long MADS tests\n\n\nMethods\n\n\n\n\nMads.long_tests_on()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:93\n\n\n\n\nsource\n\n\n#\n\n\nMads.madscores\n \n \nFunction\n.\n\n\nCheck the number of processors on a series of servers\n\n\nMethods\n\n\n\n\nMads.madscores(nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:298\n\n\nMads.madscores()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:298\n\n\n\n\nArguments\n\n\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.madscritical\n \n \nMethod\n.\n\n\nMADS critical error messages\n\n\nMethods\n\n\n\n\nMads.madscritical(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:76\n\n\n\n\nArguments\n\n\n\n\nmessage::String\n : critical error message\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsdebug\n \n \nFunction\n.\n\n\nMADS debug messages (controlled by \nquiet\n and \ndebuglevel\n)\n\n\nMethods\n\n\n\n\nMads.madsdebug(message::String, level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:25\n\n\nMads.madsdebug(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:25\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n : output verbosity level [default=\n0\n]\n\n\nmessage::String\n : debug message\n\n\n\n\nsource\n\n\n#\n\n\nMads.madserror\n \n \nMethod\n.\n\n\nMADS error messages\n\n\nMethods\n\n\n\n\nMads.madserror(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:64\n\n\n\n\nArguments\n\n\n\n\nmessage::String\n : error message\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsinfo\n \n \nFunction\n.\n\n\nMADS information/status messages (controlled by quiet\nand\nverbositylevel`)\n\n\nMethods\n\n\n\n\nMads.madsinfo(message::String, level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:39\n\n\nMads.madsinfo(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:39\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n : output verbosity level [default=\n0\n]\n\n\nmessage::String\n : information/status message\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsload\n \n \nFunction\n.\n\n\nCheck the load of a series of servers\n\n\nMethods\n\n\n\n\nMads.madsload(nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:316\n\n\nMads.madsload()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:316\n\n\n\n\nArguments\n\n\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsmathprogbase\n \n \nFunction\n.\n\n\nDefine \nMadsModel\n type applied for Mads execution using \nMathProgBase\n\n\nMethods\n\n\n\n\nMads.madsmathprogbase()\n : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:18\n\n\nMads.madsmathprogbase(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:18\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary [default=\nDict()\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsoutput\n \n \nFunction\n.\n\n\nMADS output (controlled by \nquiet\n and \nverbositylevel\n)\n\n\nMethods\n\n\n\n\nMads.madsoutput(message::String, level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:11\n\n\nMads.madsoutput(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:11\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n : output verbosity level [default=\n0\n]\n\n\nmessage::String\n : output message\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsup\n \n \nFunction\n.\n\n\nCheck the uptime of a series of servers\n\n\nMethods\n\n\n\n\nMads.madsup(nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:307\n\n\nMads.madsup()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:307\n\n\n\n\nArguments\n\n\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.madswarn\n \n \nMethod\n.\n\n\nMADS warning messages\n\n\nMethods\n\n\n\n\nMads.madswarn(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:52\n\n\n\n\nArguments\n\n\n\n\nmessage::String\n : warning message\n\n\n\n\nsource\n\n\n#\n\n\nMads.makearrayconditionalloglikelihood\n \n \nMethod\n.\n\n\nMake a conditional log likelihood function that accepts an array containing the optimal parameter values\n\n\nMethods\n\n\n\n\nMads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:64\n\n\n\n\nArguments\n\n\n\n\nconditionalloglikelihood\n : conditional log likelihood\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\na conditional log likelihood function that accepts an array\n\n\n\n\nsource\n\n\n#\n\n\nMads.makearrayconditionalloglikelihood\n \n \nMethod\n.\n\n\nMake array of conditional log-likelihoods\n\n\nMethods\n\n\n\n\nMads.makearrayconditionalloglikelihood(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:160\n\n\nMads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:64\n\n\n\n\nArguments\n\n\n\n\nconditionalloglikelihood\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\narray of conditional log-likelihoods\n\n\n\n\nsource\n\n\n#\n\n\nMads.makearrayfunction\n \n \nFunction\n.\n\n\nMake a version of the function \nf\n that accepts an array containing the optimal parameter values\n\n\nMethods\n\n\n\n\nMads.makearrayfunction(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:17\n\n\nMads.makearrayfunction(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:17\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : function [default=\nmakemadscommandfunction(madsdata)\n]\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nfunction accepting an array containing the optimal parameter values\n\n\n\n\nsource\n\n\n#\n\n\nMads.makearrayloglikelihood\n \n \nMethod\n.\n\n\nMake a log likelihood function that accepts an array containing the optimal parameter values\n\n\nMethods\n\n\n\n\nMads.makearrayloglikelihood(madsdata::Associative, loglikelihood)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:87\n\n\n\n\nArguments\n\n\n\n\nloglikelihood\n : log likelihood\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\na log likelihood function that accepts an array\n\n\n\n\nsource\n\n\n#\n\n\nMads.makebigdt!\n \n \nMethod\n.\n\n\nSetup Bayesian Information Gap Decision Theory (BIG-DT) problem\n\n\nMethods\n\n\n\n\nMads.makebigdt!(madsdata::Associative, choice::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:35\n\n\n\n\nArguments\n\n\n\n\nchoice::Associative\n : dictionary of BIG-DT choices (scenarios)\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nBIG-DT problem type\n\n\n\n\nsource\n\n\n#\n\n\nMads.makebigdt\n \n \nMethod\n.\n\n\nSetup Bayesian Information Gap Decision Theory (BIG-DT) problem\n\n\nMethods\n\n\n\n\nMads.makebigdt(madsdata::Associative, choice::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:20\n\n\n\n\nArguments\n\n\n\n\nchoice::Associative\n : dictionary of BIG-DT choices (scenarios)\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nBIG-DT problem type\n\n\n\n\nsource\n\n\n#\n\n\nMads.makecomputeconcentrations\n \n \nMethod\n.\n\n\nCreate a function to compute concentrations for all the observation points using Anasol\n\n\nMethods\n\n\n\n\nMads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:134\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\ncalcpredictions\n : calculate zero weight predictions [default=\ntrue\n]\n\n\ncalczeroweightobs\n : calculate zero weight observations[default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nfunction to compute concentrations; the new function returns a dictionary of observations and model predicted concentrations\n\n\n\n\nExamples:\n\n\ncomputeconcentrations\n \n=\n \nMads\n.\nmakecomputeconcentrations\n(\nmadsdata\n)\n\n\nparamkeys\n \n=\n \nMads\n.\ngetparamkeys\n(\nmadsdata\n)\n\n\nparamdict\n \n=\n \nOrderedDict\n(\nzip\n(\nparamkeys\n,\n \nmap\n(\nkey\n-\nmadsdata\n[\nParameters\n][\nkey\n][\ninit\n],\n \nparamkeys\n)))\n\n\nforward_preds\n \n=\n \ncomputeconcentrations\n(\nparamdict\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.makedixonprice\n \n \nMethod\n.\n\n\nMake dixon price\n\n\nMethods\n\n\n\n\nMads.makedixonprice(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:256\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\ndixon price\n\n\n\n\nsource\n\n\n#\n\n\nMads.makedixonprice_gradient\n \n \nMethod\n.\n\n\nMethods\n\n\n\n\nMads.makedixonprice(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:256\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\ndixon price gradient\n\n\n\n\nsource\n\n\n#\n\n\nMads.makedoublearrayfunction\n \n \nFunction\n.\n\n\nMake a version of the function \nf\n that accepts an array containing the optimal parameter values, and returns an array of observations\n\n\nMethods\n\n\n\n\nMads.makedoublearrayfunction(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:37\n\n\nMads.makedoublearrayfunction(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:37\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : function [default=\nmakemadscommandfunction(madsdata)\n]\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nfunction accepting an array containing the optimal parameter values, and returning an array of observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.makelmfunctions\n \n \nMethod\n.\n\n\nMake forward model, gradient, objective functions needed for Levenberg-Marquardt optimization\n\n\nMethods\n\n\n\n\nMads.makelmfunctions(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:111\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nforward model, gradient, objective functions\n\n\n\n\nsource\n\n\n#\n\n\nMads.makelocalsafunction\n \n \nMethod\n.\n\n\nMake gradient function needed for local sensitivity analysis\n\n\nMethods\n\n\n\n\nMads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:26\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nmultiplycenterbyweights\n : multiply center by observation weights [default=\ntrue\n]\n\n\n\n\nReturns:\n\n\n\n\ngradient function\n\n\n\n\nsource\n\n\n#\n\n\nMads.makelogprior\n \n \nMethod\n.\n\n\nMake a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary \nmadsdata\n\n\nMethods\n\n\n\n\nMads.makelogprior(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:459\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturn:\n\n\n\n\nthe prior log-likelihood of the model parameters listed in the MADS problem dictionary \nmadsdata\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadscommandfunction\n \n \nMethod\n.\n\n\nMake MADS function to execute the model defined in the input MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.makemadscommandfunction(madsdata_in::Associative; calczeroweightobs, calcpredictions)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:62\n\n\n\n\nArguments\n\n\n\n\nmadsdata_in::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\ncalcpredictions\n : Calculate predictions [default=\ntrue\n]\n\n\ncalczeroweightobs\n : Calculate zero weight observations [default=\nfalse\n]\n\n\n\n\nUsage:\n\n\nMads\n.\nmakemadscommandfunction\n(\nmadsdata\n)\n\n\n\n\n\n\nMADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\nModel\n : execute a Julia function defined in an input Julia file. The function that should accept a \nparameter\n dictionary with all the model parameters as an input argument and should return an \nobservation\n dictionary with all the model predicted observations. MADS will execute the first function defined in the file.\n\n\nMADS model\n : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\nJulia model\n : execute an internal Julia function that accepts a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\nCommand\n : execute an external UNIX command or script that will execute an external model.\n\n\nJulia command\n : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an \nobservation\n dictionary with model predictions.\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model.\n\n\nOnly \nCommand\n uses different approaches to get back the model outputs. The script defined under \nJulia command\n parses the model outputs using Julia.\n\n\nThe available options for writing model inputs and reading model outputs are as follows.\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at http://mads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at http://mads.lanl.gov\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file\n\n\n\n\nReturns:\n\n\n\n\nMads function to execute a forward model simulation\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadscommandfunctionandgradient\n \n \nFunction\n.\n\n\nMake MADS forward \n gradient functions for the model defined in the MADS problem dictionary \nmadsdata\n\n\nMethods\n\n\n\n\nMads.makemadscommandfunctionandgradient(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:373\n\n\nMads.makemadscommandfunctionandgradient(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:377\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : Mads forward model function\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nMads forward function for the model defined in the MADS problem dictionary \nmadsdata\n\n\nMads gradient function for the model defined in the MADS problem dictionary \nmadsdata\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadscommandgradient\n \n \nFunction\n.\n\n\nMake MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary \nmadsdata\n\n\nMethods\n\n\n\n\nMads.makemadscommandgradient(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:348\n\n\nMads.makemadscommandgradient(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:352\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : Mads forward model function\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nthe parameter-space gradient for the model defined in the MADS problem dictionary \nmadsdata\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadsconditionalloglikelihood\n \n \nMethod\n.\n\n\nMake a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary \nmadsdata\n.\n\n\nMethods\n\n\n\n\nMads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:482\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nweightfactor\n : Weight factor [default=\n1\n]\n\n\n\n\nReturn:\n\n\n\n\nthe conditional log-likelihood\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadsloglikelihood\n \n \nMethod\n.\n\n\nMake a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under \nLogLikelihood\n or computed internally.\n\n\nMethods\n\n\n\n\nMads.makemadsloglikelihood(madsdata::Associative; weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:516\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nweightfactor\n : Weight factor [default=\n1\n]\n\n\n\n\nReturns:\n\n\n\n\nthe log-likelihood for a given set of model parameters\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadsreusablefunction\n \n \nFunction\n.\n\n\nMake Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists)\n\n\nMethods\n\n\n\n\nMads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:229\n\n\nMads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:229\n\n\nMads.makemadsreusablefunction(paramkeys::Array{T\n:Any,1}, obskeys::Array{T\n:Any,1}, madsdatarestart::Union{Bool,String}, madscommandfunction::Function, restartdir::String; usedict)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:232\n\n\n\n\nArguments\n\n\n\n\nmadscommandfunction::Function\n : Mads function to execute a forward model simulation\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nmadsdatarestart::Union{Bool,String}\n : Restart type (memory/disk) or on/off status\n\n\nobskeys::Array{T\n:Any,1}\n : Dictionary of observation keys\n\n\nparamkeys::Array{T\n:Any,1}\n : Dictionary of parameter keys\n\n\nrestartdir::String\n : Restart directory where the reusable model results are stored\n\n\nsuffix::String\n : Suffix to be added to the name of restart directory\n\n\n\n\nKeywords\n\n\n\n\nusedict\n : Use dictionary [default=\ntrue\n]\n\n\n\n\nReturns:\n\n\n\n\nReusable Mads function to execute a forward model simulation (automatically restarts if restart data exists)\n\n\n\n\nsource\n\n\n#\n\n\nMads.makempbfunctions\n \n \nMethod\n.\n\n\nMake forward model, gradient, objective functions needed for MathProgBase optimization\n\n\nMethods\n\n\n\n\nMads.makempbfunctions(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:92\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nforward model, gradient, objective functions\n\n\n\n\nsource\n\n\n#\n\n\nMads.makepowell\n \n \nMethod\n.\n\n\nMake Powell test function for LM optimization\n\n\nMethods\n\n\n\n\nMads.makepowell(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:159\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\nPowell test function for LM optimization\n\n\n\n\nsource\n\n\n#\n\n\nMads.makepowell_gradient\n \n \nMethod\n.\n\n\nake parameter gradients of the Powell test function for LM optimization\n\n\nMethods\n\n\n\n\nMads.makepowell_gradient(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:183\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\narameter gradients of the Powell test function for LM optimization\n\n\n\n\nsource\n\n\n#\n\n\nMads.makerosenbrock\n \n \nMethod\n.\n\n\nMake Rosenbrock test function for LM optimization\n\n\nMethods\n\n\n\n\nMads.makerosenbrock(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:114\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\nRosenbrock test function for LM optimization\n\n\n\n\nsource\n\n\n#\n\n\nMads.makerosenbrock_gradient\n \n \nMethod\n.\n\n\nMake parameter gradients of the Rosenbrock test function for LM optimization\n\n\nMethods\n\n\n\n\nMads.makerosenbrock_gradient(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:136\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\nparameter gradients of the Rosenbrock test function for LM optimization\n\n\n\n\nsource\n\n\n#\n\n\nMads.makerotatedhyperellipsoid\n \n \nMethod\n.\n\n\nMethods\n\n\n\n\nMads.makerotatedhyperellipsoid(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:323\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.makerotatedhyperellipsoid_gradient\n \n \nMethod\n.\n\n\nMethods\n\n\n\n\nMads.makerotatedhyperellipsoid_gradient(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:343\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.makesphere\n \n \nMethod\n.\n\n\nMake sphere\n\n\nMethods\n\n\n\n\nMads.makesphere(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:214\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\nsphere\n\n\n\n\nsource\n\n\n#\n\n\nMads.makesphere_gradient\n \n \nMethod\n.\n\n\nMake sphere gradient\n\n\nMethods\n\n\n\n\nMads.makesphere_gradient(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:235\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nReturns:\n\n\n\n\nsphere gradient\n\n\n\n\nsource\n\n\n#\n\n\nMads.makesumsquares\n \n \nMethod\n.\n\n\nMethods\n\n\n\n\nMads.makesumsquares(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:293\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.makesumsquares_gradient\n \n \nMethod\n.\n\n\nMethods\n\n\n\n\nMads.makesumsquares_gradient(n::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:308\n\n\n\n\nArguments\n\n\n\n\nn::Integer\n : number of observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.makesvrmodel\n \n \nFunction\n.\n\n\nMake SVR model functions (executor and cleaner)\n\n\nMethods\n\n\n\n\nMads.makesvrmodel(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:200\n\n\nMads.makesvrmodel(madsdata::Associative, numberofsamples::Integer; check, addminmax, loaddata, savefile, svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, verbose, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:200\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumberofsamples::Integer\n : number of samples [default=\n100\n]\n\n\n\n\nKeywords\n\n\n\n\nC\n : [default=\n1000.0\n]\n\n\naddminmax\n : [default=\ntrue\n]\n\n\ncache_size\n : [default=\n100.0\n]\n\n\ncheck\n : [default=\nfalse\n]\n\n\ncoef0\n : [default=\n0\n]\n\n\ndegree\n : [default=\n3\n]\n\n\neps\n : [default=\n0.001\n]\n\n\ngamma\n : [default=\n1/numberofsamples\n]\n\n\nkernel_type\n : [default=\nSVR.RBF\n]\n\n\nloaddata\n : [default=\nfalse\n]\n\n\nnu\n : [default=\n0.5\n]\n\n\np\n : [default=\n0.001\n]\n\n\nprobability\n : [default=\nfalse\n]\n\n\nsavefile\n : [default=\nfalse\n]\n\n\nseed\n : [default=\n0\n]\n\n\nshrinking\n : [default=\ntrue\n]\n\n\nsvm_type\n : [default=\nSVR.EPSILON_SVR\n]\n\n\nverbose\n : [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nsvrexec, svrread, svrsave, svrclean\n\n\n\n\nsource\n\n\n#\n\n\nMads.maxtorealmax!\n \n \nMethod\n.\n\n\nScale down values larger than max(Float32) in a dataframe \ndf\n so that Gadfly can plot the data\n\n\nMethods\n\n\n\n\nMads.maxtorealmax!(df::DataFrames.DataFrame)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1053\n\n\n\n\nArguments\n\n\n\n\ndf::DataFrames.DataFrame\n : dataframe\n\n\n\n\nsource\n\n\n#\n\n\nMads.meshgrid\n \n \nMethod\n.\n\n\nCreate mesh grid\n\n\nMethods\n\n\n\n\nMads.meshgrid(x::Array{T\n:Any,1}, y::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:304\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n : vector of grid x coordinates\n\n\ny::Array{T\n:Any,1}\n : vector of grid y coordinates\n\n\n\n\nReturns:\n\n\n\n\n2D grid coordinates based on the coordinates contained in vectors \nx\n and \ny\n\n\n\n\nsource\n\n\n#\n\n\nMads.mkdir\n \n \nMethod\n.\n\n\nCreate a directory (if does not already exist)\n\n\nMethods\n\n\n\n\nMads.mkdir(dirname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1092\n\n\n\n\nArguments\n\n\n\n\ndirname::String\n : directory\n\n\n\n\nsource\n\n\n#\n\n\nMads.modelinformationcriteria\n \n \nFunction\n.\n\n\nModel section information criteria\n\n\nMethods\n\n\n\n\nMads.modelinformationcriteria(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:11\n\n\nMads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N\n:Any})\n : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:11\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\npar::Array{Float64,N\n:Any}\n : parameter array\n\n\n\n\nsource\n\n\n#\n\n\nMads.modobsweights!\n \n \nMethod\n.\n\n\nModify (multiply) observation weights in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.modobsweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:307\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nvalue::Number\n : value for modifing observation weights\n\n\n\n\nsource\n\n\n#\n\n\nMads.modwellweights!\n \n \nMethod\n.\n\n\nModify (multiply) well weights in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.modwellweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:355\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nvalue::Number\n : value for well weights\n\n\n\n\nsource\n\n\n#\n\n\nMads.montecarlo\n \n \nMethod\n.\n\n\nMonte Carlo analysis\n\n\nMethods\n\n\n\n\nMads.montecarlo(madsdata::Associative; N, filename)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:182\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nN\n : number of samples [default=\n100\n]\n\n\nfilename\n : file name\n\n\n\n\nReturns:\n\n\n\n\nparameter dictionary containing the data arrays\n\n\n\n\nDumps:\n\n\n\n\nYAML output file with the parameter dictionary containing the data arrays (\nmads_root_name\n.mcresults.yaml\n)\n\n\n\n\nExample:\n\n\nMads\n.\nmontecarlo\n(\nmadsdata\n;\n \nN\n=\n100\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.naive_get_deltax\n \n \nMethod\n.\n\n\nNaive Levenberg-Marquardt optimization: get the LM parameter space step\n\n\nMethods\n\n\n\n\nMads.naive_get_deltax(JpJ::Array{Float64,2}, Jp::Array{Float64,2}, f0::Array{Float64,1}, lambda::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:218\n\n\n\n\nArguments\n\n\n\n\nJp::Array{Float64,2}\n : Jacobian matrix times model parameters\n\n\nJpJ::Array{Float64,2}\n : Jacobian matrix times model parameters times transposed Jacobian matrix\n\n\nf0::Array{Float64,1}\n : initial model observations\n\n\nlambda::Number\n : Levenberg-Marquardt lambda\n\n\n\n\nReturns:\n\n\n\n\nthe LM parameter space step\n\n\n\n\nsource\n\n\n#\n\n\nMads.naive_levenberg_marquardt\n \n \nFunction\n.\n\n\nNaive Levenberg-Marquardt optimization\n\n\nMethods\n\n\n\n\nMads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:268\n\n\nMads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, np_lambda, lambda, lambda_mu)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:268\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : forward model function\n\n\ng::Function\n : gradient function for the forward model\n\n\no::Function\n : objective function [default=x-\n(x'*x)[1]]\n\n\nx0::Array{Float64,1}\n : initial parameter guess\n\n\n\n\nKeywords\n\n\n\n\nlambda\n : initial Levenberg-Marquardt lambda [default=\n100\n]\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [default=\n10\n]\n\n\nmaxEval\n : maximum number of model evaluations [default=\n101\n]\n\n\nmaxIter\n : maximum number of optimization iterations [default=\n10\n]\n\n\nnp_lambda\n : number of parallel lambda solves [default=\n10\n]\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.naive_lm_iteration\n \n \nMethod\n.\n\n\nNaive Levenberg-Marquardt optimization: perform LM iteration\n\n\nMethods\n\n\n\n\nMads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:239\n\n\n\n\nArguments\n\n\n\n\nf0::Array{Float64,1}\n : initial model observations\n\n\nf::Function\n : forward model function\n\n\ng::Function\n : gradient function for the forward model\n\n\nlambdas::Array{Float64,1}\n : Levenberg-Marquardt lambdas\n\n\no::Function\n : objective function\n\n\nx0::Array{Float64,1}\n : initial parameter guess\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.noplot\n \n \nMethod\n.\n\n\nDisable MADS plotting\n\n\nMethods\n\n\n\n\nMads.noplot()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:239\n\n\n\n\nsource\n\n\n#\n\n\nMads.obslineismatch\n \n \nMethod\n.\n\n\nMatch an instruction line in the Mads instruction file with model input file\n\n\nMethods\n\n\n\n\nMads.obslineismatch(obsline::String, regexs::Array{Regex,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:793\n\n\n\n\nArguments\n\n\n\n\nobsline::String\n : instruction line\n\n\nregexs::Array{Regex,1}\n : regular expressions\n\n\n\n\nReturns:\n\n\n\n\ntrue or false\n\n\n\n\nsource\n\n\n#\n\n\nMads.of\n \n \nFunction\n.\n\n\nCompute objective function\n\n\nMethods\n\n\n\n\nMads.of(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:59\n\n\nMads.of(madsdata::Associative, resultvec::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:52\n\n\nMads.of(madsdata::Associative, resultdict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:56\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresultdict::Associative\n : result dictionary\n\n\nresultvec::Array{T\n:Any,1}\n : result vector\n\n\n\n\nsource\n\n\n#\n\n\nMads.paramarray2dict\n \n \nMethod\n.\n\n\nConvert a parameter array to a parameter dictionary of arrays\n\n\nMethods\n\n\n\n\nMads.paramarray2dict(madsdata::Associative, array::Array)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:240\n\n\n\n\nArguments\n\n\n\n\narray::Array\n : parameter array\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\na parameter dictionary of arrays\n\n\n\n\nsource\n\n\n#\n\n\nMads.paramdict2array\n \n \nMethod\n.\n\n\nConvert a parameter dictionary of arrays to a parameter array\n\n\nMethods\n\n\n\n\nMads.paramdict2array(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:259\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n : parameter dictionary of arrays\n\n\n\n\nReturns:\n\n\n\n\na parameter array\n\n\n\n\nsource\n\n\n#\n\n\nMads.parsemadsdata!\n \n \nMethod\n.\n\n\nParse loaded MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.parsemadsdata!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:51\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.parsenodenames\n \n \nFunction\n.\n\n\nParse string with node names defined in SLURM\n\n\nMethods\n\n\n\n\nMads.parsenodenames(nodenames::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208\n\n\nMads.parsenodenames(nodenames::String, ntasks_per_node::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208\n\n\n\n\nArguments\n\n\n\n\nnodenames::String\n\n\nntasks_per_node::Integer\n\n\n\n\nsource\n\n\n#\n\n\nMads.partialof\n \n \nMethod\n.\n\n\nCompute the sum of squared residuals for observations that match a regular expression\n\n\nMethods\n\n\n\n\nMads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:85\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nregex::Regex\n : regular expression\n\n\nresultdict::Associative\n : result dictionary\n\n\n\n\nReturns:\n\n\n\n\nthe sum of squared residuals for observations that match the regular expression\n\n\n\n\nsource\n\n\n#\n\n\nMads.pkgversion\n \n \nMethod\n.\n\n\nGet package version\n\n\nMethods\n\n\n\n\nMads.pkgversion(modulestr::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:334\n\n\n\n\nArguments\n\n\n\n\nmodulestr::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotgrid\n \n \nFunction\n.\n\n\nPlot a 3D grid solution based on model predictions in array \ns\n, initial parameters, or user provided parameter values\n\n\nMethods\n\n\n\n\nMads.plotgrid(madsdata::Associative; addtitle, title, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:56\n\n\nMads.plotgrid(madsdata::Associative, s::Array{Float64,N\n:Any}; addtitle, title, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:6\n\n\nMads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:61\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameters::Associative\n : dictionary with model parameters\n\n\ns::Array{Float64,N\n:Any}\n : model predictions array\n\n\n\n\nKeywords\n\n\n\n\naddtitle\n : add plot title [default=\ntrue\n]\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\ntitle\n : plot title\n\n\n\n\nExamples:\n\n\nMads\n.\nplotgrid\n(\nmadsdata\n,\n \ns\n;\n \naddtitle\n=\ntrue\n,\n \ntitle\n=\n,\n \nfilename\n=\n,\n \nformat\n=\n)\n\n\nMads\n.\nplotgrid\n(\nmadsdata\n;\n \naddtitle\n=\ntrue\n,\n \ntitle\n=\n,\n \nfilename\n=\n,\n \nformat\n=\n)\n\n\nMads\n.\nplotgrid\n(\nmadsdata\n,\n \nparameters\n;\n \naddtitle\n=\ntrue\n,\n \ntitle\n=\n,\n \nfilename\n=\n,\n \nformat\n=\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotmadsproblem\n \n \nMethod\n.\n\n\nPlot contaminant sources and wells defined in MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.plotmadsproblem(madsdata::Associative; imagefile, format, filename, keyword)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:75\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\nimagefile\n : dump image file [default=\nfalse\n]\n\n\nkeyword\n : to be added in the filename\n\n\n\n\nDumps:\n\n\n\n\nplot of contaminant sources and wells\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotmass\n \n \nMethod\n.\n\n\nPlot injected/reduced contaminant mass\n\n\nMethods\n\n\n\n\nMads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasolPlot.jl:19\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : output filename for the generated plot\n\n\nlambda::Array{Float64,1}\n : array with all the lambda values\n\n\nmass_injected::Array{Float64,1}\n : array with associated total injected mass\n\n\nmass_reduced::Array{Float64,1}\n : array with associated total reduced mass\n\n\n\n\nKeywords\n\n\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nDumps:\n\n\n\n\nimage file with name \nfilename\n and in specified \nformat\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotmatches\n \n \nFunction\n.\n\n\nPlot the matches between model predictions and observations\n\n\nMethods\n\n\n\n\nMads.plotmatches(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:146\n\n\nMads.plotmatches(madsdata::Associative, rx::Regex; plotdata, filename, format, title, xtitle, ytitle, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:146\n\n\nMads.plotmatches(madsdata::Associative, dict_in::Associative; plotdata, filename, format, title, xtitle, ytitle, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:178\n\n\nMads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; plotdata, filename, format, key2time, title, xtitle, ytitle, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:154\n\n\n\n\nArguments\n\n\n\n\ndict_in::Associative\n : dictionary with model parameters\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresult::Associative\n : dictionary with model predictions\n\n\nrx::Regex\n : regular expression to filter the outputs\n\n\n\n\nKeywords\n\n\n\n\ncolors\n : array with plot colors\n\n\ndisplay\n : display plots [default=\nfalse\n]\n\n\ndpi\n : graph resolution [default=\nMads.dpi\n]\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\nhsize\n : graph horizontal size [default=\n6Gadfly.inch\n]\n\n\nkey2time\n : user provided function to convert observation keys to observation times\n\n\nlinewidth\n : line width [default=\n2Gadfly.pt\n]\n\n\nnoise\n : random noise magnitude [default=\n0\n; no noise]\n\n\nobs_plot_dots\n : plot data as dots or line [default=\ntrue\n]\n\n\nplotdata\n : plot data (if \nfalse\n model predictions are ploted only) [default=\ntrue\n]\n\n\npointsize\n : data dot size [default=\n4Gadfly.pt\n]\n\n\nseparate_files\n : plot data for multiple wells separately [default=\nfalse\n]\n\n\ntitle\n : graph title\n\n\nvsize\n : graph vertical size [default=\n4Gadfly.inch\n]\n\n\nxtitle\n : x-axis title [default=\n\"Time\"\n]\n\n\nytitle\n : y-axis title [default=\n\"y\"\n]\n\n\n\n\nDumps:\n\n\n\n\nplot of the matches between model predictions and observations\n\n\n\n\nExamples:\n\n\nMads\n.\nplotmatches\n(\nmadsdata\n;\n \nfilename\n=\n,\n \nformat\n=\n)\n\n\nMads\n.\nplotmatches\n(\nmadsdata\n,\n \ndict_in\n;\n \nfilename\n=\n,\n \nformat\n=\n)\n\n\nMads\n.\nplotmatches\n(\nmadsdata\n,\n \nresult\n;\n \nfilename\n=\n,\n \nformat\n=\n)\n\n\nMads\n.\nplotmatches\n(\nmadsdata\n,\n \nresult\n,\n \nr\nNO3\n;\n \nfilename\n=\n,\n \nformat\n=\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotobsSAresults\n \n \nMethod\n.\n\n\nPlot the sensitivity analysis results for the observations\n\n\nMethods\n\n\n\n\nMads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle, linewidth, pointsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:550\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresult::Associative\n : sensitivity analysis results\n\n\n\n\nKeywords\n\n\n\n\ndebug\n : [default=\nfalse\n]\n\n\nfilename\n : output file name\n\n\nfilter\n : string or regex to plot only observations containing \nfilter\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\nkeyword\n : to be added in the auto-generated filename\n\n\nlinewidth\n : line width [default=\n2Gadfly.pt\n]\n\n\npointsize\n : point size [default=\n2Gadfly.pt\n]\n\n\nseparate_files\n : plot data for multiple wells separately [default=\nfalse\n]\n\n\nxtitle\n : x-axis title [default=\n\"Time [years]\"\n]\n\n\nytitle\n : y-axis title [default=\n\"Concentration [ppb]\"\n]\n\n\n\n\nDumps:\n\n\n\n\nplot of the sensitivity analysis results for the observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotrobustnesscurves\n \n \nMethod\n.\n\n\nPlot BIG-DT robustness curves\n\n\nMethods\n\n\n\n\nMads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGapPlot.jl:20\n\n\n\n\nArguments\n\n\n\n\nbigdtresults::Dict\n : BIG-DT results\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nfilename\n : output file name used to dump plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nmaxhoriz\n : maximum horizon [default=\nInf\n]\n\n\nmaxprob\n : maximum probability [default=\n1.0\n]\n\n\n\n\nDumps:\n\n\n\n\nimage file with name \nfilename\n and in specified \nformat\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotseries\n \n \nFunction\n.\n\n\nCreate plots of data series\n\n\nMethods\n\n\n\n\nMads.plotseries(X::Array{T\n:Any,2})\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:1062\n\n\nMads.plotseries(X::Array{T\n:Any,2}, filename::String; format, xtitle, ytitle, title, name, combined, hsize, vsize, linewidth, dpi, colors)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:1062\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n : matrix with the series data\n\n\nfilename::String\n : output file name\n\n\n\n\nKeywords\n\n\n\n\ncolors\n : colors to use in plots\n\n\ncombined\n : combine plots [default=\ntrue\n]\n\n\ndpi\n : graph resolution [default=\nMads.dpi\n]\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\nhsize\n : horizontal size [default=\n6Gadfly.inch\n]\n\n\nlinewidth\n : width of the lines in plot  [default=\n2Gadfly.pt\n]\n\n\nname\n : series name [default=\nSources\n]\n\n\ntitle\n : plot title [default=\nSources\n]\n\n\nvsize\n : vertical size [default=\n4Gadfly.inch\n]\n\n\nxtitle\n : x-axis title [default=\nX\n]\n\n\nytitle\n : y-axis title [default=\nY\n]\n\n\n\n\nDumps:\n\n\n\n\nPlots of data series\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotwellSAresults\n \n \nFunction\n.\n\n\nPlot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)\n\n\nMethods\n\n\n\n\nMads.plotwellSAresults(madsdata::Associative, result; xtitle, ytitle, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:416\n\n\nMads.plotwellSAresults(madsdata::Associative, result, wellname; xtitle, ytitle, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:427\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nwellname\n : well name\n\n\n\n\nKeywords\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\nxtitle\n : x-axis title [default=\n\"Time [years]\"\n]\n\n\nytitle\n : y-axis title [default=\n\"Concentration [ppb]\"\n]\n\n\n\n\nDumps:\n\n\n\n\nPlot of the sensitivity analysis results for all the wells in the MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.printSAresults\n \n \nMethod\n.\n\n\nPrint sensitivity analysis results\n\n\nMethods\n\n\n\n\nMads.printSAresults(madsdata::Associative, results::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:889\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresults::Associative\n : dictionary with sensitivity analysis results\n\n\n\n\nsource\n\n\n#\n\n\nMads.printSAresults2\n \n \nMethod\n.\n\n\nPrint sensitivity analysis results (method 2)\n\n\nMethods\n\n\n\n\nMads.printSAresults2(madsdata::Associative, results::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:971\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresults::Associative\n : dictionary with sensitivity analysis results\n\n\n\n\nsource\n\n\n#\n\n\nMads.printerrormsg\n \n \nMethod\n.\n\n\nPrint error message\n\n\nMethods\n\n\n\n\nMads.printerrormsg(e)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:285\n\n\n\n\nArguments\n\n\n\n\ne\n : error message\n\n\n\n\nsource\n\n\n#\n\n\nMads.pull\n \n \nFunction\n.\n\n\nPull (checkout) the latest version of the Mads / Julia modules\n\n\nMethods\n\n\n\n\nMads.pull(modulename::String; kw...)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63\n\n\nMads.pull()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.push\n \n \nFunction\n.\n\n\nPush the latest version of the Mads / Julia modules in the repo\n\n\nMethods\n\n\n\n\nMads.push(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:124\n\n\nMads.push()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:124\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.quietoff\n \n \nMethod\n.\n\n\nMake MADS not quiet\n\n\nMethods\n\n\n\n\nMads.quietoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:47\n\n\n\n\nsource\n\n\n#\n\n\nMads.quieton\n \n \nMethod\n.\n\n\nMake MADS quiet\n\n\nMethods\n\n\n\n\nMads.quieton()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:37\n\n\n\n\nsource\n\n\n#\n\n\nMads.readasciipredictions\n \n \nMethod\n.\n\n\nRead MADS predictions from an ASCII file\n\n\nMethods\n\n\n\n\nMads.readasciipredictions(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:44\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : ASCII file name\n\n\n\n\nReturns:\n\n\n\n\nMADS predictions\n\n\n\n\nsource\n\n\n#\n\n\nMads.readjsonpredictions\n \n \nMethod\n.\n\n\nRead MADS model predictions from a JSON file\n\n\nMethods\n\n\n\n\nMads.readjsonpredictions(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:54\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : JSON file name\n\n\n\n\nReturns:\n\n\n\n\nMADS model predictions\n\n\n\n\nsource\n\n\n#\n\n\nMads.readmodeloutput\n \n \nMethod\n.\n\n\nRead model outputs saved for MADS\n\n\nMethods\n\n\n\n\nMads.readmodeloutput(madsdata::Associative; obskeys)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:580\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nobskeys\n : observation keys [default=getobskeys(madsdata)]\n\n\n\n\nsource\n\n\n#\n\n\nMads.readobservations\n \n \nFunction\n.\n\n\nRead observations\n\n\nMethods\n\n\n\n\nMads.readobservations(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:877\n\n\nMads.readobservations(madsdata::Associative, obskeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:877\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nobskeys::Array{T\n:Any,1}\n : observation keys [default=\ngetobskeys(madsdata)\n]\n\n\n\n\nReturns:\n\n\n\n\ndictionary with Mads observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.readobservations_cmads\n \n \nMethod\n.\n\n\nRead observations using C Mads library\n\n\nMethods\n\n\n\n\nMads.readobservations_cmads(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:9\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.readyamlpredictions\n \n \nMethod\n.\n\n\nRead MADS model predictions from a YAML file \nfilename\n\n\nMethods\n\n\n\n\nMads.readyamlpredictions(filename::String; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:126\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\n\n\nKeywords\n\n\n\n\njulia\n : if \ntrue\n, use \njulia\n YAML library (if available); if \nfalse\n (default), use \npython\n YAML library (if available)\n\n\n\n\nReturns:\n\n\n\n\ndata in yaml input file\n\n\n\n\nsource\n\n\n#\n\n\nMads.regexs2obs\n \n \nMethod\n.\n\n\nGet observations for a set of regular expressions\n\n\nMethods\n\n\n\n\nMads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:811\n\n\n\n\nArguments\n\n\n\n\ngetparamhere::Array{Bool,1}\n : parameters\n\n\nobsline::String\n : observation line\n\n\nobsnames::Array{String,1}\n : observation names\n\n\nregexs::Array{Regex,1}\n : regular expressions\n\n\n\n\nReturns:\n\n\n\n\nobsdict\n : observations\n\n\n\n\nsource\n\n\n#\n\n\nMads.reload\n \n \nMethod\n.\n\n\nReload Mads modules\n\n\nMethods\n\n\n\n\nMads.reload()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:34\n\n\n\n\nsource\n\n\n#\n\n\nMads.removesource!\n \n \nFunction\n.\n\n\nRemove a contamination source\n\n\nMethods\n\n\n\n\nMads.removesource!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:39\n\n\nMads.removesource!(madsdata::Associative, sourceid::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:39\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nsourceid::Int64\n : source id [default=\n0\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.removesourceparameters!\n \n \nMethod\n.\n\n\nRemove contaminant source parameters\n\n\nMethods\n\n\n\n\nMads.removesourceparameters!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:90\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.required\n \n \nFunction\n.\n\n\nLists modules required by a module (Mads by default)\n\n\nMethods\n\n\n\n\nMads.required(modulename::String, filtermodule::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25\n\n\nMads.required(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25\n\n\nMads.required()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25\n\n\n\n\nArguments\n\n\n\n\nfiltermodule::String\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.resetmodelruns\n \n \nMethod\n.\n\n\nReset the model runs count to be equal to zero\n\n\nMethods\n\n\n\n\nMads.resetmodelruns()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:141\n\n\n\n\nsource\n\n\n#\n\n\nMads.residuals\n \n \nFunction\n.\n\n\nCompute residuals\n\n\nMethods\n\n\n\n\nMads.residuals(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:33\n\n\nMads.residuals(madsdata::Associative, resultvec::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:7\n\n\nMads.residuals(madsdata::Associative, resultdict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:30\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresultdict::Associative\n : result dictionary\n\n\nresultvec::Array{T\n:Any,1}\n : result vector\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.restartoff\n \n \nMethod\n.\n\n\nMADS restart off\n\n\nMethods\n\n\n\n\nMads.restartoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:18\n\n\n\n\nsource\n\n\n#\n\n\nMads.restarton\n \n \nMethod\n.\n\n\nMADS restart on\n\n\nMethods\n\n\n\n\nMads.restarton()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:9\n\n\n\n\nsource\n\n\n#\n\n\nMads.reweighsamples\n \n \nMethod\n.\n\n\nReweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing\n\n\nMethods\n\n\n\n\nMads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:299\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\noldllhoods::Array{T\n:Any,1}\n : the log likelihoods of the parameters in the old distribution\n\n\npredictions::Array\n : the model predictions for each of the samples\n\n\n\n\nReturns:\n\n\n\n\nvector of log-likelihoods after reweighing\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmdir\n \n \nMethod\n.\n\n\nRemove directory\n\n\nMethods\n\n\n\n\nMads.rmdir(dir::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:975\n\n\n\n\nArguments\n\n\n\n\ndir::String\n : directory to be removed\n\n\n\n\nKeywords\n\n\n\n\npath\n : path of the directory [default=\ncurrent path\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmfile\n \n \nMethod\n.\n\n\nRemove file\n\n\nMethods\n\n\n\n\nMads.rmfile(filename::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:991\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file to be removed\n\n\n\n\nKeywords\n\n\n\n\npath\n : path of the file [default=\ncurrent path\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmfiles_ext\n \n \nMethod\n.\n\n\nRemove files with extension \next\n\n\nMethods\n\n\n\n\nMads.rmfiles_ext(ext::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1007\n\n\n\n\nArguments\n\n\n\n\next::String\n : extension\n\n\n\n\nKeywords\n\n\n\n\npath\n : path of the files to be removed [default=\n.\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmfiles_root\n \n \nMethod\n.\n\n\nRemove files with root \nroot\n\n\nMethods\n\n\n\n\nMads.rmfiles_root(root::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1020\n\n\n\n\nArguments\n\n\n\n\nroot::String\n : root\n\n\n\n\nKeywords\n\n\n\n\npath\n : path of the files to be removed [default=\n.\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock\n \n \nMethod\n.\n\n\nRosenbrock test function\n\n\nMethods\n\n\n\n\nMads.rosenbrock(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:43\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n : parameter vector\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock2_gradient_lm\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function\n\n\nMethods\n\n\n\n\nMads.rosenbrock2_gradient_lm(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:24\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n : parameter vector\n\n\n\n\nReturns:\n\n\n\n\nparameter gradients\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock2_lm\n \n \nMethod\n.\n\n\nRosenbrock test function (more difficult to solve)\n\n\nMethods\n\n\n\n\nMads.rosenbrock2_lm(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:10\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n : parameter vector\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_gradient!\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function\n\n\nMethods\n\n\n\n\nMads.rosenbrock_gradient!(x::Array{T\n:Any,1}, grad::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:64\n\n\n\n\nArguments\n\n\n\n\ngrad::Array{T\n:Any,1}\n : gradient vector\n\n\nx::Array{T\n:Any,1}\n : parameter vector\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_gradient_lm\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separately)\n\n\nMethods\n\n\n\n\nMads.rosenbrock_gradient_lm(x::Array{T\n:Any,1}; dx, center)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:81\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n : parameter vector\n\n\n\n\nKeywords\n\n\n\n\ncenter\n : array with parameter observations at the center applied to compute numerical derivatives [default=\nArray{Float64}(0)\n]\n\n\ndx\n : apply parameter step to compute numerical derivatives [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nparameter gradients\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_hessian!\n \n \nMethod\n.\n\n\nParameter Hessian of the Rosenbrock test function\n\n\nMethods\n\n\n\n\nMads.rosenbrock_hessian!(x::Array{T\n:Any,1}, hess::Array{T\n:Any,2})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:97\n\n\n\n\nArguments\n\n\n\n\nhess::Array{T\n:Any,2}\n : Hessian matrix\n\n\nx::Array{T\n:Any,1}\n : parameter vector\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_lm\n \n \nMethod\n.\n\n\nRosenbrock test function for LM optimization (returns the 2 components separately)\n\n\nMethods\n\n\n\n\nMads.rosenbrock_lm(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:53\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n : parameter vector\n\n\n\n\nsource\n\n\n#\n\n\nMads.runcmd\n \n \nFunction\n.\n\n\nRun external command and pipe stdout and stderr\n\n\nMethods\n\n\n\n\nMads.runcmd(cmdstring::String; pipe, quiet, waittime)\n : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:97\n\n\nMads.runcmd(cmd::Cmd; pipe, quiet, waittime)\n : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:42\n\n\n\n\nArguments\n\n\n\n\ncmd::Cmd\n : command (as a julia command; e.g. \nls\n)\n\n\ncmdstring::String\n : command (as a string; e.g. \"ls\")\n\n\n\n\nKeywords\n\n\n\n\npipe\n : [default=\nfalse\n]\n\n\nquiet\n : [default=\nMads.quiet\n]\n\n\nwaittime\n : wait time is second [default=\nMads.executionwaittime\n]\n\n\n\n\nReturns:\n\n\n\n\ncmdout\n\n\ncmderr\n\n\n\n\nsource\n\n\n#\n\n\nMads.runremote\n \n \nFunction\n.\n\n\nRun remote command on a series of servers\n\n\nMethods\n\n\n\n\nMads.runremote(cmd::String, nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277\n\n\nMads.runremote(cmd::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277\n\n\n\n\nArguments\n\n\n\n\ncmd::String\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.saltelli\n \n \nMethod\n.\n\n\nSaltelli sensitivity analysis\n\n\nMethods\n\n\n\n\nMads.saltelli(madsdata::Associative; N, seed, parallel, restartdir, checkpointfrequency)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:608\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nN\n : number of samples [default=\n100\n]\n\n\ncheckpointfrequency\n : check point frequency [default=\nN\n]\n\n\nparallel\n : set to true if the model runs should be performed in parallel [default=\nfalse\n]\n\n\nrestartdir\n : directory where files will be stored containing model results for fast simulation restarts\n\n\nseed\n : random seed [default=\n0\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.saltellibrute\n \n \nMethod\n.\n\n\nSaltelli sensitivity analysis (brute force)\n\n\nMethods\n\n\n\n\nMads.saltellibrute(madsdata::Associative; N, seed, restartdir)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:420\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nN\n : number of samples [default=\n1000\n]\n\n\nrestartdir\n : directory where files will be stored containing model results for fast simulation restarts\n\n\nseed\n : random seed [default=\n0\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.saltellibruteparallel\n \n \nMethod\n.\n\n\nParallel version of saltellibrute\n\n\nsource\n\n\n#\n\n\nMads.saltelliparallel\n \n \nMethod\n.\n\n\nParallel version of saltelli\n\n\nsource\n\n\n#\n\n\nMads.sampling\n \n \nMethod\n.\n\n\nMethods\n\n\n\n\nMads.sampling(param::Array{T\n:Any,1}, J::Array, numsamples::Number; seed, scale)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:244\n\n\n\n\nArguments\n\n\n\n\nJ::Array\n : Jacobian matrix\n\n\nnumsamples::Number\n : Number of samples\n\n\nparam::Array{T\n:Any,1}\n : Parameter vector\n\n\n\n\nKeywords\n\n\n\n\nscale\n : data scaling [default=\n1\n]\n\n\nseed\n : random esee [default=\n0\n]\n\n\n\n\nReturns:\n\n\n\n\ngenerated samples (vector or array)\n\n\nvector of log-likelihoods\n\n\n\n\nsource\n\n\n#\n\n\nMads.savecalibrationresults\n \n \nMethod\n.\n\n\nSave calibration results\n\n\nMethods\n\n\n\n\nMads.savecalibrationresults(madsdata::Associative, results)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:206\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nresults\n : the calibration results\n\n\n\n\nsource\n\n\n#\n\n\nMads.savemadsfile\n \n \nFunction\n.\n\n\nSave MADS problem dictionary \nmadsdata\n in MADS input file \nfilename\n\n\nMethods\n\n\n\n\nMads.savemadsfile(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:146\n\n\nMads.savemadsfile(madsdata::Associative, filename::String; julia, explicit)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:146\n\n\nMads.savemadsfile(madsdata::Associative, parameters::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:152\n\n\nMads.savemadsfile(madsdata::Associative, parameters::Associative, filename::String; julia, explicit)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:152\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameters::Associative\n : Dictionary with parameters (optional)\n\n\n\n\nKeywords\n\n\n\n\nexplicit\n : if \ntrue\n ignores MADS YAML file modifications and rereads the original input file [default=\nfalse\n]\n\n\njulia\n : if \ntrue\n use Julia JSON module to save [default=\nfalse\n]\n\n\n\n\nExample:\n\n\nMads\n.\nsavemadsfile\n(\nmadsdata\n)\n\n\nMads\n.\nsavemadsfile\n(\nmadsdata\n,\n \ntest.mads\n)\n\n\nMads\n.\nsavemadsfile\n(\nmadsdata\n,\n \nparameters\n,\n \ntest.mads\n)\n\n\nMads\n.\nsavemadsfile\n(\nmadsdata\n,\n \nparameters\n,\n \ntest.mads\n,\n \nexplicit\n=\ntrue\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.savemcmcresults\n \n \nMethod\n.\n\n\nSave MCMC chain in a file\n\n\nMethods\n\n\n\n\nMads.savemcmcresults(chain::Array, filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:137\n\n\n\n\nArguments\n\n\n\n\nchain::Array\n : MCMC chain\n\n\nfilename::String\n : file name\n\n\n\n\nDumps:\n\n\n\n\nthe file containing MCMC chain\n\n\n\n\nsource\n\n\n#\n\n\nMads.savesaltellirestart\n \n \nMethod\n.\n\n\nSave Saltelli sensitivity analysis results for fast simulation restarts\n\n\nMethods\n\n\n\n\nMads.savesaltellirestart(evalmat::Array, matname::String, restartdir::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:589\n\n\n\n\nArguments\n\n\n\n\nevalmat::Array\n : saved array\n\n\nmatname::String\n : matrix (array) name (defines the name of the loaded file)\n\n\nrestartdir::String\n : directory where files will be stored containing model results for fast simulation restarts\n\n\n\n\nsource\n\n\n#\n\n\nMads.scatterplotsamples\n \n \nMethod\n.\n\n\nCreate histogram/scatter plots of model parameter samples\n\n\nMethods\n\n\n\n\nMads.scatterplotsamples(madsdata::Associative, samples::Array{T\n:Any,2}, filename::String; format, pointsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:379\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : output file name\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nsamples::Array{T\n:Any,2}\n : matrix with model parameters\n\n\n\n\nKeywords\n\n\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\npointsize\n : point size [default=\n0.9Gadfly.mm\n]\n\n\n\n\nDumps:\n\n\n\n\nhistogram/scatter plots of model parameter samples\n\n\n\n\nsource\n\n\n#\n\n\nMads.searchdir\n \n \nFunction\n.\n\n\nGet files in the current directory or in a directory defined by \npath\n matching pattern \nkey\n which can be a string or regular expression\n\n\nMethods\n\n\n\n\nMads.searchdir(key::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:609\n\n\nMads.searchdir(key::Regex; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:608\n\n\n\n\nArguments\n\n\n\n\nkey::Regex\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\nkey::String\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\n\n\nKeywords\n\n\n\n\npath\n : search directory for the mads input files [default=\n.\n]\n\n\n\n\nReturns:\n\n\n\n\nfilename\n : an array with file names matching the pattern in the specified directory\n\n\n\n\nExamples:\n\n\n-\n \n`Mads.searchdir(\na\n)`\n\n\n-\n \n`Mads.searchdir(r\n[A-B]\n; path = \n.\n)`\n\n\n-\n \n`Mads.searchdir(r\n.*.cov\n; path = \n.\n)`\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.set_nprocs_per_task\n \n \nFunction\n.\n\n\nSet number of processors needed for each parallel task at each node\n\n\nMethods\n\n\n\n\nMads.set_nprocs_per_task()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:25\n\n\nMads.set_nprocs_per_task(local_nprocs_per_task::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:25\n\n\n\n\nArguments\n\n\n\n\nlocal_nprocs_per_task::Integer\n\n\n\n\nsource\n\n\n#\n\n\nMads.setallparamsoff!\n \n \nMethod\n.\n\n\nSet all parameters OFF\n\n\nMethods\n\n\n\n\nMads.setallparamsoff!(madsdata::Associative; filter)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:430\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nfilter\n : parameter filter\n\n\n\n\nsource\n\n\n#\n\n\nMads.setallparamson!\n \n \nMethod\n.\n\n\nSet all parameters ON\n\n\nMethods\n\n\n\n\nMads.setallparamson!(madsdata::Associative; filter)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:416\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nKeywords\n\n\n\n\nfilter\n : parameter filter\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdebuglevel\n \n \nMethod\n.\n\n\nSet MADS debug level\n\n\nMethods\n\n\n\n\nMads.setdebuglevel(level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:112\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n : debug level\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdefaultplotformat\n \n \nMethod\n.\n\n\nSet the default plot format (\nSVG\n is the default format)\n\n\nMethods\n\n\n\n\nMads.setdefaultplotformat(format::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:16\n\n\n\n\nArguments\n\n\n\n\nformat::String\n : plot format\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdir\n \n \nFunction\n.\n\n\nSet the working directory (for parallel environments)\n\n\nUsage:\n\n\n@everywhere\n \nMads\n.\nsetdir\n()\n\n\n@everywhere\n \nMads\n.\nsetdir\n(\n/home/monty\n)\n\n\n\n\n\n\nMethods\n\n\n\n\nMads.setdir()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:254\n\n\nMads.setdir(dir)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:249\n\n\n\n\nArguments\n\n\n\n\ndir\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdynamicmodel\n \n \nMethod\n.\n\n\nSet Dynamic Model for MADS model calls using an internal Julia function\n\n\nMethods\n\n\n\n\nMads.setdynamicmodel(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:110\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : Julia function\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.setexecutionwaittime\n \n \nMethod\n.\n\n\nSet maximum execution wait time for forward model runs in seconds\n\n\nMethods\n\n\n\n\nMads.setexecutionwaittime(waitime::Float64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:132\n\n\n\n\nArguments\n\n\n\n\nwaitime::Float64\n : maximum execution wait time for forward model runs in seconds\n\n\n\n\nsource\n\n\n#\n\n\nMads.setmadsinputfile\n \n \nMethod\n.\n\n\nSet a default MADS input file\n\n\nMethods\n\n\n\n\nMads.setmadsinputfile(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:215\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nsource\n\n\n#\n\n\nMads.setmodelinputs\n \n \nMethod\n.\n\n\nSet model input files; delete files where model output should be saved for MADS\n\n\nMethods\n\n\n\n\nMads.setmodelinputs(madsdata::Associative, parameters::Associative; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:512\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameters::Associative\n : parameters\n\n\n\n\nKeywords\n\n\n\n\npath\n : path for the files [default=\n.\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.setnewmadsfilename\n \n \nFunction\n.\n\n\nSet new mads file name\n\n\nMethods\n\n\n\n\nMads.setnewmadsfilename(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:369\n\n\nMads.setnewmadsfilename(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:366\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : file name\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nnew file name\n\n\n\n\nsource\n\n\n#\n\n\nMads.setobservationtargets!\n \n \nMethod\n.\n\n\nSet observations (calibration targets) in the MADS problem dictionary based on a \npredictions\n dictionary\n\n\nMethods\n\n\n\n\nMads.setobservationtargets!(madsdata::Associative, predictions::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:495\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\npredictions::Associative\n : dictionary with model predictions\n\n\n\n\nsource\n\n\n#\n\n\nMads.setobstime!\n \n \nFunction\n.\n\n\nSet observation time based on the observation name in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.setobstime!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:247\n\n\nMads.setobstime!(madsdata::Associative, separator::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:247\n\n\nMads.setobstime!(madsdata::Associative, rx::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:258\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nrx::Regex\n : regular expression to match\n\n\nseparator::String\n : separator [default=\n_\n]\n\n\n\n\nExamples:\n\n\nMads\n.\nsetobstime!\n(\nmadsdata\n,\n \n_t\n)\n\n\nMads\n.\nsetobstime!\n(\nmadsdata\n,\n \nr\n[A-x]*_t([0-9,.]+)\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.setobsweights!\n \n \nMethod\n.\n\n\nSet observation weights in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.setobsweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:293\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nvalue::Number\n : value for observation weights\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamoff!\n \n \nMethod\n.\n\n\nSet a specific parameter with a key \nparameterkey\n OFF\n\n\nMethods\n\n\n\n\nMads.setparamoff!(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:455\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameterkey::String\n : parameter key\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamon!\n \n \nMethod\n.\n\n\nSet a specific parameter with a key \nparameterkey\n ON\n\n\nMethods\n\n\n\n\nMads.setparamon!(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:444\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameterkey::String\n : parameter key\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamsdistnormal!\n \n \nMethod\n.\n\n\nSet normal parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.setparamsdistnormal!(madsdata::Associative, mean::Array{T\n:Any,1}, stddev::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:467\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nmean::Array{T\n:Any,1}\n : array with the mean values\n\n\nstddev::Array{T\n:Any,1}\n : array with the standard deviation values\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamsdistuniform!\n \n \nMethod\n.\n\n\nSet uniform parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.setparamsdistuniform!(madsdata::Associative, min::Array{T\n:Any,1}, max::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:482\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nmax::Array{T\n:Any,1}\n : array with the maximum values\n\n\nmin::Array{T\n:Any,1}\n : array with the minimum values\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamsinit!\n \n \nMethod\n.\n\n\nSet initial parameter guesses in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.setparamsinit!(madsdata::Associative, paramdict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:318\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparamdict::Associative\n : dictionary with initial model parameter values\n\n\n\n\nsource\n\n\n#\n\n\nMads.setplotfileformat\n \n \nMethod\n.\n\n\nSet image file \nformat\n based on the \nfilename\n extension, or sets the \nfilename\n extension based on the requested \nformat\n. The default \nformat\n is \nSVG\n. \nPNG\n, \nPDF\n, \nESP\n, and \nPS\n are also supported.\n\n\nMethods\n\n\n\n\nMads.setplotfileformat(filename::String, format::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:36\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n : output file name\n\n\nformat::String\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\n\n\nReturns:\n\n\n\n\noutput file name\n\n\noutput plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource\n\n\n#\n\n\nMads.setprocs\n \n \nFunction\n.\n\n\nSet the available processors based on environmental variables. Supports SLURM only at the moment.\n\n\nUsage:\n\n\nMads\n.\nsetprocs\n()\n\n\nMads\n.\nsetprocs\n(\n4\n)\n\n\nMads\n.\nsetprocs\n(\n4\n,\n \n8\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n4\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n32\n,\n \nmads_servers\n=\ntrue\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n64\n,\n \nnodenames\n=\n[\nmadsmax\n,\n \nmadszem\n])\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n64\n,\n \nnodenames\n=\nwc[096-157,160,175]\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n64\n,\n \nmads_servers\n=\ntrue\n,\n \nexename\n=\n/home/monty/bin/julia\n,\n \ndir\n=\n/home/monty\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nnp\n : number of processors\n\n\nnt\n : number of threads\n\n\n\n\nOptional arguments:\n\n\n\n\nntasks_per_node\n : number of parallel tasks per\n\n\nnprocs_per_task\n : number of processors needed for each parallel task at each node\n\n\nnodenames\n : array with names of machines/nodes to be invoked\n\n\ndir\n : common directory shared by all the jobs\n\n\nexename\n : location of the julia executable (the same version of julia is needed on all the workers)\n\n\nmads_servers\n : if \ntrue\n use MADS servers (LANL only)\n\n\nquiet\n : suppress output [default \ntrue\n]\n\n\ntest\n : test the servers and connect to each one ones at a time [default \nfalse\n]\n\n\n\n\nMethods\n\n\n\n\nMads.setprocs(; ntasks_per_node, nprocs_per_task, mads_servers, test, dir, exename, nodenames, quiet)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:56\n\n\nMads.setprocs(np::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:52\n\n\nMads.setprocs(np::Integer, nt::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:38\n\n\n\n\nArguments\n\n\n\n\nnp::Integer\n\n\nnt::Integer\n\n\n\n\nKeywords\n\n\n\n\ndir\n\n\nexename\n\n\nmads_servers\n\n\nnodenames\n\n\nnprocs_per_task\n\n\nntasks_per_node\n\n\nquiet\n\n\ntest\n\n\n\n\nsource\n\n\n#\n\n\nMads.setseed\n \n \nFunction\n.\n\n\nSet / get current random seed\n\n\nMethods\n\n\n\n\nMads.setseed()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:319\n\n\nMads.setseed(seed::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:319\n\n\nMads.setseed(seed::Integer, quiet::Bool)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:319\n\n\n\n\nArguments\n\n\n\n\nquiet::Bool\n : [default=\ntrue\n]\n\n\nseed::Integer\n : random seed\n\n\n\n\nsource\n\n\n#\n\n\nMads.settarget!\n \n \nMethod\n.\n\n\nSet observation target\n\n\nMethods\n\n\n\n\nMads.settarget!(o::Associative, target::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:237\n\n\n\n\nArguments\n\n\n\n\no::Associative\n : observation data\n\n\ntarget::Number\n : observation target\n\n\n\n\nsource\n\n\n#\n\n\nMads.settime!\n \n \nMethod\n.\n\n\nSet observation time\n\n\nMethods\n\n\n\n\nMads.settime!(o::Associative, time::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:159\n\n\n\n\nArguments\n\n\n\n\no::Associative\n : observation data\n\n\ntime::Number\n : observation time\n\n\n\n\nsource\n\n\n#\n\n\nMads.setverbositylevel\n \n \nMethod\n.\n\n\nSet MADS verbosity level\n\n\nMethods\n\n\n\n\nMads.setverbositylevel(level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:122\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n : debug level\n\n\n\n\nsource\n\n\n#\n\n\nMads.setweight!\n \n \nMethod\n.\n\n\nSet observation weight\n\n\nMethods\n\n\n\n\nMads.setweight!(o::Associative, weight::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:198\n\n\n\n\nArguments\n\n\n\n\no::Associative\n : observation data\n\n\nweight::Number\n : observation weight\n\n\n\n\nsource\n\n\n#\n\n\nMads.setwellweights!\n \n \nMethod\n.\n\n\nSet well weights in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.setwellweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:338\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nvalue::Number\n : value for well weights\n\n\n\n\nsource\n\n\n#\n\n\nMads.showallparameters\n \n \nMethod\n.\n\n\nShow all parameters in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.showallparameters(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:562\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.showobservations\n \n \nMethod\n.\n\n\nShow observations in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.showobservations(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:391\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.showparameters\n \n \nMethod\n.\n\n\nShow parameters in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.showparameters(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:526\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.sinetransform\n \n \nMethod\n.\n\n\nSine transformation of model parameters\n\n\nMethods\n\n\n\n\nMads.sinetransform(sineparams::Array{T\n:Any,1}, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:37\n\n\n\n\nArguments\n\n\n\n\nindexlogtransformed::Array{T\n:Any,1}\n : index vector of log-transformed parameters\n\n\nlowerbounds::Array{T\n:Any,1}\n : lower bounds\n\n\nsineparams::Array{T\n:Any,1}\n : model parameters\n\n\nupperbounds::Array{T\n:Any,1}\n : upper bounds\n\n\n\n\nReturns:\n\n\n\n\nSine transformation of model parameters\n\n\n\n\nsource\n\n\n#\n\n\nMads.sinetransformfunction\n \n \nMethod\n.\n\n\nSine transformation of a function\n\n\nMethods\n\n\n\n\nMads.sinetransformfunction(f::Function, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:56\n\n\n\n\nArguments\n\n\n\n\nf::Function\n : function\n\n\nindexlogtransformed::Array{T\n:Any,1}\n : index vector of log-transformed parameters\n\n\nlowerbounds::Array{T\n:Any,1}\n : lower bounds\n\n\nupperbounds::Array{T\n:Any,1}\n : upper bounds\n\n\n\n\nReturns:\n\n\n\n\nSine transformation\n\n\n\n\nsource\n\n\n#\n\n\nMads.sinetransformgradient\n \n \nMethod\n.\n\n\nSine transformation of a gradient function\n\n\nMethods\n\n\n\n\nMads.sinetransformgradient(g::Function, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1}; sindx)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:77\n\n\n\n\nArguments\n\n\n\n\ng::Function\n : gradient function\n\n\nindexlogtransformed::Array{T\n:Any,1}\n : index vector of log-transformed parameters\n\n\nlowerbounds::Array{T\n:Any,1}\n : vector with parameter lower bounds\n\n\nupperbounds::Array{T\n:Any,1}\n : vector with parameter upper bounds\n\n\n\n\nKeywords\n\n\n\n\nsindx\n : sin-space parameter step applied to compute numerical derivatives [default=\n0.1\n]\n\n\n\n\nReturns:\n\n\n\n\nSine transformation of a gradient function\n\n\n\n\nsource\n\n\n#\n\n\nMads.spaghettiplot\n \n \nFunction\n.\n\n\nGenerate a combined spaghetti plot for the \nselected\n (\ntype != null\n) model parameter\n\n\nMethods\n\n\n\n\nMads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, seed, linewidth, pointsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:849\n\n\nMads.spaghettiplot(madsdata::Associative, dictarray::Associative; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, seed, linewidth, pointsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:853\n\n\nMads.spaghettiplot(madsdata::Associative, array::Array; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, seed, linewidth, pointsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:890\n\n\n\n\nArguments\n\n\n\n\narray::Array\n : data arrays to be plotted\n\n\ndictarray::Associative\n : dictionary array containing the data arrays to be plotted\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumber_of_samples::Integer\n : number of samples\n\n\n\n\nKeywords\n\n\n\n\nfilename\n : output file name used to output the produced plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots (if \nfilename\n is not defined)\n\n\nlinewidth\n : width of the lines in plot [default=\n2Gadfly.pt\n]\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n [default] or \nfalse\n)\n\n\nplotdata\n : plot data (if \nfalse\n model predictions are plotted only) [default=\ntrue\n]\n\n\npointsize\n : size of the markers in plot [default=\n4Gadfly.pt\n]\n\n\nseed\n : random seed [default=\n0\n]\n\n\nxtitle\n : \nx\n axis title [default=\nX\n]\n\n\nyfit\n : fit vertical axis range [default=\nfalse\n]\n\n\nytitle\n : \ny\n axis title [default=\nY\n]\n\n\n\n\nDumps:\n\n\n\n\nImage file with a spaghetti plot (\nmads_rootname\n-\nkeyword\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\nExample:\n\n\nMads\n.\nspaghettiplot\n(\nmadsdata\n,\n \ndictarray\n;\n \nfilename\n=\n,\n \nkeyword\n \n=\n \n,\n \nformat\n=\n,\n \nxtitle\n=\nX\n,\n \nytitle\n=\nY\n,\n \nobs_plot_dots\n=\ntrue\n)\n\n\nMads\n.\nspaghettiplot\n(\nmadsdata\n,\n \narray\n;\n \nfilename\n=\n,\n \nkeyword\n \n=\n \n,\n \nformat\n=\n,\n \nxtitle\n=\nX\n,\n \nytitle\n=\nY\n,\n \nobs_plot_dots\n=\ntrue\n)\n\n\nMads\n.\nspaghettiplot\n(\nmadsdata\n,\n \nnumber_of_samples\n;\n \nfilename\n=\n,\n \nkeyword\n \n=\n \n,\n \nformat\n=\n,\n \nxtitle\n=\nX\n,\n \nytitle\n=\nY\n,\n \nobs_plot_dots\n=\ntrue\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.spaghettiplots\n \n \nFunction\n.\n\n\nGenerate separate spaghetti plots for each \nselected\n (\ntype != null\n) model parameter\n\n\nMethods\n\n\n\n\nMads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:708\n\n\nMads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:712\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumber_of_samples::Integer\n : number of samples\n\n\nparamdictarray::DataStructures.OrderedDict\n : parameter dictionary containing the data arrays to be plotted\n\n\n\n\nKeywords\n\n\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.) [default=\nMads.graphbackend\n]\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots\n\n\nlinewidth\n : width of the lines on the plot [default=\n2Gadfly.pt\n]\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n (default) or \nfalse\n)\n\n\npointsize\n : size of the markers on the plot [default=\n4Gadfly.pt\n]\n\n\nseed\n : random seed [default=\n0\n]\n\n\nxtitle\n : \nx\n axis title [default=\nX\n]\n\n\nytitle\n : \ny\n axis title [default=\nY\n]\n\n\n\n\nDumps:\n\n\n\n\nA series of image files with spaghetti plots for each \nselected\n (\ntype != null\n) model parameter (\nmads_rootname\n-\nkeyword\n-\nparam_key\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\nExample:\n\n\nMads\n.\nspaghettiplots\n(\nmadsdata\n,\n \nparamdictarray\n;\n \nformat\n=\n,\n \nkeyword\n=\n,\n \nxtitle\n=\nX\n,\n \nytitle\n=\nY\n,\n \nobs_plot_dots\n=\ntrue\n)\n\n\nMads\n.\nspaghettiplots\n(\nmadsdata\n,\n \nnumber_of_samples\n;\n \nformat\n=\n,\n \nkeyword\n=\n,\n \nxtitle\n=\nX\n,\n \nytitle\n=\nY\n,\n \nobs_plot_dots\n=\ntrue\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.sphericalcov\n \n \nMethod\n.\n\n\nSpherical spatial covariance function\n\n\nMethods\n\n\n\n\nMads.sphericalcov(h::Number, maxcov::Number, scale::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:43\n\n\n\n\nArguments\n\n\n\n\nh::Number\n : separation distance\n\n\nmaxcov::Number\n : max covariance\n\n\nscale::Number\n : scale\n\n\n\n\nReturns:\n\n\n\n\ncovariance\n\n\n\n\nsource\n\n\n#\n\n\nMads.sphericalvariogram\n \n \nMethod\n.\n\n\nSpherical variogram\n\n\nMethods\n\n\n\n\nMads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:59\n\n\n\n\nArguments\n\n\n\n\nh::Number\n : separation distance\n\n\nnugget::Number\n : nugget\n\n\nrange::Number\n : range\n\n\nsill::Number\n : sill\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.sprintf\n \n \nMethod\n.\n\n\nConvert \n@sprintf\n macro into \nsprintf\n function\n\n\nsource\n\n\n#\n\n\nMads.status\n \n \nMethod\n.\n\n\nStatus of the Mads modules\n\n\nMethods\n\n\n\n\nMads.status(; git, gitmore)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:190\n\n\n\n\nKeywords\n\n\n\n\ngit\n\n\ngitmore\n\n\n\n\nsource\n\n\n#\n\n\nMads.stderrcaptureoff\n \n \nMethod\n.\n\n\nRestore STDERR \n\n\nMethods\n\n\n\n\nMads.stderrcaptureoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:108\n\n\n\n\nsource\n\n\n#\n\n\nMads.stderrcaptureon\n \n \nMethod\n.\n\n\nRedirect STDERR to a reader\n\n\nMethods\n\n\n\n\nMads.stderrcaptureon()\n : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:95\n\n\n\n\nsource\n\n\n#\n\n\nMads.stdoutcaptureoff\n \n \nMethod\n.\n\n\nRestore STDOUT\n\n\nMethods\n\n\n\n\nMads.stdoutcaptureoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:82\n\n\n\n\nsource\n\n\n#\n\n\nMads.stdoutcaptureon\n \n \nMethod\n.\n\n\nRedirect STDOUT to a reader\n\n\nMethods\n\n\n\n\nMads.stdoutcaptureon()\n : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:69\n\n\n\n\nsource\n\n\n#\n\n\nMads.stdouterrcaptureoff\n \n \nMethod\n.\n\n\nRestore STDOUT \n STDERR\n\n\nMethods\n\n\n\n\nMads.stdouterrcaptureoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:131\n\n\n\n\nsource\n\n\n#\n\n\nMads.stdouterrcaptureon\n \n \nMethod\n.\n\n\nRedirect STDOUT \n STDERR to readers\n\n\nMethods\n\n\n\n\nMads.stdouterrcaptureon()\n : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:121\n\n\n\n\nsource\n\n\n#\n\n\nMads.svrdump\n \n \nMethod\n.\n\n\nDump SVR models in files\n\n\nMethods\n\n\n\n\nMads.svrdump(svrmodel::Array{SVR.svmmodel,1}, rootname::String, numberofsamples::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:135\n\n\n\n\nArguments\n\n\n\n\nnumberofsamples::Int64\n : number of samples\n\n\nrootname::String\n : root name\n\n\nsvrmodel::Array{SVR.svmmodel,1}\n : SVR model\n\n\n\n\nsource\n\n\n#\n\n\nMads.svrfree\n \n \nMethod\n.\n\n\nFree SVR\n\n\nMethods\n\n\n\n\nMads.svrfree(svrmodel::Array{SVR.svmmodel,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:117\n\n\n\n\nArguments\n\n\n\n\nsvrmodel::Array{SVR.svmmodel,1}\n : SVR model\n\n\n\n\nsource\n\n\n#\n\n\nMads.svrload\n \n \nMethod\n.\n\n\nLoad SVR models from files\n\n\nMethods\n\n\n\n\nMads.svrload(npred::Int64, rootname::String, numberofsamples::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:158\n\n\n\n\nArguments\n\n\n\n\nnpred::Int64\n : number of model predictions\n\n\nnumberofsamples::Int64\n : number of samples\n\n\nrootname::String\n : root name\n\n\n\n\nReturns:\n\n\n\n\nSVR model\n\n\n\n\nsource\n\n\n#\n\n\nMads.svrpredict\n \n \nFunction\n.\n\n\nPredict SVR\n\n\nMethods\n\n\n\n\nMads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,2})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:90\n\n\nMads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:82\n\n\n\n\nArguments\n\n\n\n\nparamarray::Array{Float64,1}\n : parameter array\n\n\nparamarray::Array{Float64,2}\n : parameter array\n\n\nsvrmodel::Array{SVR.svmmodel,1}\n : SVR model\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.svrtrain\n \n \nFunction\n.\n\n\nTrain SVR\n\n\nMethods\n\n\n\n\nMads.svrtrain(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:38\n\n\nMads.svrtrain(madsdata::Associative, paramarray::Array{Float64,2}; check, savefile, addminmax, svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, verbose)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:6\n\n\nMads.svrtrain(madsdata::Associative, numberofsamples::Integer; addminmax, kw...)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:38\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nnumberofsamples::Integer\n : number of random samples in the training set [default=\n100\n]\n\n\nparamarray::Array{Float64,2}\n\n\n\n\nKeywords\n\n\n\n\nC\n : [default=\n10000.0\n]\n\n\naddminmax\n : [default=\ntrue\n]\n\n\ncache_size\n : [default=\n100.0\n]\n\n\ncheck\n : [default=\nfalse\n]\n\n\ncoef0\n : [default=\n0\n]\n\n\ndegree\n : [default=\n3\n]\n\n\neps\n : [default=\n0.001\n]\n\n\ngamma\n : [default=\n1/numberofsamples\n]\n\n\nkernel_type\n : [default=\nSVR.RBF\n]\n\n\nnu\n : [default=\n0.5\n]\n\n\np\n : [default=\n0.1\n]\n\n\nprobability\n : [default=\nfalse\n]\n\n\nsavefile\n : [default=\nfalse\n]\n\n\nshrinking\n : [default=\ntrue\n]\n\n\nsvm_type\n : [default=\nSVR.EPSILON_SVR\n]\n\n\nverbose\n : [default=\nfalse\n]\n\n\n\n\nReturns:\n\n\n\n\nSVR model\n\n\n\n\nsource\n\n\n#\n\n\nMads.symlinkdir\n \n \nMethod\n.\n\n\nCreate a symbolic link of a file \nfilename\n in a directory \ndirtarget\n\n\nMethods\n\n\n\n\nMads.symlinkdir(filename::String, dirtarget::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:961\n\n\n\n\nArguments\n\n\n\n\ndirtarget::String\n : target directory\n\n\nfilename::String\n : file name\n\n\n\n\nsource\n\n\n#\n\n\nMads.symlinkdirfiles\n \n \nMethod\n.\n\n\nCreate a symbolic link of all the files in a directory \ndirsource\n in a directory \ndirtarget\n\n\nMethods\n\n\n\n\nMads.symlinkdirfiles(dirsource::String, dirtarget::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:943\n\n\n\n\nArguments\n\n\n\n\ndirsource::String\n : source directory\n\n\ndirtarget::String\n : target directory\n\n\n\n\nsource\n\n\n#\n\n\nMads.tag\n \n \nFunction\n.\n\n\nTag the Mads modules with a default argument \n:patch\n\n\nMethods\n\n\n\n\nMads.tag(madsmodule::String, sym::Symbol)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:240\n\n\nMads.tag(madsmodule::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:240\n\n\nMads.tag(sym::Symbol)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:235\n\n\nMads.tag()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:235\n\n\n\n\nArguments\n\n\n\n\nmadsmodule::String\n\n\nsym::Symbol\n\n\n\n\nsource\n\n\n#\n\n\nMads.test\n \n \nFunction\n.\n\n\nPerform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace; \nreload(\"Mads.jl\")\n if needed)\n\n\nMethods\n\n\n\n\nMads.test(testname::String; madstest)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:49\n\n\nMads.test()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:49\n\n\n\n\nArguments\n\n\n\n\ntestname::String\n : name of the test to execute (module or example)\n\n\n\n\nKeywords\n\n\n\n\nmadstest\n : test Mads [default=\ntrue\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.testj\n \n \nFunction\n.\n\n\nExecute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial)\n\n\nMethods\n\n\n\n\nMads.testj(coverage::Bool)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7\n\n\nMads.testj()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7\n\n\n\n\nArguments\n\n\n\n\ncoverage::Bool\n\n\n\n\nsource\n\n\n#\n\n\nMads.transposematrix\n \n \nMethod\n.\n\n\nTranspose non-numeric matrix\n\n\nMethods\n\n\n\n\nMads.transposematrix(a::Array{T\n:Any,2})\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:275\n\n\n\n\nArguments\n\n\n\n\na::Array{T\n:Any,2}\n : matrix\n\n\n\n\nsource\n\n\n#\n\n\nMads.transposevector\n \n \nMethod\n.\n\n\nTranspose non-numeric vector\n\n\nMethods\n\n\n\n\nMads.transposevector(a::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:265\n\n\n\n\nArguments\n\n\n\n\na::Array{T\n:Any,1}\n : vector\n\n\n\n\nsource\n\n\n#\n\n\nMads.void2nan!\n \n \nMethod\n.\n\n\nConvert Void's into NaN's in a dictionary\n\n\nMethods\n\n\n\n\nMads.void2nan!(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1011\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n : dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.weightedstats\n \n \nMethod\n.\n\n\nGet weighted mean and variance samples\n\n\nMethods\n\n\n\n\nMads.weightedstats(samples::Array, llhoods::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:356\n\n\n\n\nArguments\n\n\n\n\nllhoods::Array{T\n:Any,1}\n : vector of log-likelihoods\n\n\nsamples::Array\n : array of samples\n\n\n\n\nReturns:\n\n\n\n\nvector of sample means\n\n\nvector of sample variances\n\n\n\n\nsource\n\n\n#\n\n\nMads.welloff!\n \n \nMethod\n.\n\n\nTurn off a specific well in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.welloff!(madsdata::Associative, wellname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:565\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nwellname::String\n : name of the well to be turned off\n\n\n\n\nsource\n\n\n#\n\n\nMads.wellon!\n \n \nMethod\n.\n\n\nTurn on a specific well in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.wellon!(madsdata::Associative, wellname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:530\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nwellname::String\n : name of the well to be turned on\n\n\n\n\nsource\n\n\n#\n\n\nMads.wells2observations!\n \n \nMethod\n.\n\n\nConvert \nWells\n class to \nObservations\n class in the MADS problem dictionary\n\n\nMethods\n\n\n\n\nMads.wells2observations!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:586\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\n\n\nsource\n\n\n#\n\n\nMads.writeparameters\n \n \nFunction\n.\n\n\nWrite \nparameters\n\n\nMethods\n\n\n\n\nMads.writeparameters(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:709\n\n\nMads.writeparameters(madsdata::Associative, parameters::Associative; respect_space)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:714\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n : MADS problem dictionary\n\n\nparameters::Associative\n : parameters\n\n\n\n\nKeywords\n\n\n\n\nrespect_space\n : respect provided space in the template file to fit model parameters [default=\nfalse\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.writeparametersviatemplate\n \n \nMethod\n.\n\n\nWrite \nparameters\n via MADS template (\ntemplatefilename\n) to an output file (\noutputfilename\n)\n\n\nMethods\n\n\n\n\nMads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:674\n\n\n\n\nArguments\n\n\n\n\noutputfilename\n : output file name\n\n\nparameters\n : parameters\n\n\ntemplatefilename\n : tmplate file name\n\n\n\n\nKeywords\n\n\n\n\nrespect_space\n : respect provided space in the template file to fit model parameters [default=\nfalse\n]\n\n\n\n\nsource\n\n\n#\n\n\nMads.MadsModel\n \n \nType\n.\n\n\nMadsModel type applied for MathProgBase analyses\n\n\nsource", 
            "title": "Mads"
        }, 
        {
            "location": "/Modules/Mads/#madsjl", 
            "text": "Documentation for Mads.jl  #  Mads.MFlm     Method .  Matrix Factorization via Levenberg Marquardt  Methods   Mads.MFlm(X::Array{T :Any,2}, nk::Integer; mads, log_W, log_H, retries, maxiter, tol, initW, initH)  : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:82   Arguments   X::Array{T :Any,2}  nk::Integer   Keywords   initH  initW  log_H  log_W  mads  maxiter  retries  tol   source  #  Mads.NMFipopt     Method .  Non-negative Matrix Factorization using JuMP/Ipopt  Methods   Mads.NMFipopt(X::Array{T :Any,2}, nk::Integer; retries, tol, random, maxiter, maxguess, initW, initH, verbosity, quiet)  : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:36   Arguments   X::Array{T :Any,2}  nk::Integer   Keywords   initH  initW  maxguess  maxiter  quiet  random  retries  tol  verbosity   source  #  Mads.NMFm     Method .  Non-negative Matrix Factorization using NMF  Methods   Mads.NMFm(X::Array, nk::Integer; retries, maxiter, tol)  : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:12   Arguments   X::Array  nk::Integer   Keywords   maxiter  retries  tol   source  #  Mads.addkeyword!     Function .  Add a  keyword  in a  class  within the Mads dictionary  madsdata  Methods   Mads.addkeyword!(madsdata::Associative, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:183  Mads.addkeyword!(madsdata::Associative, class::String, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:187   Arguments   class::String  : dictionary class; if not provided searches for  keyword  in  Problem  class  keyword::String  : dictionary key  madsdata::Associative  : MADS problem dictionary   source  #  Mads.addsource!     Function .  Add an additional contamination source  Methods   Mads.addsource!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:14  Mads.addsource!(madsdata::Associative, sourceid::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:14   Arguments   madsdata::Associative  : MADS problem dictionary  sourceid::Int64  : source id [default= 0 ]   source  #  Mads.addsourceparameters!     Method .  Add contaminant source parameters  Methods   Mads.addsourceparameters!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:64   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.allwellsoff!     Method .  Turn off all the wells in the MADS problem dictionary  Methods   Mads.allwellsoff!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:551   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.allwellson!     Method .  Turn on all the wells in the MADS problem dictionary  Methods   Mads.allwellson!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:516   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.amanzi     Function .  Execute amanzi external groundwater flow and transport simulator   Arguments:   filename  : amanzi input file name  nproc  : number of processor to be used by amanzi  quiet  : : suppress output [default  true ]  observation_filename  : amanzi observation filename [default \"observations.out\"]  setup  : bash script to setup amanzi environmental variables  amanzi_exe  : full path to the location of the amanzi executable   source  #  Mads.amanzi_output_parser     Function .  Parse Amanzi output provided in an external file ( filename )  Usage:  Mads . amanzi_output_parser ()  Mads . amanzi_output_parser ( observations.out )   Arguments:   filename  : external file name (optional)   Returns:   a dictionary with model observations following MADS requirements   source  #  Mads.asinetransform     Method .  Arcsine transformation of model parameters  Methods   Mads.asinetransform(params::Array{T :Any,1}, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:17   Arguments   indexlogtransformed::Array{T :Any,1}  : index vector of log-transformed parameters  lowerbounds::Array{T :Any,1}  : lower bounds  params::Array{T :Any,1}  : model parameters  upperbounds::Array{T :Any,1}  : upper bounds   Returns:   Arcsine transformation of model parameters   source  #  Mads.bayessampling     Function .  Bayesian Sampling  Methods   Mads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:69  Mads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:94   Arguments   madsdata::Associative  : MADS problem dictionary  numsequences::Integer  : number of sequences executed in parallel   Keywords   burnin  : number of initial realizations before the MCMC are recorded [default= 100 ]  nsteps  : number of final realizations in the chain [default= 1000 ]  seed  : initial random number seed [default= 0 ]  thinning  : removal of any  thinning  realization [default= 1 ]   Returns:   MCMC chain   Examples:  Mads . bayessampling ( madsdata ;   nsteps = 1000 ,   burnin = 100 ,   thinning = 1 ,   seed = 2016 )  Mads . bayessampling ( madsdata ,   numsequences ;   nsteps = 1000 ,   burnin = 100 ,   thinning = 1 ,   seed = 2016 )   source  #  Mads.calibrate     Method .  Calibrate  Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Methods   Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:166   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   lambda  : initial Levenberg-Marquardt lambda [default= 100.0 ]  lambda_mu  : lambda multiplication factor [default= 10.0 ]  localsa  : perform local sensitivity analysis [default= false ]  maxEval  : maximum number of model evaluations [default= 1000 ]  maxIter  : maximum number of optimization iterations [default= 100 ]  maxJacobians  : maximum number of Jacobian solves [default= 100 ]  np_lambda  : number of parallel lambda solves [default= 10 ]  save_results  : save intermediate results [default= true ]  show_trace  : shows solution trace [default= false ]  tolG  : parameter space update tolerance [default= 1e-6 ]  tolOF  : objective function tolerance [default= 1e-3 ]  tolX  : parameter space tolerance [default= 1e-4 ]  usenaive  : use naive Levenberg-Marquardt solver [default= false ]   Returns:   model parameter dictionary with the optimal values at the minimum  optimization algorithm results (e.g. results.minimizer)   source  #  Mads.calibraterandom     Function .  Calibrate with random initial guesses  Methods   Mads.calibraterandom(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:39  Mads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:39   Arguments   madsdata::Associative  : MADS problem dictionary  numberofsamples::Integer  : number of random initial samples [default= 1 ]   Keywords   all  : all model results are returned [default= false ]  lambda  : initial Levenberg-Marquardt lambda [default= 100.0 ]  lambda_mu  : lambda multiplication factor [default= 10.0 ]  maxEval  : maximum number of model evaluations [default= 1000 ]  maxIter  : maximum number of optimization iterations [default= 100 ]  maxJacobians  : maximum number of Jacobian solves [default= 100 ]  np_lambda  : number of parallel lambda solves [default= 10 ]  quiet  : [default= true ]  save_results  : save intermediate results [default= true ]  seed  : random seed [default= 0 ]  show_trace  : shows solution trace [default= false ]  tolG  : parameter space update tolerance [default= 1e-6 ]  tolOF  : objective function tolerance [default= 1e-3 ]  tolX  : parameter space tolerance [default= 1e-4 ]  usenaive  : use naive Levenberg-Marquardt solver [default= false ]   Returns:   model parameter dictionary with the optimal values at the minimum  optimization algorithm results (e.g. bestresult[2].minimizer)   Example:  Mads . calibraterandom ( madsdata ;   tolX = 1e-3 ,   tolG = 1e-6 ,   maxEval = 1000 ,   maxIter = 100 ,   maxJacobians = 100 ,   lambda = 100.0 ,   lambda_mu = 10.0 ,   np_lambda = 10 ,   show_trace = false ,   usenaive = false )  Mads . calibraterandom ( madsdata ,   numberofsamples ;   tolX = 1e-3 ,   tolG = 1e-6 ,   maxEval = 1000 ,   maxIter = 100 ,   maxJacobians = 100 ,   lambda = 100.0 ,   lambda_mu = 10.0 ,   np_lambda = 10 ,   show_trace = false ,   usenaive = false )   source  #  Mads.calibraterandom_parallel     Function .  Calibrate with random initial guesses in parallel  Methods   Mads.calibraterandom_parallel(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:109  Mads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results, localsa)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:109   Arguments   madsdata::Associative  : MADS problem dictionary  numberofsamples::Integer  : number of random initial samples [default= 1 ]   Keywords   lambda  : initial Levenberg-Marquardt lambda [default= 100.0 ]  lambda_mu  : lambda multiplication factor [default= 10.0 ]  localsa  : perform local sensitivity analysis [default= false ]  maxEval  : maximum number of model evaluations [default= 1000 ]  maxIter  : maximum number of optimization iterations [default= 100 ]  maxJacobians  : maximum number of Jacobian solves [default= 100 ]  np_lambda  : number of parallel lambda solves [default= 10 ]  quiet  : suppress output [default= true ]  save_results  : save intermediate results [default= true ]  seed  : random seed [default= 0 ]  show_trace  : shows solution trace [default= false ]  tolG  : parameter space update tolerance [default= 1e-6 ]  tolOF  : objective function tolerance [default= 1e-3 ]  tolX  : parameter space tolerance [default= 1e-4 ]  usenaive  : use naive Levenberg-Marquardt solver [default= false ]   Returns:   vector with all objective function values  boolean vector (converged/not converged)  array with estimate model parameters   source  #  Mads.checkmodeloutputdirs     Method .  Check the directories where model outputs should be saved for MADS  Methods   Mads.checkmodeloutputdirs(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:465   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   true or false   source  #  Mads.checknodedir     Function .  Check if a directory is readable  Methods   Mads.checknodedir(dir::String, waittime::Float64)  : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:13  Mads.checknodedir(dir::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:13  Mads.checknodedir(node::String, dir::String, waittime::Float64)  : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:4  Mads.checknodedir(node::String, dir::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:4   Arguments   dir::String  : directory  node::String  : computational node name (e.g.  madsmax.lanl.gov ,  wf03 , or  127.0.0.1 )  waittime::Float64  : wait time in seconds [default= 10 ]   Returns:   true  if the directory is readable,  false  otherwise   source  #  Mads.checkout     Function .  Checkout (pull) the latest version of the Mads / Julia modules  Methods   Mads.checkout(modulename::String; git, master, force, pull, required, all)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:72  Mads.checkout()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:72   Arguments   modulename::String   Keywords   all  force  git  master  pull  required   source  #  Mads.checkparameterranges     Method .  Check parameter ranges for model parameters  Methods   Mads.checkparameterranges(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:661   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.cleancoverage     Method .  Remove Mads coverage files  Methods   Mads.cleancoverage()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:20   source  #  Mads.cmadsins_obs     Method .  Call C MADS ins_obs() function from the MADS dynamic library  Methods   Mads.cmadsins_obs(obsid::Array{T :Any,1}, instructionfilename::String, inputfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:27   Arguments   inputfilename::String  instructionfilename::String  obsid::Array{T :Any,1}   source  #  Mads.commit     Function .  Commit the latest version of the Mads / Julia modules in the repo  Methods   Mads.commit(commitmsg::String, modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:166  Mads.commit(commitmsg::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:166   Arguments   commitmsg::String  modulename::String   source  #  Mads.computemass     Function .  Compute injected/reduced contaminant mass (for a given set of mads input files when \"path\" is provided)  Methods   Mads.computemass(madsdata::Associative; time)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:282  Mads.computemass(madsfiles::Union{Regex,String}; time, path)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:323   Arguments   madsdata::Associative  : MADS problem dictionary  madsfiles::Union{Regex,String}  : matching pattern for Mads input files (string or regular expression accepted)   Keywords   path  : search directory for the mads input files [default= \".\" ]  time  : computational time [default= 0 ]   Returns:   array with all the lambda values  array with associated total injected mass  array with associated total reduced mass   Example:  Mads . computemass ( madsfiles ;   time = 0 ,   path = . )   source  #  Mads.computeparametersensitities     Method .  Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range  Methods   Mads.computeparametersensitities(madsdata::Associative, saresults::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:812   Arguments   madsdata::Associative  : MADS problem dictionary  saresults::Associative  : dictionary with sensitivity analysis results   source  #  Mads.contamination     Method .  Compute concentration for a point in space and time (x,y,z,t)  Methods   Mads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Number; anasolfunction)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:256   Arguments   H::Number  : Hurst coefficient for Fractional Brownian dispersion  ax::Number  : dispersivity in X direction (longitudinal)  ay::Number  : dispersivity in Y direction (transverse horizontal)  az::Number  : dispersivity in Y direction (transverse vertical)  dx::Number  : source size (extent) in X direction  dy::Number  : source size (extent) in Y direction  dz::Number  : source size (extent) in Z direction  f::Number  : source mass flux  lambda::Number  : first-order reaction rate  n::Number  : porosity  t0::Number  : source starting time  t1::Number  : source termination time  t::Number  : time to compute concentration at the observation point  theta::Number  : groundwater flow direction  vx::Number  : advective transport velocity in X direction  vy::Number  : advective transport velocity in Y direction  vz::Number  : advective transport velocity in Z direction  wellx::Number  : observation point (well) X coordinate  welly::Number  : observation point (well) Y coordinate  wellz::Number  : observation point (well) Z coordinate  x::Number  : X coordinate of contaminant source location  y::Number  : Y coordinate of contaminant source location  z::Number  : Z coordinate of contaminant source location   Keywords   anasolfunction  : Anasol function to call (check out the Anasol module) [default= \"long_bbb_ddd_iir_c\" ]   Returns:   predicted concentration at (wellx, welly, wellz, t)   source  #  Mads.copyright     Method .  Produce MADS copyright information  Methods   Mads.copyright()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:19   source  #  Mads.create_documentation     Method .  Create web documentation files for Mads functions  Methods   Mads.create_documentation()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:270   source  #  Mads.create_tests_off     Method .  Turn off the generation of MADS tests (default)  Methods   Mads.create_tests_off()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:84   source  #  Mads.create_tests_on     Method .  Turn on the generation of MADS tests (dangerous)  Methods   Mads.create_tests_on()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:75   source  #  Mads.createmadsproblem     Function .  Create a new Mads problem where the observation targets are computed based on the model predictions  Methods   Mads.createmadsproblem(infilename::String, outfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:5  Mads.createmadsproblem(madsdata::Associative, outfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:30  Mads.createmadsproblem(madsdata::Associative, predictions::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:39  Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:35   Arguments   infilename::String  : input Mads file  madsdata::Associative  : MADS problem dictionary  outfilename::String  : output Mads file  predictions::Associative  : dictionary of model predictions   source  #  Mads.createobservations!     Function .  Create observations in the MADS problem dictionary based on  time  and  observation  vectors  Methods   Mads.createobservations!(madsdata::Associative, time::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:411  Mads.createobservations!(madsdata::Associative, time::Array{T :Any,1}, observation::Array{T :Any,1}; logtransform, weight_type, weight)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:411  Mads.createobservations!(madsdata::Associative, observation::Associative; logtransform, weight_type, weight)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:455   Arguments   madsdata::Associative  : MADS problem dictionary  observation::Array{T :Any,1}  : dictionary of observations  observation::Associative  : dictionary of observations  time::Array{T :Any,1}  : vector of observation times   Keywords   logtransform  : log transform observations [default= false ]  weight  : weight value [default= 1 ]  weight_type  : weight type [default= constant ]   source  #  Mads.createtempdir     Method .  Create temporary directory  Methods   Mads.createtempdir(tempdirname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1037   Arguments   tempdirname::String  : temporary directory name   source  #  Mads.deleteNaN!     Method .  Delete rows with NaN in a dataframe  df  Methods   Mads.deleteNaN!(df::DataFrames.DataFrame)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1036   Arguments   df::DataFrames.DataFrame  : dataframe   source  #  Mads.deletekeyword!     Function .  Delete a  keyword  in a  class  within the Mads dictionary  madsdata  Methods   Mads.deletekeyword!(madsdata::Associative, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:210  Mads.deletekeyword!(madsdata::Associative, class::String, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:216   Arguments   class::String  : dictionary class; if not provided searches for  keyword  in  Problem  class  keyword::String  : dictionary key  madsdata::Associative  : MADS problem dictionary   source  #  Mads.dependents     Function .  Lists modules dependents on a module (Mads by default)  Methods   Mads.dependents(modulename::String, filter::Bool)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45  Mads.dependents(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45  Mads.dependents()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45   Arguments   filter::Bool  modulename::String   source  #  Mads.display     Method .  Display image file  Methods   Mads.display(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsDisplay.jl:9   Arguments   filename::String   source  #  Mads.dobigdt     Method .  Perform Bayesian Information Gap Decision Theory (BIG-DT) analysis  Methods   Mads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, numlikelihoods, maxHorizon)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:123   Arguments   madsdata::Associative  : MADS problem dictionary  nummodelruns::Int64  : number of model runs   Keywords   maxHorizon  : maximum info-gap horizons of uncertainty [default= 3 ]  numhorizons  : number of info-gap horizons of uncertainty [default= 100 ]  numlikelihoods  : number of Bayesian likelihoods [default= 25 ]   Returns:   dictionary with BIG-DT results   source  #  Mads.dumpasciifile     Method .  Dump ASCII file  Methods   Mads.dumpasciifile(filename::String, data)  : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:30   Arguments   data  : data to dump  filename::String  : ASCII file name   Dumps:   ASCII file with the name in \"filename\"   source  #  Mads.dumpjsonfile     Method .  Dump a JSON file  Methods   Mads.dumpjsonfile(filename::String, data)  : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:38   Arguments   data  : data to dump  filename::String  : JSON file name   Dumps:   JSON file with the name in \"filename\"   source  #  Mads.dumpwelldata     Method .  Dump well data from MADS problem dictionary into a ASCII file  Methods   Mads.dumpwelldata(madsdata::Associative, filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:916   Arguments   filename::String  : output file name  madsdata::Associative  : MADS problem dictionary   Dumps:   filename  : a ASCII file   source  #  Mads.dumpyamlfile     Method .  Dump YAML file  Methods   Mads.dumpyamlfile(filename::String, data; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:44   Arguments   data  : YAML data  filename::String  : output file name   Keywords   julia  : if  true , use  julia  YAML library (if available); if  false  (default), use  python  YAML library (if available)   source  #  Mads.dumpyamlmadsfile     Method .  Dump YAML Mads file  Methods   Mads.dumpyamlmadsfile(madsdata::Associative, filename::String; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:63   Arguments   filename::String  : output file name  madsdata::Associative  : MADS problem dictionary   Keywords   julia  : use julia YAML [default= false ]   source  #  Mads.efast     Method .  Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method  Methods   Mads.efast(md::Associative; N, M, gamma, plotresults, seed, issvr, truncateRanges, checkpointfrequency, restartdir, restart)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1124   Arguments   md::Associative  : MADS problem dictionary   Keywords   M  : maximum number of harmonics [default= 6 ]  N  : number of samples [default= 100 ]  checkpointfrequency  : check point frequency [default= N ]  gamma  : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) [default= 4 ]  issvr  : use SVR [default= false ]  plotresults  : plot results [default= Mads.graphoutput ]  restart  : save restart information [default= false ]  restartdir  : directory where files will be stored containing model results for fast simulation restarts [default= \"efastcheckpoints\" ]  seed  : random seed [default= 0 ]  truncateRanges  : truncate parameter ranges [default= 0 ]   Dumps:   plot of results, default from  graphoutput   source  #  Mads.emceesampling     Function .  Bayesian sampling with Goodman   Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)  Methods   Mads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:10  Mads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:32   Arguments   madsdata::Associative  : MADS problem dictionary  p0::Array  : initial parameters (matrix of size (length(optparams), numwalkers))   Keywords   burnin  : number of initial realizations before the MCMC are recorded [default= 10 ]  nsteps  : number of final realizations in the chain [default= 100 ]  numwalkers  : number of walkers (if in parallel this can be the number of available processors) [default= 10 ]  seed  : initial random number seed [default= 0 ]  sigma  : a standard deviation parameter used to initialize the walkers [default= 0.01 ]  thinning  : removal of any  thinning  realization [default= 1 ]  weightfactor  : weight factor [default= 1.0 ]   Returns:   MCMC chain  log likelihoods of the final samples in the chain   Examples:  Mads . emceesampling ( madsdata ;   numwalkers = 10 ,   nsteps = 100 ,   burnin = 100 ,   thinning = 1 ,   seed = 2016 ,   sigma = 0.01 )  Mads . emceesampling ( madsdata ,   p0 ;   numwalkers = 10 ,   nsteps = 100 ,   burnin = 10 ,   thinning = 1 ,   seed = 2016 )   source  #  Mads.estimationerror     Function .  Estimate kriging error  Methods   Mads.estimationerror(w::Array{T :Any,1}, x0::Array{T :Any,1}, X::Array{T :Any,2}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:190  Mads.estimationerror(w::Array{T :Any,1}, covmat::Array{T :Any,2}, covvec::Array{T :Any,1}, cov0::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:197   Arguments   X::Array{T :Any,2}  : observation matrix  cov0::Number  : zero-separation covariance  cov::Function  : spatial covariance function  covmat::Array{T :Any,2}  : covariance matrix  covvec::Array{T :Any,1}  : covariance vector  w::Array{T :Any,1}  : kriging weights  x0::Array{T :Any,1}  : estimated locations   Returns:   estimation kriging error   source  #  Mads.evaluatemadsexpression     Method .  Evaluate an expression string based on a parameter dictionary  Methods   Mads.evaluatemadsexpression(expressionstring::String, parameters::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:125   Arguments   expressionstring::String  : expression string  parameters::Associative  : parameter dictionary applied to evaluate the expression string   Returns:   dictionary containing the expression names as keys, and the values of the expression as values   source  #  Mads.evaluatemadsexpressions     Method .  Evaluate all the expressions in the Mads problem dictiorany based on a parameter dictionary  Methods   Mads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:144   Arguments   madsdata::Associative  : MADS problem dictionary  parameters::Associative  : parameter dictionary applied to evaluate the expression strings   Returns:   dictionary containing the expression names as keys, and the values of the expression as values   source  #  Mads.expcov     Method .  Exponential spatial covariance function  Methods   Mads.expcov(h::Number, maxcov::Number, scale::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:29   Arguments   h::Number  : separation distance  maxcov::Number  : maximum covariance  scale::Number  : scale   Returns:   covariance   source  #  Mads.exponentialvariogram     Method .  Exponential variogram  Methods   Mads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:82   Arguments   h::Number  : separation distance  nugget::Number  : nugget  range::Number  : range  sill::Number  : sill   Returns:     source  #  Mads.filterkeys     Function .  Filter dictionary keys based on a string or regular expression  Methods   Mads.filterkeys(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:632  Mads.filterkeys(dict::Associative, key::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:631  Mads.filterkeys(dict::Associative, key::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:632   Arguments   dict::Associative  : dictionary  key::Regex  : the regular expression or string used to filter dictionary keys  key::String  : the regular expression or string used to filter dictionary keys   source  #  Mads.forward     Function .  Perform a forward run using the initial or provided values for the model parameters  Methods   Mads.forward(madsdata::Associative; all)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:7  Mads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:11  Mads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:41   Arguments   madsdata::Associative  : MADS problem dictionary  paramarray::Array  : array of model parameter values  paramdict::Associative  : dictionary of model parameter values   Keywords   all  : all model results are returned [default= false ]  checkpointfilename  : check point file name [default=\"checkpoint_forward\"]  checkpointfrequency  : check point frequency for storing restart information [default= 0 ]   Returns:   dictionary of model predictions   source  #  Mads.forwardgrid     Function .  Perform a forward run over a 3D grid defined in  madsdata  using the initial or provided values for the model parameters  Methods   Mads.forwardgrid(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:113  Mads.forwardgrid(madsdatain::Associative, paramvalues::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:118   Arguments   madsdata::Associative  : MADS problem dictionary  madsdatain::Associative  : MADS problem dictionary  paramvalues::Associative  : dictionary of model parameter values   Returns:   3D array with model predictions along a 3D grid   source  #  Mads.free     Function .  Free Mads / Julia modules  Methods   Mads.free(modulename::String; required, all)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:144  Mads.free()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:144   Arguments   modulename::String   Keywords   all  required   source  #  Mads.functions     Function .  List available functions in the MADS modules:  Methods   Mads.functions(string::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:23  Mads.functions()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:23  Mads.functions(m::Union{Module,Symbol})  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:29  Mads.functions(m::Union{Module,Symbol}, string::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:29   Arguments   m::Union{Module,Symbol}  : MADS module  string::String  : string to display functions with matching names   Examples:  Mads . functions ()  Mads . functions ( BIGUQ )  Mads . functions ( get )  Mads . functions ( Mads ,   get )   source  #  Mads.gaussiancov     Method .  Gaussian spatial covariance function  Methods   Mads.gaussiancov(h::Number, maxcov::Number, scale::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:15   Arguments   h::Number  : separation distance  maxcov::Number  : maximum covariance  scale::Number  : scale   Returns:   covariance   source  #  Mads.gaussianvariogram     Method .  Gaussian variogram  Methods   Mads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:103   Arguments   h::Number  : separation distance  nugget::Number  : nugget  range::Number  : range  sill::Number  : sill   Returns:     source  #  Mads.getcovmat     Method .  Get spatial covariance matrix  Methods   Mads.getcovmat(X::Array{T :Any,2}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:152   Arguments   X::Array{T :Any,2}  : matrix with coordinates of the data points (x or y)  cov::Function  : spatial covariance function   source  #  Mads.getcovvec!     Method .  Get spatial covariance vector  Methods   Mads.getcovvec!(covvec::Array{T :Any,1}, x0::Array{T :Any,1}, X::Array{T :Any,2}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:178   Arguments   X::Array{T :Any,2}  : matrix with coordinates of the data points  cov::Function  : spatial covariance function  covvec::Array{T :Any,1}  : spatial covariance vector  x0::Array{T :Any,1}  : vector with coordinates of the estimation points (x or y)   Returns:   spatial covariance vector   source  #  Mads.getdictvalues     Function .  Get dictionary values for keys based on a string or regular expression  Methods   Mads.getdictvalues(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:654  Mads.getdictvalues(dict::Associative, key::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:653  Mads.getdictvalues(dict::Associative, key::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:654   Arguments   dict::Associative  : dictionary  key::Regex  : the key to find value for  key::String  : the key to find value for   source  #  Mads.getdir     Method .  Get directory  Methods   Mads.getdir(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:271   Arguments   filename::String  : file name   Returns:   directory in file name   Example:  d   =   Mads . getdir ( a.mads )   # d =  .  d   =   Mads . getdir ( test/a.mads )   # d =  test   source  #  Mads.getdistribution     Method .  Parse parameter distribution from a string  Methods   Mads.getdistribution(dist::String, i::String, inputtype::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:171   Arguments   dist::String  : parameter distribution  i::String  inputtype::String  : input type (parameter or observation)   Returns:   distribution   source  #  Mads.getextension     Method .  Get file name extension  Methods   Mads.getextension(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:445   Arguments   filename::String  : file name   Returns:   file name extension   Example:  ext   =   Mads . getextension ( a.mads )   # ext =  mads   source  #  Mads.getimportantsamples     Method .  Get important samples  Methods   Mads.getimportantsamples(samples::Array, llhoods::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:325   Arguments   llhoods::Array{T :Any,1}  : vector of log-likelihoods  samples::Array  : array of samples   Returns:   array of important samples   source  #  Mads.getlogparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are log-transformed ( log )  source  #  Mads.getmadsdir     Method .  Get the directory where currently Mads is running  Methods   Mads.getmadsdir()  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:313   Example:  problemdir   =   Mads . getmadsdir ()   Returns:   Mads problem directory   source  #  Mads.getmadsinputfile     Method .  Get the default MADS input file set as a MADS global variable using  setmadsinputfile(filename)  Methods   Mads.getmadsinputfile()  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:228   Returns:   input file name (e.g.  input_file_name.mads )   source  #  Mads.getmadsproblemdir     Method .  Get the directory where the Mads data file is located  Methods   Mads.getmadsproblemdir(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:294   Arguments   madsdata::Associative  : MADS problem dictionary   Example:  madsdata   =   Mads . loadmadsproblem ( ../../a.mads )  madsproblemdir   =   Mads . getmadsproblemdir ( madsdata )   where  madsproblemdir  =  \"../../\"  source  #  Mads.getmadsrootname     Method .  Get the MADS problem root name  Methods   Mads.getmadsrootname(madsdata::Associative; first, version)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:250   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   first  : use the first . in filename as the seperator between root name and extention [default= true ]  version  : delete version information from filename for the returned rootname [default= false ]   Example:  madsrootname   =   Mads . getmadsrootname ( madsdata )   Returns:   root of file name   source  #  Mads.getnextmadsfilename     Method .  Get next mads file name  Methods   Mads.getnextmadsfilename(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:408   Arguments   filename::String  : file name   Returns:   next mads file name   source  #  Mads.getnonlogparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are NOT log-transformed ( log )  source  #  Mads.getnonoptparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are NOT optimized ( opt )  source  #  Mads.getobsdist     Method .  Get an array with  dist  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsdist     Method .  Get an array with  dist  values for all observations in the MADS problem dictionary  source  #  Mads.getobskeys     Method .  Get keys for all observations in the MADS problem dictionary  Methods   Mads.getobskeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:43   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   keys for all observations in the MADS problem dictionary   source  #  Mads.getobslog     Method .  Get an array with  log  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobslog     Method .  Get an array with  log  values for all observations in the MADS problem dictionary  source  #  Mads.getobsmax     Method .  Get an array with  max  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsmax     Method .  Get an array with  max  values for all observations in the MADS problem dictionary  source  #  Mads.getobsmin     Method .  Get an array with  min  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsmin     Method .  Get an array with  min  values for all observations in the MADS problem dictionary  source  #  Mads.getobstarget     Method .  Get an array with  target  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobstarget     Method .  Get an array with  target  values for all observations in the MADS problem dictionary  source  #  Mads.getobstime     Method .  Get an array with  time  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobstime     Method .  Get an array with  time  values for all observations in the MADS problem dictionary  source  #  Mads.getobsweight     Method .  Get an array with  weight  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsweight     Method .  Get an array with  weight  values for all observations in the MADS problem dictionary  source  #  Mads.getoptparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are optimized ( opt )  source  #  Mads.getoptparams     Function .  Get optimizable parameters  Methods   Mads.getoptparams(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:325  Mads.getoptparams(madsdata::Associative, parameterarray::Array)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:328  Mads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:328   Arguments   madsdata::Associative  : MADS problem dictionary  optparameterkey::Array  : optimizable parameter keys  parameterarray::Array  : parameter array   Returns:   parameter array   source  #  Mads.getparamdict     Method .  Get dictionary with all parameters and their respective initial values  Methods   Mads.getparamdict(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:60   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   dictionary with all parameters and their respective initial values   source  #  Mads.getparamdistributions     Method .  Get probabilistic distributions of all parameters in the MADS problem dictionary  Note:  Probabilistic distribution of parameters can be defined only if  dist  or  min / max  model parameter fields are specified in the MADS problem dictionary  madsdata .  Methods   Mads.getparamdistributions(madsdata::Associative; init_dist)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:616   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field [default= false ]   Returns:   probabilistic distributions   source  #  Mads.getparamkeys     Method .  Get keys of all parameters in the MADS problem dictionary  Methods   Mads.getparamkeys(madsdata::Associative; filter)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:44   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   filter  : parameter filter   Returns:   array with the keys of all parameters in the MADS problem dictionary   source  #  Mads.getparamrandom     Function .  Get independent sampling of model parameters defined in the MADS problem dictionary  Methods   Mads.getparamrandom(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:361  Mads.getparamrandom(madsdata::Associative, numsamples::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:361  Mads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:361  Mads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, init_dist, paramdist)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:374   Arguments   madsdata::Associative  : MADS problem dictionary  numsamples::Integer  : number of samples,  [default= 1 ]  parameterkey::String  : model parameter key   Keywords   init_dist  : if  true  use the distribution set for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); if  false  (default) use the regular distribution set in the MADS problem dictionary (defined using  dist  parameter field)  numsamples  : number of samples  paramdist  : dictionary of parameter distributions   Returns:   generated sample   source  #  Mads.getparamsinit     Method .  Get an array with  init  values for parameters defined by  paramkeys  source  #  Mads.getparamsinit     Method .  Get an array with  init  values for all the MADS model parameters  source  #  Mads.getparamsinit_max     Function .  Get an array with  init_max  values for parameters defined by  paramkeys  Methods   Mads.getparamsinit_max(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:294  Mads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:260   Arguments   madsdata::Associative  : MADS problem dictionary  paramkeys::Array{T :Any,1}  : parameter keys   Returns:   the parameter values   source  #  Mads.getparamsinit_min     Function .  Get an array with  init_min  values for parameters  Methods   Mads.getparamsinit_min(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:243  Mads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:209   Arguments   madsdata::Associative  : MADS problem dictionary  paramkeys::Array{T :Any,1}  : parameter keys   Returns:   the parameter values   source  #  Mads.getparamslog     Method .  Get an array with  log  values for parameters defined by  paramkeys  source  #  Mads.getparamslog     Method .  Get an array with  log  values for all the MADS model parameters  source  #  Mads.getparamslongname     Method .  Get an array with  longname  values for parameters defined by  paramkeys  source  #  Mads.getparamslongname     Method .  Get an array with  longname  values for all the MADS model parameters  source  #  Mads.getparamsmax     Function .  Get an array with  max  values for parameters defined by  paramkeys  Methods   Mads.getparamsmax(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:192  Mads.getparamsmax(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:170   Arguments   madsdata::Associative  : MADS problem dictionary  paramkeys::Array{T :Any,1}  : parameter keys   Returns:   returns the parameter values   source  #  Mads.getparamsmin     Function .  Get an array with  min  values for parameters defined by  paramkeys  Methods   Mads.getparamsmin(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:153  Mads.getparamsmin(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:131   Arguments   madsdata::Associative  : MADS problem dictionary  paramkeys::Array{T :Any,1}  : parameter keys   Returns:   the parameter values   source  #  Mads.getparamsplotname     Method .  Get an array with  plotname  values for parameters defined by  paramkeys  source  #  Mads.getparamsplotname     Method .  Get an array with  plotname  values for all the MADS model parameters  source  #  Mads.getparamsstep     Method .  Get an array with  step  values for parameters defined by  paramkeys  source  #  Mads.getparamsstep     Method .  Get an array with  step  values for all the MADS model parameters  source  #  Mads.getparamstype     Method .  Get an array with  type  values for parameters defined by  paramkeys  source  #  Mads.getparamstype     Method .  Get an array with  type  values for all the MADS model parameters  source  #  Mads.getprocs     Method .  Get the number of processors  Methods   Mads.getprocs()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:34   source  #  Mads.getrestart     Method .  Get MADS restart status  Methods   Mads.getrestart(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:28   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.getrestartdir     Function .  Get the directory where Mads restarts will be stored  Methods   Mads.getrestartdir(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:277  Mads.getrestartdir(madsdata::Associative, suffix::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:277   Arguments   madsdata::Associative  : MADS problem dictionary  suffix::String  : Suffix to be added to the name of restart directory   Returns:   restart directory where reusable model results will be stored   source  #  Mads.getrootname     Method .  Get file name root  Methods   Mads.getrootname(filename::String; first, version)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:343   Arguments   filename::String  : file name   Keywords   first  : use the first . in filename as the seperator between root name and extention [default= true ]  version  : delete version information from filename for the returned rootname [default= false ]   Returns:   root of file name   Example:  r   =   Mads . getrootname ( a.rnd.dat )   # r =  a  r   =   Mads . getrootname ( a.rnd.dat ,   first = false )   # r =  a.rnd   source  #  Mads.getsindx     Method .  Get sin-space dx  Methods   Mads.getsindx(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:248   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   sin-space dx   source  #  Mads.getsourcekeys     Method .  Get keys of all source parameters in the MADS problem dictionary  Methods   Mads.getsourcekeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:78   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   array with keys of all source parameters in the MADS problem dictionary   source  #  Mads.gettarget     Method .  Get observation target  Methods   Mads.gettarget(o::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:218   Arguments   o::Associative  : observation data   Returns:   observation target   source  #  Mads.gettargetkeys     Method .  Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary  Methods   Mads.gettargetkeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:57   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   keys for all targets in the MADS problem dictionary   source  #  Mads.gettime     Method .  Get observation time  Methods   Mads.gettime(o::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:140   Arguments   o::Associative  : observation data   Returns:   observation time (\"NaN\" it time is missing)   source  #  Mads.getweight     Method .  Get observation weight  Methods   Mads.getweight(o::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:179   Arguments   o::Associative  : observation data   Returns:   observation weight (\"NaN\" when weight is missing)   source  #  Mads.getwellkeys     Method .  Get keys for all wells in the MADS problem dictionary  Methods   Mads.getwellkeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:74   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   keys for all wells in the MADS problem dictionary   source  #  Mads.getwellsdata     Method .  Get spatial and temporal data in the  Wells  class  Methods   Mads.getwellsdata(madsdata::Associative; time)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:624   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   time  : get observation times [default= false ]   Returns:   array with spatial and temporal data in the  Wells  class   source  #  Mads.graphoff     Method .  MADS graph output off  Methods   Mads.graphoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:66   source  #  Mads.graphon     Method .  MADS graph output on  Methods   Mads.graphon()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:57   source  #  Mads.haskeyword     Function .  Check for a  keyword  in a  class  within the Mads dictionary  madsdata  Methods   Mads.haskeyword(madsdata::Associative, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:145  Mads.haskeyword(madsdata::Associative, class::String, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:148   Arguments   class::String  : dictionary class; if not provided searches for  keyword  in  Problem  class  keyword::String  : dictionary key  madsdata::Associative  : MADS problem dictionary   Returns:  true  or  false  Examples:  -   `Mads.haskeyword(madsdata,  disp )`   ...   searches   in   `Problem`   class   by   default  -   `Mads.haskeyword(madsdata,  Wells ,  R-28 )`   ...   searches   in   `Wells`   class   for   a   keyword   R-28   source  #  Mads.help     Method .  Produce MADS help information  Methods   Mads.help()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:10   source  #  Mads.importeverywhere     Method .  Import function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations.  Methods   Mads.importeverywhere(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:332   Arguments   filename::String  : file name   Returns:   madscommandfunction  to execute the model   source  #  Mads.indexkeys     Function .  Find indexes for dictionary keys based on a string or regular expression  Methods   Mads.indexkeys(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:643  Mads.indexkeys(dict::Associative, key::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:642  Mads.indexkeys(dict::Associative, key::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:643   Arguments   dict::Associative  : dictionary  key::Regex  : the key to find index for  key::String  : the key to find index for   source  #  Mads.ins_obs     Method .  Apply Mads instruction file  instructionfilename  to read model output file  modeloutputfilename  Methods   Mads.ins_obs(instructionfilename::String, modeloutputfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:841   Arguments   instructionfilename::String  : instruction file name  modeloutputfilename::String  : model output file name   Returns:   obsdict  : observation dictionary with the model outputs   source  #  Mads.instline2regexs     Method .  Convert an instruction line in the Mads instruction file into regular expressions  Methods   Mads.instline2regexs(instline::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:744   Arguments   instline::String  : instruction line   Returns:   regexs  : regular expressions  obsnames  : observation names  getparamhere  : parameters   source  #  Mads.invobsweights!     Method .  Set inversely proportional observation weights in the MADS problem dictionary  Methods   Mads.invobsweights!(madsdata::Associative, multiplier::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:321   Arguments   madsdata::Associative  : MADS problem dictionary  multiplier::Number  : weight multiplier   source  #  Mads.invwellweights!     Method .  Set inversely proportional well weights in the MADS problem dictionary  Methods   Mads.invwellweights!(madsdata::Associative, multiplier::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:372   Arguments   madsdata::Associative  : MADS problem dictionary  multiplier::Number  : weight multiplier   source  #  Mads.islog     Method .  Is parameter with key  parameterkey  log-transformed?  Methods   Mads.islog(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:401   Arguments   madsdata::Associative  : MADS problem dictionary  parameterkey::String  : parameter key   Returns:   true  if log-transformed,  false  otherwise   source  #  Mads.isobs     Method .  Is a dictionary containing all the observations  Methods   Mads.isobs(madsdata::Associative, dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:17   Arguments   dict::Associative  : dictionary  madsdata::Associative  : MADS problem dictionary   Returns:   true  if the dictionary contain all the observations,  false  otherwise   source  #  Mads.isopt     Method .  Is parameter with key  parameterkey  optimizable?  Methods   Mads.isopt(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:381   Arguments   madsdata::Associative  : MADS problem dictionary  parameterkey::String  : parameter key   Returns:   ture  if optimizable,  false  if not   source  #  Mads.isparam     Method .  Check if a dictionary containing all the Mads model parameters  Methods   Mads.isparam(madsdata::Associative, dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:17   Arguments   dict::Associative  : dictionary  madsdata::Associative  : MADS problem dictionary   Returns:   true  if the dictionary containing all the parameters,  false  otherwise   source  #  Mads.ispkgavailable     Method .  Checks of package is available  Methods   Mads.ispkgavailable(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:9   Arguments   modulename::String   source  #  Mads.krige     Method .  Kriging  Methods   Mads.krige(x0mat::Array{T :Any,2}, X::Array{T :Any,2}, Z::Array{T :Any,1}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:124   Arguments   X::Array{T :Any,2}  : coordinates of the observation (conditioning) data  Z::Array{T :Any,1}  : values for the observation (conditioning) data  cov::Function  : spatial covariance function  x0mat::Array{T :Any,2}  : point coordinates at which to obtain kriging estimates   Returns:   kriging estimates at  x0mat   source  #  Mads.levenberg_marquardt     Function .  Levenberg-Marquardt optimization  Methods   Mads.levenberg_marquardt(f::Function, g::Function, x0)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:330  Mads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callbackiteration, callbackjacobian)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:330   Arguments   f::Function  : forward model function  g::Function  : gradient function for the forward model  o::Function  : objective function [default= x- (x'*x)[1] ]  x0  : initial parameter guess   Keywords   alwaysDoJacobian  : computer Jacobian each iteration [default= false ]  callbackiteration  : call back function for each iteration [default= (best_x::Vector, of::Number, lambda::Number)- nothing ]  callbackjacobian  : call back function for each Jacobian [default= (x::Vector, J::Matrix)- nothing ]  lambda  : initial Levenberg-Marquardt lambda [default= eps(Float32) ]  lambda_mu  : lambda multiplication factor \u03bc [default= 10 ]  lambda_nu  : lambda multiplication factor \u03bd [default= 2 ]  lambda_scale  : lambda scaling factor [default= 1e-3, ]  maxEval  : maximum number of model evaluations [default= 1001 ]  maxIter  : maximum number of optimization iterations [default= 100 ]  maxJacobians  : maximum number of Jacobian solves [default= 100 ]  np_lambda  : number of parallel lambda solves [default= 10 ]  root  : Mads problem root name  show_trace  : shows solution trace [default= false ]  tolG  : parameter space update tolerance [default= 1e-6 ]  tolOF  : objective function update tolerance [default= 1e-3 ]  tolX  : parameter space tolerance [default= 1e-4 ]   source  #  Mads.linktempdir     Method .  Link files in a temporary directory  Methods   Mads.linktempdir(madsproblemdir::String, tempdirname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1064   Arguments   madsproblemdir::String  : Mads problem directory  tempdirname::String  : temporary directory name   source  #  Mads.loadasciifile     Method .  Load ASCII file  Methods   Mads.loadasciifile(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:14   Arguments   filename::String  : ASCII file name   Returns:   data from the file   source  #  Mads.loadjsonfile     Method .  Load a JSON file  Methods   Mads.loadjsonfile(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:16   Arguments   filename::String  : JSON file name   Returns:   data from the JSON file   source  #  Mads.loadmadsfile     Method .  Load MADS input file defining a MADS problem dictionary  Methods   Mads.loadmadsfile(filename::String; julia, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:22   Arguments   filename::String  : input file name (e.g.  input_file_name.mads )   Keywords   format  : acceptable formats are  yaml  and  json  [default= yaml ]  julia  : if  true , force using  julia  parsing functions; if  false  (default), use  python  parsing functions   Returns:   MADS problem dictionary   Example:  md   =   Mads . loadmadsfile ( input_file_name.mads )   source  #  Mads.loadsaltellirestart!     Method .  Load Saltelli sensitivity analysis results for fast simulation restarts  Methods   Mads.loadsaltellirestart!(evalmat::Array, matname::String, restartdir::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:568   Arguments   evalmat::Array  : loaded array  matname::String  : matrix (array) name (defines the name of the loaded file)  restartdir::String  : directory where files will be stored containing model results for fast simulation restarts   Returns:   true  when successfully loaded,  false  when it is not   source  #  Mads.loadyamlfile     Method .  Load YAML file  Methods   Mads.loadyamlfile(filename::String; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:17   Arguments   filename::String  : file name   Keywords   julia  : if  true , use  julia  YAML library (if available); if  false  (default), use  python  YAML library (if available)   Returns:   data in the yaml input file   source  #  Mads.localsa     Method .  Local sensitivity analysis based on eigen analysis of the parameter covariance matrix  Methods   Mads.localsa(madsdata::Associative; sinspace, keyword, filename, format, datafiles, imagefiles, par, obs, J)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:118   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   J  : Jacobian matrix  datafiles  : flag to write data files [default= true ]  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  imagefiles  : flag to create image files [default= Mads.graphoutput ]  keyword  : keyword to be added in the filename root  obs  : observations for the parameter set  par  : parameter set  sinspace  : apply sin transformation [default= true ]   Dumps:   filename  : output plot file   source  #  Mads.long_tests_off     Method .  Turn off execution of long MADS tests (default)  Methods   Mads.long_tests_off()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:102   source  #  Mads.long_tests_on     Method .  Turn on execution of long MADS tests  Methods   Mads.long_tests_on()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:93   source  #  Mads.madscores     Function .  Check the number of processors on a series of servers  Methods   Mads.madscores(nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:298  Mads.madscores()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:298   Arguments   nodenames::Array{String,1}   source  #  Mads.madscritical     Method .  MADS critical error messages  Methods   Mads.madscritical(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:76   Arguments   message::String  : critical error message   source  #  Mads.madsdebug     Function .  MADS debug messages (controlled by  quiet  and  debuglevel )  Methods   Mads.madsdebug(message::String, level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:25  Mads.madsdebug(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:25   Arguments   level::Int64  : output verbosity level [default= 0 ]  message::String  : debug message   source  #  Mads.madserror     Method .  MADS error messages  Methods   Mads.madserror(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:64   Arguments   message::String  : error message   source  #  Mads.madsinfo     Function .  MADS information/status messages (controlled by quiet and verbositylevel`)  Methods   Mads.madsinfo(message::String, level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:39  Mads.madsinfo(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:39   Arguments   level::Int64  : output verbosity level [default= 0 ]  message::String  : information/status message   source  #  Mads.madsload     Function .  Check the load of a series of servers  Methods   Mads.madsload(nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:316  Mads.madsload()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:316   Arguments   nodenames::Array{String,1}   source  #  Mads.madsmathprogbase     Function .  Define  MadsModel  type applied for Mads execution using  MathProgBase  Methods   Mads.madsmathprogbase()  : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:18  Mads.madsmathprogbase(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:18   Arguments   madsdata::Associative  : MADS problem dictionary [default= Dict() ]   source  #  Mads.madsoutput     Function .  MADS output (controlled by  quiet  and  verbositylevel )  Methods   Mads.madsoutput(message::String, level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:11  Mads.madsoutput(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:11   Arguments   level::Int64  : output verbosity level [default= 0 ]  message::String  : output message   source  #  Mads.madsup     Function .  Check the uptime of a series of servers  Methods   Mads.madsup(nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:307  Mads.madsup()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:307   Arguments   nodenames::Array{String,1}   source  #  Mads.madswarn     Method .  MADS warning messages  Methods   Mads.madswarn(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:52   Arguments   message::String  : warning message   source  #  Mads.makearrayconditionalloglikelihood     Method .  Make a conditional log likelihood function that accepts an array containing the optimal parameter values  Methods   Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:64   Arguments   conditionalloglikelihood  : conditional log likelihood  madsdata::Associative  : MADS problem dictionary   Returns:   a conditional log likelihood function that accepts an array   source  #  Mads.makearrayconditionalloglikelihood     Method .  Make array of conditional log-likelihoods  Methods   Mads.makearrayconditionalloglikelihood(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:160  Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:64   Arguments   conditionalloglikelihood  madsdata::Associative  : MADS problem dictionary   Returns:   array of conditional log-likelihoods   source  #  Mads.makearrayfunction     Function .  Make a version of the function  f  that accepts an array containing the optimal parameter values  Methods   Mads.makearrayfunction(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:17  Mads.makearrayfunction(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:17   Arguments   f::Function  : function [default= makemadscommandfunction(madsdata) ]  madsdata::Associative  : MADS problem dictionary   Returns:   function accepting an array containing the optimal parameter values   source  #  Mads.makearrayloglikelihood     Method .  Make a log likelihood function that accepts an array containing the optimal parameter values  Methods   Mads.makearrayloglikelihood(madsdata::Associative, loglikelihood)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:87   Arguments   loglikelihood  : log likelihood  madsdata::Associative  : MADS problem dictionary   Returns:   a log likelihood function that accepts an array   source  #  Mads.makebigdt!     Method .  Setup Bayesian Information Gap Decision Theory (BIG-DT) problem  Methods   Mads.makebigdt!(madsdata::Associative, choice::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:35   Arguments   choice::Associative  : dictionary of BIG-DT choices (scenarios)  madsdata::Associative  : MADS problem dictionary   Returns:   BIG-DT problem type   source  #  Mads.makebigdt     Method .  Setup Bayesian Information Gap Decision Theory (BIG-DT) problem  Methods   Mads.makebigdt(madsdata::Associative, choice::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:20   Arguments   choice::Associative  : dictionary of BIG-DT choices (scenarios)  madsdata::Associative  : MADS problem dictionary   Returns:   BIG-DT problem type   source  #  Mads.makecomputeconcentrations     Method .  Create a function to compute concentrations for all the observation points using Anasol  Methods   Mads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:134   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   calcpredictions  : calculate zero weight predictions [default= true ]  calczeroweightobs  : calculate zero weight observations[default= false ]   Returns:   function to compute concentrations; the new function returns a dictionary of observations and model predicted concentrations   Examples:  computeconcentrations   =   Mads . makecomputeconcentrations ( madsdata )  paramkeys   =   Mads . getparamkeys ( madsdata )  paramdict   =   OrderedDict ( zip ( paramkeys ,   map ( key - madsdata [ Parameters ][ key ][ init ],   paramkeys )))  forward_preds   =   computeconcentrations ( paramdict )   source  #  Mads.makedixonprice     Method .  Make dixon price  Methods   Mads.makedixonprice(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:256   Arguments   n::Integer  : number of observations   Returns:   dixon price   source  #  Mads.makedixonprice_gradient     Method .  Methods   Mads.makedixonprice(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:256   Arguments   n::Integer  : number of observations   Returns:   dixon price gradient   source  #  Mads.makedoublearrayfunction     Function .  Make a version of the function  f  that accepts an array containing the optimal parameter values, and returns an array of observations  Methods   Mads.makedoublearrayfunction(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:37  Mads.makedoublearrayfunction(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:37   Arguments   f::Function  : function [default= makemadscommandfunction(madsdata) ]  madsdata::Associative  : MADS problem dictionary   Returns:   function accepting an array containing the optimal parameter values, and returning an array of observations   source  #  Mads.makelmfunctions     Method .  Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization  Methods   Mads.makelmfunctions(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:111   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   forward model, gradient, objective functions   source  #  Mads.makelocalsafunction     Method .  Make gradient function needed for local sensitivity analysis  Methods   Mads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:26   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   multiplycenterbyweights  : multiply center by observation weights [default= true ]   Returns:   gradient function   source  #  Mads.makelogprior     Method .  Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary  madsdata  Methods   Mads.makelogprior(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:459   Arguments   madsdata::Associative  : MADS problem dictionary   Return:   the prior log-likelihood of the model parameters listed in the MADS problem dictionary  madsdata   source  #  Mads.makemadscommandfunction     Method .  Make MADS function to execute the model defined in the input MADS problem dictionary  Methods   Mads.makemadscommandfunction(madsdata_in::Associative; calczeroweightobs, calcpredictions)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:62   Arguments   madsdata_in::Associative  : MADS problem dictionary   Keywords   calcpredictions  : Calculate predictions [default= true ]  calczeroweightobs  : Calculate zero weight observations [default= false ]   Usage:  Mads . makemadscommandfunction ( madsdata )   MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:   Model  : execute a Julia function defined in an input Julia file. The function that should accept a  parameter  dictionary with all the model parameters as an input argument and should return an  observation  dictionary with all the model predicted observations. MADS will execute the first function defined in the file.  MADS model  : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.  Julia model  : execute an internal Julia function that accepts a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.  Command  : execute an external UNIX command or script that will execute an external model.  Julia command  : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an  observation  dictionary with model predictions.   Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model.  Only  Command  uses different approaches to get back the model outputs. The script defined under  Julia command  parses the model outputs using Julia.  The available options for writing model inputs and reading model outputs are as follows.  Options for writing model inputs:   Templates  : template files for writing model input files as defined at http://mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file   Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at http://mads.lanl.gov  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file   Returns:   Mads function to execute a forward model simulation   source  #  Mads.makemadscommandfunctionandgradient     Function .  Make MADS forward   gradient functions for the model defined in the MADS problem dictionary  madsdata  Methods   Mads.makemadscommandfunctionandgradient(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:373  Mads.makemadscommandfunctionandgradient(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:377   Arguments   f::Function  : Mads forward model function  madsdata::Associative  : MADS problem dictionary   Returns:   Mads forward function for the model defined in the MADS problem dictionary  madsdata  Mads gradient function for the model defined in the MADS problem dictionary  madsdata   source  #  Mads.makemadscommandgradient     Function .  Make MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary  madsdata  Methods   Mads.makemadscommandgradient(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:348  Mads.makemadscommandgradient(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:352   Arguments   f::Function  : Mads forward model function  madsdata::Associative  : MADS problem dictionary   Returns:   the parameter-space gradient for the model defined in the MADS problem dictionary  madsdata   source  #  Mads.makemadsconditionalloglikelihood     Method .  Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary  madsdata .  Methods   Mads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:482   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   weightfactor  : Weight factor [default= 1 ]   Return:   the conditional log-likelihood   source  #  Mads.makemadsloglikelihood     Method .  Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under  LogLikelihood  or computed internally.  Methods   Mads.makemadsloglikelihood(madsdata::Associative; weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:516   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   weightfactor  : Weight factor [default= 1 ]   Returns:   the log-likelihood for a given set of model parameters   source  #  Mads.makemadsreusablefunction     Function .  Make Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists)  Methods   Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:229  Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:229  Mads.makemadsreusablefunction(paramkeys::Array{T :Any,1}, obskeys::Array{T :Any,1}, madsdatarestart::Union{Bool,String}, madscommandfunction::Function, restartdir::String; usedict)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:232   Arguments   madscommandfunction::Function  : Mads function to execute a forward model simulation  madsdata::Associative  : MADS problem dictionary  madsdatarestart::Union{Bool,String}  : Restart type (memory/disk) or on/off status  obskeys::Array{T :Any,1}  : Dictionary of observation keys  paramkeys::Array{T :Any,1}  : Dictionary of parameter keys  restartdir::String  : Restart directory where the reusable model results are stored  suffix::String  : Suffix to be added to the name of restart directory   Keywords   usedict  : Use dictionary [default= true ]   Returns:   Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists)   source  #  Mads.makempbfunctions     Method .  Make forward model, gradient, objective functions needed for MathProgBase optimization  Methods   Mads.makempbfunctions(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:92   Arguments   madsdata::Associative  : MADS problem dictionary   Returns:   forward model, gradient, objective functions   source  #  Mads.makepowell     Method .  Make Powell test function for LM optimization  Methods   Mads.makepowell(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:159   Arguments   n::Integer  : number of observations   Returns:   Powell test function for LM optimization   source  #  Mads.makepowell_gradient     Method .  ake parameter gradients of the Powell test function for LM optimization  Methods   Mads.makepowell_gradient(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:183   Arguments   n::Integer  : number of observations   Returns:   arameter gradients of the Powell test function for LM optimization   source  #  Mads.makerosenbrock     Method .  Make Rosenbrock test function for LM optimization  Methods   Mads.makerosenbrock(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:114   Arguments   n::Integer  : number of observations   Returns:   Rosenbrock test function for LM optimization   source  #  Mads.makerosenbrock_gradient     Method .  Make parameter gradients of the Rosenbrock test function for LM optimization  Methods   Mads.makerosenbrock_gradient(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:136   Arguments   n::Integer  : number of observations   Returns:   parameter gradients of the Rosenbrock test function for LM optimization   source  #  Mads.makerotatedhyperellipsoid     Method .  Methods   Mads.makerotatedhyperellipsoid(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:323   Arguments   n::Integer  : number of observations   source  #  Mads.makerotatedhyperellipsoid_gradient     Method .  Methods   Mads.makerotatedhyperellipsoid_gradient(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:343   Arguments   n::Integer  : number of observations   source  #  Mads.makesphere     Method .  Make sphere  Methods   Mads.makesphere(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:214   Arguments   n::Integer  : number of observations   Returns:   sphere   source  #  Mads.makesphere_gradient     Method .  Make sphere gradient  Methods   Mads.makesphere_gradient(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:235   Arguments   n::Integer  : number of observations   Returns:   sphere gradient   source  #  Mads.makesumsquares     Method .  Methods   Mads.makesumsquares(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:293   Arguments   n::Integer  : number of observations   source  #  Mads.makesumsquares_gradient     Method .  Methods   Mads.makesumsquares_gradient(n::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:308   Arguments   n::Integer  : number of observations   source  #  Mads.makesvrmodel     Function .  Make SVR model functions (executor and cleaner)  Methods   Mads.makesvrmodel(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:200  Mads.makesvrmodel(madsdata::Associative, numberofsamples::Integer; check, addminmax, loaddata, savefile, svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, verbose, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:200   Arguments   madsdata::Associative  : MADS problem dictionary  numberofsamples::Integer  : number of samples [default= 100 ]   Keywords   C  : [default= 1000.0 ]  addminmax  : [default= true ]  cache_size  : [default= 100.0 ]  check  : [default= false ]  coef0  : [default= 0 ]  degree  : [default= 3 ]  eps  : [default= 0.001 ]  gamma  : [default= 1/numberofsamples ]  kernel_type  : [default= SVR.RBF ]  loaddata  : [default= false ]  nu  : [default= 0.5 ]  p  : [default= 0.001 ]  probability  : [default= false ]  savefile  : [default= false ]  seed  : [default= 0 ]  shrinking  : [default= true ]  svm_type  : [default= SVR.EPSILON_SVR ]  verbose  : [default= false ]   Returns:   svrexec, svrread, svrsave, svrclean   source  #  Mads.maxtorealmax!     Method .  Scale down values larger than max(Float32) in a dataframe  df  so that Gadfly can plot the data  Methods   Mads.maxtorealmax!(df::DataFrames.DataFrame)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1053   Arguments   df::DataFrames.DataFrame  : dataframe   source  #  Mads.meshgrid     Method .  Create mesh grid  Methods   Mads.meshgrid(x::Array{T :Any,1}, y::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:304   Arguments   x::Array{T :Any,1}  : vector of grid x coordinates  y::Array{T :Any,1}  : vector of grid y coordinates   Returns:   2D grid coordinates based on the coordinates contained in vectors  x  and  y   source  #  Mads.mkdir     Method .  Create a directory (if does not already exist)  Methods   Mads.mkdir(dirname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1092   Arguments   dirname::String  : directory   source  #  Mads.modelinformationcriteria     Function .  Model section information criteria  Methods   Mads.modelinformationcriteria(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:11  Mads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N :Any})  : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:11   Arguments   madsdata::Associative  : MADS problem dictionary  par::Array{Float64,N :Any}  : parameter array   source  #  Mads.modobsweights!     Method .  Modify (multiply) observation weights in the MADS problem dictionary  Methods   Mads.modobsweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:307   Arguments   madsdata::Associative  : MADS problem dictionary  value::Number  : value for modifing observation weights   source  #  Mads.modwellweights!     Method .  Modify (multiply) well weights in the MADS problem dictionary  Methods   Mads.modwellweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:355   Arguments   madsdata::Associative  : MADS problem dictionary  value::Number  : value for well weights   source  #  Mads.montecarlo     Method .  Monte Carlo analysis  Methods   Mads.montecarlo(madsdata::Associative; N, filename)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:182   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   N  : number of samples [default= 100 ]  filename  : file name   Returns:   parameter dictionary containing the data arrays   Dumps:   YAML output file with the parameter dictionary containing the data arrays ( mads_root_name .mcresults.yaml )   Example:  Mads . montecarlo ( madsdata ;   N = 100 )   source  #  Mads.naive_get_deltax     Method .  Naive Levenberg-Marquardt optimization: get the LM parameter space step  Methods   Mads.naive_get_deltax(JpJ::Array{Float64,2}, Jp::Array{Float64,2}, f0::Array{Float64,1}, lambda::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:218   Arguments   Jp::Array{Float64,2}  : Jacobian matrix times model parameters  JpJ::Array{Float64,2}  : Jacobian matrix times model parameters times transposed Jacobian matrix  f0::Array{Float64,1}  : initial model observations  lambda::Number  : Levenberg-Marquardt lambda   Returns:   the LM parameter space step   source  #  Mads.naive_levenberg_marquardt     Function .  Naive Levenberg-Marquardt optimization  Methods   Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:268  Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, np_lambda, lambda, lambda_mu)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:268   Arguments   f::Function  : forward model function  g::Function  : gradient function for the forward model  o::Function  : objective function [default=x- (x'*x)[1]]  x0::Array{Float64,1}  : initial parameter guess   Keywords   lambda  : initial Levenberg-Marquardt lambda [default= 100 ]  lambda_mu  : lambda multiplication factor \u03bc [default= 10 ]  maxEval  : maximum number of model evaluations [default= 101 ]  maxIter  : maximum number of optimization iterations [default= 10 ]  np_lambda  : number of parallel lambda solves [default= 10 ]   Returns:     source  #  Mads.naive_lm_iteration     Method .  Naive Levenberg-Marquardt optimization: perform LM iteration  Methods   Mads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:239   Arguments   f0::Array{Float64,1}  : initial model observations  f::Function  : forward model function  g::Function  : gradient function for the forward model  lambdas::Array{Float64,1}  : Levenberg-Marquardt lambdas  o::Function  : objective function  x0::Array{Float64,1}  : initial parameter guess   Returns:     source  #  Mads.noplot     Method .  Disable MADS plotting  Methods   Mads.noplot()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:239   source  #  Mads.obslineismatch     Method .  Match an instruction line in the Mads instruction file with model input file  Methods   Mads.obslineismatch(obsline::String, regexs::Array{Regex,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:793   Arguments   obsline::String  : instruction line  regexs::Array{Regex,1}  : regular expressions   Returns:   true or false   source  #  Mads.of     Function .  Compute objective function  Methods   Mads.of(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:59  Mads.of(madsdata::Associative, resultvec::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:52  Mads.of(madsdata::Associative, resultdict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:56   Arguments   madsdata::Associative  : MADS problem dictionary  resultdict::Associative  : result dictionary  resultvec::Array{T :Any,1}  : result vector   source  #  Mads.paramarray2dict     Method .  Convert a parameter array to a parameter dictionary of arrays  Methods   Mads.paramarray2dict(madsdata::Associative, array::Array)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:240   Arguments   array::Array  : parameter array  madsdata::Associative  : MADS problem dictionary   Returns:   a parameter dictionary of arrays   source  #  Mads.paramdict2array     Method .  Convert a parameter dictionary of arrays to a parameter array  Methods   Mads.paramdict2array(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:259   Arguments   dict::Associative  : parameter dictionary of arrays   Returns:   a parameter array   source  #  Mads.parsemadsdata!     Method .  Parse loaded MADS problem dictionary  Methods   Mads.parsemadsdata!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:51   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.parsenodenames     Function .  Parse string with node names defined in SLURM  Methods   Mads.parsenodenames(nodenames::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208  Mads.parsenodenames(nodenames::String, ntasks_per_node::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208   Arguments   nodenames::String  ntasks_per_node::Integer   source  #  Mads.partialof     Method .  Compute the sum of squared residuals for observations that match a regular expression  Methods   Mads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:85   Arguments   madsdata::Associative  : MADS problem dictionary  regex::Regex  : regular expression  resultdict::Associative  : result dictionary   Returns:   the sum of squared residuals for observations that match the regular expression   source  #  Mads.pkgversion     Method .  Get package version  Methods   Mads.pkgversion(modulestr::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:334   Arguments   modulestr::String   source  #  Mads.plotgrid     Function .  Plot a 3D grid solution based on model predictions in array  s , initial parameters, or user provided parameter values  Methods   Mads.plotgrid(madsdata::Associative; addtitle, title, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:56  Mads.plotgrid(madsdata::Associative, s::Array{Float64,N :Any}; addtitle, title, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:6  Mads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:61   Arguments   madsdata::Associative  : MADS problem dictionary  parameters::Associative  : dictionary with model parameters  s::Array{Float64,N :Any}  : model predictions array   Keywords   addtitle  : add plot title [default= true ]  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  title  : plot title   Examples:  Mads . plotgrid ( madsdata ,   s ;   addtitle = true ,   title = ,   filename = ,   format = )  Mads . plotgrid ( madsdata ;   addtitle = true ,   title = ,   filename = ,   format = )  Mads . plotgrid ( madsdata ,   parameters ;   addtitle = true ,   title = ,   filename = ,   format = )   source  #  Mads.plotmadsproblem     Method .  Plot contaminant sources and wells defined in MADS problem dictionary  Methods   Mads.plotmadsproblem(madsdata::Associative; imagefile, format, filename, keyword)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:75   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   filename  : output file name  format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  imagefile  : dump image file [default= false ]  keyword  : to be added in the filename   Dumps:   plot of contaminant sources and wells   source  #  Mads.plotmass     Method .  Plot injected/reduced contaminant mass  Methods   Mads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasolPlot.jl:19   Arguments   filename::String  : output filename for the generated plot  lambda::Array{Float64,1}  : array with all the lambda values  mass_injected::Array{Float64,1}  : array with associated total injected mass  mass_reduced::Array{Float64,1}  : array with associated total reduced mass   Keywords   format  : output plot format ( png ,  pdf , etc.)   Dumps:   image file with name  filename  and in specified  format   source  #  Mads.plotmatches     Function .  Plot the matches between model predictions and observations  Methods   Mads.plotmatches(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:146  Mads.plotmatches(madsdata::Associative, rx::Regex; plotdata, filename, format, title, xtitle, ytitle, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:146  Mads.plotmatches(madsdata::Associative, dict_in::Associative; plotdata, filename, format, title, xtitle, ytitle, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:178  Mads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; plotdata, filename, format, key2time, title, xtitle, ytitle, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:154   Arguments   dict_in::Associative  : dictionary with model parameters  madsdata::Associative  : MADS problem dictionary  result::Associative  : dictionary with model predictions  rx::Regex  : regular expression to filter the outputs   Keywords   colors  : array with plot colors  display  : display plots [default= false ]  dpi  : graph resolution [default= Mads.dpi ]  filename  : output file name  format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  hsize  : graph horizontal size [default= 6Gadfly.inch ]  key2time  : user provided function to convert observation keys to observation times  linewidth  : line width [default= 2Gadfly.pt ]  noise  : random noise magnitude [default= 0 ; no noise]  obs_plot_dots  : plot data as dots or line [default= true ]  plotdata  : plot data (if  false  model predictions are ploted only) [default= true ]  pointsize  : data dot size [default= 4Gadfly.pt ]  separate_files  : plot data for multiple wells separately [default= false ]  title  : graph title  vsize  : graph vertical size [default= 4Gadfly.inch ]  xtitle  : x-axis title [default= \"Time\" ]  ytitle  : y-axis title [default= \"y\" ]   Dumps:   plot of the matches between model predictions and observations   Examples:  Mads . plotmatches ( madsdata ;   filename = ,   format = )  Mads . plotmatches ( madsdata ,   dict_in ;   filename = ,   format = )  Mads . plotmatches ( madsdata ,   result ;   filename = ,   format = )  Mads . plotmatches ( madsdata ,   result ,   r NO3 ;   filename = ,   format = )   source  #  Mads.plotobsSAresults     Method .  Plot the sensitivity analysis results for the observations  Methods   Mads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle, linewidth, pointsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:550   Arguments   madsdata::Associative  : MADS problem dictionary  result::Associative  : sensitivity analysis results   Keywords   debug  : [default= false ]  filename  : output file name  filter  : string or regex to plot only observations containing  filter  format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  keyword  : to be added in the auto-generated filename  linewidth  : line width [default= 2Gadfly.pt ]  pointsize  : point size [default= 2Gadfly.pt ]  separate_files  : plot data for multiple wells separately [default= false ]  xtitle  : x-axis title [default= \"Time [years]\" ]  ytitle  : y-axis title [default= \"Concentration [ppb]\" ]   Dumps:   plot of the sensitivity analysis results for the observations   source  #  Mads.plotrobustnesscurves     Method .  Plot BIG-DT robustness curves  Methods   Mads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGapPlot.jl:20   Arguments   bigdtresults::Dict  : BIG-DT results  madsdata::Associative  : MADS problem dictionary   Keywords   filename  : output file name used to dump plots  format  : output plot format ( png ,  pdf , etc.)  maxhoriz  : maximum horizon [default= Inf ]  maxprob  : maximum probability [default= 1.0 ]   Dumps:   image file with name  filename  and in specified  format   source  #  Mads.plotseries     Function .  Create plots of data series  Methods   Mads.plotseries(X::Array{T :Any,2})  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:1062  Mads.plotseries(X::Array{T :Any,2}, filename::String; format, xtitle, ytitle, title, name, combined, hsize, vsize, linewidth, dpi, colors)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:1062   Arguments   X::Array{T :Any,2}  : matrix with the series data  filename::String  : output file name   Keywords   colors  : colors to use in plots  combined  : combine plots [default= true ]  dpi  : graph resolution [default= Mads.dpi ]  format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  hsize  : horizontal size [default= 6Gadfly.inch ]  linewidth  : width of the lines in plot  [default= 2Gadfly.pt ]  name  : series name [default= Sources ]  title  : plot title [default= Sources ]  vsize  : vertical size [default= 4Gadfly.inch ]  xtitle  : x-axis title [default= X ]  ytitle  : y-axis title [default= Y ]   Dumps:   Plots of data series   source  #  Mads.plotwellSAresults     Function .  Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)  Methods   Mads.plotwellSAresults(madsdata::Associative, result; xtitle, ytitle, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:416  Mads.plotwellSAresults(madsdata::Associative, result, wellname; xtitle, ytitle, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:427   Arguments   madsdata::Associative  : MADS problem dictionary  result  : sensitivity analysis results  wellname  : well name   Keywords   filename  : output file name  format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  xtitle  : x-axis title [default= \"Time [years]\" ]  ytitle  : y-axis title [default= \"Concentration [ppb]\" ]   Dumps:   Plot of the sensitivity analysis results for all the wells in the MADS problem dictionary   source  #  Mads.printSAresults     Method .  Print sensitivity analysis results  Methods   Mads.printSAresults(madsdata::Associative, results::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:889   Arguments   madsdata::Associative  : MADS problem dictionary  results::Associative  : dictionary with sensitivity analysis results   source  #  Mads.printSAresults2     Method .  Print sensitivity analysis results (method 2)  Methods   Mads.printSAresults2(madsdata::Associative, results::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:971   Arguments   madsdata::Associative  : MADS problem dictionary  results::Associative  : dictionary with sensitivity analysis results   source  #  Mads.printerrormsg     Method .  Print error message  Methods   Mads.printerrormsg(e)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:285   Arguments   e  : error message   source  #  Mads.pull     Function .  Pull (checkout) the latest version of the Mads / Julia modules  Methods   Mads.pull(modulename::String; kw...)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63  Mads.pull()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63   Arguments   modulename::String   source  #  Mads.push     Function .  Push the latest version of the Mads / Julia modules in the repo  Methods   Mads.push(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:124  Mads.push()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:124   Arguments   modulename::String   source  #  Mads.quietoff     Method .  Make MADS not quiet  Methods   Mads.quietoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:47   source  #  Mads.quieton     Method .  Make MADS quiet  Methods   Mads.quieton()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:37   source  #  Mads.readasciipredictions     Method .  Read MADS predictions from an ASCII file  Methods   Mads.readasciipredictions(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:44   Arguments   filename::String  : ASCII file name   Returns:   MADS predictions   source  #  Mads.readjsonpredictions     Method .  Read MADS model predictions from a JSON file  Methods   Mads.readjsonpredictions(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:54   Arguments   filename::String  : JSON file name   Returns:   MADS model predictions   source  #  Mads.readmodeloutput     Method .  Read model outputs saved for MADS  Methods   Mads.readmodeloutput(madsdata::Associative; obskeys)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:580   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   obskeys  : observation keys [default=getobskeys(madsdata)]   source  #  Mads.readobservations     Function .  Read observations  Methods   Mads.readobservations(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:877  Mads.readobservations(madsdata::Associative, obskeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:877   Arguments   madsdata::Associative  : MADS problem dictionary  obskeys::Array{T :Any,1}  : observation keys [default= getobskeys(madsdata) ]   Returns:   dictionary with Mads observations   source  #  Mads.readobservations_cmads     Method .  Read observations using C Mads library  Methods   Mads.readobservations_cmads(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:9   Arguments   madsdata::Associative   source  #  Mads.readyamlpredictions     Method .  Read MADS model predictions from a YAML file  filename  Methods   Mads.readyamlpredictions(filename::String; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:126   Arguments   filename::String  : file name   Keywords   julia  : if  true , use  julia  YAML library (if available); if  false  (default), use  python  YAML library (if available)   Returns:   data in yaml input file   source  #  Mads.regexs2obs     Method .  Get observations for a set of regular expressions  Methods   Mads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:811   Arguments   getparamhere::Array{Bool,1}  : parameters  obsline::String  : observation line  obsnames::Array{String,1}  : observation names  regexs::Array{Regex,1}  : regular expressions   Returns:   obsdict  : observations   source  #  Mads.reload     Method .  Reload Mads modules  Methods   Mads.reload()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:34   source  #  Mads.removesource!     Function .  Remove a contamination source  Methods   Mads.removesource!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:39  Mads.removesource!(madsdata::Associative, sourceid::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:39   Arguments   madsdata::Associative  : MADS problem dictionary  sourceid::Int64  : source id [default= 0 ]   source  #  Mads.removesourceparameters!     Method .  Remove contaminant source parameters  Methods   Mads.removesourceparameters!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:90   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.required     Function .  Lists modules required by a module (Mads by default)  Methods   Mads.required(modulename::String, filtermodule::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25  Mads.required(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25  Mads.required()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25   Arguments   filtermodule::String  modulename::String   source  #  Mads.resetmodelruns     Method .  Reset the model runs count to be equal to zero  Methods   Mads.resetmodelruns()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:141   source  #  Mads.residuals     Function .  Compute residuals  Methods   Mads.residuals(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:33  Mads.residuals(madsdata::Associative, resultvec::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:7  Mads.residuals(madsdata::Associative, resultdict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:30   Arguments   madsdata::Associative  : MADS problem dictionary  resultdict::Associative  : result dictionary  resultvec::Array{T :Any,1}  : result vector   Returns:     source  #  Mads.restartoff     Method .  MADS restart off  Methods   Mads.restartoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:18   source  #  Mads.restarton     Method .  MADS restart on  Methods   Mads.restarton()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:9   source  #  Mads.reweighsamples     Method .  Reweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing  Methods   Mads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:299   Arguments   madsdata::Associative  : MADS problem dictionary  oldllhoods::Array{T :Any,1}  : the log likelihoods of the parameters in the old distribution  predictions::Array  : the model predictions for each of the samples   Returns:   vector of log-likelihoods after reweighing   source  #  Mads.rmdir     Method .  Remove directory  Methods   Mads.rmdir(dir::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:975   Arguments   dir::String  : directory to be removed   Keywords   path  : path of the directory [default= current path ]   source  #  Mads.rmfile     Method .  Remove file  Methods   Mads.rmfile(filename::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:991   Arguments   filename::String  : file to be removed   Keywords   path  : path of the file [default= current path ]   source  #  Mads.rmfiles_ext     Method .  Remove files with extension  ext  Methods   Mads.rmfiles_ext(ext::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1007   Arguments   ext::String  : extension   Keywords   path  : path of the files to be removed [default= . ]   source  #  Mads.rmfiles_root     Method .  Remove files with root  root  Methods   Mads.rmfiles_root(root::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:1020   Arguments   root::String  : root   Keywords   path  : path of the files to be removed [default= . ]   source  #  Mads.rosenbrock     Method .  Rosenbrock test function  Methods   Mads.rosenbrock(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:43   Arguments   x::Array{T :Any,1}  : parameter vector   Returns:     source  #  Mads.rosenbrock2_gradient_lm     Method .  Parameter gradients of the Rosenbrock test function  Methods   Mads.rosenbrock2_gradient_lm(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:24   Arguments   x::Array{T :Any,1}  : parameter vector   Returns:   parameter gradients   source  #  Mads.rosenbrock2_lm     Method .  Rosenbrock test function (more difficult to solve)  Methods   Mads.rosenbrock2_lm(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:10   Arguments   x::Array{T :Any,1}  : parameter vector   source  #  Mads.rosenbrock_gradient!     Method .  Parameter gradients of the Rosenbrock test function  Methods   Mads.rosenbrock_gradient!(x::Array{T :Any,1}, grad::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:64   Arguments   grad::Array{T :Any,1}  : gradient vector  x::Array{T :Any,1}  : parameter vector   source  #  Mads.rosenbrock_gradient_lm     Method .  Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separately)  Methods   Mads.rosenbrock_gradient_lm(x::Array{T :Any,1}; dx, center)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:81   Arguments   x::Array{T :Any,1}  : parameter vector   Keywords   center  : array with parameter observations at the center applied to compute numerical derivatives [default= Array{Float64}(0) ]  dx  : apply parameter step to compute numerical derivatives [default= false ]   Returns:   parameter gradients   source  #  Mads.rosenbrock_hessian!     Method .  Parameter Hessian of the Rosenbrock test function  Methods   Mads.rosenbrock_hessian!(x::Array{T :Any,1}, hess::Array{T :Any,2})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:97   Arguments   hess::Array{T :Any,2}  : Hessian matrix  x::Array{T :Any,1}  : parameter vector   source  #  Mads.rosenbrock_lm     Method .  Rosenbrock test function for LM optimization (returns the 2 components separately)  Methods   Mads.rosenbrock_lm(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:53   Arguments   x::Array{T :Any,1}  : parameter vector   source  #  Mads.runcmd     Function .  Run external command and pipe stdout and stderr  Methods   Mads.runcmd(cmdstring::String; pipe, quiet, waittime)  : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:97  Mads.runcmd(cmd::Cmd; pipe, quiet, waittime)  : /Users/monty/.julia/v0.5/Mads/src/MadsExecute.jl:42   Arguments   cmd::Cmd  : command (as a julia command; e.g.  ls )  cmdstring::String  : command (as a string; e.g. \"ls\")   Keywords   pipe  : [default= false ]  quiet  : [default= Mads.quiet ]  waittime  : wait time is second [default= Mads.executionwaittime ]   Returns:   cmdout  cmderr   source  #  Mads.runremote     Function .  Run remote command on a series of servers  Methods   Mads.runremote(cmd::String, nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277  Mads.runremote(cmd::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277   Arguments   cmd::String  nodenames::Array{String,1}   source  #  Mads.saltelli     Method .  Saltelli sensitivity analysis  Methods   Mads.saltelli(madsdata::Associative; N, seed, parallel, restartdir, checkpointfrequency)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:608   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   N  : number of samples [default= 100 ]  checkpointfrequency  : check point frequency [default= N ]  parallel  : set to true if the model runs should be performed in parallel [default= false ]  restartdir  : directory where files will be stored containing model results for fast simulation restarts  seed  : random seed [default= 0 ]   source  #  Mads.saltellibrute     Method .  Saltelli sensitivity analysis (brute force)  Methods   Mads.saltellibrute(madsdata::Associative; N, seed, restartdir)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:420   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   N  : number of samples [default= 1000 ]  restartdir  : directory where files will be stored containing model results for fast simulation restarts  seed  : random seed [default= 0 ]   source  #  Mads.saltellibruteparallel     Method .  Parallel version of saltellibrute  source  #  Mads.saltelliparallel     Method .  Parallel version of saltelli  source  #  Mads.sampling     Method .  Methods   Mads.sampling(param::Array{T :Any,1}, J::Array, numsamples::Number; seed, scale)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:244   Arguments   J::Array  : Jacobian matrix  numsamples::Number  : Number of samples  param::Array{T :Any,1}  : Parameter vector   Keywords   scale  : data scaling [default= 1 ]  seed  : random esee [default= 0 ]   Returns:   generated samples (vector or array)  vector of log-likelihoods   source  #  Mads.savecalibrationresults     Method .  Save calibration results  Methods   Mads.savecalibrationresults(madsdata::Associative, results)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:206   Arguments   madsdata::Associative  : MADS problem dictionary  results  : the calibration results   source  #  Mads.savemadsfile     Function .  Save MADS problem dictionary  madsdata  in MADS input file  filename  Methods   Mads.savemadsfile(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:146  Mads.savemadsfile(madsdata::Associative, filename::String; julia, explicit)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:146  Mads.savemadsfile(madsdata::Associative, parameters::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:152  Mads.savemadsfile(madsdata::Associative, parameters::Associative, filename::String; julia, explicit)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:152   Arguments   filename::String  : input file name (e.g.  input_file_name.mads )  madsdata::Associative  : MADS problem dictionary  parameters::Associative  : Dictionary with parameters (optional)   Keywords   explicit  : if  true  ignores MADS YAML file modifications and rereads the original input file [default= false ]  julia  : if  true  use Julia JSON module to save [default= false ]   Example:  Mads . savemadsfile ( madsdata )  Mads . savemadsfile ( madsdata ,   test.mads )  Mads . savemadsfile ( madsdata ,   parameters ,   test.mads )  Mads . savemadsfile ( madsdata ,   parameters ,   test.mads ,   explicit = true )   source  #  Mads.savemcmcresults     Method .  Save MCMC chain in a file  Methods   Mads.savemcmcresults(chain::Array, filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:137   Arguments   chain::Array  : MCMC chain  filename::String  : file name   Dumps:   the file containing MCMC chain   source  #  Mads.savesaltellirestart     Method .  Save Saltelli sensitivity analysis results for fast simulation restarts  Methods   Mads.savesaltellirestart(evalmat::Array, matname::String, restartdir::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:589   Arguments   evalmat::Array  : saved array  matname::String  : matrix (array) name (defines the name of the loaded file)  restartdir::String  : directory where files will be stored containing model results for fast simulation restarts   source  #  Mads.scatterplotsamples     Method .  Create histogram/scatter plots of model parameter samples  Methods   Mads.scatterplotsamples(madsdata::Associative, samples::Array{T :Any,2}, filename::String; format, pointsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:379   Arguments   filename::String  : output file name  madsdata::Associative  : MADS problem dictionary  samples::Array{T :Any,2}  : matrix with model parameters   Keywords   format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  pointsize  : point size [default= 0.9Gadfly.mm ]   Dumps:   histogram/scatter plots of model parameter samples   source  #  Mads.searchdir     Function .  Get files in the current directory or in a directory defined by  path  matching pattern  key  which can be a string or regular expression  Methods   Mads.searchdir(key::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:609  Mads.searchdir(key::Regex; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:608   Arguments   key::Regex  : matching pattern for Mads input files (string or regular expression accepted)  key::String  : matching pattern for Mads input files (string or regular expression accepted)   Keywords   path  : search directory for the mads input files [default= . ]   Returns:   filename  : an array with file names matching the pattern in the specified directory   Examples:  -   `Mads.searchdir( a )`  -   `Mads.searchdir(r [A-B] ; path =  . )`  -   `Mads.searchdir(r .*.cov ; path =  . )`   source  #  Mads.set_nprocs_per_task     Function .  Set number of processors needed for each parallel task at each node  Methods   Mads.set_nprocs_per_task()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:25  Mads.set_nprocs_per_task(local_nprocs_per_task::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:25   Arguments   local_nprocs_per_task::Integer   source  #  Mads.setallparamsoff!     Method .  Set all parameters OFF  Methods   Mads.setallparamsoff!(madsdata::Associative; filter)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:430   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   filter  : parameter filter   source  #  Mads.setallparamson!     Method .  Set all parameters ON  Methods   Mads.setallparamson!(madsdata::Associative; filter)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:416   Arguments   madsdata::Associative  : MADS problem dictionary   Keywords   filter  : parameter filter   source  #  Mads.setdebuglevel     Method .  Set MADS debug level  Methods   Mads.setdebuglevel(level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:112   Arguments   level::Int64  : debug level   source  #  Mads.setdefaultplotformat     Method .  Set the default plot format ( SVG  is the default format)  Methods   Mads.setdefaultplotformat(format::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:16   Arguments   format::String  : plot format   source  #  Mads.setdir     Function .  Set the working directory (for parallel environments)  Usage:  @everywhere   Mads . setdir ()  @everywhere   Mads . setdir ( /home/monty )   Methods   Mads.setdir()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:254  Mads.setdir(dir)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:249   Arguments   dir   source  #  Mads.setdynamicmodel     Method .  Set Dynamic Model for MADS model calls using an internal Julia function  Methods   Mads.setdynamicmodel(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:110   Arguments   f::Function  : Julia function  madsdata::Associative  : MADS problem dictionary   source  #  Mads.setexecutionwaittime     Method .  Set maximum execution wait time for forward model runs in seconds  Methods   Mads.setexecutionwaittime(waitime::Float64)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:132   Arguments   waitime::Float64  : maximum execution wait time for forward model runs in seconds   source  #  Mads.setmadsinputfile     Method .  Set a default MADS input file  Methods   Mads.setmadsinputfile(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:215   Arguments   filename::String  : input file name (e.g.  input_file_name.mads )   source  #  Mads.setmodelinputs     Method .  Set model input files; delete files where model output should be saved for MADS  Methods   Mads.setmodelinputs(madsdata::Associative, parameters::Associative; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:512   Arguments   madsdata::Associative  : MADS problem dictionary  parameters::Associative  : parameters   Keywords   path  : path for the files [default= . ]   source  #  Mads.setnewmadsfilename     Function .  Set new mads file name  Methods   Mads.setnewmadsfilename(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:369  Mads.setnewmadsfilename(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:366   Arguments   filename::String  : file name  madsdata::Associative  : MADS problem dictionary   Returns:   new file name   source  #  Mads.setobservationtargets!     Method .  Set observations (calibration targets) in the MADS problem dictionary based on a  predictions  dictionary  Methods   Mads.setobservationtargets!(madsdata::Associative, predictions::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:495   Arguments   madsdata::Associative  : MADS problem dictionary  predictions::Associative  : dictionary with model predictions   source  #  Mads.setobstime!     Function .  Set observation time based on the observation name in the MADS problem dictionary  Methods   Mads.setobstime!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:247  Mads.setobstime!(madsdata::Associative, separator::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:247  Mads.setobstime!(madsdata::Associative, rx::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:258   Arguments   madsdata::Associative  : MADS problem dictionary  rx::Regex  : regular expression to match  separator::String  : separator [default= _ ]   Examples:  Mads . setobstime! ( madsdata ,   _t )  Mads . setobstime! ( madsdata ,   r [A-x]*_t([0-9,.]+) )   source  #  Mads.setobsweights!     Method .  Set observation weights in the MADS problem dictionary  Methods   Mads.setobsweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:293   Arguments   madsdata::Associative  : MADS problem dictionary  value::Number  : value for observation weights   source  #  Mads.setparamoff!     Method .  Set a specific parameter with a key  parameterkey  OFF  Methods   Mads.setparamoff!(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:455   Arguments   madsdata::Associative  : MADS problem dictionary  parameterkey::String  : parameter key   source  #  Mads.setparamon!     Method .  Set a specific parameter with a key  parameterkey  ON  Methods   Mads.setparamon!(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:444   Arguments   madsdata::Associative  : MADS problem dictionary  parameterkey::String  : parameter key   source  #  Mads.setparamsdistnormal!     Method .  Set normal parameter distributions for all the model parameters in the MADS problem dictionary  Methods   Mads.setparamsdistnormal!(madsdata::Associative, mean::Array{T :Any,1}, stddev::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:467   Arguments   madsdata::Associative  : MADS problem dictionary  mean::Array{T :Any,1}  : array with the mean values  stddev::Array{T :Any,1}  : array with the standard deviation values   source  #  Mads.setparamsdistuniform!     Method .  Set uniform parameter distributions for all the model parameters in the MADS problem dictionary  Methods   Mads.setparamsdistuniform!(madsdata::Associative, min::Array{T :Any,1}, max::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:482   Arguments   madsdata::Associative  : MADS problem dictionary  max::Array{T :Any,1}  : array with the maximum values  min::Array{T :Any,1}  : array with the minimum values   source  #  Mads.setparamsinit!     Method .  Set initial parameter guesses in the MADS problem dictionary  Methods   Mads.setparamsinit!(madsdata::Associative, paramdict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:318   Arguments   madsdata::Associative  : MADS problem dictionary  paramdict::Associative  : dictionary with initial model parameter values   source  #  Mads.setplotfileformat     Method .  Set image file  format  based on the  filename  extension, or sets the  filename  extension based on the requested  format . The default  format  is  SVG .  PNG ,  PDF ,  ESP , and  PS  are also supported.  Methods   Mads.setplotfileformat(filename::String, format::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:36   Arguments   filename::String  : output file name  format::String  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]   Returns:   output file name  output plot format ( png ,  pdf , etc.)   source  #  Mads.setprocs     Function .  Set the available processors based on environmental variables. Supports SLURM only at the moment.  Usage:  Mads . setprocs ()  Mads . setprocs ( 4 )  Mads . setprocs ( 4 ,   8 )  Mads . setprocs ( ntasks_per_node = 4 )  Mads . setprocs ( ntasks_per_node = 32 ,   mads_servers = true )  Mads . setprocs ( ntasks_per_node = 64 ,   nodenames = [ madsmax ,   madszem ])  Mads . setprocs ( ntasks_per_node = 64 ,   nodenames = wc[096-157,160,175] )  Mads . setprocs ( ntasks_per_node = 64 ,   mads_servers = true ,   exename = /home/monty/bin/julia ,   dir = /home/monty )   Arguments:   np  : number of processors  nt  : number of threads   Optional arguments:   ntasks_per_node  : number of parallel tasks per  nprocs_per_task  : number of processors needed for each parallel task at each node  nodenames  : array with names of machines/nodes to be invoked  dir  : common directory shared by all the jobs  exename  : location of the julia executable (the same version of julia is needed on all the workers)  mads_servers  : if  true  use MADS servers (LANL only)  quiet  : suppress output [default  true ]  test  : test the servers and connect to each one ones at a time [default  false ]   Methods   Mads.setprocs(; ntasks_per_node, nprocs_per_task, mads_servers, test, dir, exename, nodenames, quiet)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:56  Mads.setprocs(np::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:52  Mads.setprocs(np::Integer, nt::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:38   Arguments   np::Integer  nt::Integer   Keywords   dir  exename  mads_servers  nodenames  nprocs_per_task  ntasks_per_node  quiet  test   source  #  Mads.setseed     Function .  Set / get current random seed  Methods   Mads.setseed()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:319  Mads.setseed(seed::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:319  Mads.setseed(seed::Integer, quiet::Bool)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:319   Arguments   quiet::Bool  : [default= true ]  seed::Integer  : random seed   source  #  Mads.settarget!     Method .  Set observation target  Methods   Mads.settarget!(o::Associative, target::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:237   Arguments   o::Associative  : observation data  target::Number  : observation target   source  #  Mads.settime!     Method .  Set observation time  Methods   Mads.settime!(o::Associative, time::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:159   Arguments   o::Associative  : observation data  time::Number  : observation time   source  #  Mads.setverbositylevel     Method .  Set MADS verbosity level  Methods   Mads.setverbositylevel(level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:122   Arguments   level::Int64  : debug level   source  #  Mads.setweight!     Method .  Set observation weight  Methods   Mads.setweight!(o::Associative, weight::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:198   Arguments   o::Associative  : observation data  weight::Number  : observation weight   source  #  Mads.setwellweights!     Method .  Set well weights in the MADS problem dictionary  Methods   Mads.setwellweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:338   Arguments   madsdata::Associative  : MADS problem dictionary  value::Number  : value for well weights   source  #  Mads.showallparameters     Method .  Show all parameters in the MADS problem dictionary  Methods   Mads.showallparameters(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:562   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.showobservations     Method .  Show observations in the MADS problem dictionary  Methods   Mads.showobservations(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:391   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.showparameters     Method .  Show parameters in the MADS problem dictionary  Methods   Mads.showparameters(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:526   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.sinetransform     Method .  Sine transformation of model parameters  Methods   Mads.sinetransform(sineparams::Array{T :Any,1}, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:37   Arguments   indexlogtransformed::Array{T :Any,1}  : index vector of log-transformed parameters  lowerbounds::Array{T :Any,1}  : lower bounds  sineparams::Array{T :Any,1}  : model parameters  upperbounds::Array{T :Any,1}  : upper bounds   Returns:   Sine transformation of model parameters   source  #  Mads.sinetransformfunction     Method .  Sine transformation of a function  Methods   Mads.sinetransformfunction(f::Function, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:56   Arguments   f::Function  : function  indexlogtransformed::Array{T :Any,1}  : index vector of log-transformed parameters  lowerbounds::Array{T :Any,1}  : lower bounds  upperbounds::Array{T :Any,1}  : upper bounds   Returns:   Sine transformation   source  #  Mads.sinetransformgradient     Method .  Sine transformation of a gradient function  Methods   Mads.sinetransformgradient(g::Function, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1}; sindx)  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:77   Arguments   g::Function  : gradient function  indexlogtransformed::Array{T :Any,1}  : index vector of log-transformed parameters  lowerbounds::Array{T :Any,1}  : vector with parameter lower bounds  upperbounds::Array{T :Any,1}  : vector with parameter upper bounds   Keywords   sindx  : sin-space parameter step applied to compute numerical derivatives [default= 0.1 ]   Returns:   Sine transformation of a gradient function   source  #  Mads.spaghettiplot     Function .  Generate a combined spaghetti plot for the  selected  ( type != null ) model parameter  Methods   Mads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, seed, linewidth, pointsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:849  Mads.spaghettiplot(madsdata::Associative, dictarray::Associative; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, seed, linewidth, pointsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:853  Mads.spaghettiplot(madsdata::Associative, array::Array; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, seed, linewidth, pointsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:890   Arguments   array::Array  : data arrays to be plotted  dictarray::Associative  : dictionary array containing the data arrays to be plotted  madsdata::Associative  : MADS problem dictionary  number_of_samples::Integer  : number of samples   Keywords   filename  : output file name used to output the produced plots  format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  keyword  : keyword to be added in the file name used to output the produced plots (if  filename  is not defined)  linewidth  : width of the lines in plot [default= 2Gadfly.pt ]  obs_plot_dots  : plot observation as dots ( true  [default] or  false )  plotdata  : plot data (if  false  model predictions are plotted only) [default= true ]  pointsize  : size of the markers in plot [default= 4Gadfly.pt ]  seed  : random seed [default= 0 ]  xtitle  :  x  axis title [default= X ]  yfit  : fit vertical axis range [default= false ]  ytitle  :  y  axis title [default= Y ]   Dumps:   Image file with a spaghetti plot ( mads_rootname - keyword - number_of_samples -spaghetti. default_image_extension )   Example:  Mads . spaghettiplot ( madsdata ,   dictarray ;   filename = ,   keyword   =   ,   format = ,   xtitle = X ,   ytitle = Y ,   obs_plot_dots = true )  Mads . spaghettiplot ( madsdata ,   array ;   filename = ,   keyword   =   ,   format = ,   xtitle = X ,   ytitle = Y ,   obs_plot_dots = true )  Mads . spaghettiplot ( madsdata ,   number_of_samples ;   filename = ,   keyword   =   ,   format = ,   xtitle = X ,   ytitle = Y ,   obs_plot_dots = true )   source  #  Mads.spaghettiplots     Function .  Generate separate spaghetti plots for each  selected  ( type != null ) model parameter  Methods   Mads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:708  Mads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:712   Arguments   madsdata::Associative  : MADS problem dictionary  number_of_samples::Integer  : number of samples  paramdictarray::DataStructures.OrderedDict  : parameter dictionary containing the data arrays to be plotted   Keywords   format  : output plot format ( png ,  pdf , etc.) [default= Mads.graphbackend ]  keyword  : keyword to be added in the file name used to output the produced plots  linewidth  : width of the lines on the plot [default= 2Gadfly.pt ]  obs_plot_dots  : plot observation as dots ( true  (default) or  false )  pointsize  : size of the markers on the plot [default= 4Gadfly.pt ]  seed  : random seed [default= 0 ]  xtitle  :  x  axis title [default= X ]  ytitle  :  y  axis title [default= Y ]   Dumps:   A series of image files with spaghetti plots for each  selected  ( type != null ) model parameter ( mads_rootname - keyword - param_key - number_of_samples -spaghetti. default_image_extension )   Example:  Mads . spaghettiplots ( madsdata ,   paramdictarray ;   format = ,   keyword = ,   xtitle = X ,   ytitle = Y ,   obs_plot_dots = true )  Mads . spaghettiplots ( madsdata ,   number_of_samples ;   format = ,   keyword = ,   xtitle = X ,   ytitle = Y ,   obs_plot_dots = true )   source  #  Mads.sphericalcov     Method .  Spherical spatial covariance function  Methods   Mads.sphericalcov(h::Number, maxcov::Number, scale::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:43   Arguments   h::Number  : separation distance  maxcov::Number  : max covariance  scale::Number  : scale   Returns:   covariance   source  #  Mads.sphericalvariogram     Method .  Spherical variogram  Methods   Mads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:59   Arguments   h::Number  : separation distance  nugget::Number  : nugget  range::Number  : range  sill::Number  : sill   Returns:     source  #  Mads.sprintf     Method .  Convert  @sprintf  macro into  sprintf  function  source  #  Mads.status     Method .  Status of the Mads modules  Methods   Mads.status(; git, gitmore)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:190   Keywords   git  gitmore   source  #  Mads.stderrcaptureoff     Method .  Restore STDERR   Methods   Mads.stderrcaptureoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:108   source  #  Mads.stderrcaptureon     Method .  Redirect STDERR to a reader  Methods   Mads.stderrcaptureon()  : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:95   source  #  Mads.stdoutcaptureoff     Method .  Restore STDOUT  Methods   Mads.stdoutcaptureoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:82   source  #  Mads.stdoutcaptureon     Method .  Redirect STDOUT to a reader  Methods   Mads.stdoutcaptureon()  : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:69   source  #  Mads.stdouterrcaptureoff     Method .  Restore STDOUT   STDERR  Methods   Mads.stdouterrcaptureoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:131   source  #  Mads.stdouterrcaptureon     Method .  Redirect STDOUT   STDERR to readers  Methods   Mads.stdouterrcaptureon()  : /Users/monty/.julia/v0.5/Mads/src/MadsSTDOUT.jl:121   source  #  Mads.svrdump     Method .  Dump SVR models in files  Methods   Mads.svrdump(svrmodel::Array{SVR.svmmodel,1}, rootname::String, numberofsamples::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:135   Arguments   numberofsamples::Int64  : number of samples  rootname::String  : root name  svrmodel::Array{SVR.svmmodel,1}  : SVR model   source  #  Mads.svrfree     Method .  Free SVR  Methods   Mads.svrfree(svrmodel::Array{SVR.svmmodel,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:117   Arguments   svrmodel::Array{SVR.svmmodel,1}  : SVR model   source  #  Mads.svrload     Method .  Load SVR models from files  Methods   Mads.svrload(npred::Int64, rootname::String, numberofsamples::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:158   Arguments   npred::Int64  : number of model predictions  numberofsamples::Int64  : number of samples  rootname::String  : root name   Returns:   SVR model   source  #  Mads.svrpredict     Function .  Predict SVR  Methods   Mads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,2})  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:90  Mads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:82   Arguments   paramarray::Array{Float64,1}  : parameter array  paramarray::Array{Float64,2}  : parameter array  svrmodel::Array{SVR.svmmodel,1}  : SVR model   Returns:     source  #  Mads.svrtrain     Function .  Train SVR  Methods   Mads.svrtrain(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:38  Mads.svrtrain(madsdata::Associative, paramarray::Array{Float64,2}; check, savefile, addminmax, svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, verbose)  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:6  Mads.svrtrain(madsdata::Associative, numberofsamples::Integer; addminmax, kw...)  : /Users/monty/.julia/v0.5/Mads/src/MadsSVR.jl:38   Arguments   madsdata::Associative  : MADS problem dictionary  numberofsamples::Integer  : number of random samples in the training set [default= 100 ]  paramarray::Array{Float64,2}   Keywords   C  : [default= 10000.0 ]  addminmax  : [default= true ]  cache_size  : [default= 100.0 ]  check  : [default= false ]  coef0  : [default= 0 ]  degree  : [default= 3 ]  eps  : [default= 0.001 ]  gamma  : [default= 1/numberofsamples ]  kernel_type  : [default= SVR.RBF ]  nu  : [default= 0.5 ]  p  : [default= 0.1 ]  probability  : [default= false ]  savefile  : [default= false ]  shrinking  : [default= true ]  svm_type  : [default= SVR.EPSILON_SVR ]  verbose  : [default= false ]   Returns:   SVR model   source  #  Mads.symlinkdir     Method .  Create a symbolic link of a file  filename  in a directory  dirtarget  Methods   Mads.symlinkdir(filename::String, dirtarget::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:961   Arguments   dirtarget::String  : target directory  filename::String  : file name   source  #  Mads.symlinkdirfiles     Method .  Create a symbolic link of all the files in a directory  dirsource  in a directory  dirtarget  Methods   Mads.symlinkdirfiles(dirsource::String, dirtarget::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:943   Arguments   dirsource::String  : source directory  dirtarget::String  : target directory   source  #  Mads.tag     Function .  Tag the Mads modules with a default argument  :patch  Methods   Mads.tag(madsmodule::String, sym::Symbol)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:240  Mads.tag(madsmodule::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:240  Mads.tag(sym::Symbol)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:235  Mads.tag()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:235   Arguments   madsmodule::String  sym::Symbol   source  #  Mads.test     Function .  Perform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace;  reload(\"Mads.jl\")  if needed)  Methods   Mads.test(testname::String; madstest)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:49  Mads.test()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:49   Arguments   testname::String  : name of the test to execute (module or example)   Keywords   madstest  : test Mads [default= true ]   source  #  Mads.testj     Function .  Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial)  Methods   Mads.testj(coverage::Bool)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7  Mads.testj()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7   Arguments   coverage::Bool   source  #  Mads.transposematrix     Method .  Transpose non-numeric matrix  Methods   Mads.transposematrix(a::Array{T :Any,2})  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:275   Arguments   a::Array{T :Any,2}  : matrix   source  #  Mads.transposevector     Method .  Transpose non-numeric vector  Methods   Mads.transposevector(a::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:265   Arguments   a::Array{T :Any,1}  : vector   source  #  Mads.void2nan!     Method .  Convert Void's into NaN's in a dictionary  Methods   Mads.void2nan!(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1011   Arguments   dict::Associative  : dictionary   source  #  Mads.weightedstats     Method .  Get weighted mean and variance samples  Methods   Mads.weightedstats(samples::Array, llhoods::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:356   Arguments   llhoods::Array{T :Any,1}  : vector of log-likelihoods  samples::Array  : array of samples   Returns:   vector of sample means  vector of sample variances   source  #  Mads.welloff!     Method .  Turn off a specific well in the MADS problem dictionary  Methods   Mads.welloff!(madsdata::Associative, wellname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:565   Arguments   madsdata::Associative  : MADS problem dictionary  wellname::String  : name of the well to be turned off   source  #  Mads.wellon!     Method .  Turn on a specific well in the MADS problem dictionary  Methods   Mads.wellon!(madsdata::Associative, wellname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:530   Arguments   madsdata::Associative  : MADS problem dictionary  wellname::String  : name of the well to be turned on   source  #  Mads.wells2observations!     Method .  Convert  Wells  class to  Observations  class in the MADS problem dictionary  Methods   Mads.wells2observations!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:586   Arguments   madsdata::Associative  : MADS problem dictionary   source  #  Mads.writeparameters     Function .  Write  parameters  Methods   Mads.writeparameters(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:709  Mads.writeparameters(madsdata::Associative, parameters::Associative; respect_space)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:714   Arguments   madsdata::Associative  : MADS problem dictionary  parameters::Associative  : parameters   Keywords   respect_space  : respect provided space in the template file to fit model parameters [default= false ]   source  #  Mads.writeparametersviatemplate     Method .  Write  parameters  via MADS template ( templatefilename ) to an output file ( outputfilename )  Methods   Mads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:674   Arguments   outputfilename  : output file name  parameters  : parameters  templatefilename  : tmplate file name   Keywords   respect_space  : respect provided space in the template file to fit model parameters [default= false ]   source  #  Mads.MadsModel     Type .  MadsModel type applied for MathProgBase analyses  source", 
            "title": "Mads.jl"
        }, 
        {
            "location": "/Modules/BIGUQ/", 
            "text": "BIGUQ.jl\n\n\nDocumentation for BIGUQ.jl module (all functions):\n\n\n#\n\n\nBIGUQ.getmcmcchain\n \n \nMethod\n.\n\n\nGet MCMC chain\n\n\nsource\n\n\n#\n\n\nBIGUQ.makebigdts\n \n \nMethod\n.\n\n\nMake BIGDT analyses for each possible decision assuming that the proposed observations \nproposedobs\n are observed\n\n\nsource\n\n\n#\n\n\nBIGUQ.makebigdts\n \n \nMethod\n.\n\n\nMakes BIGDT analyses for each possible decision assuming that no more observations will be made\n\n\nsource\n\n\n#\n\n\nBIGUQ.BigDT\n \n \nType\n.\n\n\nBigOED type\n\n\nsource\n\n\n#\n\n\nBIGUQ.BigOED\n \n \nType\n.\n\n\nBigOED type\n\n\nsource", 
            "title": "BIGUQ"
        }, 
        {
            "location": "/Modules/BIGUQ/#biguqjl", 
            "text": "Documentation for BIGUQ.jl module (all functions):  #  BIGUQ.getmcmcchain     Method .  Get MCMC chain  source  #  BIGUQ.makebigdts     Method .  Make BIGDT analyses for each possible decision assuming that the proposed observations  proposedobs  are observed  source  #  BIGUQ.makebigdts     Method .  Makes BIGDT analyses for each possible decision assuming that no more observations will be made  source  #  BIGUQ.BigDT     Type .  BigOED type  source  #  BIGUQ.BigOED     Type .  BigOED type  source", 
            "title": "BIGUQ.jl"
        }, 
        {
            "location": "/Modules/Anasol/", 
            "text": "Anasol.jl\n\n\nDocumentation for Anasol.jl module (all functions):", 
            "title": "Anasol"
        }, 
        {
            "location": "/Modules/Anasol/#anasoljl", 
            "text": "Documentation for Anasol.jl module (all functions):", 
            "title": "Anasol.jl"
        }, 
        {
            "location": "/Modules/AffineInvariantMCMC/", 
            "text": "AffineInvariantMCMC.jl\n\n\nDocumentation for AffineInvariantMCMC.jl module (all functions):\n\n\n#\n\n\nAffineInvariantMCMC.flattenmcmcarray\n \n \nMethod\n.\n\n\nFlatten MCMC arrays\n\n\nsource\n\n\n#\n\n\nAffineInvariantMCMC.sample\n \n \nFunction\n.\n\n\nBayesian sampling using Goodman \n Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)\n\n\nAffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1)\n\n\n\n\n\nArguments:\n\n\n\n\nllhood\n : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood())\n\n\nnumwalkers\n : number of walkers\n\n\nx0\n : normalized initial parameters (matrix of size (length(params), numwalkers))\n\n\nthinning\n : removal of any \nthinning\n realization\n\n\na\n :\n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n : final MCMC chain\n\n\nllhoodvals\n : log likelihoods of the final samples in the chain\n\n\n\n\nReference:\n\n\nGoodman, Jonathan, and Jonathan Weare. \"Ensemble samplers with affine invariance.\" Communications in applied mathematics and computational science 5.1 (2010): 65-80.\n\n\nsource", 
            "title": "AffineInvariantMCMC"
        }, 
        {
            "location": "/Modules/AffineInvariantMCMC/#affineinvariantmcmcjl", 
            "text": "Documentation for AffineInvariantMCMC.jl module (all functions):  #  AffineInvariantMCMC.flattenmcmcarray     Method .  Flatten MCMC arrays  source  #  AffineInvariantMCMC.sample     Function .  Bayesian sampling using Goodman   Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)  AffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1)  Arguments:   llhood  : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood())  numwalkers  : number of walkers  x0  : normalized initial parameters (matrix of size (length(params), numwalkers))  thinning  : removal of any  thinning  realization  a  :   Returns:   mcmcchain  : final MCMC chain  llhoodvals  : log likelihoods of the final samples in the chain   Reference:  Goodman, Jonathan, and Jonathan Weare. \"Ensemble samplers with affine invariance.\" Communications in applied mathematics and computational science 5.1 (2010): 65-80.  source", 
            "title": "AffineInvariantMCMC.jl"
        }, 
        {
            "location": "/Modules/GeostatInversion/", 
            "text": "GeostatInversion.jl\n\n\nDocumentation for GeostatInversion.jl module (all functions):\n\n\n#\n\n\nGeostatInversion.getxis\n \n \nFunction\n.\n\n\nGet the parameter subspace that will be explored during the inverse analysis\n\n\ngetxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing)\ngetxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing)\n\n\n\n\n\nArguments:\n\n\n\n\nsamplefield : a function that takes no arguments and returns a sample of the field\n\n\nQ : the covariance matrix of the parameter field\n\n\nnumfields : the number of fields that will be used to find the subspace\n\n\nnumxis : the dimension of the subspace\n\n\np : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)\n\n\nq : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)\n\n\nseed : an optional seed to use when doing the randomized matrix factorization\n\n\n\n\nsource\n\n\n#\n\n\nGeostatInversion.pcgadirect\n \n \nMethod\n.\n\n\nDirect principal component geostatistical approach\n\n\npcgadirect\n(\nforwardmodel\n::\nFunction\n,\n \ns0\n::\nVector\n,\n \nX\n::\nVector\n,\n \nxis\n::\nArray\n{\nArray{Float64,\n \n1\n}\n,\n \n1\n}\n,\n \nR\n,\n \ny\n::\nVector\n;\n \nmaxiters\n::\nInt\n=\n5\n,\n \ndelta\n::\nFloat64\n=\nsqrt\n(\neps\n(\nFloat64\n)),\n \nxtol\n::\nFloat64\n=\n1e-6\n,\n \ncallback\n=(\ns\n,\n \nobs_cal\n)\n-\nnothing\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nforwardmodel : param to obs map h(s)\n\n\ns0 : initial guess\n\n\nX : mean of parameter prior (replace with B*X drift matrix later for p\n1)\n\n\nxis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix\n\n\nR : covariance of measurement error (data misfit term)\n\n\ny : data vector\n\n\nmaxiters : maximum # of PCGA iterations\n\n\ndelta : the finite difference step size\n\n\nxtol : convergence tolerence for the parameters\n\n\ncallback : a function of the form \n(params, observations)-\n...\n that is called during each iteration\n\n\n\n\nsource\n\n\n#\n\n\nGeostatInversion.pcgalsqr\n \n \nMethod\n.\n\n\nIterative principal component geostatistical approach\n\n\npcgalsqr\n(\nforwardmodel\n::\nFunction\n,\n \ns0\n::\nVector\n,\n \nX\n::\nVector\n,\n \nxis\n::\nArray\n{\nArray{Float64,\n \n1\n}\n,\n \n1\n}\n,\n \nR\n,\n \ny\n::\nVector\n;\n \nmaxiters\n::\nInt\n=\n5\n,\n \ndelta\n::\nFloat64\n=\nsqrt\n(\neps\n(\nFloat64\n)),\n \nxtol\n::\nFloat64\n=\n1e-6\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nforwardmodel : param to obs map h(s)\n\n\ns0 : initial guess\n\n\nX : mean of parameter prior (replace with B*X drift matrix later for p\n1)\n\n\nxis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix\n\n\nR : covariance of measurement error (data misfit term)\n\n\ny : data vector\n\n\nmaxiters : maximum # of PCGA iterations\n\n\ndelta : the finite difference step size\n\n\nxtol : convergence tolerence for the parameters\n\n\n\n\nsource\n\n\n#\n\n\nGeostatInversion.rga\n \n \nMethod\n.\n\n\nRandomized (principal component) geostatistical approach\n\n\nExample:\n\n\nfunction\n \nrga\n(\nforwardmodel\n::\nFunction\n,\n \ns0\n::\nVector\n,\n \nX\n::\nVector\n,\n \nxis\n::\nArray\n{\nArray\n{\nFloat64\n,\n \n1\n},\n \n1\n},\n \nR\n,\n \ny\n::\nVector\n,\n \nS\n;\n \nmaxiters\n::\nInt\n=\n5\n,\n \ndelta\n::\nFloat64\n=\nsqrt\n(\neps\n(\nFloat64\n)),\n \nxtol\n::\nFloat64\n=\n1\ne\n-\n6\n,\n \npcgafunc\n=\npcgadirect\n,\n \ncallback\n=\n(\ns\n,\n \nobs_cal\n)\n-\nnothing\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nforwardmodel : param to obs map h(s)\n\n\ns0 : initial guess\n\n\nX : mean of parameter prior (replace with B*X drift matrix later for p\n1)\n\n\nxis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix\n\n\nR : covariance of measurement error (data misfit term)\n\n\ny : data vector\n\n\nS : sketching matrix\n\n\nmaxiters : maximum # of PCGA iterations\n\n\ndelta : the finite difference step size\n\n\nxtol : convergence tolerance for the parameters\n\n\ncallback : a function of the form \n(params, observations)-\n...\n that is called during each iteration\n\n\n\n\nsource\n\n\n\n\nModule GeostatInversion.FDDerivatives\n\n\nDocumentation for GeostatInversion.FDDerivatives module (all functions):\n\n\n#\n\n\nGeostatInversion.FDDerivatives.makegradient\n \n \nFunction\n.\n\n\nCreate Gradient function\n\n\nsource\n\n\n#\n\n\nGeostatInversion.FDDerivatives.makejacobian\n \n \nFunction\n.\n\n\nCreate Jacobian function\n\n\nsource\n\n\n\n\nModule GeostatInversion.RandMatFact\n\n\nDocumentation for GeostatInversion.RandMatFact module (all functions):\n\n\n#\n\n\nGeostatInversion.RandMatFact.randsvd\n \n \nMethod\n.\n\n\nRandom SVD based on algorithm 5.1 from Halko et al.\n\n\nsource\n\n\n\n\nModule GeostatInversion.FFTRF\n\n\nDocumentation for GeostatInversion.FFTRF module (all functions):\n\n\n#\n\n\nGeostatInversion.FFTRF.reducek\n \n \nMethod\n.\n\n\nReduce k\n\n\nsource", 
            "title": "GeostatInversion"
        }, 
        {
            "location": "/Modules/GeostatInversion/#geostatinversionjl", 
            "text": "Documentation for GeostatInversion.jl module (all functions):  #  GeostatInversion.getxis     Function .  Get the parameter subspace that will be explored during the inverse analysis  getxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing)\ngetxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing)  Arguments:   samplefield : a function that takes no arguments and returns a sample of the field  Q : the covariance matrix of the parameter field  numfields : the number of fields that will be used to find the subspace  numxis : the dimension of the subspace  p : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)  q : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)  seed : an optional seed to use when doing the randomized matrix factorization   source  #  GeostatInversion.pcgadirect     Method .  Direct principal component geostatistical approach  pcgadirect ( forwardmodel :: Function ,   s0 :: Vector ,   X :: Vector ,   xis :: Array { Array{Float64,   1 } ,   1 } ,   R ,   y :: Vector ;   maxiters :: Int = 5 ,   delta :: Float64 = sqrt ( eps ( Float64 )),   xtol :: Float64 = 1e-6 ,   callback =( s ,   obs_cal ) - nothing )   Arguments:   forwardmodel : param to obs map h(s)  s0 : initial guess  X : mean of parameter prior (replace with B*X drift matrix later for p 1)  xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix  R : covariance of measurement error (data misfit term)  y : data vector  maxiters : maximum # of PCGA iterations  delta : the finite difference step size  xtol : convergence tolerence for the parameters  callback : a function of the form  (params, observations)- ...  that is called during each iteration   source  #  GeostatInversion.pcgalsqr     Method .  Iterative principal component geostatistical approach  pcgalsqr ( forwardmodel :: Function ,   s0 :: Vector ,   X :: Vector ,   xis :: Array { Array{Float64,   1 } ,   1 } ,   R ,   y :: Vector ;   maxiters :: Int = 5 ,   delta :: Float64 = sqrt ( eps ( Float64 )),   xtol :: Float64 = 1e-6 )   Arguments:   forwardmodel : param to obs map h(s)  s0 : initial guess  X : mean of parameter prior (replace with B*X drift matrix later for p 1)  xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix  R : covariance of measurement error (data misfit term)  y : data vector  maxiters : maximum # of PCGA iterations  delta : the finite difference step size  xtol : convergence tolerence for the parameters   source  #  GeostatInversion.rga     Method .  Randomized (principal component) geostatistical approach  Example:  function   rga ( forwardmodel :: Function ,   s0 :: Vector ,   X :: Vector ,   xis :: Array { Array { Float64 ,   1 },   1 },   R ,   y :: Vector ,   S ;   maxiters :: Int = 5 ,   delta :: Float64 = sqrt ( eps ( Float64 )),   xtol :: Float64 = 1 e - 6 ,   pcgafunc = pcgadirect ,   callback = ( s ,   obs_cal ) - nothing )   Arguments:   forwardmodel : param to obs map h(s)  s0 : initial guess  X : mean of parameter prior (replace with B*X drift matrix later for p 1)  xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix  R : covariance of measurement error (data misfit term)  y : data vector  S : sketching matrix  maxiters : maximum # of PCGA iterations  delta : the finite difference step size  xtol : convergence tolerance for the parameters  callback : a function of the form  (params, observations)- ...  that is called during each iteration   source", 
            "title": "GeostatInversion.jl"
        }, 
        {
            "location": "/Modules/GeostatInversion/#module-geostatinversionfdderivatives", 
            "text": "Documentation for GeostatInversion.FDDerivatives module (all functions):  #  GeostatInversion.FDDerivatives.makegradient     Function .  Create Gradient function  source  #  GeostatInversion.FDDerivatives.makejacobian     Function .  Create Jacobian function  source", 
            "title": "Module GeostatInversion.FDDerivatives"
        }, 
        {
            "location": "/Modules/GeostatInversion/#module-geostatinversionrandmatfact", 
            "text": "Documentation for GeostatInversion.RandMatFact module (all functions):  #  GeostatInversion.RandMatFact.randsvd     Method .  Random SVD based on algorithm 5.1 from Halko et al.  source", 
            "title": "Module GeostatInversion.RandMatFact"
        }, 
        {
            "location": "/Modules/GeostatInversion/#module-geostatinversionfftrf", 
            "text": "Documentation for GeostatInversion.FFTRF module (all functions):  #  GeostatInversion.FFTRF.reducek     Method .  Reduce k  source", 
            "title": "Module GeostatInversion.FFTRF"
        }, 
        {
            "location": "/Modules/ReusableFunctions/", 
            "text": "ReusableFunctions.jl\n\n\nDocumentation for ReusableFunctions.jl module (all functions):\n\n\n#\n\n\nReusableFunctions.checkhashfilename\n \n \nMethod\n.\n\n\nCheck if a file with a filename based on hash exists\n\n\nsource\n\n\n#\n\n\nReusableFunctions.gethashfilename\n \n \nMethod\n.\n\n\nDefine a filename based on hash\n\n\nsource\n\n\n#\n\n\nReusableFunctions.loadresultfile\n \n \nMethod\n.\n\n\nLoad JLD result file\n\n\nsource\n\n\n#\n\n\nReusableFunctions.maker3function\n \n \nMethod\n.\n\n\nMake a reusable function expecting both regular and keyword arguments\n\n\nsource\n\n\n#\n\n\nReusableFunctions.quietoff\n \n \nMethod\n.\n\n\nMake ReusableFunctions not quiet\n\n\nsource\n\n\n#\n\n\nReusableFunctions.quieton\n \n \nMethod\n.\n\n\nMake ReusableFunctions quiet\n\n\nsource\n\n\n#\n\n\nReusableFunctions.resetcomputes\n \n \nMethod\n.\n\n\nReset computes counter\n\n\nsource\n\n\n#\n\n\nReusableFunctions.resetrestarts\n \n \nMethod\n.\n\n\nReset restarts counter\n\n\nsource\n\n\n#\n\n\nReusableFunctions.saveresultfile\n \n \nMethod\n.\n\n\nSave JLD result file\n\n\nsource", 
            "title": "ReusableFunctions"
        }, 
        {
            "location": "/Modules/ReusableFunctions/#reusablefunctionsjl", 
            "text": "Documentation for ReusableFunctions.jl module (all functions):  #  ReusableFunctions.checkhashfilename     Method .  Check if a file with a filename based on hash exists  source  #  ReusableFunctions.gethashfilename     Method .  Define a filename based on hash  source  #  ReusableFunctions.loadresultfile     Method .  Load JLD result file  source  #  ReusableFunctions.maker3function     Method .  Make a reusable function expecting both regular and keyword arguments  source  #  ReusableFunctions.quietoff     Method .  Make ReusableFunctions not quiet  source  #  ReusableFunctions.quieton     Method .  Make ReusableFunctions quiet  source  #  ReusableFunctions.resetcomputes     Method .  Reset computes counter  source  #  ReusableFunctions.resetrestarts     Method .  Reset restarts counter  source  #  ReusableFunctions.saveresultfile     Method .  Save JLD result file  source", 
            "title": "ReusableFunctions.jl"
        }, 
        {
            "location": "/Modules/MetaProgTools/", 
            "text": "MetaProgTools.jl\n\n\nDocumentation for MetaProgTools.jl module (all functions):\n\n\n#\n\n\nMetaProgTools.getsymbols\n \n \nMethod\n.\n\n\nGet symbols\n\n\nsource\n\n\n#\n\n\nMetaProgTools.in\n \n \nMethod\n.\n\n\nFind a needle in a haystack\n\n\nsource\n\n\n#\n\n\nMetaProgTools.populateexpression\n \n \nMethod\n.\n\n\nPopulate Expression\n\n\nsource\n\n\n#\n\n\nMetaProgTools.replacesymbol\n \n \nMethod\n.\n\n\nReplace Symbol\n\n\nsource", 
            "title": "MetaProgTools"
        }, 
        {
            "location": "/Modules/MetaProgTools/#metaprogtoolsjl", 
            "text": "Documentation for MetaProgTools.jl module (all functions):  #  MetaProgTools.getsymbols     Method .  Get symbols  source  #  MetaProgTools.in     Method .  Find a needle in a haystack  source  #  MetaProgTools.populateexpression     Method .  Populate Expression  source  #  MetaProgTools.replacesymbol     Method .  Replace Symbol  source", 
            "title": "MetaProgTools.jl"
        }, 
        {
            "location": "/Modules/RobustPmap/", 
            "text": "RobustPmap.jl\n\n\nDocumentation for RobustPmap.jl module (all functions):\n\n\n#\n\n\nRobustPmap.checkexceptions\n \n \nFunction\n.\n\n\nCheck for type exceptions\n\n\nsource\n\n\n#\n\n\nRobustPmap.crpmap\n \n \nMethod\n.\n\n\nRobust pmap call with checkpoints\n\n\nsource\n\n\n#\n\n\nRobustPmap.rpmap\n \n \nMethod\n.\n\n\nRobust pmap call\n\n\nsource", 
            "title": "RobustPmap"
        }, 
        {
            "location": "/Modules/RobustPmap/#robustpmapjl", 
            "text": "Documentation for RobustPmap.jl module (all functions):  #  RobustPmap.checkexceptions     Function .  Check for type exceptions  source  #  RobustPmap.crpmap     Method .  Robust pmap call with checkpoints  source  #  RobustPmap.rpmap     Method .  Robust pmap call  source", 
            "title": "RobustPmap.jl"
        }, 
        {
            "location": "/Modules/SVR/", 
            "text": "SVR.jl\n\n\nDocumentation for SVR.jl module (all functions):\n\n\n#\n\n\nSVR.freemodel\n \n \nMethod\n.\n\n\nFree a libSVM model\n\n\nsource\n\n\n#\n\n\nSVR.loadmodel\n \n \nMethod\n.\n\n\nLoad a libSVM model\n\n\nsource\n\n\n#\n\n\nSVR.predict\n \n \nMethod\n.\n\n\nPredict based on a libSVM model\n\n\nsource\n\n\n#\n\n\nSVR.readlibsvmfile\n \n \nMethod\n.\n\n\nRead a libSVM file\n\n\nsource\n\n\n#\n\n\nSVR.savemodel\n \n \nMethod\n.\n\n\nSave a libSVM model\n\n\nsource\n\n\n#\n\n\nSVR.train\n \n \nMethod\n.\n\n\nTrain based on a libSVM model\n\n\nsource", 
            "title": "SVR"
        }, 
        {
            "location": "/Modules/SVR/#svrjl", 
            "text": "Documentation for SVR.jl module (all functions):  #  SVR.freemodel     Method .  Free a libSVM model  source  #  SVR.loadmodel     Method .  Load a libSVM model  source  #  SVR.predict     Method .  Predict based on a libSVM model  source  #  SVR.readlibsvmfile     Method .  Read a libSVM file  source  #  SVR.savemodel     Method .  Save a libSVM model  source  #  SVR.train     Method .  Train based on a libSVM model  source", 
            "title": "SVR.jl"
        }, 
        {
            "location": "/acknowledgments/", 
            "text": "ACKNOWLEDGMENTS\n\n\nMADS development has been supported by:\n\n\n\n\nLos Alamos National Laboratory Environmental Programs (LANL-ADEP)\n\n\nLos Alamos National Laboratory Exploratory Research (LANL-ER)\n\n\nDepartment of Energy (DOE) DiaMonD project: An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions", 
            "title": "Acknowledgments"
        }, 
        {
            "location": "/acknowledgments/#acknowledgments", 
            "text": "MADS development has been supported by:   Los Alamos National Laboratory Environmental Programs (LANL-ADEP)  Los Alamos National Laboratory Exploratory Research (LANL-ER)  Department of Energy (DOE) DiaMonD project: An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions", 
            "title": "ACKNOWLEDGMENTS"
        }, 
        {
            "location": "/copying/", 
            "text": "Licensing: GPLv3: http://www.gnu.org/licenses/gpl-3.0.html\n\n\nCopyright 2016.  Los Alamos National Security, LLC.  All rights reserved.\n\n\nCopyright 2016.  Los Alamos National Security, LLC. This material was produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), which is operated by Los Alamos National Security, LLC for the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative works, such modified software should be clearly marked, so as not to confuse it with the version available from LANL.\n\n\nAdditionally, this program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. Accordingly, this program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n\nLA-CC-15-080; Copyright Number Assigned: C16008", 
            "title": "License"
        }
    ]
}
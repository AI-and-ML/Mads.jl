{
    "docs": [
        {
            "location": "/", 
            "text": "MADS (Model Analysis \n Decision Support)\n\n\nMADS is an integrated open-source high-performance computational (HPC) framework in \nJulia\n.\nMADS can execute a wide range of data- and model-based analyses:\n\n\n\n\nSensitivity Analysis\n\n\nParameter Estimation\n\n\nModel Inversion and Calibration\n\n\nUncertainty Quantification\n\n\nModel Selection and Model Averaging\n\n\nModel Reduction and Surrogate Modeling\n\n\nMachine Learning and Blind Source Separation\n\n\nDecision Analysis and Support\n\n\n\n\nMADS has been tested to perform HPC simulations on a wide-range multi-processor clusters and parallel enviromentls (Moab, Slurm, etc.).\nMADS utilizes adaptive rules and techniques which allows the analyses to be performed with a minimum user input.\nThe code provides a series of alternative algorithms to execute each type of data- and model-based analyses.\n\n\nFor additional information:\n\n\n\n\nweb:\n\n\nmads.lanl.gov\n\n\nmadsc.lanl.gov\n (C version of MADS)\n\n\n\n\n\n\ndocumentation:\n\n\nreadthedocs\n\n\ngithub\n\n\nmadsjulia.lanl.gov\n\n\n\n\n\n\nrepos:\n\n\ngithub\n\n\ngitlab\n\n\n\n\n\n\ngit:\n\n\ngit clone git@github.com:madsjulia/Mads.jl\n\n\ngit clone git@gitlab.com:mads/Mads.jl\n\n\n\n\n\n\nemail: \nmads@lanl.gov\n\n\n\n\nBuilds \n Tests\n\n\nMads Build \n Test Status @ JuliaLang.org\n\n\n\n\nMads Build \n Test Status @ Travis Continuous Integration (CI) service (OS X \n linux)\n\n\n\n\nCoverage of the Build-in Mads Tests\n\n\n\n\nLA-CC-15-080", 
            "title": "Home"
        }, 
        {
            "location": "/#mads-model-analysis-decision-support", 
            "text": "MADS is an integrated open-source high-performance computational (HPC) framework in  Julia .\nMADS can execute a wide range of data- and model-based analyses:   Sensitivity Analysis  Parameter Estimation  Model Inversion and Calibration  Uncertainty Quantification  Model Selection and Model Averaging  Model Reduction and Surrogate Modeling  Machine Learning and Blind Source Separation  Decision Analysis and Support   MADS has been tested to perform HPC simulations on a wide-range multi-processor clusters and parallel enviromentls (Moab, Slurm, etc.).\nMADS utilizes adaptive rules and techniques which allows the analyses to be performed with a minimum user input.\nThe code provides a series of alternative algorithms to execute each type of data- and model-based analyses.  For additional information:   web:  mads.lanl.gov  madsc.lanl.gov  (C version of MADS)    documentation:  readthedocs  github  madsjulia.lanl.gov    repos:  github  gitlab    git:  git clone git@github.com:madsjulia/Mads.jl  git clone git@gitlab.com:mads/Mads.jl    email:  mads@lanl.gov", 
            "title": "MADS (Model Analysis &amp; Decision Support)"
        }, 
        {
            "location": "/#builds-tests", 
            "text": "Mads Build   Test Status @ JuliaLang.org   Mads Build   Test Status @ Travis Continuous Integration (CI) service (OS X   linux)   Coverage of the Build-in Mads Tests   LA-CC-15-080", 
            "title": "Builds &amp; Tests"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nAfter starting Julia, execute:\n\n\nPkg\n.\nadd\n(\nMads\n)\n\n\n\n\n\n\nInstallation of MADS without PYTHON\n\n\nMADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable:\n\n\n(bash)\n\n\nexport\n \nMADS_NO_PYTHON\n=\n\n\n\n\n\n\nor\n\n\n(tcsh)\n\n\nsetenv \nMADS_NO_PYTHON \n\n\n\n\n\n\nInstallation of MADS without plotting modules\n\n\nMADS uses Gadfly and matplotlib for plotting. To avoid using these libraries set the following environmental variable:\n\n\n(bash)\n\n\nexport\n \nMADS_NO_PLOT\n=\n\n\n\n\n\n\nor\n\n\n(tcsh)\n\n\nsetenv \nMADS_NO_PLOT \n\n\n\n\n\n\nInstallation of MADS behind a firewall\n\n\nJulia uses git for package management. Add in the \n.gitconfig\n file in your home directory:\n\n\n[url \nhttps://\n]\n\n        \ninsteadOf\n \n=\n \ngit://\n\n\n\n\n\n\nor execute:\n\n\ngit config --global url.\nhttps://\n.insteadOf git://\n\n\n\n\n\nSet proxies:\n\n\nexport\n \nftp_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nrsync_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nhttp_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nhttps_proxy\n=\nhttp://proxyout.\nyour_site\n:8080\n\nexport\n \nno_proxy\n=\n.\nyour_site\n\n\n\n\n\n\nFor example, if you are doing this at LANL, you will need to execute the\nfollowing lines in your bash command-line environment:\n\n\nexport\n \nftp_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nrsync_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nhttp_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nhttps_proxy\n=\nhttp://proxyout.lanl.gov:8080\n\nexport\n \nno_proxy\n=\n.lanl.gov", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "After starting Julia, execute:  Pkg . add ( Mads )", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation-of-mads-without-python", 
            "text": "MADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable:  (bash)  export   MADS_NO_PYTHON =   or  (tcsh)  setenv  MADS_NO_PYTHON", 
            "title": "Installation of MADS without PYTHON"
        }, 
        {
            "location": "/installation/#installation-of-mads-without-plotting-modules", 
            "text": "MADS uses Gadfly and matplotlib for plotting. To avoid using these libraries set the following environmental variable:  (bash)  export   MADS_NO_PLOT =   or  (tcsh)  setenv  MADS_NO_PLOT", 
            "title": "Installation of MADS without plotting modules"
        }, 
        {
            "location": "/installation/#installation-of-mads-behind-a-firewall", 
            "text": "Julia uses git for package management. Add in the  .gitconfig  file in your home directory:  [url  https:// ] \n         insteadOf   =   git://   or execute:  git config --global url. https:// .insteadOf git://  Set proxies:  export   ftp_proxy = http://proxyout. your_site :8080 export   rsync_proxy = http://proxyout. your_site :8080 export   http_proxy = http://proxyout. your_site :8080 export   https_proxy = http://proxyout. your_site :8080 export   no_proxy = . your_site   For example, if you are doing this at LANL, you will need to execute the\nfollowing lines in your bash command-line environment:  export   ftp_proxy = http://proxyout.lanl.gov:8080 export   rsync_proxy = http://proxyout.lanl.gov:8080 export   http_proxy = http://proxyout.lanl.gov:8080 export   https_proxy = http://proxyout.lanl.gov:8080 export   no_proxy = .lanl.gov", 
            "title": "Installation of MADS behind a firewall"
        }, 
        {
            "location": "/getting_started/", 
            "text": "MADS Getting Started\n\n\nInstall \nJulia\n and \nMADS\n (\nPkg.add(\"Mads\")\n) using the installation instruction in the \nREADME.md\n (\nsee also\n).\nIf you are not familiar with Julia, checkout \nJulia By Example\n, \nlearn X in Y minutes\n, \nJulia Express\n).\nYou can also explore the Julia examples in the \nexamples/learn_julia\n directory of the \nMads.jl\n repository (\ngithub\n).\n\n\nTo start using MADS, initiate the Julia REPL and execute \nimport Mads\n to load MADS modules.\n\n\nAll the MADS analyses are based on a MADS problem dictionary that defines the problem.\n\n\nThe MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:\n\n\nmadsdata = Mads.loadmadsfile(\"\ninput_file_name\n.mads\")\n\n\nFor example, you can execute:\n\n\nmadsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")\n\n\nThe file \ninternal-linear.mads\n is located in \nexamples/getting_started\n directory of the \nMads.jl\n repository.\n\n\nTypically, the MADS problem dictionary includes several classes:\n\n\n\n\nParameters\n : lists of model parameters\n\n\nObservations\n : lists of model observations\n\n\nModel\n : defines a model to predict the model observations using the model parameters\n\n\n\n\nThe file \ninternal-linear.mads\n looks like this:\n\n\nParameters:\n- a : { init:  1, dist: \nUniform(-10, 10)\n }\n- b : { init: -1, dist: \nUniform(-10, 10)\n }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl\n\n\n\n\n\nIn this case, there are two parameters, \na\n and \nb\n, defining a linear model, \nf(t) = a * t + b\n, described in \ninternal-linearmodel.jl\n.\n\n\nThe Julia file \ninternal-linearmodel.jl\n is specified under \nModel\n in the MADS problem dictionary above.\n\n\nExecute:\n\n\nMads.showallparameters(madsdata)\n to show all the parameters.\n\n\nMads.showobservations(madsdata)\n to list all the observations.\n\n\nMADS can perform various types of analyses:\n\n\n\n\nMads.forward(madsdata)\n will execute forward model simulation based on the initial parameter values.\n\n\nsaresults = Mads.efast(madsdata)\n will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.\n\n\noptparam, iaresults = Mads.calibrate(madsdata)\n will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.\n\n\nMads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values\noptparam` estimated by the inverse analyses above.\n\n\n\n\nMore complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the \nexamples\n subdirectories of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Command-line execution\n\n\nMADS can be executed at the command line using \nmadsjl.jl\n. Link this file in a directory in your search \nPATH\n.\n\n\nFor example, using \nmadsjl.jl\n you can execute:\n\n\nmadsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast\n\n\n\n\n\nin the \nexamples/getting_started\n subdirectory of the \nMads.jl\n repository (\ngithub\n).\n\n\nMADS Documentation\n\n\nAll the available MADS modules and functions are described at \ngithub\n and \nreadthedocs\n\n\nMADS Licensing \n Copyright\n\n\nCheck the files \nCOPYING\n and \nLICENSE\n to see the licensing \n copyright information.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#mads-getting-started", 
            "text": "Install  Julia  and  MADS  ( Pkg.add(\"Mads\") ) using the installation instruction in the  README.md  ( see also ).\nIf you are not familiar with Julia, checkout  Julia By Example ,  learn X in Y minutes ,  Julia Express ).\nYou can also explore the Julia examples in the  examples/learn_julia  directory of the  Mads.jl  repository ( github ).  To start using MADS, initiate the Julia REPL and execute  import Mads  to load MADS modules.  All the MADS analyses are based on a MADS problem dictionary that defines the problem.  The MADS problem dictionary is typically loaded from a YAML MADS input file.\nThe loading of a MADS file can be executed as follows:  madsdata = Mads.loadmadsfile(\" input_file_name .mads\")  For example, you can execute:  madsdata = Mads.loadmadsfile(Mads.madsdir * \"/../examples/getting_started/internal-linear.mads\")  The file  internal-linear.mads  is located in  examples/getting_started  directory of the  Mads.jl  repository.  Typically, the MADS problem dictionary includes several classes:   Parameters  : lists of model parameters  Observations  : lists of model observations  Model  : defines a model to predict the model observations using the model parameters   The file  internal-linear.mads  looks like this:  Parameters:\n- a : { init:  1, dist:  Uniform(-10, 10)  }\n- b : { init: -1, dist:  Uniform(-10, 10)  }\nObservations:\n- o1: { target: -3 }\n- o2: { target:  1 }\n- o3: { target:  5 }\n- o4: { target:  9 }\nModel: internal-linear.jl  In this case, there are two parameters,  a  and  b , defining a linear model,  f(t) = a * t + b , described in  internal-linearmodel.jl .  The Julia file  internal-linearmodel.jl  is specified under  Model  in the MADS problem dictionary above.  Execute:  Mads.showallparameters(madsdata)  to show all the parameters.  Mads.showobservations(madsdata)  to list all the observations.  MADS can perform various types of analyses:   Mads.forward(madsdata)  will execute forward model simulation based on the initial parameter values.  saresults = Mads.efast(madsdata)  will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary.  optparam, iaresults = Mads.calibrate(madsdata)  will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization.  Mads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values optparam` estimated by the inverse analyses above.   More complicated analyses will require additional information to be provided in the MADS problem dictionary.\nExamples are given in the  examples  subdirectories of the  Mads.jl  repository ( github ).", 
            "title": "MADS Getting Started"
        }, 
        {
            "location": "/getting_started/#mads-command-line-execution", 
            "text": "MADS can be executed at the command line using  madsjl.jl . Link this file in a directory in your search  PATH .  For example, using  madsjl.jl  you can execute:  madsjl.jl diff internal-linear.mads internal-parabola.mads\nmadsjl.jl internal-parabola.mads forward efast  in the  examples/getting_started  subdirectory of the  Mads.jl  repository ( github ).", 
            "title": "MADS Command-line execution"
        }, 
        {
            "location": "/getting_started/#mads-documentation", 
            "text": "All the available MADS modules and functions are described at  github  and  readthedocs", 
            "title": "MADS Documentation"
        }, 
        {
            "location": "/getting_started/#mads-licensing-copyright", 
            "text": "Check the files  COPYING  and  LICENSE  to see the licensing   copyright information.", 
            "title": "MADS Licensing &amp; Copyright"
        }, 
        {
            "location": "/Examples/setup/", 
            "text": "MADS examples\n\n\nIn Julia REPL, do the following commands:\n\n\nimport\n \nMads\n\n\n\n\n\n\nTo explore getting-started instructions, execute:\n\n\nMads\n.\nhelp\n()\n\n\n\n\n\n\nThere are various examples located in the \nexamples\n directory of the \nMads\n repository.\n\n\nFor example, execute\n\n\ninclude\n(\nMads\n.\nmadsdir\n \n*\n \n/../examples/contamination/contamination.jl\n)\n\n\n\n\n\n\nto perform various example analyses related to groundwater contaminant transport, or execute\n\n\ninclude\n(\nMads\n.\nmadsdir\n \n*\n \n/../examples/bigdt/bigdt.jl\n)\n\n\n\n\n\n\nto perform Bayesian Information Gap Decision Theory (BIG-DT) analysis.", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/setup/#mads-examples", 
            "text": "In Julia REPL, do the following commands:  import   Mads   To explore getting-started instructions, execute:  Mads . help ()   There are various examples located in the  examples  directory of the  Mads  repository.  For example, execute  include ( Mads . madsdir   *   /../examples/contamination/contamination.jl )   to perform various example analyses related to groundwater contaminant transport, or execute  include ( Mads . madsdir   *   /../examples/bigdt/bigdt.jl )   to perform Bayesian Information Gap Decision Theory (BIG-DT) analysis.", 
            "title": "MADS examples"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/", 
            "text": "Contaminant Source Termination\n\n\nAll the figures below are generated using \nexamples/bigdt/source_termination.jl\n.\n\n\nModel setup\n\n\n\n\n\n\n\n\nContaminant source (orange rectangle)\n\n\n\n\n\n\n3 monitoring wells\n\n\n\n\n\n\nWe know some of the properties of the source (location, shape, strength, release start time, etc.).\nWe know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015).\nWe do \nNOT\n know:\n\n\n\n\n\n\ngroundwater flow velocity\n\n\n\n\n\n\nlongitudinal dispersion of the plume\n\n\n\n\n\n\nInverse modeling can be used to estimate these parameters.\nHowever, there are uncertainties with the inverse model estimates.\nBecause of these uncertainties, we perform a decision analysis.\n\n\nUncertainties\n\n\nProbabilistic uncertainties\n\n\n\n\n\n\nprior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion)\n\n\n\n\n\n\nmeasurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights)\n\n\n\n\n\n\nposterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)\n\n\n\n\n\n\nNon-probabilistic uncertainties\n\n\n\n\n\n\nconceptual uncertainties in the applied model\n\n\n\n\n\n\nuncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.\n\n\n\n\n\n\nGoal\n\n\nFuture concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb\n\n\nScenarios\n\n\n\n\nTerminate the source in 2015 (now)\n\n\nTerminate the source in 2020 (in 5 years)\n\n\nTerminate the source in 2025 (in 10 years)\n\n\nTerminate the source in 2030 (in 15 years)\n\n\n\n\nTask\n\n\nEvaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.\n\n\nMethod\n\n\nBayesian Information Gap Decision Theory (BIG-DT).\n\n\n\n\nO'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089.\n\n\nGrasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80.\n\n\nO'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621.\n\n\nO'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.\n\n\n\n\nHorizon (level) of uncertainty\n\n\nHorizon (level) of uncertainty is a non-negative index that defines\n(1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and\n(2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation.\n\n\nThe likelihood functions differ in the variance.\nThe set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty.\nThe set of variances is\n\n\n$$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$\n\n\nwhere $\u03c3^2_0$ is the nominal variance (500; the nominal standard deviation $\u03c3_0$ is ~22) and $h$ is the horizon of uncertainty.\nAs the index increases, these sets become bigger, allowing for more possibilities.\n\n\nRobustness\n\n\nThe horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached\n\n\nResults\n\n\nFigures representing robustness of model predictions:\n\n\n(a) Complete robustness curves\n\n\n\n\n(b) Zoomed-in robustness curves\n\n\n\n\nDiscussion\n\n\nWe nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb.\nThis is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero.\nThe zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties.\n\n\nOn the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case.\nThe sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high.\nAnother possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25.\n\n\nHere we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure.\nIn this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030.\nAt this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness.\nHowever, it may not be enough to merit action in the short term.\n\n\nBased on the robustness of the model predictions the decision makers can decide the course of action.\nTheir decision can also rely on\n(1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and\n(2) financial constraints (e.g., costs associated with the source termination over different time frames).\n\n\nModel\n\n\nAnalytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl).\nThe contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the $x$ and $y$ axes; the contaminant is released in 1985.\n\n\nThe presented analyses required ~4,000 forward model runs (~1,000 per scenario).\nThe analysis took about 5 minutes in a serial mode using the Julia version of Mads.\nThe runs are independent and can be computed efficiently in parallel.", 
            "title": "Decision Analysis"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#contaminant-source-termination", 
            "text": "All the figures below are generated using  examples/bigdt/source_termination.jl .", 
            "title": "Contaminant Source Termination"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#model-setup", 
            "text": "Contaminant source (orange rectangle)    3 monitoring wells    We know some of the properties of the source (location, shape, strength, release start time, etc.).\nWe know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015).\nWe do  NOT  know:    groundwater flow velocity    longitudinal dispersion of the plume    Inverse modeling can be used to estimate these parameters.\nHowever, there are uncertainties with the inverse model estimates.\nBecause of these uncertainties, we perform a decision analysis.", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#uncertainties", 
            "text": "", 
            "title": "Uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#probabilistic-uncertainties", 
            "text": "prior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion)    measurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights)    posterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)", 
            "title": "Probabilistic uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#non-probabilistic-uncertainties", 
            "text": "conceptual uncertainties in the applied model    uncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.", 
            "title": "Non-probabilistic uncertainties"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#goal", 
            "text": "Future concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb", 
            "title": "Goal"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#scenarios", 
            "text": "Terminate the source in 2015 (now)  Terminate the source in 2020 (in 5 years)  Terminate the source in 2025 (in 10 years)  Terminate the source in 2030 (in 15 years)", 
            "title": "Scenarios"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#task", 
            "text": "Evaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.", 
            "title": "Task"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#method", 
            "text": "Bayesian Information Gap Decision Theory (BIG-DT).   O'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089.  Grasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80.  O'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621.  O'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.", 
            "title": "Method"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#horizon-level-of-uncertainty", 
            "text": "Horizon (level) of uncertainty is a non-negative index that defines\n(1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and\n(2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation.  The likelihood functions differ in the variance.\nThe set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty.\nThe set of variances is  $$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$  where $\u03c3^2_0$ is the nominal variance (500; the nominal standard deviation $\u03c3_0$ is ~22) and $h$ is the horizon of uncertainty.\nAs the index increases, these sets become bigger, allowing for more possibilities.", 
            "title": "Horizon (level) of uncertainty"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#robustness", 
            "text": "The horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached", 
            "title": "Robustness"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#results", 
            "text": "Figures representing robustness of model predictions:  (a) Complete robustness curves   (b) Zoomed-in robustness curves", 
            "title": "Results"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#discussion", 
            "text": "We nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb.\nThis is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero.\nThe zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties.  On the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case.\nThe sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high.\nAnother possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25.  Here we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure.\nIn this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030.\nAt this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness.\nHowever, it may not be enough to merit action in the short term.  Based on the robustness of the model predictions the decision makers can decide the course of action.\nTheir decision can also rely on\n(1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and\n(2) financial constraints (e.g., costs associated with the source termination over different time frames).", 
            "title": "Discussion"
        }, 
        {
            "location": "/Examples/bigdt/source_termination/#model", 
            "text": "Analytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl).\nThe contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the $x$ and $y$ axes; the contaminant is released in 1985.  The presented analyses required ~4,000 forward model runs (~1,000 per scenario).\nThe analysis took about 5 minutes in a serial mode using the Julia version of Mads.\nThe runs are independent and can be computed efficiently in parallel.", 
            "title": "Model"
        }, 
        {
            "location": "/Examples/infogap/", 
            "text": "Information Gap Analysis\n\n\nAll the figures below are generated using \nexamples/model_analysis/infogap.jl\n.\n\n\nSetup\n\n\n\n\n\n\n\n\nThere are 4 uncertain observations at times t = [1,2,3,4]\n\n\n\n\n\n\nThere are 4 possible models that can be applied to match the data\n\n\n\n\n\n\ny(t) = a * t + c\n\n\n\n\n\n\ny(t) = a * t^(1.1) + b * t + c\n\n\n\n\n\n\ny(t) = a * t^n + b * t + c\n\n\n\n\n\n\ny(t) = a * exp(t * n) + b * t + c\n\n\n\n\n\n\n\n\n\n\nThere are 4 unknown model parameters with uniform prior probability functions:\n\n\n\n\n\n\na = Uniform(-10, 10)\n\n\n\n\n\n\nb = Uniform(-10, 10)\n\n\n\n\n\n\nc = Uniform(-5, 5)\n\n\n\n\n\n\nn = Uniform(-3, 3)\n\n\n\n\n\n\n\n\n\n\nThe model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated\n\n\n\n\n\n\nThe horizon of information gap uncertainty \nh\n is applied to define the acceptable deviations in the 4 uncertain observations.\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t^(1.1) + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * t^n + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfogap in model \ny(t) = a * exp(t * n) + b * t + c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpportuneness and Robustness of the 4 models", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/infogap/#information-gap-analysis", 
            "text": "All the figures below are generated using  examples/model_analysis/infogap.jl .", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/infogap/#setup", 
            "text": "There are 4 uncertain observations at times t = [1,2,3,4]    There are 4 possible models that can be applied to match the data    y(t) = a * t + c    y(t) = a * t^(1.1) + b * t + c    y(t) = a * t^n + b * t + c    y(t) = a * exp(t * n) + b * t + c      There are 4 unknown model parameters with uniform prior probability functions:    a = Uniform(-10, 10)    b = Uniform(-10, 10)    c = Uniform(-5, 5)    n = Uniform(-3, 3)      The model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated    The horizon of information gap uncertainty  h  is applied to define the acceptable deviations in the 4 uncertain observations.", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-t11-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t^(1.1) + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-tn-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * t^n + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#infogap-in-model-yt-a-expt-n-b-t-c", 
            "text": "", 
            "title": "Infogap in model y(t) = a * exp(t * n) + b * t + c"
        }, 
        {
            "location": "/Examples/infogap/#opportuneness-and-robustness-of-the-4-models", 
            "text": "", 
            "title": "Opportuneness and Robustness of the 4 models"
        }, 
        {
            "location": "/Examples/bayesian_sampling/", 
            "text": "Bayesian Sampling\n\n\nAll the figures below are generated using \nexamples/bayesian_sampling/bayesian_sampling.jl\n.\n\n\nModel setup\n\n\n\n\n\n\n\n\nContaminant source (orange rectangle)\n\n\n\n\n\n\n3 monitoring wells\n\n\n\n\n\n\nPrior spaghetti plots\n\n\nSpaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells.\n\n\nJoint spaghetti plots\n\n\nAll model parameters are changed simultaneously within their prior uncertainty ranges.\n\n\n\n\nIndividual spaghetti plots\n\n\nA single model parameter is changed at a time.\n\n\nSource $x$ location\n\n\n\n\nSource $y$ location\n\n\n\n\nSource size along $x$ axis\n\n\n\n\nSource size along $y$ axis\n\n\n\n\nSource release time $t_0$\n\n\n\n\nSource termination time $t_1$\n\n\n\n\nModel calibration match\n\n\n\n\nBayesian sampling results\n\n\n\n\nPosterior spaghetti plots\n\n\nSpaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells.\n\n\nJoint spaghetti plots\n\n\nAll model parameters are changed simultaneously within their prior uncertainty ranges.\n\n\n\n\nIndividual spaghetti plots\n\n\nA single model parameter is changed at a time.\n\n\nNote that only the posterior uncertainties in the source release time ($t_0$)  and the source termination time ($t_1$) are producing large impact in the model predictions.\n\n\nSource $x$ location (all the 1000 model predictions are overlapping)\n\n\n\n\nSource $y$ location (all the 1000 model predictions are overlapping\n\n\n\n\nSource size along $x$ axis (all the 1000 model predictions are overlapping\n\n\n\n\nSource size along $y$ axis (all the 1000 model predictions are overlapping\n\n\n\n\nSource release time $t_0$\n\n\n\n\nSource termination time $t_1$", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#bayesian-sampling", 
            "text": "All the figures below are generated using  examples/bayesian_sampling/bayesian_sampling.jl .", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#model-setup", 
            "text": "Contaminant source (orange rectangle)    3 monitoring wells", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#prior-spaghetti-plots", 
            "text": "Spaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells.", 
            "title": "Prior spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#joint-spaghetti-plots", 
            "text": "All model parameters are changed simultaneously within their prior uncertainty ranges.", 
            "title": "Joint spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#individual-spaghetti-plots", 
            "text": "A single model parameter is changed at a time.  Source $x$ location   Source $y$ location   Source size along $x$ axis   Source size along $y$ axis   Source release time $t_0$   Source termination time $t_1$", 
            "title": "Individual spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#model-calibration-match", 
            "text": "", 
            "title": "Model calibration match"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#bayesian-sampling-results", 
            "text": "", 
            "title": "Bayesian sampling results"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#posterior-spaghetti-plots", 
            "text": "Spaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells.", 
            "title": "Posterior spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#joint-spaghetti-plots_1", 
            "text": "All model parameters are changed simultaneously within their prior uncertainty ranges.", 
            "title": "Joint spaghetti plots"
        }, 
        {
            "location": "/Examples/bayesian_sampling/#individual-spaghetti-plots_1", 
            "text": "A single model parameter is changed at a time.  Note that only the posterior uncertainties in the source release time ($t_0$)  and the source termination time ($t_1$) are producing large impact in the model predictions.  Source $x$ location (all the 1000 model predictions are overlapping)   Source $y$ location (all the 1000 model predictions are overlapping   Source size along $x$ axis (all the 1000 model predictions are overlapping   Source size along $y$ axis (all the 1000 model predictions are overlapping   Source release time $t_0$   Source termination time $t_1$", 
            "title": "Individual spaghetti plots"
        }, 
        {
            "location": "/Examples/blind_source_separation/", 
            "text": "Blind Source Separation\n\n\nFrequently there are several different physical phenomena or mechanisms (sources) than may can cause transients in the observed data.\n\n\nFor example, in the case of water-level (hydraulic pressure) data, these might me barometric pressure fluctuations, tidal effects, pumping effects, etc.\nIn the case of geochemical concentrations, these may represent a mixture of different groundwater types (sources) with different initial geochemical compositions.\n\n\nThe separation of the different signals observed in the data is important for conceptualization of the site conditions.\n\n\nBelow a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals.\n\n\nMore complicated Blind Source Separation (BSS) analyses can be found in:\n\n\nAlexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research, \ndoi: 0.1002/2013WR015037\n, 50.9, 7332-7347, 2014.\n\n\nAll the figures below are generated using \nexamples/blind_source_separation.jl\n. BSS can be performed using different methods. The examples below use the \nIpopt\n implementation in the \nJuMP\n Julia module.\n\n\nSources generated using sine functions and random noise\n\n\nOriginal sources (assumed unknown)\n\n\nLet us assume there are 3 unknown sources (physical processes/phenomena) causing transients in some observable state variable.\nLet us assume the transients associated with these 3 unknown sources look like this:\n\n\n\n\nMixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)\n\n\nLet us assume that the transients of the original unknown sources are observed as a mixture at 4 different monitoring locations (observation points).\nLet us assume that the mixtures looks like this:\n\n\n\n\nReconstructed (unmixed) original sources based on the observed data\n\n\nWe want to find the original unknown sources based on the observed mixtures above.\nBSS method in MADS allow us to do this.\nFrom the mixture at the 4 monitoring locations (observation points), we can reconstruct (unmix) original sources almost perfectly:\n\n\n\n\nSources generated using sine functions\n\n\nOriginal sources (assumed unknown)\n\n\n\n\nMixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)\n\n\n\n\nReconstructed (unmixed) sources based on the observed data\n\n\n\n\nSources generated using random noise\n\n\nOriginal sources (assumed unknown)\n\n\n\n\nMixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)\n\n\n\n\nReconstructed (unmixed) original sources based on the observed data", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/blind_source_separation/#blind-source-separation", 
            "text": "Frequently there are several different physical phenomena or mechanisms (sources) than may can cause transients in the observed data.  For example, in the case of water-level (hydraulic pressure) data, these might me barometric pressure fluctuations, tidal effects, pumping effects, etc.\nIn the case of geochemical concentrations, these may represent a mixture of different groundwater types (sources) with different initial geochemical compositions.  The separation of the different signals observed in the data is important for conceptualization of the site conditions.  Below a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals.  More complicated Blind Source Separation (BSS) analyses can be found in:  Alexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research,  doi: 0.1002/2013WR015037 , 50.9, 7332-7347, 2014.  All the figures below are generated using  examples/blind_source_separation.jl . BSS can be performed using different methods. The examples below use the  Ipopt  implementation in the  JuMP  Julia module.", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-sine-functions-and-random-noise", 
            "text": "", 
            "title": "Sources generated using sine functions and random noise"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown", 
            "text": "Let us assume there are 3 unknown sources (physical processes/phenomena) causing transients in some observable state variable.\nLet us assume the transients associated with these 3 unknown sources look like this:", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-4-different-monitoring-locations-representing-4-different-signals-or-observation-streams", 
            "text": "Let us assume that the transients of the original unknown sources are observed as a mixture at 4 different monitoring locations (observation points).\nLet us assume that the mixtures looks like this:", 
            "title": "Mixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-sources-based-on-the-observed-data", 
            "text": "We want to find the original unknown sources based on the observed mixtures above.\nBSS method in MADS allow us to do this.\nFrom the mixture at the 4 monitoring locations (observation points), we can reconstruct (unmix) original sources almost perfectly:", 
            "title": "Reconstructed (unmixed) original sources based on the observed data"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-sine-functions", 
            "text": "", 
            "title": "Sources generated using sine functions"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown_1", 
            "text": "", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-4-different-monitoring-locations-representing-4-different-signals-or-observation-streams_1", 
            "text": "", 
            "title": "Mixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-sources-based-on-the-observed-data", 
            "text": "", 
            "title": "Reconstructed (unmixed) sources based on the observed data"
        }, 
        {
            "location": "/Examples/blind_source_separation/#sources-generated-using-random-noise", 
            "text": "", 
            "title": "Sources generated using random noise"
        }, 
        {
            "location": "/Examples/blind_source_separation/#original-sources-assumed-unknown_2", 
            "text": "", 
            "title": "Original sources (assumed unknown)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#mixed-sources-observed-at-4-different-monitoring-locations-representing-4-different-signals-or-observation-streams_2", 
            "text": "", 
            "title": "Mixed sources observed at 4 different monitoring locations (representing 4 different signals or observation streams)"
        }, 
        {
            "location": "/Examples/blind_source_separation/#reconstructed-unmixed-original-sources-based-on-the-observed-data_1", 
            "text": "", 
            "title": "Reconstructed (unmixed) original sources based on the observed data"
        }, 
        {
            "location": "/Examples/contamination/", 
            "text": "Analysis of contaminant transport in an aquifer\n\n\nAll the figures below are generated using \nexamples/contamination/contamination.jl\n.\n\n\nModel setup\n\n\n\n\nThere are 20 monitoring wells.\nEach well has 2 measurement ports: shallow (3 m below the water table labeled \na\n) and deep (33 m below the water table labeled \nb\n).\nContaminant concentrations are observed for 50 years at each well.\nThe contaminant transport is solved using the \nAnasol\n package in Mads.\n\n\nUnknown model parameters\n\n\n\n\nStart time of contaminant release $t_0$\n\n\nEnd time of contaminant release $t_1$\n\n\nAdvective pore velocity $v$\n\n\n\n\nReduced model setup\n\n\nAnalysis of the data from only 2 monitoring locations: \nw13a\n and \nw20a\n.\n\n\n\n\nExample model solution\n\n\n\n\nModel parameter values:\n\n\n\n\n$t_0 = 4$ \n\n\n$t_1 = 15$\n\n\n$v = 40$\n\n\n\n\nModel calibration\n\n\nA calibration match between observations and model predictions obtained by model inversion:\n\n\n\n\nPrior parameter uncertainties\n\n\nProbabilistic distributions of the prior parameter uncertainties are:\n\n\n\n\n$t_0$ = Uniform(0, 10)\n\n\n$t_1$ = Uniform(5, 40)\n\n\n$v$ = LogUniform(0.1, 200)\n\n\n\n\nSpaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data):\n\n\n\n\nThe observation data are plotted as red dots.\n\n\nBayesian global sensitivity analysis\n\n\nHistograms and scatter plots of the Bayesian MCMC results:\n\n\n\n\nPosterior parameter uncertainties\n\n\nSpaghetti plots representing the posterior uncertainties:\n\n\n\n\nNote that the parameter uncertainties are constrained by the observation data.\nThe observation data are plotted as red dots.\n\n\neFAST global sensitivity analysis\n\n\neFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli \n Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999). \n\n\nTotal and main sensitivity indices over time for monitoring wells w13a and w20a:\n\n\n\n\n\n\n\n\n\n\nThe differences between main and total effect estimates suggest correlations among the parameters.\n\n\nSaltelli's global sensitivity analysis\n\n\nClassical Saltelli's (Sobol's) global sensitivity analysis.\n\n\nTotal and main sensitivity indices over time for monitoring wells w13a and w20a:\n\n\n\n\n\n\n\n\n\n\nThere are differences between eFAST \n Saltelli estimates. The eFAST results should be considered more reliable.", 
            "title": "Contaminant Transport"
        }, 
        {
            "location": "/Examples/contamination/#analysis-of-contaminant-transport-in-an-aquifer", 
            "text": "All the figures below are generated using  examples/contamination/contamination.jl .", 
            "title": "Analysis of contaminant transport in an aquifer"
        }, 
        {
            "location": "/Examples/contamination/#model-setup", 
            "text": "There are 20 monitoring wells.\nEach well has 2 measurement ports: shallow (3 m below the water table labeled  a ) and deep (33 m below the water table labeled  b ).\nContaminant concentrations are observed for 50 years at each well.\nThe contaminant transport is solved using the  Anasol  package in Mads.", 
            "title": "Model setup"
        }, 
        {
            "location": "/Examples/contamination/#unknown-model-parameters", 
            "text": "Start time of contaminant release $t_0$  End time of contaminant release $t_1$  Advective pore velocity $v$", 
            "title": "Unknown model parameters"
        }, 
        {
            "location": "/Examples/contamination/#reduced-model-setup", 
            "text": "Analysis of the data from only 2 monitoring locations:  w13a  and  w20a .", 
            "title": "Reduced model setup"
        }, 
        {
            "location": "/Examples/contamination/#example-model-solution", 
            "text": "Model parameter values:   $t_0 = 4$   $t_1 = 15$  $v = 40$", 
            "title": "Example model solution"
        }, 
        {
            "location": "/Examples/contamination/#model-calibration", 
            "text": "A calibration match between observations and model predictions obtained by model inversion:", 
            "title": "Model calibration"
        }, 
        {
            "location": "/Examples/contamination/#prior-parameter-uncertainties", 
            "text": "Probabilistic distributions of the prior parameter uncertainties are:   $t_0$ = Uniform(0, 10)  $t_1$ = Uniform(5, 40)  $v$ = LogUniform(0.1, 200)   Spaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data):   The observation data are plotted as red dots.", 
            "title": "Prior parameter uncertainties"
        }, 
        {
            "location": "/Examples/contamination/#bayesian-global-sensitivity-analysis", 
            "text": "Histograms and scatter plots of the Bayesian MCMC results:", 
            "title": "Bayesian global sensitivity analysis"
        }, 
        {
            "location": "/Examples/contamination/#posterior-parameter-uncertainties", 
            "text": "Spaghetti plots representing the posterior uncertainties:   Note that the parameter uncertainties are constrained by the observation data.\nThe observation data are plotted as red dots.", 
            "title": "Posterior parameter uncertainties"
        }, 
        {
            "location": "/Examples/contamination/#efast-global-sensitivity-analysis", 
            "text": "eFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli   Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999).   Total and main sensitivity indices over time for monitoring wells w13a and w20a:      The differences between main and total effect estimates suggest correlations among the parameters.", 
            "title": "eFAST global sensitivity analysis"
        }, 
        {
            "location": "/Examples/contamination/#saltellis-global-sensitivity-analysis", 
            "text": "Classical Saltelli's (Sobol's) global sensitivity analysis.  Total and main sensitivity indices over time for monitoring wells w13a and w20a:      There are differences between eFAST   Saltelli estimates. The eFAST results should be considered more reliable.", 
            "title": "Saltelli's global sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/", 
            "text": "Analysis of an Ordinary Differential Equation (ODE)\n\n\nAll the figures below are generated using \nexamples/ode/ode.jl\n.\n\n\nODE\n\n\n$$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$\n\n\nUnknown ODE parameters\n\n\n\n\nk\n\n\n$\\omega$\n\n\n\n\nExample ODE solution\n\n\n\n\nFor model parameters:\n\n\n\n\nk = 0.1\n\n\n$\\omega$ = 0.2\n\n\n\n\nLocal sensitivity analysis\n\n\n\n\n\n\nGlobal sensitivity analysis (using eFAST)\n\n\n\n\nProbabilistic distributions of the prior parameter uncertainties are:\n\n\n\n\nk = LogUniform(0.01, 0.1)\n\n\n$\\omega$ = Uniform(0.1, 0.3)\n\n\n\n\nBayesian sensitivity analysis\n\n\nObservations\n\n\nSynthetic observations are applied to constrain the ODE parameters\n\n\n\n\nObservation errors are equal for all the sample locations with standard deviation equal to 1 (\nobservation weight\n =  1 / \nobservation standard deviation\n = 1 / 1 = 1)\n\n\nPrior parameter uncertainties\n\n\nk\n only\n\n\n\n\n$\\omega$\n only\n\n\n\n\nBoth\n parameters\n\n\n\n\nThe observation data are plotted as a solid black line.\n\n\nHistograms/scatter plots of Bayesian MCMC results\n\n\n\n\nPosterior parameter uncertainties\n\n\nNote that now the parameter uncertainties are constrained by the observation data.\n\n\nk\n only\n\n\n\n\n$\\omega$\n only\n\n\n\n\nBoth\n parameters\n\n\n\n\nThe observation data are plotted as a solid black line.", 
            "title": "ODE Analysis"
        }, 
        {
            "location": "/Examples/ode/#analysis-of-an-ordinary-differential-equation-ode", 
            "text": "All the figures below are generated using  examples/ode/ode.jl .", 
            "title": "Analysis of an Ordinary Differential Equation (ODE)"
        }, 
        {
            "location": "/Examples/ode/#ode", 
            "text": "$$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$", 
            "title": "ODE"
        }, 
        {
            "location": "/Examples/ode/#unknown-ode-parameters", 
            "text": "k  $\\omega$", 
            "title": "Unknown ODE parameters"
        }, 
        {
            "location": "/Examples/ode/#example-ode-solution", 
            "text": "For model parameters:   k = 0.1  $\\omega$ = 0.2", 
            "title": "Example ODE solution"
        }, 
        {
            "location": "/Examples/ode/#local-sensitivity-analysis", 
            "text": "", 
            "title": "Local sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/#global-sensitivity-analysis-using-efast", 
            "text": "Probabilistic distributions of the prior parameter uncertainties are:   k = LogUniform(0.01, 0.1)  $\\omega$ = Uniform(0.1, 0.3)", 
            "title": "Global sensitivity analysis (using eFAST)"
        }, 
        {
            "location": "/Examples/ode/#bayesian-sensitivity-analysis", 
            "text": "", 
            "title": "Bayesian sensitivity analysis"
        }, 
        {
            "location": "/Examples/ode/#observations", 
            "text": "Synthetic observations are applied to constrain the ODE parameters   Observation errors are equal for all the sample locations with standard deviation equal to 1 ( observation weight  =  1 /  observation standard deviation  = 1 / 1 = 1)", 
            "title": "Observations"
        }, 
        {
            "location": "/Examples/ode/#prior-parameter-uncertainties", 
            "text": "", 
            "title": "Prior parameter uncertainties"
        }, 
        {
            "location": "/Examples/ode/#k-only", 
            "text": "", 
            "title": "k only"
        }, 
        {
            "location": "/Examples/ode/#omega-only", 
            "text": "", 
            "title": "$\\omega$ only"
        }, 
        {
            "location": "/Examples/ode/#both-parameters", 
            "text": "The observation data are plotted as a solid black line.", 
            "title": "Both parameters"
        }, 
        {
            "location": "/Examples/ode/#histogramsscatter-plots-of-bayesian-mcmc-results", 
            "text": "", 
            "title": "Histograms/scatter plots of Bayesian MCMC results"
        }, 
        {
            "location": "/Examples/ode/#posterior-parameter-uncertainties", 
            "text": "Note that now the parameter uncertainties are constrained by the observation data.", 
            "title": "Posterior parameter uncertainties"
        }, 
        {
            "location": "/Examples/ode/#k-only_1", 
            "text": "", 
            "title": "k only"
        }, 
        {
            "location": "/Examples/ode/#omega-only_1", 
            "text": "", 
            "title": "$\\omega$ only"
        }, 
        {
            "location": "/Examples/ode/#both-parameters_1", 
            "text": "The observation data are plotted as a solid black line.", 
            "title": "Both parameters"
        }, 
        {
            "location": "/Notebooks/", 
            "text": "Mads examples using Jupyter notebooks:\n\n\n\n\nContaminant transport\n \n \ndownload\n -:- \nview\n\n\nBlind Source Separation\n \n \ndownload\n -:- \nview", 
            "title": "Notebooks"
        }, 
        {
            "location": "/Notebooks/#mads-examples-using-jupyter-notebooks", 
            "text": "Contaminant transport     download  -:-  view  Blind Source Separation     download  -:-  view", 
            "title": "Mads examples using Jupyter notebooks:"
        }, 
        {
            "location": "/Examples/", 
            "text": "Mads Examples\n\n\nSetup\n\n\nContaminant transport\n\n\nContaminant transport\n\n\nInformation Gap Analysis\n\n\nBayesian Sampling\n\n\nBlind Source Separation\n\n\nContaminant Transport\n\n\nODE Analysis", 
            "title": "Examples Links"
        }, 
        {
            "location": "/Examples/#mads-examples", 
            "text": "", 
            "title": "Mads Examples"
        }, 
        {
            "location": "/Examples/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/Examples/#contaminant-transport", 
            "text": "", 
            "title": "Contaminant transport"
        }, 
        {
            "location": "/Examples/#contaminant-transport_1", 
            "text": "", 
            "title": "Contaminant transport"
        }, 
        {
            "location": "/Examples/#information-gap-analysis", 
            "text": "", 
            "title": "Information Gap Analysis"
        }, 
        {
            "location": "/Examples/#bayesian-sampling", 
            "text": "", 
            "title": "Bayesian Sampling"
        }, 
        {
            "location": "/Examples/#blind-source-separation", 
            "text": "", 
            "title": "Blind Source Separation"
        }, 
        {
            "location": "/Examples/#contaminant-transport_2", 
            "text": "", 
            "title": "Contaminant Transport"
        }, 
        {
            "location": "/Examples/#ode-analysis", 
            "text": "", 
            "title": "ODE Analysis"
        }, 
        {
            "location": "/model_coupling/", 
            "text": "Model Coupling\n\n\nMADS can be coupled with any internal or external model.\nThe model coupling is defined in the MADS problem dictionary.\nThe expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS.\nThe fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\n\n\nModel\n : Julia model defined in an external Julia file.\n\n\n\n\n\n\nMADS model\n : Julia model defined in an external Julia file using information from the MADS problem dictionary.\n\n\n\n\n\n\nJulia model\n : Julia model defined internally (already in the Julia workspace).\n\n\n\n\n\n\nCommand\n : external model executed by an UNIX command or script.\n\n\n\n\n\n\nJulia command\n : external model executed by a Julia script. The Julia script is defined in an external Julia file.\n\n\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model.\nOnly \nCommand\n uses different approaches to get back the model outputs.\nThe script defined under \nJulia command\n parses the model outputs using Julia.\nThe available options for writing model inputs and reading model outputs are as follows.\n\n\n\n\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at \nmads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file", 
            "title": "Model Coupling"
        }, 
        {
            "location": "/model_coupling/#model-coupling", 
            "text": "MADS can be coupled with any internal or external model.\nThe model coupling is defined in the MADS problem dictionary.\nThe expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS.\nThe fields in the MADS problem dictionary that can be used to define the model coupling are:    Model  : Julia model defined in an external Julia file.    MADS model  : Julia model defined in an external Julia file using information from the MADS problem dictionary.    Julia model  : Julia model defined internally (already in the Julia workspace).    Command  : external model executed by an UNIX command or script.    Julia command  : external model executed by a Julia script. The Julia script is defined in an external Julia file.    Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model.\nOnly  Command  uses different approaches to get back the model outputs.\nThe script defined under  Julia command  parses the model outputs using Julia.\nThe available options for writing model inputs and reading model outputs are as follows.    Options for writing model inputs:   Templates  : template files for writing model input files as defined at  mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file     Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov)  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file", 
            "title": "Model Coupling"
        }, 
        {
            "location": "/test/", 
            "text": "Testing \n Verification\n\n\nMADS includes a series of test and verification problems.\nThese are also provided as examples how to run the code and perform various types of data and model analyses.\nAll the MADS examples can be found in the MADS repository: \ngithub\n.\n\n\nAll the test and verification problems can be executed using:\n\n\nimport\n \nMads\n\n\nMads\n.\ntest\n()\n\n\n\n\n\n\nor\n\n\nPkg\n.\ntest\n(\nMads\n)\n\n\nPkg\n.\ntest\n(\nAnasol\n)\n\n\nPkg\n.\ntest\n(\nBIGUQ\n)\n\n\nPkg\n.\ntest\n(\nReusableFunctions\n)\n\n\nPkg\n.\ntest\n(\nMetaProgTools\n)\n\n\nPkg\n.\ntest\n(\nRobustPmap\n)", 
            "title": "Testing & Verification"
        }, 
        {
            "location": "/test/#testing-verification", 
            "text": "MADS includes a series of test and verification problems.\nThese are also provided as examples how to run the code and perform various types of data and model analyses.\nAll the MADS examples can be found in the MADS repository:  github .  All the test and verification problems can be executed using:  import   Mads  Mads . test ()   or  Pkg . test ( Mads )  Pkg . test ( Anasol )  Pkg . test ( BIGUQ )  Pkg . test ( ReusableFunctions )  Pkg . test ( MetaProgTools )  Pkg . test ( RobustPmap )", 
            "title": "Testing &amp; Verification"
        }, 
        {
            "location": "/functions/", 
            "text": "MADS Functions\n\n\nMADS includes several Modules. The modules include numerous functions. To list all the available functions execute:\n\n\nMads\n.\nfunctions\n()\n\n\n\n\n\n\nTo list all the functions in a module, do:\n\n\nMads\n.\nfunctions\n(\nBIGUQ\n)\n\n\n\n\n\n\nTo list all the functions containing \nget\n, execute:\n\n\nMads\n.\nfunctions\n(\nget\n)\n\n\nMads\n.\nfunctions\n(\nMads\n,\n \nget\n)", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#mads-functions", 
            "text": "MADS includes several Modules. The modules include numerous functions. To list all the available functions execute:  Mads . functions ()   To list all the functions in a module, do:  Mads . functions ( BIGUQ )   To list all the functions containing  get , execute:  Mads . functions ( get )  Mads . functions ( Mads ,   get )", 
            "title": "MADS Functions"
        }, 
        {
            "location": "/Modules/Mads/", 
            "text": "Mads.jl\n\n\nDocumentation for Mads.jl\n\n\n#\n\n\nMads.MFlm\n \n \nMethod\n.\n\n\nMatrix Factorization via Levenberg Marquardt\n\n\nMads.MFlm\n\n\nMethods\n\n\n\n\nMads.MFlm(X::Array{T\n:Any,2}, nk::Integer; mads, log_W, log_H, retries, maxiter, tol, initW, initH)\n : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:82\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\nnk::Integer\n\n\n\n\nKeywords\n\n\n\n\ninitH\n\n\ninitW\n\n\nlog_H\n\n\nlog_W\n\n\nmads\n\n\nmaxiter\n\n\nretries\n\n\ntol\n\n\n\n\nsource\n\n\n#\n\n\nMads.NMFipopt\n \n \nMethod\n.\n\n\nNon-negative Matrix Factorization using JuMP/Ipopt\n\n\nMads.NMFipopt\n\n\nMethods\n\n\n\n\nMads.NMFipopt(X::Array{T\n:Any,2}, nk::Integer; retries, random, maxiter, maxguess, verbosity, tol, initW, initH)\n : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:36\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\nnk::Integer\n\n\n\n\nKeywords\n\n\n\n\ninitH\n\n\ninitW\n\n\nmaxguess\n\n\nmaxiter\n\n\nrandom\n\n\nretries\n\n\ntol\n\n\nverbosity\n\n\n\n\nsource\n\n\n#\n\n\nMads.NMFm\n \n \nMethod\n.\n\n\nNon-negative Matrix Factorization using NMF\n\n\nMads.NMFm\n\n\nMethods\n\n\n\n\nMads.NMFm(X::Array, nk::Integer; retries, maxiter, tol)\n : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:12\n\n\n\n\nArguments\n\n\n\n\nX::Array\n\n\nnk::Integer\n\n\n\n\nKeywords\n\n\n\n\nmaxiter\n\n\nretries\n\n\ntol\n\n\n\n\nsource\n\n\n#\n\n\nMads.addkeyword!\n \n \nFunction\n.\n\n\nAdd a \nkeyword\n in a \nclass\n within the Mads dictionary \nmadsdata\n\n\nMads.addkeyword!\n\n\nMethods\n\n\n\n\nMads.addkeyword!(madsdata::Associative, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:172\n\n\nMads.addkeyword!(madsdata::Associative, class::String, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:176\n\n\n\n\nArguments\n\n\n\n\nclass::String\n\n\nkeyword::String\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.addsource!\n \n \nFunction\n.\n\n\nAdd an additional contamination source\n\n\nMads.addsource!\n\n\nMethods\n\n\n\n\nMads.addsource!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:11\n\n\nMads.addsource!(madsdata::Associative, sourceid::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:11\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nsourceid::Int64\n\n\n\n\nsource\n\n\n#\n\n\nMads.addsourceparameters!\n \n \nMethod\n.\n\n\nAdd contaminant source parameters\n\n\nMads.addsourceparameters!\n\n\nMethods\n\n\n\n\nMads.addsourceparameters!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:34\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.allwellsoff!\n \n \nMethod\n.\n\n\nTurn off all the wells in the MADS problem dictionary\n\n\nMads.allwellsoff!\n\n\nMethods\n\n\n\n\nMads.allwellsoff!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:471\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.allwellson!\n \n \nMethod\n.\n\n\nTurn on all the wells in the MADS problem dictionary\n\n\nMads.allwellson!\n\n\nMethods\n\n\n\n\nMads.allwellson!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:439\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.amanzi\n \n \nFunction\n.\n\n\nExecute amanzi external groundwater flow and transport simulator \n\n\nArguments:\n\n\n\n\nfilename\n : amanzi input file name\n\n\nnproc\n : number of processor to be used by amanzi\n\n\nquiet\n : : suppress output [default \ntrue\n]\n\n\nobservation_filename\n : amanzi observation filename [default \"observations.out\"]\n\n\nsetup\n : bash script to setup amanzi environmental variables\n\n\namanzi_exe\n : full path to the location of the amanzi executable\n\n\n\n\nsource\n\n\n#\n\n\nMads.amanzi_output_parser\n \n \nFunction\n.\n\n\nParse Amanzi output provided in an external file (\nfilename\n)\n\n\nMads.amanzi_output_parser()\nMads.amanzi_output_parser(\nobservations.out\n)\n\n\n\n\n\nArguments:\n\n\n\n\nfilename\n : external file name (optional)\n\n\n\n\nReturns:\n\n\n\n\ndict\n : a dictionary with model observations following MADS requirements\n\n\n\n\nsource\n\n\n#\n\n\nMads.asinetransform\n \n \nMethod\n.\n\n\nArcsine transformation of model parameters\n\n\nMads.asinetransform\n\n\nMethods\n\n\n\n\nMads.asinetransform(params::Array{T\n:Any,1}, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:7\n\n\n\n\nArguments\n\n\n\n\nindexlogtransformed::Array{T\n:Any,1}\n\n\nlowerbounds::Array{T\n:Any,1}\n\n\nparams::Array{T\n:Any,1}\n\n\nupperbounds::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.bayessampling\n \n \nFunction\n.\n\n\nBayesian Sampling\n\n\nMads.bayessampling\n\n\nMethods\n\n\n\n\nMads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:71\n\n\nMads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:96\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nnumsequences::Integer\n\n\n\n\nKeywords\n\n\n\n\nburnin\n\n\nnsteps\n\n\nseed\n\n\nthinning\n\n\n\n\nExamples:\n\n\nMads.bayessampling(madsdata; nsteps=1000, burnin=100, thinning=1, seed=2016)\nMads.bayessampling(madsdata, numsequences; nsteps=1000, burnin=100, thinning=1, seed=2016)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumsequences\n : number of sequences executed in parallel\n\n\nnsteps\n : number of final realizations in the chain\n\n\nburnin\n :  number of initial realizations before the MCMC are recorded\n\n\nthinning\n : removal of any \nthinning\n realization\n\n\nseed\n : initial random number seed\n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n :\n\n\n\n\nsource\n\n\n#\n\n\nMads.calibrate\n \n \nMethod\n.\n\n\nCalibrate\n\n\nMads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda\n\n\nlambda_mu\n : lambda multiplication factor [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nsave_results\n : save intermediate results [default=true]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver\n\n\n\n\nReturns:\n\n\n\n\nminimumdict\n : model parameter dictionary with the optimal values at the minimum\n\n\nresults\n : optimization algorithm results (e.g. results.minimizer)\n\n\n\n\nMads.calibrate\n\n\nMethods\n\n\n\n\nMads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:142\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nlambda\n\n\nlambda_mu\n\n\nmaxEval\n\n\nmaxIter\n\n\nmaxJacobians\n\n\nnp_lambda\n\n\nsave_results\n\n\nshow_trace\n\n\ntolG\n\n\ntolOF\n\n\ntolX\n\n\nusenaive\n\n\n\n\nsource\n\n\n#\n\n\nMads.calibraterandom\n \n \nFunction\n.\n\n\nCalibrate with random initial guesses\n\n\nMads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumberofsamples\n : number of random initial samples\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda\n\n\nlambda_mu\n : lambda multiplication factor [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nsave_results\n : save intermediate results [default=true]\n\n\nusenaive\n : use naive Levenberg-Marquardt solver\n\n\nseed\n : initial random seed\n\n\n\n\nReturns:\n\n\n\n\nbestresult\n : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimizer)\n\n\n\n\nMads.calibraterandom\n\n\nMethods\n\n\n\n\nMads.calibraterandom(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:36\n\n\nMads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:36\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nnumberofsamples::Integer\n\n\n\n\nKeywords\n\n\n\n\nall\n\n\nlambda\n\n\nlambda_mu\n\n\nmaxEval\n\n\nmaxIter\n\n\nmaxJacobians\n\n\nnp_lambda\n\n\nquiet\n\n\nsave_results\n\n\nseed\n\n\nshow_trace\n\n\ntolG\n\n\ntolOF\n\n\ntolX\n\n\nusenaive\n\n\n\n\nsource\n\n\n#\n\n\nMads.calibraterandom_parallel\n \n \nFunction\n.\n\n\nCalibrate with random initial guesses in parallel\n\n\nMads.calibraterandom_parallel\n\n\nMethods\n\n\n\n\nMads.calibraterandom_parallel(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:83\n\n\nMads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:83\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nnumberofsamples::Integer\n\n\n\n\nKeywords\n\n\n\n\nlambda\n\n\nlambda_mu\n\n\nmaxEval\n\n\nmaxIter\n\n\nmaxJacobians\n\n\nnp_lambda\n\n\nquiet\n\n\nsave_results\n\n\nseed\n\n\nshow_trace\n\n\ntolG\n\n\ntolOF\n\n\ntolX\n\n\nusenaive\n\n\n\n\nsource\n\n\n#\n\n\nMads.checkmodeloutputdirs\n \n \nMethod\n.\n\n\nCheck the directories where model outputs should be saved for MADS\n\n\nMads.checkmodeloutputdirs\n\n\nMethods\n\n\n\n\nMads.checkmodeloutputdirs(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:424\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.checkout\n \n \nFunction\n.\n\n\nCheckout the latest version of the Mads / Julia modules\n\n\nMads.checkout\n\n\nMethods\n\n\n\n\nMads.checkout(modulename::String; git, master, force, pull, required, all)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63\n\n\nMads.checkout()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nKeywords\n\n\n\n\nall\n\n\nforce\n\n\ngit\n\n\nmaster\n\n\npull\n\n\nrequired\n\n\n\n\nsource\n\n\n#\n\n\nMads.checkparameterranges\n \n \nMethod\n.\n\n\nCheck parameter ranges for model parameters\n\n\nMads.checkparameterranges\n\n\nMethods\n\n\n\n\nMads.checkparameterranges(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:621\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.cleancoverage\n \n \nMethod\n.\n\n\nRemove Mads coverage files\n\n\nMads.cleancoverage\n\n\nMethods\n\n\n\n\nMads.cleancoverage()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:20\n\n\n\n\nsource\n\n\n#\n\n\nMads.cmadsins_obs\n \n \nMethod\n.\n\n\nCall C MADS ins_obs() function from the MADS dynamic library\n\n\nMads.cmadsins_obs\n\n\nMethods\n\n\n\n\nMads.cmadsins_obs(obsid::Array{T\n:Any,1}, instructionfilename::String, inputfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:27\n\n\n\n\nArguments\n\n\n\n\ninputfilename::String\n\n\ninstructionfilename::String\n\n\nobsid::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.commit\n \n \nFunction\n.\n\n\nCommit the latest version of the Mads / Julia modules in the repo\n\n\nMads.commit\n\n\nMethods\n\n\n\n\nMads.commit(commitmsg::String, modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:154\n\n\nMads.commit(commitmsg::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:154\n\n\n\n\nArguments\n\n\n\n\ncommitmsg::String\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.computemass\n \n \nMethod\n.\n\n\nCompute injected/reduced contaminant mass\n\n\nMads.computemass\n\n\nMethods\n\n\n\n\nMads.computemass(madsdata::Associative; time)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:246\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\ntime\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ntime\n : computational time\n\n\n\n\nReturns:\n\n\n\n\nmass_injected\n : total injected mass\n\n\nmass_reduced\n : total reduced mass\n\n\n\n\nsource\n\n\n#\n\n\nMads.computemass\n \n \nMethod\n.\n\n\nCompute injected/reduced contaminant mass for a given set of mads input files\n\n\nMads.computemass\n\n\nMethods\n\n\n\n\nMads.computemass(madsdata::Associative; time)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:246\n\n\nMads.computemass(madsfiles::Union{Regex,String}; time, path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:311\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nmadsfiles::Union{Regex,String}\n\n\n\n\nKeywords\n\n\n\n\npath\n\n\ntime\n\n\n\n\nExample\n\n\nMads.computemass(madsfiles; time=0, path=\n.\n)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsfiles\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\ntime\n : computational time\n\n\npath\n : search directory for the mads input files\n\n\n\n\nReturns:\n\n\n\n\nlambda\n : array with all the lambda values\n\n\nmass_injected\n : array with associated total injected mass\n\n\nmass_reduced\n : array with associated total reduced mass\n\n\n\n\nsource\n\n\n#\n\n\nMads.computeparametersensitities\n \n \nMethod\n.\n\n\nCompute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nsaresults\n : sensitivity analysis results\n\n\n\n\nMads.computeparametersensitities\n\n\nMethods\n\n\n\n\nMads.computeparametersensitities(madsdata::Associative, saresults::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:703\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nsaresults::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.contamination\n \n \nMethod\n.\n\n\nCompute concentration for a point in space and time (x,y,z,t)\n\n\nMads.contamination\n\n\nMethods\n\n\n\n\nMads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Number; anasolfunction)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:205\n\n\n\n\nArguments\n\n\n\n\nH::Number\n\n\nax::Number\n\n\nay::Number\n\n\naz::Number\n\n\ndx::Number\n\n\ndy::Number\n\n\ndz::Number\n\n\nf::Number\n\n\nlambda::Number\n\n\nn::Number\n\n\nt0::Number\n\n\nt1::Number\n\n\nt::Number\n\n\ntheta::Number\n\n\nvx::Number\n\n\nvy::Number\n\n\nvz::Number\n\n\nwellx::Number\n\n\nwelly::Number\n\n\nwellz::Number\n\n\nx::Number\n\n\ny::Number\n\n\nz::Number\n\n\n\n\nKeywords\n\n\n\n\nanasolfunction\n\n\n\n\nArguments:\n\n\n\n\nwellx\n - observation point (well) X coordinate\n\n\nwelly\n - observation point (well) Y coordinate\n\n\nwellz\n - observation point (well) Z coordinate\n\n\nn\n - porosity\n\n\nlambda\n - first-order reaction rate\n\n\ntheta\n - groundwater flow direction\n\n\nvx\n - advective transport velocity in X direction\n\n\nvy\n - advective transport velocity in Y direction\n\n\nvz\n - advective transport velocity in Z direction\n\n\nax\n - dispersivity in X direction (longitudinal)\n\n\nay\n - dispersivity in Y direction (transverse horizontal)\n\n\naz\n - dispersivity in Y direction (transverse vertical)\n\n\nH\n - Hurst coefficient for Fractional Brownian dispersion\n\n\nx\n - X coordinate of contaminant source location\n\n\ny\n - Y coordinate of contaminant source location\n\n\nz\n - Z coordinate of contaminant source location\n\n\ndx\n - source size (extent) in X direction\n\n\ndy\n - source size (extent) in Y direction\n\n\ndz\n - source size (extent) in Z direction\n\n\nf\n - source mass flux\n\n\nt0\n - source starting time\n\n\nt1\n - source termination time\n\n\nt\n - time to compute concentration at the observation point\n\n\nanasolfunction\n : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c]\n\n\n\n\nReturns:\n\n\n\n\npredicted concentration at (wellx, welly, wellz, t)\n\n\n\n\nsource\n\n\n#\n\n\nMads.copyright\n \n \nMethod\n.\n\n\nProduce MADS copyright information\n\n\nMads.copyright\n\n\nMethods\n\n\n\n\nMads.copyright()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:18\n\n\n\n\nsource\n\n\n#\n\n\nMads.create_documentation\n \n \nMethod\n.\n\n\nCreate web documentation files for Mads functions\n\n\nMads.create_documentation\n\n\nMethods\n\n\n\n\nMads.create_documentation()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:258\n\n\n\n\nsource\n\n\n#\n\n\nMads.create_tests_off\n \n \nMethod\n.\n\n\nTurn off the generation of MADS tests (default)\n\n\nMads.create_tests_off\n\n\nMethods\n\n\n\n\nMads.create_tests_off()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:81\n\n\n\n\nsource\n\n\n#\n\n\nMads.create_tests_on\n \n \nMethod\n.\n\n\nTurn on the generation of MADS tests (dangerous)\n\n\nMads.create_tests_on\n\n\nMethods\n\n\n\n\nMads.create_tests_on()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:72\n\n\n\n\nsource\n\n\n#\n\n\nMads.createmadsproblem\n \n \nFunction\n.\n\n\nCreate a new Mads problem where the observation targets are computed based on the model predictions\n\n\n\n\nMads.createmadsproblem(infilename::String, outfilename::String)\n\n\nMads.createmadsproblem(madsdata::Associative, outfilename::String)\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative)\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String)\n\n\n\n\nArguments:\n\n\n\n\ninfilename\n : input Mads file\n\n\noutfilename\n : output Mads file\n\n\nmadsdata\n : MADS problem dictionary\n\n\npredictions\n : dictionary of model predictions\n\n\n\n\nMads.createmadsproblem\n\n\nMethods\n\n\n\n\nMads.createmadsproblem(infilename::String, outfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:5\n\n\nMads.createmadsproblem(madsdata::Associative, outfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:30\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:39\n\n\nMads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:35\n\n\n\n\nArguments\n\n\n\n\ninfilename::String\n\n\nmadsdata::Associative\n\n\noutfilename::String\n\n\npredictions::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.createobservations!\n \n \nFunction\n.\n\n\nCreate observations in the MADS problem dictionary based on \ntime\n and \nobservation\n vectors\n\n\nMads.createobservations!\n\n\nMethods\n\n\n\n\nMads.createobservations!(madsdata::Associative, time::Array{T\n:Any,1}, observation::Array{T\n:Any,1}; logtransform, weight_type, weight)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:366\n\n\nMads.createobservations!(madsdata::Associative, observations::Associative; logtransform, weight_type, weight)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:388\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nobservation::Array{T\n:Any,1}\n\n\nobservations::Associative\n\n\ntime::Array{T\n:Any,1}\n\n\n\n\nKeywords\n\n\n\n\nlogtransform\n\n\nweight\n\n\nweight_type\n\n\n\n\nsource\n\n\n#\n\n\nMads.createtempdir\n \n \nMethod\n.\n\n\nCreate temporary directory\n\n\nMads.createtempdir\n\n\nMethods\n\n\n\n\nMads.createtempdir(tempdirname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:921\n\n\n\n\nArguments\n\n\n\n\ntempdirname::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.deleteNaN!\n \n \nMethod\n.\n\n\nDelete rows with NaN in a Dataframe \ndf\n\n\nMads.deleteNaN!\n\n\nMethods\n\n\n\n\nMads.deleteNaN!(df::DataFrames.DataFrame)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:921\n\n\n\n\nArguments\n\n\n\n\ndf::DataFrames.DataFrame\n\n\n\n\nsource\n\n\n#\n\n\nMads.deletekeyword!\n \n \nFunction\n.\n\n\nDelete a \nkeyword\n in a \nclass\n within the Mads dictionary \nmadsdata\n\n\nMads.deletekeyword!\n\n\nMethods\n\n\n\n\nMads.deletekeyword!(madsdata::Associative, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:196\n\n\nMads.deletekeyword!(madsdata::Associative, class::String, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:202\n\n\n\n\nArguments\n\n\n\n\nclass::String\n\n\nkeyword::String\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.dependents\n \n \nFunction\n.\n\n\nLists modules dependents on a module (Mads by default)\n\n\nMads.dependents\n\n\nMethods\n\n\n\n\nMads.dependents(modulename::String, filter::Bool)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45\n\n\nMads.dependents(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45\n\n\nMads.dependents()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45\n\n\n\n\nArguments\n\n\n\n\nfilter::Bool\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.display\n \n \nMethod\n.\n\n\nDisplay image file\n\n\nMads.display\n\n\nMethods\n\n\n\n\nMads.display(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsDisplay.jl:9\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.dobigdt\n \n \nMethod\n.\n\n\nPerform Bayesian Information Gap Decision Theory (BIG-DT) analysis\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnummodelruns\n : number of model runs\n\n\nnumhorizons\n : number of info-gap horizons of uncertainty\n\n\nmaxHorizon\n : maximum info-gap horizons of uncertainty\n\n\nnumlikelihoods\n : number of Bayesian likelihoods\n\n\n\n\nReturns:\n\n\n\n\nbigdtresults\n : dictionary with BIG-DT results\n\n\n\n\nMads.dobigdt\n\n\nMethods\n\n\n\n\nMads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, numlikelihoods, maxHorizon)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:131\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nnummodelruns::Int64\n\n\n\n\nKeywords\n\n\n\n\nmaxHorizon\n\n\nnumhorizons\n\n\nnumlikelihoods\n\n\n\n\nsource\n\n\n#\n\n\nMads.documentfunction\n \n \nMethod\n.\n\n\nCreate function document\n\n\nsource\n\n\n#\n\n\nMads.dumpasciifile\n \n \nMethod\n.\n\n\nDump ASCII file\n\n\nMads.dumpasciifile\n\n\nMethods\n\n\n\n\nMads.dumpasciifile(filename::String, data)\n : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:17\n\n\n\n\nArguments\n\n\n\n\ndata\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpjsonfile\n \n \nMethod\n.\n\n\nDump a JSON file\n\n\nMads.dumpjsonfile\n\n\nMethods\n\n\n\n\nMads.dumpjsonfile(filename::String, data)\n : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:26\n\n\n\n\nArguments\n\n\n\n\ndata\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpwelldata\n \n \nMethod\n.\n\n\nDump well data from MADS problem dictionary into a ASCII file\n\n\nMads.dumpwelldata\n\n\nMethods\n\n\n\n\nMads.dumpwelldata(madsdata::Associative, filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:813\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpyamlfile\n \n \nMethod\n.\n\n\nDump YAML file\n\n\nArguments:\n\n\n\n\nfilename\n : file name\n\n\nyamldata\n : YAML data\n\n\n\n\nMads.dumpyamlfile\n\n\nMethods\n\n\n\n\nMads.dumpyamlfile(filename::String, yamldata; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:40\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\nyamldata\n\n\n\n\nKeywords\n\n\n\n\njulia\n\n\n\n\nsource\n\n\n#\n\n\nMads.dumpyamlmadsfile\n \n \nMethod\n.\n\n\nDump YAML Mads file\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : file name\n\n\n\n\nMads.dumpyamlmadsfile\n\n\nMethods\n\n\n\n\nMads.dumpyamlmadsfile(madsdata, filename::String; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:61\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\nmadsdata\n\n\n\n\nKeywords\n\n\n\n\njulia\n\n\n\n\nsource\n\n\n#\n\n\nMads.efast\n \n \nMethod\n.\n\n\nSensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nM\n : maximum number of harmonics\n\n\ngamma\n : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4)\n\n\nseed\n : initial random seed\n\n\n\n\nMads.efast\n\n\nMethods\n\n\n\n\nMads.efast(md::Associative; N, M, gamma, plotresults, seed, issvr, truncateRanges, checkpointfrequency, restartdir, restart)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1001\n\n\n\n\nArguments\n\n\n\n\nmd::Associative\n\n\n\n\nKeywords\n\n\n\n\nM\n\n\nN\n\n\ncheckpointfrequency\n\n\ngamma\n\n\nissvr\n\n\nplotresults\n\n\nrestart\n\n\nrestartdir\n\n\nseed\n\n\ntruncateRanges\n\n\n\n\nsource\n\n\n#\n\n\nMads.emceesampling\n \n \nFunction\n.\n\n\nBayesian sampling with Goodman \n Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)\n\n\nMads.emceesampling\n\n\nMethods\n\n\n\n\nMads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:9\n\n\nMads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:31\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\np0::Array\n\n\n\n\nKeywords\n\n\n\n\nburnin\n\n\nnsteps\n\n\nnumwalkers\n\n\nseed\n\n\nsigma\n\n\nthinning\n\n\nweightfactor\n\n\n\n\nExamples:\n\n\nMads.emceesampling(madsdata; numwalkers=10, nsteps=100, burnin=100, thinning=1, seed=2016, sigma=0.01)\nMads.emceesampling(madsdata, p0; numwalkers=10, nsteps=100, burnin=10, thinning=1, seed=2016)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\np0\n : initial parameters (matrix of size (length(optparams), numwalkers))\n\n\nnumwalkers\n : number of walkers (if in parallel this can be the number of available processors)\n\n\nnsteps\n : number of final realizations in the chain\n\n\nburnin\n :  number of initial realizations before the MCMC are recorded\n\n\nthinning\n : removal of any \nthinning\n realization\n\n\nseed\n : initial random number seed\n\n\nsigma\n : a standard deviation parameter used to initialize the walkers\n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n : MCMC chain\n\n\nllhoodvals\n : log likelihoods of the final samples in the chain\n\n\n\n\nsource\n\n\n#\n\n\nMads.estimationerror\n \n \nMethod\n.\n\n\nEstimate kriging error\n\n\nMads.estimationerror\n\n\nMethods\n\n\n\n\nMads.estimationerror(w::Array{T\n:Any,1}, x0::Array{T\n:Any,1}, X::Array{T\n:Any,2}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:130\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\ncov::Function\n\n\nw::Array{T\n:Any,1}\n\n\nx0::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.evaluatemadsexpression\n \n \nMethod\n.\n\n\nEvaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values\n\n\nMads.evaluatemadsexpression\n\n\nMethods\n\n\n\n\nMads.evaluatemadsexpression(expressionstring::String, parameters::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:114\n\n\n\n\nArguments\n\n\n\n\nexpressionstring::String\n\n\nparameters::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.evaluatemadsexpressions\n \n \nMethod\n.\n\n\nEvaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values\n\n\nMads.evaluatemadsexpressions\n\n\nMethods\n\n\n\n\nMads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:127\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparameters::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.expcov\n \n \nMethod\n.\n\n\nExponential spatial covariance function\n\n\nMads.expcov\n\n\nMethods\n\n\n\n\nMads.expcov(h::Number, maxcov::Number, scale::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:13\n\n\n\n\nArguments\n\n\n\n\nh::Number\n\n\nmaxcov::Number\n\n\nscale::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.exponentialvariogram\n \n \nMethod\n.\n\n\nExponential variogram\n\n\nMads.exponentialvariogram\n\n\nMethods\n\n\n\n\nMads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:43\n\n\n\n\nArguments\n\n\n\n\nh::Number\n\n\nnugget::Number\n\n\nrange::Number\n\n\nsill::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.filterkeys\n \n \nFunction\n.\n\n\nFilter dictionary keys based on a string or regular expression\n\n\nMads.filterkeys\n\n\nMethods\n\n\n\n\nMads.filterkeys(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:587\n\n\nMads.filterkeys(dict::Associative, key::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:586\n\n\nMads.filterkeys(dict::Associative, key::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:587\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n\n\nkey::Regex\n\n\nkey::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.forward\n \n \nFunction\n.\n\n\nPerform a forward run using the initial or provided values for the model parameters\n\n\n\n\nforward(madsdata)\n\n\nforward(madsdata, paramdict)\n\n\nforward(madsdata, paramarray)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdict\n : dictionary of model parameter values\n\n\nparamarray\n : array of model parameter values\n\n\n\n\nReturns:\n\n\n\n\nobsvalues\n : dictionary of model predictions\n\n\n\n\nMads.forward\n\n\nMethods\n\n\n\n\nMads.forward(madsdata::Associative; all)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:6\n\n\nMads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:10\n\n\nMads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:40\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparamarray::Array\n\n\nparamdict::Associative\n\n\n\n\nKeywords\n\n\n\n\nall\n\n\ncheckpointfilename\n\n\ncheckpointfrequency\n\n\n\n\nsource\n\n\n#\n\n\nMads.forwardgrid\n \n \nFunction\n.\n\n\nPerform a forward run over a 3D grid defined in \nmadsdata\n using the initial or provided values for the model parameters\n\n\n\n\nforwardgrid(madsdata)\n\n\nforwardgrid(madsdata, paramvalues))\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamvalues\n : dictionary of model parameter values\n\n\n\n\nReturns:\n\n\n\n\narray3d\n : 3D array with model predictions along a 3D grid\n\n\n\n\nMads.forwardgrid\n\n\nMethods\n\n\n\n\nMads.forwardgrid(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:116\n\n\nMads.forwardgrid(madsdatain::Associative, paramvalues::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:121\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nmadsdatain::Associative\n\n\nparamvalues::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.free\n \n \nFunction\n.\n\n\nFree Mads / Julia modules\n\n\nMads.free\n\n\nMethods\n\n\n\n\nMads.free(modulename::String; required, all)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:132\n\n\nMads.free()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:132\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nKeywords\n\n\n\n\nall\n\n\nrequired\n\n\n\n\nsource\n\n\n#\n\n\nMads.functions\n \n \nFunction\n.\n\n\nList available functions in the MADS modules:\n\n\nMads.functions\n\n\nMethods\n\n\n\n\nMads.functions(string::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:22\n\n\nMads.functions()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:22\n\n\nMads.functions(m::Union{Module,Symbol})\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:28\n\n\nMads.functions(m::Union{Module,Symbol}, string::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:28\n\n\n\n\nArguments\n\n\n\n\nm::Union{Module,Symbol}\n\n\nstring::String\n\n\n\n\nExamples:\n\n\nMads.functions()\nMads.functions(BIGUQ)\nMads.functions(\nget\n)\nMads.functions(Mads, \nget\n)\n\n\n\n\n\nArguments:\n\n\n\n\nmodule\n : MADS module\n\n\nstring\n : matching string\n\n\n\n\nsource\n\n\n#\n\n\nMads.gaussiancov\n \n \nMethod\n.\n\n\nGaussian spatial covariance function\n\n\nMads.gaussiancov\n\n\nMethods\n\n\n\n\nMads.gaussiancov(h::Number, maxcov::Number, scale::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:6\n\n\n\n\nArguments\n\n\n\n\nh::Number\n\n\nmaxcov::Number\n\n\nscale::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.gaussianvariogram\n \n \nMethod\n.\n\n\nGaussian variogram\n\n\nMads.gaussianvariogram\n\n\nMethods\n\n\n\n\nMads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:56\n\n\n\n\nArguments\n\n\n\n\nh::Number\n\n\nnugget::Number\n\n\nrange::Number\n\n\nsill::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.getcovmat\n \n \nMethod\n.\n\n\nGet spatial covariance matrix\n\n\nMads.getcovmat\n\n\nMethods\n\n\n\n\nMads.getcovmat(X::Array{T\n:Any,2}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:95\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\ncov::Function\n\n\n\n\nsource\n\n\n#\n\n\nMads.getcovvec!\n \n \nMethod\n.\n\n\nGet spatial covariance vector\n\n\nMads.getcovvec!\n\n\nMethods\n\n\n\n\nMads.getcovvec!(covvec::Array, x0::Array{T\n:Any,1}, X::Array{T\n:Any,2}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:113\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\ncov::Function\n\n\ncovvec::Array\n\n\nx0::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.getdictvalues\n \n \nFunction\n.\n\n\nGet dictionary values for keys based on a string or regular expression\n\n\nMads.getdictvalues\n\n\nMethods\n\n\n\n\nMads.getdictvalues(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:605\n\n\nMads.getdictvalues(dict::Associative, key::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:604\n\n\nMads.getdictvalues(dict::Associative, key::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:605\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n\n\nkey::Regex\n\n\nkey::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.getdir\n \n \nMethod\n.\n\n\nGet directory\n\n\nExample:\n\n\nd = Mads.getdir(\na.mads\n) # d = \n.\n\nd = Mads.getdir(\ntest/a.mads\n) # d = \ntest\n\n\n\n\n\n\nMads.getdir\n\n\nMethods\n\n\n\n\nMads.getdir(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:266\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.getdistribution\n \n \nMethod\n.\n\n\nParse distribution from a string\n\n\nMads.getdistribution\n\n\nMethods\n\n\n\n\nMads.getdistribution(dist::String, i::String, inputtype::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:147\n\n\n\n\nArguments\n\n\n\n\ndist::String\n\n\ni::String\n\n\ninputtype::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.getextension\n \n \nMethod\n.\n\n\nGet file name extension\n\n\nExample:\n\n\next = Mads.getextension(\na.mads\n) # ext = \nmads\n\n\n\n\n\n\nMads.getextension\n\n\nMethods\n\n\n\n\nMads.getextension(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:409\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.getfunctionarguments\n \n \nMethod\n.\n\n\nGet function arguments\n\n\nsource\n\n\n#\n\n\nMads.getfunctionargumentsold\n \n \nMethod\n.\n\n\nGet function arguments\n\n\nsource\n\n\n#\n\n\nMads.getfunctionkeywords\n \n \nMethod\n.\n\n\nGet function keywords\n\n\nsource\n\n\n#\n\n\nMads.getfunctionkeywordsold\n \n \nMethod\n.\n\n\nGet function keywords\n\n\nsource\n\n\n#\n\n\nMads.getimportantsamples\n \n \nMethod\n.\n\n\nGet important samples\n\n\nArguments:\n\n\n\n\nsamples\n : array of samples\n\n\nllhoods\n : vector of log-likelihoods\n\n\n\n\nReturns:\n\n\n\n\nimp_samples\n : array of important samples\n\n\n\n\nMads.getimportantsamples\n\n\nMethods\n\n\n\n\nMads.getimportantsamples(samples::Array, llhoods::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:239\n\n\n\n\nArguments\n\n\n\n\nllhoods::Array{T\n:Any,1}\n\n\nsamples::Array\n\n\n\n\nsource\n\n\n#\n\n\nMads.getlogparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are log-transformed (\nlog\n)\n\n\nsource\n\n\n#\n\n\nMads.getmadsdir\n \n \nMethod\n.\n\n\nGet the directory where currently Mads is running\n\n\nproblemdir = Mads.getmadsdir()\n\n\nMads.getmadsdir\n\n\nMethods\n\n\n\n\nMads.getmadsdir()\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:301\n\n\n\n\nsource\n\n\n#\n\n\nMads.getmadsinputfile\n \n \nMethod\n.\n\n\nGet the default MADS input file set as a MADS global variable using \nsetmadsinputfile(filename)\n\n\nMads.getmadsinputfile()\n\n\nArguments: \nnone\n\n\nReturns:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nMads.getmadsinputfile\n\n\nMethods\n\n\n\n\nMads.getmadsinputfile()\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:239\n\n\n\n\nsource\n\n\n#\n\n\nMads.getmadsproblemdir\n \n \nMethod\n.\n\n\nGet the directory where the Mads data file is located\n\n\nMads.getmadsproblemdir(madsdata)\n\n\nExample:\n\n\nmadsdata = Mads.loadmadsproblem(\n../../a.mads\n)\nmadsproblemdir = Mads.getmadsproblemdir(madsdata)\n\n\n\n\n\nwhere \nmadsproblemdir\n = \n\"../../\"\n\n\nMads.getmadsproblemdir\n\n\nMethods\n\n\n\n\nMads.getmadsproblemdir(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:290\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getmadsrootname\n \n \nMethod\n.\n\n\nGet the MADS problem root name\n\n\nmadsrootname = Mads.getmadsrootname(madsdata)\n\n\nMads.getmadsrootname\n\n\nMethods\n\n\n\n\nMads.getmadsrootname(madsdata::Associative; first, version)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:250\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nfirst\n\n\nversion\n\n\n\n\nsource\n\n\n#\n\n\nMads.getnextmadsfilename\n \n \nMethod\n.\n\n\nGet next mads file name\n\n\nMads.getnextmadsfilename\n\n\nMethods\n\n\n\n\nMads.getnextmadsfilename(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:377\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.getnonlogparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are NOT log-transformed (\nlog\n)\n\n\nsource\n\n\n#\n\n\nMads.getnonoptparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are NOT optimized (\nopt\n)\n\n\nsource\n\n\n#\n\n\nMads.getobsdist\n \n \nMethod\n.\n\n\nGet an array with \ndist\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsdist\n \n \nMethod\n.\n\n\nGet an array with \ndist\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobskeys\n \n \nMethod\n.\n\n\nGet keys for all observations in the MADS problem dictionary\n\n\nMads.getobskeys\n\n\nMethods\n\n\n\n\nMads.getobskeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:31\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getobslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobsmax\n \n \nMethod\n.\n\n\nGet an array with \nmax\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsmax\n \n \nMethod\n.\n\n\nGet an array with \nmax\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsmin\n \n \nMethod\n.\n\n\nGet an array with \nmin\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobstarget\n \n \nMethod\n.\n\n\nGet an array with \ntarget\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobstarget\n \n \nMethod\n.\n\n\nGet an array with \ntarget\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobstime\n \n \nMethod\n.\n\n\nGet an array with \ntime\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobstime\n \n \nMethod\n.\n\n\nGet an array with \ntime\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getobsweight\n \n \nMethod\n.\n\n\nGet an array with \nweight\n values for observations in the MADS problem dictionary defined by \nobskeys\n\n\nsource\n\n\n#\n\n\nMads.getobsweight\n \n \nMethod\n.\n\n\nGet an array with \nweight\n values for all observations in the MADS problem dictionary\n\n\nsource\n\n\n#\n\n\nMads.getoptparamkeys\n \n \nMethod\n.\n\n\nGet the keys in the MADS problem dictionary for parameters that are optimized (\nopt\n)\n\n\nsource\n\n\n#\n\n\nMads.getoptparams\n \n \nFunction\n.\n\n\nGet optimizable parameters\n\n\nMads.getoptparams\n\n\nMethods\n\n\n\n\nMads.getoptparams(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:313\n\n\nMads.getoptparams(madsdata::Associative, parameterarray::Array)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:316\n\n\nMads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:316\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\noptparameterkey::Array\n\n\nparameterarray::Array\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamdict\n \n \nMethod\n.\n\n\nGet dictionary with all parameters and their respective initial values\n\n\nMads.getparamdict(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nparamdict\n : dictionary with all parameters and their respective initial values\n\n\n\n\nMads.getparamdict\n\n\nMethods\n\n\n\n\nMads.getparamdict(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:62\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamdistributions\n \n \nMethod\n.\n\n\nGet probabilistic distributions of all parameters in the MADS problem dictionary\n\n\nMads.getparamdistributions(madsdata; init_dist=false)\n\n\nNote:\n\n\nProbabilistic distribution of parameters can be defined only if \ndist\n or \nmin\n/\nmax\n model parameter fields are specified in the MADS problem dictionary \nmadsdata\n.\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\n\n\nMads.getparamdistributions\n\n\nMethods\n\n\n\n\nMads.getparamdistributions(madsdata::Associative; init_dist)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:577\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\ninit_dist\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamkeys\n \n \nMethod\n.\n\n\nGet keys of all parameters in the MADS dictionary\n\n\nMads.getparamkeys(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nparamkeys\n : array with the keys of all parameters in the MADS dictionary\n\n\n\n\nMads.getparamkeys\n\n\nMethods\n\n\n\n\nMads.getparamkeys(madsdata::Associative; filter)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:41\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nfilter\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamrandom\n \n \nFunction\n.\n\n\nGet independent sampling of model parameters defined in the MADS problem dictionary\n\n\nMads.getparamrandom\n\n\nMethods\n\n\n\n\nMads.getparamrandom(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:280\n\n\nMads.getparamrandom(madsdata::Associative, numsamples::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:280\n\n\nMads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:280\n\n\nMads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, init_dist, paramdist)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:293\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nnumsamples::Integer\n\n\nparameterkey::String\n\n\n\n\nKeywords\n\n\n\n\ninit_dist\n\n\nnumsamples\n\n\nparamdist\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nnumsamples\n : number of samples\n\n\nparameterkey\n : model parameter key\n\n\ninit_dist\n : if \ntrue\n use the distribution defined for initialization in the MADS problem dictionary (defined using \ninit_dist\n parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using \ndist\n parameter field)\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit\n \n \nMethod\n.\n\n\nGet an array with \ninit\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit\n \n \nMethod\n.\n\n\nGet an array with \ninit\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit_max\n \n \nFunction\n.\n\n\nGet an array with \ninit_max\n values for parameters defined by \nparamkeys\n\n\nMads.getparamsinit_max\n\n\nMethods\n\n\n\n\nMads.getparamsinit_max(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:283\n\n\nMads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:249\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparamkeys::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsinit_min\n \n \nFunction\n.\n\n\nGet an array with \ninit_min\n values for parameters\n\n\nMads.getparamsinit_min\n\n\nMethods\n\n\n\n\nMads.getparamsinit_min(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:238\n\n\nMads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:204\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparamkeys::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamslog\n \n \nMethod\n.\n\n\nGet an array with \nlog\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamslongname\n \n \nMethod\n.\n\n\nGet an array with \nlongname\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamslongname\n \n \nMethod\n.\n\n\nGet an array with \nlongname\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamsmax\n \n \nFunction\n.\n\n\nGet an array with \nmax\n values for parameters defined by \nparamkeys\n\n\nMads.getparamsmax\n\n\nMethods\n\n\n\n\nMads.getparamsmax(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:193\n\n\nMads.getparamsmax(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:171\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparamkeys::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsmin\n \n \nFunction\n.\n\n\nGet an array with \nmin\n values for parameters defined by \nparamkeys\n\n\nMads.getparamsmin\n\n\nMethods\n\n\n\n\nMads.getparamsmin(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:160\n\n\nMads.getparamsmin(madsdata::Associative, paramkeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:138\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparamkeys::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.getparamsplotname\n \n \nMethod\n.\n\n\nGet an array with \nplotname\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamsplotname\n \n \nMethod\n.\n\n\nGet an array with \nplotname\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamsstep\n \n \nMethod\n.\n\n\nGet an array with \nstep\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamsstep\n \n \nMethod\n.\n\n\nGet an array with \nstep\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getparamstype\n \n \nMethod\n.\n\n\nGet an array with \ntype\n values for parameters defined by \nparamkeys\n\n\nsource\n\n\n#\n\n\nMads.getparamstype\n \n \nMethod\n.\n\n\nGet an array with \ntype\n values for all the MADS model parameters\n\n\nsource\n\n\n#\n\n\nMads.getprocs\n \n \nMethod\n.\n\n\nGet the number of processors\n\n\nMads.getprocs\n\n\nMethods\n\n\n\n\nMads.getprocs()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:36\n\n\n\n\nsource\n\n\n#\n\n\nMads.getrestart\n \n \nMethod\n.\n\n\nGet MADS restart status\n\n\nMads.getrestart\n\n\nMethods\n\n\n\n\nMads.getrestart(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:25\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getrestartdir\n \n \nFunction\n.\n\n\nGet the directory where Mads restarts will be stored.\n\n\nMads.getrestartdir\n\n\nMethods\n\n\n\n\nMads.getrestartdir(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:234\n\n\nMads.getrestartdir(madsdata::Associative, suffix::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:234\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nsuffix::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.getrootname\n \n \nMethod\n.\n\n\nGet file name root\n\n\nExample:\n\n\nr = Mads.getrootname(\na.rnd.dat\n) # r = \na\n\nr = Mads.getrootname(\na.rnd.dat\n, first=false) # r = \na.rnd\n\n\n\n\n\n\nMads.getrootname\n\n\nMethods\n\n\n\n\nMads.getrootname(filename::String; first, version)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:324\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nKeywords\n\n\n\n\nfirst\n\n\nversion\n\n\n\n\nsource\n\n\n#\n\n\nMads.getsindx\n \n \nMethod\n.\n\n\nGet sin-space dx\n\n\nMads.getsindx\n\n\nMethods\n\n\n\n\nMads.getsindx(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:226\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getsourcekeys\n \n \nMethod\n.\n\n\nGet keys of all source parameters in the MADS dictionary\n\n\nMads.getsourcekeys(madsdata)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\nsourcekeys\n : array with keys of all source parameters in the MADS dictionary\n\n\n\n\nMads.getsourcekeys\n\n\nMethods\n\n\n\n\nMads.getsourcekeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:85\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.gettarget\n \n \nMethod\n.\n\n\nGet observation target\n\n\nMads.gettarget\n\n\nMethods\n\n\n\n\nMads.gettarget(o::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:177\n\n\n\n\nArguments\n\n\n\n\no::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.gettargetkeys\n \n \nMethod\n.\n\n\nGet keys for all targets (observations with weights greater than zero) in the MADS problem dictionary\n\n\nMads.gettargetkeys\n\n\nMethods\n\n\n\n\nMads.gettargetkeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:40\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.gettime\n \n \nMethod\n.\n\n\nGet observation time\n\n\nMads.gettime\n\n\nMethods\n\n\n\n\nMads.gettime(o::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:113\n\n\n\n\nArguments\n\n\n\n\no::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getweight\n \n \nMethod\n.\n\n\nGet observation weight\n\n\nMads.getweight\n\n\nMethods\n\n\n\n\nMads.getweight(o::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:145\n\n\n\n\nArguments\n\n\n\n\no::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getwellkeys\n \n \nMethod\n.\n\n\nGet keys for all wells in the MADS problem dictionary\n\n\nMads.getwellkeys\n\n\nMethods\n\n\n\n\nMads.getwellkeys(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:52\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.getwellsdata\n \n \nMethod\n.\n\n\nGet \nWells\n class spatial and temporal data\n\n\nMads.getwellsdata\n\n\nMethods\n\n\n\n\nMads.getwellsdata(madsdata::Associative; time)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:535\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\ntime\n\n\n\n\nsource\n\n\n#\n\n\nMads.graphoff\n \n \nMethod\n.\n\n\nMADS graph output off\n\n\nMads.graphoff\n\n\nMethods\n\n\n\n\nMads.graphoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:63\n\n\n\n\nsource\n\n\n#\n\n\nMads.graphon\n \n \nMethod\n.\n\n\nMADS graph output on\n\n\nMads.graphon\n\n\nMethods\n\n\n\n\nMads.graphon()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:54\n\n\n\n\nsource\n\n\n#\n\n\nMads.haskeyword\n \n \nFunction\n.\n\n\nCheck for a \nkeyword\n in a \nclass\n within the Mads dictionary \nmadsdata\n\n\n\n\nMads.haskeyword(madsdata, keyword)\n\n\nMads.haskeyword(madsdata, class, keyword)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nclass\n : dictionary class; if not provided searches for \nkeyword\n in \nProblem\n class\n\n\nkeyword\n : dictionary key\n\n\n\n\nReturns: \ntrue\n or \nfalse\n\n\nExamples:\n\n\n\n\nMads.haskeyword(madsdata, \"disp\")\n ... searches in \nProblem\n class by default\n\n\nMads.haskeyword(madsdata, \"Wells\", \"R-28\")\n ... searches in \nWells\n class for a keyword \"R-28\"\n\n\n\n\nMads.haskeyword\n\n\nMethods\n\n\n\n\nMads.haskeyword(madsdata::Associative, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:130\n\n\nMads.haskeyword(madsdata::Associative, class::String, keyword::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:133\n\n\n\n\nArguments\n\n\n\n\nclass::String\n\n\nkeyword::String\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.help\n \n \nMethod\n.\n\n\nProduce MADS help information\n\n\nMads.help\n\n\nMethods\n\n\n\n\nMads.help()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:9\n\n\n\n\nsource\n\n\n#\n\n\nMads.importeverywhere\n \n \nMethod\n.\n\n\nImport function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations.\n\n\nMads.importeverywhere\n\n\nMethods\n\n\n\n\nMads.importeverywhere(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:282\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.indexkeys\n \n \nFunction\n.\n\n\nFind indexes for dictionary keys based on a string or regular expression\n\n\nMads.indexkeys\n\n\nMethods\n\n\n\n\nMads.indexkeys(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:596\n\n\nMads.indexkeys(dict::Associative, key::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:595\n\n\nMads.indexkeys(dict::Associative, key::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:596\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n\n\nkey::Regex\n\n\nkey::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.ins_obs\n \n \nMethod\n.\n\n\nApply Mads instruction file \ninstructionfilename\n to read model input file \ninputfilename\n\n\nMads.ins_obs\n\n\nMethods\n\n\n\n\nMads.ins_obs(instructionfilename::String, inputfilename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:750\n\n\n\n\nArguments\n\n\n\n\ninputfilename::String\n\n\ninstructionfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.instline2regexs\n \n \nMethod\n.\n\n\nConvert an instruction line in the Mads instruction file into regular expressions\n\n\nMads.instline2regexs\n\n\nMethods\n\n\n\n\nMads.instline2regexs(instline::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:673\n\n\n\n\nArguments\n\n\n\n\ninstline::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.invobsweights!\n \n \nMethod\n.\n\n\nInversely proportional observation weights in the MADS problem dictionary\n\n\nMads.invobsweights!\n\n\nMethods\n\n\n\n\nMads.invobsweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:283\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nvalue::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.invwellweights!\n \n \nMethod\n.\n\n\nInversely proportional observation weights in the MADS problem dictionary\n\n\nMads.invwellweights!\n\n\nMethods\n\n\n\n\nMads.invwellweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:328\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nvalue::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.islog\n \n \nMethod\n.\n\n\nIs parameter with key \nparameterkey\n log-transformed?\n\n\nMads.islog\n\n\nMethods\n\n\n\n\nMads.islog(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:366\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparameterkey::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.isobs\n \n \nMethod\n.\n\n\nIs a dictionary containing all the observations\n\n\nMads.isobs\n\n\nMethods\n\n\n\n\nMads.isobs(madsdata::Associative, dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:10\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.isopt\n \n \nMethod\n.\n\n\nIs parameter with key \nparameterkey\n optimizable?\n\n\nMads.isopt\n\n\nMethods\n\n\n\n\nMads.isopt(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:352\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparameterkey::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.isparam\n \n \nMethod\n.\n\n\nIs the dictionary containing all the parameters\n\n\nMads.isparam\n\n\nMethods\n\n\n\n\nMads.isparam(madsdata::Associative, dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:10\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.ispkgavailable\n \n \nMethod\n.\n\n\nChecks of package is available\n\n\nMads.ispkgavailable\n\n\nMethods\n\n\n\n\nMads.ispkgavailable(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:9\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.krige\n \n \nMethod\n.\n\n\nKriging\n\n\nMads.krige\n\n\nMethods\n\n\n\n\nMads.krige(x0mat::Array, X::Array{T\n:Any,2}, Z::Array{T\n:Any,1}, cov::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:69\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\nZ::Array{T\n:Any,1}\n\n\ncov::Function\n\n\nx0mat::Array\n\n\n\n\nsource\n\n\n#\n\n\nMads.levenberg_marquardt\n \n \nFunction\n.\n\n\nLevenberg-Marquardt optimization\n\n\nMads.levenberg_marquardt\n\n\nMethods\n\n\n\n\nMads.levenberg_marquardt(f::Function, g::Function, x0)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:367\n\n\nMads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callback)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:367\n\n\n\n\nArguments\n\n\n\n\nf::Function\n\n\ng::Function\n\n\no::Function\n\n\nx0\n\n\n\n\nKeywords\n\n\n\n\nalwaysDoJacobian\n\n\ncallback\n\n\nlambda\n\n\nlambda_mu\n\n\nlambda_nu\n\n\nlambda_scale\n\n\nmaxEval\n\n\nmaxIter\n\n\nmaxJacobians\n\n\nnp_lambda\n\n\nroot\n\n\nshow_trace\n\n\ntolG\n\n\ntolOF\n\n\ntolX\n\n\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\nroot\n : Mads problem root name\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nmaxJacobians\n : maximum number of Jacobian solves\n\n\nlambda\n : initial Levenberg-Marquardt lambda [eps(Float32)]\n\n\nlambda_scale\n : lambda scaling factor\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nlambda_nu\n : lambda multiplication factor \u03bd [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\nshow_trace\n : shows solution trace [default=false]\n\n\nalwaysDoJacobian\n: computer Jacobian each iteration [false]\n\n\ncallback\n : call back function for debugging\n\n\n\n\nsource\n\n\n#\n\n\nMads.linktempdir\n \n \nMethod\n.\n\n\nLink files in a temporary directory\n\n\nMads.linktempdir\n\n\nMethods\n\n\n\n\nMads.linktempdir(madsproblemdir::String, tempdirname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:947\n\n\n\n\nArguments\n\n\n\n\nmadsproblemdir::String\n\n\ntempdirname::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadasciifile\n \n \nMethod\n.\n\n\nLoad ASCII file\n\n\nMads.loadasciifile\n\n\nMethods\n\n\n\n\nMads.loadasciifile(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:7\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadjsonfile\n \n \nMethod\n.\n\n\nLoad a JSON file\n\n\nMads.loadjsonfile\n\n\nMethods\n\n\n\n\nMads.loadjsonfile(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:10\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadmadsfile\n \n \nMethod\n.\n\n\nLoad MADS input file defining a MADS problem dictionary\n\n\n\n\nMads.loadmadsfile(filename)\n\n\nMads.loadmadsfile(filename; julia=false)\n\n\nMads.loadmadsfile(filename; julia=true)\n\n\n\n\nArguments:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\njulia\n : if \ntrue\n, force using \njulia\n parsing functions; if \nfalse\n (default), use \npython\n parsing functions [boolean]\n\n\n\n\nReturns:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\n\n\nExample: \nmd = loadmadsfile(\"input_file_name.mads\")\n\n\nMads.loadmadsfile\n\n\nMethods\n\n\n\n\nMads.loadmadsfile(filename::String; julia, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:24\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nKeywords\n\n\n\n\nformat\n\n\njulia\n\n\n\n\nsource\n\n\n#\n\n\nMads.loadyamlfile\n \n \nMethod\n.\n\n\nLoad YAML file\n\n\nArguments:\n\n\n\n\nfilename\n : file name\n\n\njulia=false\n : use Python YAML library (if available)\n\n\njulia=true\n : use Julia YAML library (if available)\n\n\n\n\nMads.loadyamlfile\n\n\nMethods\n\n\n\n\nMads.loadyamlfile(filename::String; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:17\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nKeywords\n\n\n\n\njulia\n\n\n\n\nsource\n\n\n#\n\n\nMads.localsa\n \n \nMethod\n.\n\n\nLocal sensitivity analysis based on eigen analysis of the parameter covariance matrix\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\npar\n : parameter set\n\n\nobs\n : observations for the parameter set\n\n\n\n\nMads.localsa\n\n\nMethods\n\n\n\n\nMads.localsa(madsdata::Associative; sinspace, filename, format, datafiles, imagefiles, par, obs, J)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:43\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nJ\n\n\ndatafiles\n\n\nfilename\n\n\nformat\n\n\nimagefiles\n\n\nobs\n\n\npar\n\n\nsinspace\n\n\n\n\nsource\n\n\n#\n\n\nMads.long_tests_off\n \n \nMethod\n.\n\n\nTurn off execution of long MADS tests (default)\n\n\nMads.long_tests_off\n\n\nMethods\n\n\n\n\nMads.long_tests_off()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:99\n\n\n\n\nsource\n\n\n#\n\n\nMads.long_tests_on\n \n \nMethod\n.\n\n\nTurn on execution of long MADS tests (dangerous)\n\n\nMads.long_tests_on\n\n\nMethods\n\n\n\n\nMads.long_tests_on()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:90\n\n\n\n\nsource\n\n\n#\n\n\nMads.madscores\n \n \nFunction\n.\n\n\nCheck the number of processors on a series of servers\n\n\nMads.madscores\n\n\nMethods\n\n\n\n\nMads.madscores(nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:297\n\n\nMads.madscores()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:297\n\n\n\n\nArguments\n\n\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.madscritical\n \n \nMethod\n.\n\n\nMADS critical error messages\n\n\nMads.madscritical\n\n\nMethods\n\n\n\n\nMads.madscritical(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:65\n\n\n\n\nArguments\n\n\n\n\nmessage::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsdebug\n \n \nFunction\n.\n\n\nMADS debug messages (controlled by \nquiet\n and \ndebuglevel\n)\n\n\nMads.madsdebug\n\n\nMethods\n\n\n\n\nMads.madsdebug(message::String, level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:19\n\n\nMads.madsdebug(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:19\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n\n\nmessage::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.madserror\n \n \nMethod\n.\n\n\nMADS error messages\n\n\nMads.madserror\n\n\nMethods\n\n\n\n\nMads.madserror(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:54\n\n\n\n\nArguments\n\n\n\n\nmessage::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsinfo\n \n \nFunction\n.\n\n\nMADS information/status messages (controlled by quiet\nand\nverbositylevel`)\n\n\nMads.madsinfo\n\n\nMethods\n\n\n\n\nMads.madsinfo(message::String, level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:31\n\n\nMads.madsinfo(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:31\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n\n\nmessage::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsload\n \n \nFunction\n.\n\n\nCheck the load of a series of servers\n\n\nMads.madsload\n\n\nMethods\n\n\n\n\nMads.madsload(nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:315\n\n\nMads.madsload()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:315\n\n\n\n\nArguments\n\n\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsmathprogbase\n \n \nFunction\n.\n\n\nMads execution using MathProgBase\n\n\nMads.madsmathprogbase\n\n\nMethods\n\n\n\n\nMads.madsmathprogbase()\n : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:13\n\n\nMads.madsmathprogbase(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:13\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsoutput\n \n \nFunction\n.\n\n\nMADS output (controlled by quiet\nand\nverbositylevel`)\n\n\nMads.madsoutput\n\n\nMethods\n\n\n\n\nMads.madsoutput(message::String, level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:7\n\n\nMads.madsoutput(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:7\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n\n\nmessage::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.madsup\n \n \nFunction\n.\n\n\nCheck the uptime of a series of servers\n\n\nMads.madsup\n\n\nMethods\n\n\n\n\nMads.madsup(nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:306\n\n\nMads.madsup()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:306\n\n\n\n\nArguments\n\n\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.madswarn\n \n \nMethod\n.\n\n\nMADS warning messages\n\n\nMads.madswarn\n\n\nMethods\n\n\n\n\nMads.madswarn(message::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:43\n\n\n\n\nArguments\n\n\n\n\nmessage::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.makearrayconditionalloglikelihood\n \n \nMethod\n.\n\n\nMake a conditional log likelihood function that accepts an array containing the opt parameters' values\n\n\nMads.makearrayconditionalloglikelihood\n\n\nMethods\n\n\n\n\nMads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:67\n\n\n\n\nArguments\n\n\n\n\nconditionalloglikelihood\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makearrayfunction\n \n \nFunction\n.\n\n\nMake a version of the function \nf\n that accepts an array containing the optimal parameters' values\n\n\nMads.makearrayfunction(madsdata, f)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nf\n : ...\n\n\n\n\nReturns:\n\n\n\n\narrayfunction\n : function accepting an array containing the optimal parameters' values\n\n\n\n\nMads.makearrayfunction\n\n\nMethods\n\n\n\n\nMads.makearrayfunction(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:21\n\n\nMads.makearrayfunction(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:21\n\n\n\n\nArguments\n\n\n\n\nf::Function\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makearrayloglikelihood\n \n \nMethod\n.\n\n\nMake a log likelihood function that accepts an array containing the opt parameters' values\n\n\nMads.makearrayloglikelihood\n\n\nMethods\n\n\n\n\nMads.makearrayloglikelihood(madsdata::Associative, loglikelihood)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:84\n\n\n\n\nArguments\n\n\n\n\nloglikelihood\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makebigdt!\n \n \nMethod\n.\n\n\nSetup Bayesian Information Gap Decision Theory (BIG-DT) problem\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nchoice\n : dictionary of BIG-DT choices (scenarios)\n\n\n\n\nReturns:\n\n\n\n\nbigdtproblem\n : BIG-DT problem type\n\n\n\n\nMads.makebigdt!\n\n\nMethods\n\n\n\n\nMads.makebigdt!(madsdata::Associative, choice::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:40\n\n\n\n\nArguments\n\n\n\n\nchoice::Associative\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makebigdt\n \n \nMethod\n.\n\n\nSetup Bayesian Information Gap Decision Theory (BIG-DT) problem\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nchoice\n : dictionary of BIG-DT choices (scenarios)\n\n\n\n\nReturns:\n\n\n\n\nbigdtproblem\n : BIG-DT problem type\n\n\n\n\nMads.makebigdt\n\n\nMethods\n\n\n\n\nMads.makebigdt(madsdata::Associative, choice::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:22\n\n\n\n\nArguments\n\n\n\n\nchoice::Associative\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makecomputeconcentrations\n \n \nMethod\n.\n\n\nCreate a function to compute concentrations for all the observation points using Anasol\n\n\nMads.makecomputeconcentrations\n\n\nMethods\n\n\n\n\nMads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:80\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\ncalcpredictions\n\n\ncalczeroweightobs\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\n\n\nReturns:\n\n\n\n\ncomputeconcentrations\n : function to compute concentrations; \ncomputeconcentrations\n returns a dictionary of observations and model predicted concentrations\n\n\n\n\nExamples:\n\n\ncomputeconcentrations()\n\n\nor\n\n\ncomputeconcentrations = Mads.makecomputeconcentrations(madsdata)\nparamkeys = Mads.getparamkeys(madsdata)\nparamdict = OrderedDict(zip(paramkeys, map(key-\nmadsdata[\nParameters\n][key][\ninit\n], paramkeys)))\nforward_preds = computeconcentrations(paramdict)\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.makedoublearrayfunction\n \n \nFunction\n.\n\n\nMake a version of the function \nf\n that accepts an array containing the optimal parameters' values, and returns an array of observations\n\n\nMads.makedoublearrayfunction(madsdata, f)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nf\n : ...\n\n\n\n\nReturns:\n\n\n\n\ndoublearrayfunction\n : function accepting an array containing the optimal parameters' values, and returning an array of observations\n\n\n\n\nMads.makedoublearrayfunction\n\n\nMethods\n\n\n\n\nMads.makedoublearrayfunction(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:46\n\n\nMads.makedoublearrayfunction(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:46\n\n\n\n\nArguments\n\n\n\n\nf::Function\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makelmfunctions\n \n \nMethod\n.\n\n\nMake forward model, gradient, objective functions needed for Levenberg-Marquardt optimization\n\n\nMads.makelmfunctions\n\n\nMethods\n\n\n\n\nMads.makelmfunctions(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:88\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makelocalsafunction\n \n \nMethod\n.\n\n\nMake gradient function needed for local sensitivity analysis\n\n\nMads.makelocalsafunction\n\n\nMethods\n\n\n\n\nMads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:185\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nmultiplycenterbyweights\n\n\n\n\nsource\n\n\n#\n\n\nMads.makelogprior\n \n \nMethod\n.\n\n\nMake a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary \nmadsdata\n\n\nMads.makelogprior\n\n\nMethods\n\n\n\n\nMads.makelogprior(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:389\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadscommandfunction\n \n \nMethod\n.\n\n\nMake MADS function to execute the model defined in the MADS problem dictionary \nmadsdata\n\n\nUsage:\n\n\nMads.makemadscommandfunction(madsdata)\n\n\n\n\n\nMADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:\n\n\n\n\nModel\n : execute a Julia function defined in an input Julia file. The function that should accept a \nparameter\n dictionary with all the model parameters as an input argument and should return an \nobservation\n dictionary with all the model predicted observations. MADS will execute the first function defined in the file.\n\n\nMADS model\n : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\nJulia model\n : execute an internal Julia function that accepts a \nparameter\n dictionary with all the model parameters as an input argument and will return an \nobservation\n dictionary with all the model predicted observations.\n\n\nCommand\n : execute an external UNIX command or script that will execute an external model.\n\n\nJulia command\n : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an \nobservation\n dictionary with model predictions.\n\n\n\n\nBoth \nCommand\n and \nJulia command\n can use different approaches to pass model parameters to the external model.\n\n\nOnly \nCommand\n uses different approaches to get back the model outputs. The script defined under \nJulia command\n parses the model outputs using Julia.\n\n\nThe available options for writing model inputs and reading model outputs are as follows.\n\n\nOptions for writing model inputs:\n\n\n\n\nTemplates\n : template files for writing model input files as defined at http://mads.lanl.gov\n\n\nASCIIParameters\n : model parameters written in a ASCII file\n\n\nJLDParameters\n : model parameters written in a JLD file\n\n\nYAMLParameters\n : model parameters written in a YAML file\n\n\nJSONParameters\n : model parameters written in a JSON file\n\n\n\n\nOptions for reading model outputs:\n\n\n\n\nInstructions\n : instruction files for reading model output files as defined at http://mads.lanl.gov\n\n\nASCIIPredictions\n : model predictions read from a ASCII file\n\n\nJLDPredictions\n : model predictions read from a JLD file\n\n\nYAMLPredictions\n : model predictions read from a YAML file\n\n\nJSONPredictions\n : model predictions read from a JSON file\n\n\n\n\nMads.makemadscommandfunction\n\n\nMethods\n\n\n\n\nMads.makemadscommandfunction(madsdatawithobs::Associative; calczeroweightobs, calcpredictions)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:53\n\n\n\n\nArguments\n\n\n\n\nmadsdatawithobs::Associative\n\n\n\n\nKeywords\n\n\n\n\ncalcpredictions\n\n\ncalczeroweightobs\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadscommandfunctionandgradient\n \n \nMethod\n.\n\n\nMake MADS forward \n gradient functions for the model defined in the MADS problem dictionary \nmadsdata\n\n\nMads.makemadscommandfunctionandgradient\n\n\nMethods\n\n\n\n\nMads.makemadscommandfunctionandgradient(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:321\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadscommandgradient\n \n \nMethod\n.\n\n\nMake MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary \nmadsdata\n\n\nMads.makemadscommandgradient\n\n\nMethods\n\n\n\n\nMads.makemadscommandgradient(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:303\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadsconditionalloglikelihood\n \n \nMethod\n.\n\n\nMake a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary \nmadsdata\n.\n\n\nMads.makemadsconditionalloglikelihood\n\n\nMethods\n\n\n\n\nMads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:406\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nweightfactor\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadsloglikelihood\n \n \nMethod\n.\n\n\nMake a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under \nLogLikelihood\n or computed internally.\n\n\nMads.makemadsloglikelihood\n\n\nMethods\n\n\n\n\nMads.makemadsloglikelihood(madsdata::Associative; weightfactor)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:434\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nweightfactor\n\n\n\n\nsource\n\n\n#\n\n\nMads.makemadsreusablefunction\n \n \nFunction\n.\n\n\nMake Mads reusable function\n\n\nMads.makemadsreusablefunction\n\n\nMethods\n\n\n\n\nMads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:204\n\n\nMads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:204\n\n\nMads.makemadsreusablefunction(paramkeys::Array{T\n:Any,1}, obskeys::Array{T\n:Any,1}, madsdatarestart::Union{Bool,String}, madscommandfunction::Function, restartdir::String; usedict)\n : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:207\n\n\n\n\nArguments\n\n\n\n\nmadscommandfunction::Function\n\n\nmadsdata::Associative\n\n\nmadsdatarestart::Union{Bool,String}\n\n\nobskeys::Array{T\n:Any,1}\n\n\nparamkeys::Array{T\n:Any,1}\n\n\nrestartdir::String\n\n\nsuffix::String\n\n\n\n\nKeywords\n\n\n\n\nusedict\n\n\n\n\nsource\n\n\n#\n\n\nMads.makempbfunctions\n \n \nMethod\n.\n\n\nMake forward model, gradient, objective functions needed for MathProgBase optimization\n\n\nMads.makempbfunctions\n\n\nMethods\n\n\n\n\nMads.makempbfunctions(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:82\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.maxtorealmax!\n \n \nMethod\n.\n\n\nScale down values larger than max(Float32) in a Dataframe \ndf\n so that Gadfly can plot the data\n\n\nMads.maxtorealmax!\n\n\nMethods\n\n\n\n\nMads.maxtorealmax!(df::DataFrames.DataFrame)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:937\n\n\n\n\nArguments\n\n\n\n\ndf::DataFrames.DataFrame\n\n\n\n\nsource\n\n\n#\n\n\nMads.modelinformationcriteria\n \n \nFunction\n.\n\n\nModel section information criteria\n\n\nMads.modelinformationcriteria\n\n\nMethods\n\n\n\n\nMads.modelinformationcriteria(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:7\n\n\nMads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N\n:Any})\n : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:7\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\npar::Array{Float64,N\n:Any}\n\n\n\n\nsource\n\n\n#\n\n\nMads.modobsweights!\n \n \nMethod\n.\n\n\nModify (multiply) observation weights in the MADS problem dictionary\n\n\nMads.modobsweights!\n\n\nMethods\n\n\n\n\nMads.modobsweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:271\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nvalue::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.modwellweights!\n \n \nMethod\n.\n\n\nModify (multiply) well weights in the MADS problem dictionary\n\n\nMads.modwellweights!\n\n\nMethods\n\n\n\n\nMads.modwellweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:313\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nvalue::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.montecarlo\n \n \nMethod\n.\n\n\nMonte Carlo analysis\n\n\nMads.montecarlo(madsdata; N=100)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary sampling uniformly between mins/maxs\n\n\nN\n : number of samples (default = 100)\n\n\n\n\nReturns:\n\n\n\n\noutputdicts\n : parameter dictionary containing the data arrays\n\n\n\n\nDumps:\n\n\n\n\nYAML output file with the parameter dictionary containing the data arrays (\nmads_root_name\n.mcresults.yaml\n)\n\n\n\n\nMads.montecarlo\n\n\nMethods\n\n\n\n\nMads.montecarlo(madsdata::Associative; N, filename)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:179\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nN\n\n\nfilename\n\n\n\n\nsource\n\n\n#\n\n\nMads.naive_get_deltax\n \n \nMethod\n.\n\n\nNaive Levenberg-Marquardt optimization: get the LM parameter space step\n\n\nMads.naive_get_deltax\n\n\nMethods\n\n\n\n\nMads.naive_get_deltax(JpJ::Array{Float64,2}, Jp::Array{Float64,2}, f0::Array{Float64,1}, lambda::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:261\n\n\n\n\nArguments\n\n\n\n\nJp::Array{Float64,2}\n\n\nJpJ::Array{Float64,2}\n\n\nf0::Array{Float64,1}\n\n\nlambda::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.naive_levenberg_marquardt\n \n \nFunction\n.\n\n\nNaive Levenberg-Marquardt optimization\n\n\nArguments:\n\n\n\n\nf\n : forward model function\n\n\ng\n : gradient function for the forward model\n\n\nx0\n : initial parameter guess\n\n\no\n : objective function\n\n\ntolX\n : parameter space tolerance\n\n\ntolG\n : parameter space update tolerance\n\n\ntolOF\n : objective function update tolerance\n\n\nmaxEval\n : maximum number of model evaluations\n\n\nmaxIter\n : maximum number of optimization iterations\n\n\nlambda\n : initial Levenberg-Marquardt lambda [100]\n\n\nlambda_mu\n : lambda multiplication factor \u03bc [10]\n\n\nnp_lambda\n : number of parallel lambda solves\n\n\n\n\nMads.naive_levenberg_marquardt\n\n\nMethods\n\n\n\n\nMads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:303\n\n\nMads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, np_lambda, lambda, lambda_mu)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:303\n\n\n\n\nArguments\n\n\n\n\nf::Function\n\n\ng::Function\n\n\no::Function\n\n\nx0::Array{Float64,1}\n\n\n\n\nKeywords\n\n\n\n\nlambda\n\n\nlambda_mu\n\n\nmaxEval\n\n\nmaxIter\n\n\nnp_lambda\n\n\n\n\nsource\n\n\n#\n\n\nMads.naive_lm_iteration\n \n \nMethod\n.\n\n\nNaive Levenberg-Marquardt optimization: perform LM iteration\n\n\nMads.naive_lm_iteration\n\n\nMethods\n\n\n\n\nMads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:272\n\n\n\n\nArguments\n\n\n\n\nf0::Array{Float64,1}\n\n\nf::Function\n\n\ng::Function\n\n\nlambdas::Array{Float64,1}\n\n\no::Function\n\n\nx0::Array{Float64,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.noplot\n \n \nMethod\n.\n\n\nDisable MADS plotting\n\n\nMads.noplot\n\n\nMethods\n\n\n\n\nMads.noplot()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:239\n\n\n\n\nsource\n\n\n#\n\n\nMads.obslineismatch\n \n \nMethod\n.\n\n\nMatch an instruction line in the Mads instruction file with model input file\n\n\nMads.obslineismatch\n\n\nMethods\n\n\n\n\nMads.obslineismatch(obsline::String, regexs::Array{Regex,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:716\n\n\n\n\nArguments\n\n\n\n\nobsline::String\n\n\nregexs::Array{Regex,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.of\n \n \nFunction\n.\n\n\nCompute objective function\n\n\nMads.of\n\n\nMethods\n\n\n\n\nMads.of(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:51\n\n\nMads.of(madsdata::Associative, results::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:44\n\n\nMads.of(madsdata::Associative, resultdict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:48\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nresultdict::Associative\n\n\nresults::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.paramarray2dict\n \n \nMethod\n.\n\n\nConvert a parameter array to a parameter dictionary of arrays\n\n\nMads.paramarray2dict\n\n\nMethods\n\n\n\n\nMads.paramarray2dict(madsdata::Associative, array::Array)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:231\n\n\n\n\nArguments\n\n\n\n\narray::Array\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.paramdict2array\n \n \nMethod\n.\n\n\nConvert a parameter dictionary of arrays to a parameter array\n\n\nMads.paramdict2array\n\n\nMethods\n\n\n\n\nMads.paramdict2array(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:245\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.parsemadsdata!\n \n \nMethod\n.\n\n\nParse loaded Mads problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\n\n\nMads.parsemadsdata!\n\n\nMethods\n\n\n\n\nMads.parsemadsdata!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:56\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.parsenodenames\n \n \nFunction\n.\n\n\nParse string with node names defined in SLURM\n\n\nMads.parsenodenames\n\n\nMethods\n\n\n\n\nMads.parsenodenames(nodenames::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208\n\n\nMads.parsenodenames(nodenames::String, ntasks_per_node::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208\n\n\n\n\nArguments\n\n\n\n\nnodenames::String\n\n\nntasks_per_node::Integer\n\n\n\n\nsource\n\n\n#\n\n\nMads.partialof\n \n \nMethod\n.\n\n\nCompute the sum of squared residuals for observations that match a regular expression\n\n\nMads.partialof\n\n\nMethods\n\n\n\n\nMads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:67\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nregex::Regex\n\n\nresultdict::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotgrid\n \n \nFunction\n.\n\n\nPlot a 3D grid solution based on model predictions in array \ns\n, initial parameters, or user provided parameter values\n\n\nMads.plotgrid\n\n\nMethods\n\n\n\n\nMads.plotgrid(madsdata::Associative; addtitle, title, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:55\n\n\nMads.plotgrid(madsdata::Associative, s::Array{Float64,N\n:Any}; addtitle, title, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:5\n\n\nMads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:60\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparameters::Associative\n\n\ns::Array{Float64,N\n:Any}\n\n\n\n\nKeywords\n\n\n\n\naddtitle\n\n\nfilename\n\n\nformat\n\n\ntitle\n\n\n\n\nplotgrid(madsdata, s; addtitle=true, title=\n, filename=\n, format=\n)\nplotgrid(madsdata; addtitle=true, title=\n, filename=\n, format=\n)\nplotgrid(madsdata, parameters; addtitle=true, title=\n, filename=\n, format=\n)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparameters\n : dictionary with model parameters\n\n\ns\n : model predictions array\n\n\naddtitle\n : add plot title [true]\n\n\ntitle\n : plot title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotmadsproblem\n \n \nMethod\n.\n\n\nPlot contaminant sources and wells defined in MADS problem dictionary\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nkeyword\n : to be added in the filename\n\n\n\n\nMads.plotmadsproblem\n\n\nMethods\n\n\n\n\nMads.plotmadsproblem(madsdata::Associative; imagefile, format, filename, keyword)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:77\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nfilename\n\n\nformat\n\n\nimagefile\n\n\nkeyword\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotmass\n \n \nMethod\n.\n\n\nPlot injected/reduced contaminant mass\n\n\n\n\nMads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\")\n\n\n\n\nArguments:\n\n\n\n\nlambda\n : array with all the lambda values\n\n\nmass_injected\n : array with associated total injected mass\n\n\nmass_reduced\n : array with associated total reduced mass\n\n\nfilename\n : output filename for the generated plot\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nDumps: image file with name \nfilename\n and in specified \nformat\n\n\nMads.plotmass\n\n\nMethods\n\n\n\n\nMads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsAnasolPlot.jl:21\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\nlambda::Array{Float64,1}\n\n\nmass_injected::Array{Float64,1}\n\n\nmass_reduced::Array{Float64,1}\n\n\n\n\nKeywords\n\n\n\n\nformat\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotmatches\n \n \nFunction\n.\n\n\nPlot the matches between model predictions and observations\n\n\nMads.plotmatches\n\n\nMethods\n\n\n\n\nMads.plotmatches(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:148\n\n\nMads.plotmatches(madsdata::Associative, rx::Regex; filename, format, title, xtitle, ytitle, separate_files, hsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:148\n\n\nMads.plotmatches(madsdata::Associative, dict_in::Associative; filename, format, title, xtitle, ytitle, separate_files, hsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:180\n\n\nMads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; filename, format, key2time, title, xtitle, ytitle, separate_files, hsize)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:156\n\n\n\n\nArguments\n\n\n\n\ndict_in::Associative\n\n\nmadsdata::Associative\n\n\nresult::Associative\n\n\nrx::Regex\n\n\n\n\nKeywords\n\n\n\n\nfilename\n\n\nformat\n\n\nhsize\n\n\nkey2time\n\n\nseparate_files\n\n\ntitle\n\n\nxtitle\n\n\nytitle\n\n\n\n\nplotmatches(madsdata; filename=\n, format=\n)\nplotmatches(madsdata, param; filename=\n, format=\n)\nplotmatches(madsdata, result; filename=\n, format=\n)\nplotmatches(madsdata, result, r\nNO3\n; filename=\n, format=\n)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparam\n : dictionary with model parameters\n\n\nresult\n : dictionary with model predictions\n\n\nrx\n : regular expression to filter the outputs\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotobsSAresults\n \n \nMethod\n.\n\n\nPlot the sensitivity analysis results for the observations\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nfilter\n : string or regex to plot only observations containing \nfilter\n\n\nkeyword\n : to be added in the auto-generated filename\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nMads.plotobsSAresults\n\n\nMethods\n\n\n\n\nMads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:500\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nresult::Associative\n\n\n\n\nKeywords\n\n\n\n\ndebug\n\n\nfilename\n\n\nfilter\n\n\nformat\n\n\nkeyword\n\n\nseparate_files\n\n\nxtitle\n\n\nytitle\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotrobustnesscurves\n \n \nMethod\n.\n\n\nPlot BIG-DT robustness curves\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nbigdtresults\n : BIG-DT results\n\n\nfilename\n : output file name used to dump plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nMads.plotrobustnesscurves\n\n\nMethods\n\n\n\n\nMads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz)\n : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGapPlot.jl:16\n\n\n\n\nArguments\n\n\n\n\nbigdtresults::Dict\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nfilename\n\n\nformat\n\n\nmaxhoriz\n\n\nmaxprob\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotseries\n \n \nFunction\n.\n\n\nCreate plots of data series\n\n\nArguments:\n\n\n\n\nX\n : matrix with the series data\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : x-axis title\n\n\nytitle\n : y-axis title\n\n\ntitle\n : plot title\n\n\nname\n : series name\n\n\ncombined\n : \ntrue\n by default\n\n\n\n\nMads.plotseries\n\n\nMethods\n\n\n\n\nMads.plotseries(X::Array{T\n:Any,2})\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:988\n\n\nMads.plotseries(X::Array{T\n:Any,2}, filename::String; combined, format, xtitle, ytitle, title, name)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:988\n\n\n\n\nArguments\n\n\n\n\nX::Array{T\n:Any,2}\n\n\nfilename::String\n\n\n\n\nKeywords\n\n\n\n\ncombined\n\n\nformat\n\n\nname\n\n\ntitle\n\n\nxtitle\n\n\nytitle\n\n\n\n\nsource\n\n\n#\n\n\nMads.plotwellSAresults\n \n \nFunction\n.\n\n\nPlot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)\n\n\nMads.plotwellSAresults\n\n\nMethods\n\n\n\n\nMads.plotwellSAresults(madsdata::Associative, result; xtitle, ytitle, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:374\n\n\nMads.plotwellSAresults(madsdata::Associative, result, wellname; xtitle, ytitle, filename, format)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:385\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nresult\n\n\nwellname\n\n\n\n\nKeywords\n\n\n\n\nfilename\n\n\nformat\n\n\nxtitle\n\n\nytitle\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nresult\n : sensitivity analysis results\n\n\nwellname\n : well name\n\n\nxtitle\n : x-axis title\n\n\nytitle\n : y-axis title\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nsource\n\n\n#\n\n\nMads.printSAresults\n \n \nMethod\n.\n\n\nPrint sensitivity analysis results\n\n\nMads.printSAresults\n\n\nMethods\n\n\n\n\nMads.printSAresults(madsdata::Associative, results::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:778\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nresults::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.printSAresults2\n \n \nMethod\n.\n\n\nPrint sensitivity analysis results (method 2)\n\n\nMads.printSAresults2\n\n\nMethods\n\n\n\n\nMads.printSAresults2(madsdata::Associative, results::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:858\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nresults::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.push\n \n \nFunction\n.\n\n\nPush the latest version of the Mads / Julia modules in the repo\n\n\nMads.push\n\n\nMethods\n\n\n\n\nMads.push(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:112\n\n\nMads.push()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:112\n\n\n\n\nArguments\n\n\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.quietoff\n \n \nMethod\n.\n\n\nMake MADS not quiet\n\n\nMads.quietoff\n\n\nMethods\n\n\n\n\nMads.quietoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:44\n\n\n\n\nsource\n\n\n#\n\n\nMads.quieton\n \n \nMethod\n.\n\n\nMake MADS quiet\n\n\nMads.quieton\n\n\nMethods\n\n\n\n\nMads.quieton()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:34\n\n\n\n\nsource\n\n\n#\n\n\nMads.readasciipredictions\n \n \nMethod\n.\n\n\nRead MADS predictions from an ASCII file\n\n\nMads.readasciipredictions\n\n\nMethods\n\n\n\n\nMads.readasciipredictions(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:26\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.readjsonpredictions\n \n \nMethod\n.\n\n\nRead MADS model predictions from a JSON file\n\n\nMads.readjsonpredictions\n\n\nMethods\n\n\n\n\nMads.readjsonpredictions(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:37\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.readmodeloutput\n \n \nMethod\n.\n\n\nRead model outputs saved for MADS\n\n\nMads.readmodeloutput\n\n\nMethods\n\n\n\n\nMads.readmodeloutput(madsdata::Associative; obskeys, path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:534\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nobskeys\n\n\npath\n\n\n\n\nsource\n\n\n#\n\n\nMads.readobservations\n \n \nFunction\n.\n\n\nRead observations\n\n\nMads.readobservations\n\n\nMethods\n\n\n\n\nMads.readobservations(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:780\n\n\nMads.readobservations(madsdata::Associative, obskeys::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:780\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nobskeys::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.readobservations_cmads\n \n \nMethod\n.\n\n\nRead observations using C Mads library\n\n\nMads.readobservations_cmads\n\n\nMethods\n\n\n\n\nMads.readobservations_cmads(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:9\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.readyamlpredictions\n \n \nMethod\n.\n\n\nRead MADS model predictions from a YAML file \nfilename\n\n\nMads.readyamlpredictions\n\n\nMethods\n\n\n\n\nMads.readyamlpredictions(filename::String; julia)\n : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:118\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nKeywords\n\n\n\n\njulia\n\n\n\n\nsource\n\n\n#\n\n\nMads.regexs2obs\n \n \nMethod\n.\n\n\nGet observations for a set of regular expressions\n\n\nMads.regexs2obs\n\n\nMethods\n\n\n\n\nMads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:726\n\n\n\n\nArguments\n\n\n\n\ngetparamhere::Array{Bool,1}\n\n\nobsline::String\n\n\nobsnames::Array{String,1}\n\n\nregexs::Array{Regex,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.reload\n \n \nMethod\n.\n\n\nReload Mads modules\n\n\nMads.reload\n\n\nMethods\n\n\n\n\nMads.reload()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:34\n\n\n\n\nsource\n\n\n#\n\n\nMads.required\n \n \nFunction\n.\n\n\nLists modules required by a module (Mads by default)\n\n\nMads.required\n\n\nMethods\n\n\n\n\nMads.required(modulename::String, filtermodule::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25\n\n\nMads.required(modulename::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25\n\n\nMads.required()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25\n\n\n\n\nArguments\n\n\n\n\nfiltermodule::String\n\n\nmodulename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.resetmodelruns\n \n \nMethod\n.\n\n\nReset the model runs count to be equal to zero\n\n\nMads.resetmodelruns\n\n\nMethods\n\n\n\n\nMads.resetmodelruns()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:126\n\n\n\n\nsource\n\n\n#\n\n\nMads.residuals\n \n \nFunction\n.\n\n\nCompute residuals\n\n\nMads.residuals\n\n\nMethods\n\n\n\n\nMads.residuals(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:32\n\n\nMads.residuals(madsdata::Associative, results::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:6\n\n\nMads.residuals(madsdata::Associative, resultdict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:29\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nresultdict::Associative\n\n\nresults::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.restartoff\n \n \nMethod\n.\n\n\nMADS restart off\n\n\nMads.restartoff\n\n\nMethods\n\n\n\n\nMads.restartoff()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:16\n\n\n\n\nsource\n\n\n#\n\n\nMads.restarton\n \n \nMethod\n.\n\n\nMADS restart on\n\n\nMads.restarton\n\n\nMethods\n\n\n\n\nMads.restarton()\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:7\n\n\n\n\nsource\n\n\n#\n\n\nMads.reweighsamples\n \n \nMethod\n.\n\n\nReweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\npredictions\n : the model predictions for each of the samples\n\n\noldllhoods\n : the log likelihoods of the parameters in the old distribution\n\n\n\n\nReturns:\n\n\n\n\nnewllhoods\n : vector of log-likelihoods after reweighing\n\n\n\n\nMads.reweighsamples\n\n\nMethods\n\n\n\n\nMads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:210\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\noldllhoods::Array{T\n:Any,1}\n\n\npredictions::Array\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmdir\n \n \nMethod\n.\n\n\nRemove directory\n\n\nMads.rmdir\n\n\nMethods\n\n\n\n\nMads.rmdir(dir::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:866\n\n\n\n\nArguments\n\n\n\n\ndir::String\n\n\n\n\nKeywords\n\n\n\n\npath\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmfile\n \n \nMethod\n.\n\n\nRemove file\n\n\nMads.rmfile\n\n\nMethods\n\n\n\n\nMads.rmfile(filename::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:880\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nKeywords\n\n\n\n\npath\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmfiles_ext\n \n \nMethod\n.\n\n\nRemove files with extension \next\n\n\nMads.rmfiles_ext\n\n\nMethods\n\n\n\n\nMads.rmfiles_ext(ext::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:894\n\n\n\n\nArguments\n\n\n\n\next::String\n\n\n\n\nKeywords\n\n\n\n\npath\n\n\n\n\nsource\n\n\n#\n\n\nMads.rmfiles_root\n \n \nMethod\n.\n\n\nRemove files with root \nroot\n\n\nMads.rmfiles_root\n\n\nMethods\n\n\n\n\nMads.rmfiles_root(root::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:905\n\n\n\n\nArguments\n\n\n\n\nroot::String\n\n\n\n\nKeywords\n\n\n\n\npath\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock\n \n \nMethod\n.\n\n\nRosenbrock test function\n\n\nMads.rosenbrock\n\n\nMethods\n\n\n\n\nMads.rosenbrock(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:30\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock2_gradient_lm\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function\n\n\nMads.rosenbrock2_gradient_lm\n\n\nMethods\n\n\n\n\nMads.rosenbrock2_gradient_lm(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:16\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock2_lm\n \n \nMethod\n.\n\n\nRosenbrock test function (more difficult to solve)\n\n\nMads.rosenbrock2_lm\n\n\nMethods\n\n\n\n\nMads.rosenbrock2_lm(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:7\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_gradient!\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function\n\n\nMads.rosenbrock_gradient!\n\n\nMethods\n\n\n\n\nMads.rosenbrock_gradient!(x::Array{T\n:Any,1}, storage::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:48\n\n\n\n\nArguments\n\n\n\n\nstorage::Array{T\n:Any,1}\n\n\nx::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_gradient_lm\n \n \nMethod\n.\n\n\nParameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely)\n\n\nMads.rosenbrock_gradient_lm\n\n\nMethods\n\n\n\n\nMads.rosenbrock_gradient_lm(x::Array{T\n:Any,1}; dx, center)\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:58\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n\n\n\n\nKeywords\n\n\n\n\ncenter\n\n\ndx\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_hessian!\n \n \nMethod\n.\n\n\nParameter Hessian of the Rosenbrock test function\n\n\nMads.rosenbrock_hessian!\n\n\nMethods\n\n\n\n\nMads.rosenbrock_hessian!(x::Array{T\n:Any,1}, storage::Array{T\n:Any,2})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:72\n\n\n\n\nArguments\n\n\n\n\nstorage::Array{T\n:Any,2}\n\n\nx::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.rosenbrock_lm\n \n \nMethod\n.\n\n\nRosenbrock test function for LM optimization (returns the 2 components separetely)\n\n\nMads.rosenbrock_lm\n\n\nMethods\n\n\n\n\nMads.rosenbrock_lm(x::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:39\n\n\n\n\nArguments\n\n\n\n\nx::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.runcmd\n \n \nFunction\n.\n\n\nRun external command and pipe stdout and stderr\n\n\nMads.runcmd\n\n\nMethods\n\n\n\n\nMads.runcmd(cmd::Cmd, quiet::Bool)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:324\n\n\nMads.runcmd(cmd::Cmd)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:324\n\n\n\n\nArguments\n\n\n\n\ncmd::Cmd\n\n\nquiet::Bool\n\n\n\n\nsource\n\n\n#\n\n\nMads.runremote\n \n \nFunction\n.\n\n\nRun remote command on a series of servers\n\n\nMads.runremote\n\n\nMethods\n\n\n\n\nMads.runremote(cmd::String, nodenames::Array{String,1})\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277\n\n\nMads.runremote(cmd::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277\n\n\n\n\nArguments\n\n\n\n\ncmd::String\n\n\nnodenames::Array{String,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.saltelli\n \n \nMethod\n.\n\n\nSaltelli sensitivity analysis\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nseed\n : initial random seed\n\n\nrestartdir\n : directory where files will be stored containing model results for fast simulation restarts\n\n\nparallel\n : set to true if the model runs should be performed in parallel\n\n\n\n\nMads.saltelli\n\n\nMethods\n\n\n\n\nMads.saltelli(madsdata::Associative; N, seed, parallel, restartdir, checkpointfrequency)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:511\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nN\n\n\ncheckpointfrequency\n\n\nparallel\n\n\nrestartdir\n\n\nseed\n\n\n\n\nsource\n\n\n#\n\n\nMads.saltellibrute\n \n \nMethod\n.\n\n\nSaltelli sensitivity analysis (brute force)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nN\n : number of samples\n\n\nseed\n : initial random seed\n\n\n\n\nMads.saltellibrute\n\n\nMethods\n\n\n\n\nMads.saltellibrute(madsdata::Associative; N, seed, restartdir)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:339\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nN\n\n\nrestartdir\n\n\nseed\n\n\n\n\nsource\n\n\n#\n\n\nMads.saltellibruteparallel\n \n \nMethod\n.\n\n\nParallel version of saltellibrute\n\n\nsource\n\n\n#\n\n\nMads.saltelliparallel\n \n \nMethod\n.\n\n\nParallel version of saltelli\n\n\nsource\n\n\n#\n\n\nMads.savecalibrationresults\n \n \nMethod\n.\n\n\nSave calibration results\n\n\nMads.savecalibrationresults\n\n\nMethods\n\n\n\n\nMads.savecalibrationresults(madsdata::Associative, results)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:208\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nresults\n\n\n\n\nsource\n\n\n#\n\n\nMads.savemadsfile\n \n \nFunction\n.\n\n\nSave MADS problem dictionary \nmadsdata\n in MADS input file \nfilename\n\n\n\n\nMads.savemadsfile(madsdata)\n\n\nMads.savemadsfile(madsdata, \"test.mads\")\n\n\nMads.savemadsfile(madsdata, parameters, \"test.mads\")\n\n\nMads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true)\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : Mads problem dictionary\n\n\nparameters\n : Dictinary with parameters (optional)\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\njulia\n : if \ntrue\n use Julia JSON module to save\n\n\nexplicit\n : if \ntrue\n ignores MADS YAML file modifications and rereads the original input file\n\n\n\n\nMads.savemadsfile\n\n\nMethods\n\n\n\n\nMads.savemadsfile(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:169\n\n\nMads.savemadsfile(madsdata::Associative, filename::String; julia, explicit)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:169\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nexplicit\n\n\njulia\n\n\n\n\nsource\n\n\n#\n\n\nMads.savemcmcresults\n \n \nMethod\n.\n\n\nSave MCMC chain in a file\n\n\nMads.savemcmcresults\n\n\nMethods\n\n\n\n\nMads.savemcmcresults(chain::Array, filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:136\n\n\n\n\nArguments\n\n\n\n\nchain::Array\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.scatterplotsamples\n \n \nMethod\n.\n\n\nCreate histogram/scatter plots of model parameter samples\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nsamples\n : matrix with model parameters\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nMads.scatterplotsamples\n\n\nMethods\n\n\n\n\nMads.scatterplotsamples(madsdata::Associative, samples::Array{T\n:Any,2}, filename::String; format, dot_size)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:338\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\nmadsdata::Associative\n\n\nsamples::Array{T\n:Any,2}\n\n\n\n\nKeywords\n\n\n\n\ndot_size\n\n\nformat\n\n\n\n\nsource\n\n\n#\n\n\nMads.searchdir\n \n \nFunction\n.\n\n\nGet files in the current directory or in a directory defined by \npath\n matching pattern \nkey\n which can be a string or regular expression\n\n\nMads.searchdir\n\n\nMethods\n\n\n\n\nMads.searchdir(key::String; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:563\n\n\nMads.searchdir(key::Regex; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:562\n\n\n\n\nArguments\n\n\n\n\nkey::Regex\n\n\nkey::String\n\n\n\n\nKeywords\n\n\n\n\npath\n\n\n\n\nExamples:\n\n\n\n\nMads.searchdir(\"a\")\n\n\nMads.searchdir(r\"[A-B]\"; path = \".\")\n\n\nMads.searchdir(r\".*.cov\"; path = \".\")\n\n\n\n\nArguments:\n\n\n\n\nkey\n : matching pattern for Mads input files (string or regular expression accepted)\n\n\npath\n : search directory for the mads input files\n\n\n\n\nReturns:\n\n\n\n\nfilename\n : an array with file names matching the pattern in the specified directory\n\n\n\n\nsource\n\n\n#\n\n\nMads.set_nprocs_per_task\n \n \nFunction\n.\n\n\nSet number of processors needed for each parallel task at each node\n\n\nMads.set_nprocs_per_task\n\n\nMethods\n\n\n\n\nMads.set_nprocs_per_task()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:27\n\n\nMads.set_nprocs_per_task(local_nprocs_per_task::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:27\n\n\n\n\nArguments\n\n\n\n\nlocal_nprocs_per_task::Integer\n\n\n\n\nsource\n\n\n#\n\n\nMads.setallparamsoff!\n \n \nMethod\n.\n\n\nSet all parameters OFF\n\n\nMads.setallparamsoff!\n\n\nMethods\n\n\n\n\nMads.setallparamsoff!(madsdata::Associative; filter)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:391\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nfilter\n\n\n\n\nsource\n\n\n#\n\n\nMads.setallparamson!\n \n \nMethod\n.\n\n\nSet all parameters ON\n\n\nMads.setallparamson!\n\n\nMethods\n\n\n\n\nMads.setallparamson!(madsdata::Associative; filter)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:379\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nKeywords\n\n\n\n\nfilter\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdebuglevel\n \n \nMethod\n.\n\n\nSet MADS debug level\n\n\nMads.setdebuglevel\n\n\nMethods\n\n\n\n\nMads.setdebuglevel(level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:108\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdefaultplotformat\n \n \nMethod\n.\n\n\nSet the default plot format (\nSVG\n is the default format)\n\n\nMads.setdefaultplotformat\n\n\nMethods\n\n\n\n\nMads.setdefaultplotformat(format::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:15\n\n\n\n\nArguments\n\n\n\n\nformat::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdir\n \n \nFunction\n.\n\n\nSet the working directory (for parallel environments)\n\n\nUsage:\n\n\n@everywhere Mads.setdir()\n@everywhere Mads.setdir(\n/home/monty\n)\n\n\n\n\n\nMads.setdir\n\n\nMethods\n\n\n\n\nMads.setdir()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:254\n\n\nMads.setdir(dir)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:249\n\n\n\n\nArguments\n\n\n\n\ndir\n\n\n\n\nsource\n\n\n#\n\n\nMads.setdynamicmodel\n \n \nMethod\n.\n\n\nSet Dynamic Model for MADS model calls using internal Julia functions\n\n\nMads.setdynamicmodel\n\n\nMethods\n\n\n\n\nMads.setdynamicmodel(madsdata::Associative, f::Function)\n : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:105\n\n\n\n\nArguments\n\n\n\n\nf::Function\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.setmadsinputfile\n \n \nMethod\n.\n\n\nSet a default MADS input file\n\n\nMads.setmadsinputfile(filename)\n\n\nArguments:\n\n\n\n\nfilename\n : input file name (e.g. \ninput_file_name.mads\n)\n\n\n\n\nMads.setmadsinputfile\n\n\nMethods\n\n\n\n\nMads.setmadsinputfile(filename::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:222\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.setmodelinputs\n \n \nMethod\n.\n\n\nSet model input files; delete files where model output should be saved for MADS\n\n\nMads.setmodelinputs\n\n\nMethods\n\n\n\n\nMads.setmodelinputs(madsdata::Associative, parameters::Associative; path)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:468\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparameters::Associative\n\n\n\n\nKeywords\n\n\n\n\npath\n\n\n\n\nsource\n\n\n#\n\n\nMads.setnewmadsfilename\n \n \nMethod\n.\n\n\nSet new mads file name\n\n\nMads.setnewmadsfilename\n\n\nMethods\n\n\n\n\nMads.setnewmadsfilename(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:352\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.setobservationtargets!\n \n \nMethod\n.\n\n\nSet observations (calibration targets) in the MADS problem dictionary based on a \npredictions\n dictionary\n\n\nMads.setobservationtargets!\n\n\nMethods\n\n\n\n\nMads.setobservationtargets!(madsdata::Associative, predictions::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:419\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\npredictions::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.setobstime!\n \n \nFunction\n.\n\n\nSet observation time based on the observation name in the MADS problem dictionary\n\n\nMads.setobstime!\n\n\nMethods\n\n\n\n\nMads.setobstime!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:204\n\n\nMads.setobstime!(madsdata::Associative, separator::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:204\n\n\nMads.setobstime!(madsdata::Associative, rx::Regex)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:215\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nrx::Regex\n\n\nseparator::String\n\n\n\n\nUsage:\n\n\nMads.setobstime!(madsdata, separator)\nMads.setobstime!(madsdata, regex)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nseparator\n : string to separator\n\n\nregex\n : regular expression to match\n\n\n\n\nExamples:\n\n\nMads.setobstime!(madsdata, \n_t\n)\nMads.setobstime!(madsdata, r\n[A-x]*_t([0-9,.]+)\n)\n\n\n\n\n\nsource\n\n\n#\n\n\nMads.setobsweights!\n \n \nMethod\n.\n\n\nSet observation weights in the MADS problem dictionary\n\n\nMads.setobsweights!\n\n\nMethods\n\n\n\n\nMads.setobsweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:259\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nvalue::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamoff!\n \n \nMethod\n.\n\n\nSet a specific parameter with a key \nparameterkey\n OFF\n\n\nMads.setparamoff!\n\n\nMethods\n\n\n\n\nMads.setparamoff!(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:412\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparameterkey::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamon!\n \n \nMethod\n.\n\n\nSet a specific parameter with a key \nparameterkey\n ON\n\n\nMads.setparamon!\n\n\nMethods\n\n\n\n\nMads.setparamon!(madsdata::Associative, parameterkey::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:403\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparameterkey::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamsdistnormal!\n \n \nMethod\n.\n\n\nSet normal parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMads.setparamsdistnormal!(madsdata, mean, stddev)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nmean\n : array with the mean values\n\n\nstddev\n : array with the standard deviation values\n\n\n\n\nMads.setparamsdistnormal!\n\n\nMethods\n\n\n\n\nMads.setparamsdistnormal!(madsdata::Associative, mean::Array{T\n:Any,1}, stddev::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:429\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nmean::Array{T\n:Any,1}\n\n\nstddev::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamsdistuniform!\n \n \nMethod\n.\n\n\nSet uniform parameter distributions for all the model parameters in the MADS problem dictionary\n\n\nMads.setparamsdistuniform!(madsdata, min, max)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nmin\n : array with the minimum values\n\n\nmax\n : array with the maximum values\n\n\n\n\nMads.setparamsdistuniform!\n\n\nMethods\n\n\n\n\nMads.setparamsdistuniform!(madsdata::Associative, min::Array{T\n:Any,1}, max::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:449\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nmax::Array{T\n:Any,1}\n\n\nmin::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.setparamsinit!\n \n \nMethod\n.\n\n\nSet initial parameter guesses in the MADS dictionary\n\n\nMads.setparamsinit!(madsdata, paramdict)\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdict\n : dictionary with initial model parameter values\n\n\n\n\nMads.setparamsinit!\n\n\nMethods\n\n\n\n\nMads.setparamsinit!(madsdata::Associative, paramdict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:306\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nparamdict::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.setplotfileformat\n \n \nMethod\n.\n\n\nSet image file \nformat\n based on the \nfilename\n extension, or sets the \nfilename\n extension based on the requested \nformat\n. The default \nformat\n is \nSVG\n. \nPNG\n, \nPDF\n, \nESP\n, and \nPS\n are also supported.\n\n\nMads.setplotfileformat(filename::String, format::String)\n\n\nArguments:\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nReturns:\n\n\n\n\nfilename\n : output file name\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\n\n\nMads.setplotfileformat\n\n\nMethods\n\n\n\n\nMads.setplotfileformat(filename::String, format::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:40\n\n\n\n\nArguments\n\n\n\n\nfilename::String\n\n\nformat::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.setprocs\n \n \nFunction\n.\n\n\nSet the available processors based on environmental variables. Supports SLURM only at the moment.\n\n\nUsage:\n\n\nMads\n.\nsetprocs\n()\n\n\nMads\n.\nsetprocs\n(\n4\n)\n\n\nMads\n.\nsetprocs\n(\n4\n,\n \n8\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n4\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n32\n,\n \nmads_servers\n=\ntrue\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n64\n,\n \nnodenames\n=\n[\nmadsmax\n,\n \nmadszem\n])\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n64\n,\n \nnodenames\n=\nwc[096-157,160,175]\n)\n\n\nMads\n.\nsetprocs\n(\nntasks_per_node\n=\n64\n,\n \nmads_servers\n=\ntrue\n,\n \nexename\n=\n/home/monty/bin/julia\n,\n \ndir\n=\n/home/monty\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nnp\n : number of processors\n\n\nnt\n : number of threads\n\n\n\n\nOptional arguments:\n\n\n\n\nntasks_per_node\n : number of parallel tasks per\n\n\nnprocs_per_task\n : number of processors needed for each parallel task at each node\n\n\nnodenames\n : array with names of machines/nodes to be invoked\n\n\ndir\n : common directory shared by all the jobs\n\n\nexename\n : location of the julia executable (the same version of julia is needed on all the workers)\n\n\nmads_servers\n : if \ntrue\n use MADS servers (LANL only)\n\n\nquiet\n : suppress output [default \ntrue\n]\n\n\ntest\n : test the servers and connect to each one ones at a time [default \nfalse\n]\n\n\n\n\nMads.setprocs\n\n\nMethods\n\n\n\n\nMads.setprocs(; ntasks_per_node, nprocs_per_task, mads_servers, test, dir, exename, nodenames, quiet)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:58\n\n\nMads.setprocs(np::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:54\n\n\nMads.setprocs(np::Integer, nt::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:40\n\n\n\n\nArguments\n\n\n\n\nnp::Integer\n\n\nnt::Integer\n\n\n\n\nKeywords\n\n\n\n\ndir\n\n\nexename\n\n\nmads_servers\n\n\nnodenames\n\n\nnprocs_per_task\n\n\nntasks_per_node\n\n\nquiet\n\n\ntest\n\n\n\n\nsource\n\n\n#\n\n\nMads.setseed\n \n \nMethod\n.\n\n\nSet current seed\n\n\nMads.setseed\n\n\nMethods\n\n\n\n\nMads.setseed(seed::Integer)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:20\n\n\n\n\nArguments\n\n\n\n\nseed::Integer\n\n\n\n\nsource\n\n\n#\n\n\nMads.settarget!\n \n \nMethod\n.\n\n\nSet observation target\n\n\nMads.settarget!\n\n\nMethods\n\n\n\n\nMads.settarget!(o::Associative, target::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:194\n\n\n\n\nArguments\n\n\n\n\no::Associative\n\n\ntarget::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.settime!\n \n \nMethod\n.\n\n\nSet observation time\n\n\nMads.settime!\n\n\nMethods\n\n\n\n\nMads.settime!(o::Associative, time::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:130\n\n\n\n\nArguments\n\n\n\n\no::Associative\n\n\ntime::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.setverbositylevel\n \n \nMethod\n.\n\n\nSet MADS verbosity level\n\n\nMads.setverbositylevel\n\n\nMethods\n\n\n\n\nMads.setverbositylevel(level::Int64)\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:117\n\n\n\n\nArguments\n\n\n\n\nlevel::Int64\n\n\n\n\nsource\n\n\n#\n\n\nMads.setweight!\n \n \nMethod\n.\n\n\nSet observation weight\n\n\nMads.setweight!\n\n\nMethods\n\n\n\n\nMads.setweight!(o::Associative, weight::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:162\n\n\n\n\nArguments\n\n\n\n\no::Associative\n\n\nweight::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.setwellweights!\n \n \nMethod\n.\n\n\nSet well weights in the MADS problem dictionary\n\n\nMads.setwellweights!\n\n\nMethods\n\n\n\n\nMads.setwellweights!(madsdata::Associative, value::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:298\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nvalue::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.showallparameters\n \n \nFunction\n.\n\n\nShow all parameters in the MADS problem dictionary\n\n\nMads.showallparameters\n\n\nMethods\n\n\n\n\nMads.showallparameters(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:516\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.showobservations\n \n \nMethod\n.\n\n\nShow observations in the MADS problem dictionary\n\n\nMads.showobservations\n\n\nMethods\n\n\n\n\nMads.showobservations(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:346\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.sinetransform\n \n \nMethod\n.\n\n\nSine transformation of model parameters\n\n\nMads.sinetransform\n\n\nMethods\n\n\n\n\nMads.sinetransform(sineparams::Array{T\n:Any,1}, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:19\n\n\n\n\nArguments\n\n\n\n\nindexlogtransformed::Array{T\n:Any,1}\n\n\nlowerbounds::Array{T\n:Any,1}\n\n\nsineparams::Array{T\n:Any,1}\n\n\nupperbounds::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.sinetransformfunction\n \n \nMethod\n.\n\n\nSine transformation of a function\n\n\nMads.sinetransformfunction\n\n\nMethods\n\n\n\n\nMads.sinetransformfunction(f::Function, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:30\n\n\n\n\nArguments\n\n\n\n\nf::Function\n\n\nindexlogtransformed::Array{T\n:Any,1}\n\n\nlowerbounds::Array{T\n:Any,1}\n\n\nupperbounds::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.sinetransformgradient\n \n \nMethod\n.\n\n\nSine transformation of a gradient function\n\n\nMads.sinetransformgradient\n\n\nMethods\n\n\n\n\nMads.sinetransformgradient(g::Function, lowerbounds::Array{T\n:Any,1}, upperbounds::Array{T\n:Any,1}, indexlogtransformed::Array{T\n:Any,1}; sindx)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:42\n\n\n\n\nArguments\n\n\n\n\ng::Function\n\n\nindexlogtransformed::Array{T\n:Any,1}\n\n\nlowerbounds::Array{T\n:Any,1}\n\n\nupperbounds::Array{T\n:Any,1}\n\n\n\n\nKeywords\n\n\n\n\nsindx\n\n\n\n\nsource\n\n\n#\n\n\nMads.spaghettiplot\n \n \nFunction\n.\n\n\nGenerate a combined spaghetti plot for the \nselected\n (\ntype != null\n) model parameter\n\n\nMads.spaghettiplot\n\n\nMethods\n\n\n\n\nMads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; filename, keyword, format, xtitle, ytitle, obs_plot_dots, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:798\n\n\nMads.spaghettiplot(madsdata::Associative, dictarray::Associative; filename, keyword, format, xtitle, ytitle, obs_plot_dots, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:802\n\n\nMads.spaghettiplot(madsdata::Associative, array::Array; filename, keyword, format, xtitle, ytitle, obs_plot_dots, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:839\n\n\n\n\nArguments\n\n\n\n\narray::Array\n\n\ndictarray::Associative\n\n\nmadsdata::Associative\n\n\nnumber_of_samples::Integer\n\n\n\n\nKeywords\n\n\n\n\nfilename\n\n\nformat\n\n\nkeyword\n\n\nobs_plot_dots\n\n\nseed\n\n\nxtitle\n\n\nytitle\n\n\n\n\nMads.spaghettiplot(madsdata, paramdictarray; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplot(madsdata, obsmdictarray; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplot(madsdata, number_of_samples; filename=\n, keyword = \n, format=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdictarray\n : parameter dictionary array containing the data arrays to be plotted\n\n\nobsdictarray\n : observation dictionary array containing the data arrays to be plotted\n\n\nnumber_of_samples\n : number of samples\n\n\nfilename\n : output file name used to output the produced plots\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots (if \nfilename\n is not defined)\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : \nx\n axis title\n\n\nytitle\n : \ny\n axis title\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n [default] or \nfalse\n)\n\n\nseed\n : initial random seed\n\n\n\n\nReturns: \nnone\n\n\nDumps:\n\n\n\n\nImage file with a spaghetti plot (\nmads_rootname\n-\nkeyword\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\nsource\n\n\n#\n\n\nMads.spaghettiplots\n \n \nFunction\n.\n\n\nGenerate separate spaghetti plots for each \nselected\n (\ntype != null\n) model parameter\n\n\nMads.spaghettiplots\n\n\nMethods\n\n\n\n\nMads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; format, keyword, xtitle, ytitle, obs_plot_dots, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:658\n\n\nMads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed)\n : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:662\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nnumber_of_samples::Integer\n\n\nparamdictarray::DataStructures.OrderedDict\n\n\n\n\nKeywords\n\n\n\n\nformat\n\n\nkeyword\n\n\nobs_plot_dots\n\n\nseed\n\n\nxtitle\n\n\nytitle\n\n\n\n\nMads.spaghettiplots(madsdata, paramdictarray; format=\n, keyword=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\nMads.spaghettiplots(madsdata, number_of_samples; format=\n, keyword=\n, xtitle=\nX\n, ytitle=\nY\n, obs_plot_dots=true)\n\n\n\n\n\nArguments:\n\n\n\n\nmadsdata\n : MADS problem dictionary\n\n\nparamdictarray\n : parameter dictionary containing the data arrays to be plotted\n\n\nnumber_of_samples\n : number of samples\n\n\nkeyword\n : keyword to be added in the file name used to output the produced plots\n\n\nformat\n : output plot format (\npng\n, \npdf\n, etc.)\n\n\nxtitle\n : \nx\n axis title\n\n\nytitle\n : \ny\n axis title\n\n\nobs_plot_dots\n : plot observation as dots (\ntrue\n [default] or \nfalse\n)\n\n\nseed\n : initial random seed\n\n\n\n\nDumps:\n\n\n\n\nA series of image files with spaghetti plots for each \nselected\n (\ntype != null\n) model parameter (\nmads_rootname\n-\nkeyword\n-\nparam_key\n-\nnumber_of_samples\n-spaghetti.\ndefault_image_extension\n)\n\n\n\n\nsource\n\n\n#\n\n\nMads.sphericalcov\n \n \nMethod\n.\n\n\nSpherical spatial covariance function\n\n\nMads.sphericalcov\n\n\nMethods\n\n\n\n\nMads.sphericalcov(h::Number, maxcov::Number, scale::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:20\n\n\n\n\nArguments\n\n\n\n\nh::Number\n\n\nmaxcov::Number\n\n\nscale::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.sphericalvariogram\n \n \nMethod\n.\n\n\nSpherical variogram\n\n\nMads.sphericalvariogram\n\n\nMethods\n\n\n\n\nMads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number)\n : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:28\n\n\n\n\nArguments\n\n\n\n\nh::Number\n\n\nnugget::Number\n\n\nrange::Number\n\n\nsill::Number\n\n\n\n\nsource\n\n\n#\n\n\nMads.sprintf\n \n \nMethod\n.\n\n\nConvert \n@sprintf\n macro into \nsprintf\n function\n\n\nsource\n\n\n#\n\n\nMads.status\n \n \nMethod\n.\n\n\nStatus of the Mads modules\n\n\nMads.status\n\n\nMethods\n\n\n\n\nMads.status(; git, gitmore)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:178\n\n\n\n\nKeywords\n\n\n\n\ngit\n\n\ngitmore\n\n\n\n\nsource\n\n\n#\n\n\nMads.stdoutcaptureoff\n \n \nMethod\n.\n\n\nRestore STDOUT\n\n\nsource\n\n\n#\n\n\nMads.stdoutcaptureon\n \n \nMethod\n.\n\n\nRedirect STDOUT to a reader\n\n\nsource\n\n\n#\n\n\nMads.symlinkdir\n \n \nMethod\n.\n\n\nCreate a symbolic link of a file \nfilename\n in a directory \ndirtarget\n\n\nMads.symlinkdir\n\n\nMethods\n\n\n\n\nMads.symlinkdir(filename::String, dirtarget::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:854\n\n\n\n\nArguments\n\n\n\n\ndirtarget::String\n\n\nfilename::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.symlinkdirfiles\n \n \nMethod\n.\n\n\nCreate a symbolic link of all the files in a directory \ndirsource\n in a directory \ndirtarget\n\n\nMads.symlinkdirfiles\n\n\nMethods\n\n\n\n\nMads.symlinkdirfiles(dirsource::String, dirtarget::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:838\n\n\n\n\nArguments\n\n\n\n\ndirsource::String\n\n\ndirtarget::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.tag\n \n \nFunction\n.\n\n\nTag the Mads modules with a default argument \n:patch\n\n\nMads.tag\n\n\nMethods\n\n\n\n\nMads.tag(madsmodule::String, sym::Symbol)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:231\n\n\nMads.tag(madsmodule::String)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:231\n\n\nMads.tag(sym::Symbol)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:226\n\n\nMads.tag()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:226\n\n\n\n\nArguments\n\n\n\n\nmadsmodule::String\n\n\nsym::Symbol\n\n\n\n\nsource\n\n\n#\n\n\nMads.test\n \n \nFunction\n.\n\n\nPerform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace; \nreload(\"Mads.jl\")\n if needed)\n\n\nMads.test\n\n\nMethods\n\n\n\n\nMads.test(testname::String; madstest)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:48\n\n\nMads.test()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:48\n\n\n\n\nArguments\n\n\n\n\ntestname::String\n\n\n\n\nKeywords\n\n\n\n\nmadstest\n : test Mads [default=\ntrue\n])\n\n\n\n\nsource\n\n\n#\n\n\nMads.testj\n \n \nFunction\n.\n\n\nExecute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial)\n\n\nMads.testj\n\n\nMethods\n\n\n\n\nMads.testj(coverage::Bool)\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7\n\n\nMads.testj()\n : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7\n\n\n\n\nArguments\n\n\n\n\ncoverage::Bool\n\n\n\n\nsource\n\n\n#\n\n\nMads.transposematrix\n \n \nMethod\n.\n\n\nTranspose non-numeric matrix\n\n\nMads.transposematrix\n\n\nMethods\n\n\n\n\nMads.transposematrix(a::Array{T\n:Any,2})\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:251\n\n\n\n\nArguments\n\n\n\n\na::Array{T\n:Any,2}\n\n\n\n\nsource\n\n\n#\n\n\nMads.transposevector\n \n \nMethod\n.\n\n\nTranspose non-numeric vector\n\n\nMads.transposevector\n\n\nMethods\n\n\n\n\nMads.transposevector(a::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:242\n\n\n\n\nArguments\n\n\n\n\na::Array{T\n:Any,1}\n\n\n\n\nsource\n\n\n#\n\n\nMads.void2nan!\n \n \nMethod\n.\n\n\nConvert Void's into NaN's in a dictionary\n\n\nMads.void2nan!\n\n\nMethods\n\n\n\n\nMads.void2nan!(dict::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:897\n\n\n\n\nArguments\n\n\n\n\ndict::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.weightedstats\n \n \nMethod\n.\n\n\nGet weighted mean and variance samples\n\n\nArguments:\n\n\n\n\nsamples\n : array of samples\n\n\nllhoods\n : vector of log-likelihoods\n\n\n\n\nReturns:\n\n\n\n\nmean\n : vector of sample means\n\n\nvar\n : vector of sample variances\n\n\n\n\nMads.weightedstats\n\n\nMethods\n\n\n\n\nMads.weightedstats(samples::Array, llhoods::Array{T\n:Any,1})\n : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:273\n\n\n\n\nArguments\n\n\n\n\nllhoods::Array{T\n:Any,1}\n\n\nsamples::Array\n\n\n\n\nsource\n\n\n#\n\n\nMads.welloff!\n \n \nMethod\n.\n\n\nTurn off a specific well in the MADS problem dictionary\n\n\nMads.welloff!\n\n\nMethods\n\n\n\n\nMads.welloff!(madsdata::Associative, wellname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:483\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nwellname::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.wellon!\n \n \nMethod\n.\n\n\nTurn on a specific well in the MADS problem dictionary\n\n\nMads.wellon!\n\n\nMethods\n\n\n\n\nMads.wellon!(madsdata::Associative, wellname::String)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:451\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\nwellname::String\n\n\n\n\nsource\n\n\n#\n\n\nMads.wells2observations!\n \n \nMethod\n.\n\n\nConvert \nWells\n class to \nObservations\n class in the MADS problem dictionary\n\n\nMads.wells2observations!\n\n\nMethods\n\n\n\n\nMads.wells2observations!(madsdata::Associative)\n : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:503\n\n\n\n\nArguments\n\n\n\n\nmadsdata::Associative\n\n\n\n\nsource\n\n\n#\n\n\nMads.writeparameters\n \n \nFunction\n.\n\n\nWrite \nparameters\n via MADS template (\ntemplatefilename\n) to an output file (\noutputfilename\n)\n\n\nMads.writeparametersviatemplate\n\n\nMethods\n\n\n\n\nMads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space)\n : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:614\n\n\n\n\nArguments\n\n\n\n\noutputfilename\n\n\nparameters\n\n\ntemplatefilename\n\n\n\n\nKeywords\n\n\n\n\nrespect_space\n\n\n\n\nsource", 
            "title": "Mads"
        }, 
        {
            "location": "/Modules/Mads/#madsjl", 
            "text": "Documentation for Mads.jl  #  Mads.MFlm     Method .  Matrix Factorization via Levenberg Marquardt  Mads.MFlm  Methods   Mads.MFlm(X::Array{T :Any,2}, nk::Integer; mads, log_W, log_H, retries, maxiter, tol, initW, initH)  : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:82   Arguments   X::Array{T :Any,2}  nk::Integer   Keywords   initH  initW  log_H  log_W  mads  maxiter  retries  tol   source  #  Mads.NMFipopt     Method .  Non-negative Matrix Factorization using JuMP/Ipopt  Mads.NMFipopt  Methods   Mads.NMFipopt(X::Array{T :Any,2}, nk::Integer; retries, random, maxiter, maxguess, verbosity, tol, initW, initH)  : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:36   Arguments   X::Array{T :Any,2}  nk::Integer   Keywords   initH  initW  maxguess  maxiter  random  retries  tol  verbosity   source  #  Mads.NMFm     Method .  Non-negative Matrix Factorization using NMF  Mads.NMFm  Methods   Mads.NMFm(X::Array, nk::Integer; retries, maxiter, tol)  : /Users/monty/.julia/v0.5/Mads/src/../src-new/MadsBSS.jl:12   Arguments   X::Array  nk::Integer   Keywords   maxiter  retries  tol   source  #  Mads.addkeyword!     Function .  Add a  keyword  in a  class  within the Mads dictionary  madsdata  Mads.addkeyword!  Methods   Mads.addkeyword!(madsdata::Associative, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:172  Mads.addkeyword!(madsdata::Associative, class::String, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:176   Arguments   class::String  keyword::String  madsdata::Associative   source  #  Mads.addsource!     Function .  Add an additional contamination source  Mads.addsource!  Methods   Mads.addsource!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:11  Mads.addsource!(madsdata::Associative, sourceid::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:11   Arguments   madsdata::Associative  sourceid::Int64   source  #  Mads.addsourceparameters!     Method .  Add contaminant source parameters  Mads.addsourceparameters!  Methods   Mads.addsourceparameters!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:34   Arguments   madsdata::Associative   source  #  Mads.allwellsoff!     Method .  Turn off all the wells in the MADS problem dictionary  Mads.allwellsoff!  Methods   Mads.allwellsoff!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:471   Arguments   madsdata::Associative   source  #  Mads.allwellson!     Method .  Turn on all the wells in the MADS problem dictionary  Mads.allwellson!  Methods   Mads.allwellson!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:439   Arguments   madsdata::Associative   source  #  Mads.amanzi     Function .  Execute amanzi external groundwater flow and transport simulator   Arguments:   filename  : amanzi input file name  nproc  : number of processor to be used by amanzi  quiet  : : suppress output [default  true ]  observation_filename  : amanzi observation filename [default \"observations.out\"]  setup  : bash script to setup amanzi environmental variables  amanzi_exe  : full path to the location of the amanzi executable   source  #  Mads.amanzi_output_parser     Function .  Parse Amanzi output provided in an external file ( filename )  Mads.amanzi_output_parser()\nMads.amanzi_output_parser( observations.out )  Arguments:   filename  : external file name (optional)   Returns:   dict  : a dictionary with model observations following MADS requirements   source  #  Mads.asinetransform     Method .  Arcsine transformation of model parameters  Mads.asinetransform  Methods   Mads.asinetransform(params::Array{T :Any,1}, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:7   Arguments   indexlogtransformed::Array{T :Any,1}  lowerbounds::Array{T :Any,1}  params::Array{T :Any,1}  upperbounds::Array{T :Any,1}   source  #  Mads.bayessampling     Function .  Bayesian Sampling  Mads.bayessampling  Methods   Mads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:71  Mads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:96   Arguments   madsdata::Associative  numsequences::Integer   Keywords   burnin  nsteps  seed  thinning   Examples:  Mads.bayessampling(madsdata; nsteps=1000, burnin=100, thinning=1, seed=2016)\nMads.bayessampling(madsdata, numsequences; nsteps=1000, burnin=100, thinning=1, seed=2016)  Arguments:   madsdata  : MADS problem dictionary  numsequences  : number of sequences executed in parallel  nsteps  : number of final realizations in the chain  burnin  :  number of initial realizations before the MCMC are recorded  thinning  : removal of any  thinning  realization  seed  : initial random number seed   Returns:   mcmcchain  :   source  #  Mads.calibrate     Method .  Calibrate  Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Arguments:   madsdata  : MADS problem dictionary  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda  lambda_mu  : lambda multiplication factor [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  save_results  : save intermediate results [default=true]  usenaive  : use naive Levenberg-Marquardt solver   Returns:   minimumdict  : model parameter dictionary with the optimal values at the minimum  results  : optimization algorithm results (e.g. results.minimizer)   Mads.calibrate  Methods   Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:142   Arguments   madsdata::Associative   Keywords   lambda  lambda_mu  maxEval  maxIter  maxJacobians  np_lambda  save_results  show_trace  tolG  tolOF  tolX  usenaive   source  #  Mads.calibraterandom     Function .  Calibrate with random initial guesses  Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)\nMads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false)  Arguments:   madsdata  : MADS problem dictionary  numberofsamples  : number of random initial samples  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda  lambda_mu  : lambda multiplication factor [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  save_results  : save intermediate results [default=true]  usenaive  : use naive Levenberg-Marquardt solver  seed  : initial random seed   Returns:   bestresult  : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimizer)   Mads.calibraterandom  Methods   Mads.calibraterandom(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:36  Mads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:36   Arguments   madsdata::Associative  numberofsamples::Integer   Keywords   all  lambda  lambda_mu  maxEval  maxIter  maxJacobians  np_lambda  quiet  save_results  seed  show_trace  tolG  tolOF  tolX  usenaive   source  #  Mads.calibraterandom_parallel     Function .  Calibrate with random initial guesses in parallel  Mads.calibraterandom_parallel  Methods   Mads.calibraterandom_parallel(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:83  Mads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results)  : /Users/monty/.julia/v0.5/Mads/src/MadsCalibrate.jl:83   Arguments   madsdata::Associative  numberofsamples::Integer   Keywords   lambda  lambda_mu  maxEval  maxIter  maxJacobians  np_lambda  quiet  save_results  seed  show_trace  tolG  tolOF  tolX  usenaive   source  #  Mads.checkmodeloutputdirs     Method .  Check the directories where model outputs should be saved for MADS  Mads.checkmodeloutputdirs  Methods   Mads.checkmodeloutputdirs(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:424   Arguments   madsdata::Associative   source  #  Mads.checkout     Function .  Checkout the latest version of the Mads / Julia modules  Mads.checkout  Methods   Mads.checkout(modulename::String; git, master, force, pull, required, all)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63  Mads.checkout()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:63   Arguments   modulename::String   Keywords   all  force  git  master  pull  required   source  #  Mads.checkparameterranges     Method .  Check parameter ranges for model parameters  Mads.checkparameterranges  Methods   Mads.checkparameterranges(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:621   Arguments   madsdata::Associative   source  #  Mads.cleancoverage     Method .  Remove Mads coverage files  Mads.cleancoverage  Methods   Mads.cleancoverage()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:20   source  #  Mads.cmadsins_obs     Method .  Call C MADS ins_obs() function from the MADS dynamic library  Mads.cmadsins_obs  Methods   Mads.cmadsins_obs(obsid::Array{T :Any,1}, instructionfilename::String, inputfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:27   Arguments   inputfilename::String  instructionfilename::String  obsid::Array{T :Any,1}   source  #  Mads.commit     Function .  Commit the latest version of the Mads / Julia modules in the repo  Mads.commit  Methods   Mads.commit(commitmsg::String, modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:154  Mads.commit(commitmsg::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:154   Arguments   commitmsg::String  modulename::String   source  #  Mads.computemass     Method .  Compute injected/reduced contaminant mass  Mads.computemass  Methods   Mads.computemass(madsdata::Associative; time)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:246   Arguments   madsdata::Associative   Keywords   time   Arguments:   madsdata  : MADS problem dictionary  time  : computational time   Returns:   mass_injected  : total injected mass  mass_reduced  : total reduced mass   source  #  Mads.computemass     Method .  Compute injected/reduced contaminant mass for a given set of mads input files  Mads.computemass  Methods   Mads.computemass(madsdata::Associative; time)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:246  Mads.computemass(madsfiles::Union{Regex,String}; time, path)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:311   Arguments   madsdata::Associative  madsfiles::Union{Regex,String}   Keywords   path  time   Example  Mads.computemass(madsfiles; time=0, path= . )  Arguments:   madsfiles  : matching pattern for Mads input files (string or regular expression accepted)  time  : computational time  path  : search directory for the mads input files   Returns:   lambda  : array with all the lambda values  mass_injected  : array with associated total injected mass  mass_reduced  : array with associated total reduced mass   source  #  Mads.computeparametersensitities     Method .  Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range  Arguments:   madsdata  : MADS problem dictionary  saresults  : sensitivity analysis results   Mads.computeparametersensitities  Methods   Mads.computeparametersensitities(madsdata::Associative, saresults::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:703   Arguments   madsdata::Associative  saresults::Associative   source  #  Mads.contamination     Method .  Compute concentration for a point in space and time (x,y,z,t)  Mads.contamination  Methods   Mads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Number; anasolfunction)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:205   Arguments   H::Number  ax::Number  ay::Number  az::Number  dx::Number  dy::Number  dz::Number  f::Number  lambda::Number  n::Number  t0::Number  t1::Number  t::Number  theta::Number  vx::Number  vy::Number  vz::Number  wellx::Number  welly::Number  wellz::Number  x::Number  y::Number  z::Number   Keywords   anasolfunction   Arguments:   wellx  - observation point (well) X coordinate  welly  - observation point (well) Y coordinate  wellz  - observation point (well) Z coordinate  n  - porosity  lambda  - first-order reaction rate  theta  - groundwater flow direction  vx  - advective transport velocity in X direction  vy  - advective transport velocity in Y direction  vz  - advective transport velocity in Z direction  ax  - dispersivity in X direction (longitudinal)  ay  - dispersivity in Y direction (transverse horizontal)  az  - dispersivity in Y direction (transverse vertical)  H  - Hurst coefficient for Fractional Brownian dispersion  x  - X coordinate of contaminant source location  y  - Y coordinate of contaminant source location  z  - Z coordinate of contaminant source location  dx  - source size (extent) in X direction  dy  - source size (extent) in Y direction  dz  - source size (extent) in Z direction  f  - source mass flux  t0  - source starting time  t1  - source termination time  t  - time to compute concentration at the observation point  anasolfunction  : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c]   Returns:   predicted concentration at (wellx, welly, wellz, t)   source  #  Mads.copyright     Method .  Produce MADS copyright information  Mads.copyright  Methods   Mads.copyright()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:18   source  #  Mads.create_documentation     Method .  Create web documentation files for Mads functions  Mads.create_documentation  Methods   Mads.create_documentation()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:258   source  #  Mads.create_tests_off     Method .  Turn off the generation of MADS tests (default)  Mads.create_tests_off  Methods   Mads.create_tests_off()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:81   source  #  Mads.create_tests_on     Method .  Turn on the generation of MADS tests (dangerous)  Mads.create_tests_on  Methods   Mads.create_tests_on()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:72   source  #  Mads.createmadsproblem     Function .  Create a new Mads problem where the observation targets are computed based on the model predictions   Mads.createmadsproblem(infilename::String, outfilename::String)  Mads.createmadsproblem(madsdata::Associative, outfilename::String)  Mads.createmadsproblem(madsdata::Associative, predictions::Associative)  Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String)   Arguments:   infilename  : input Mads file  outfilename  : output Mads file  madsdata  : MADS problem dictionary  predictions  : dictionary of model predictions   Mads.createmadsproblem  Methods   Mads.createmadsproblem(infilename::String, outfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:5  Mads.createmadsproblem(madsdata::Associative, outfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:30  Mads.createmadsproblem(madsdata::Associative, predictions::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:39  Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsCreate.jl:35   Arguments   infilename::String  madsdata::Associative  outfilename::String  predictions::Associative   source  #  Mads.createobservations!     Function .  Create observations in the MADS problem dictionary based on  time  and  observation  vectors  Mads.createobservations!  Methods   Mads.createobservations!(madsdata::Associative, time::Array{T :Any,1}, observation::Array{T :Any,1}; logtransform, weight_type, weight)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:366  Mads.createobservations!(madsdata::Associative, observations::Associative; logtransform, weight_type, weight)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:388   Arguments   madsdata::Associative  observation::Array{T :Any,1}  observations::Associative  time::Array{T :Any,1}   Keywords   logtransform  weight  weight_type   source  #  Mads.createtempdir     Method .  Create temporary directory  Mads.createtempdir  Methods   Mads.createtempdir(tempdirname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:921   Arguments   tempdirname::String   source  #  Mads.deleteNaN!     Method .  Delete rows with NaN in a Dataframe  df  Mads.deleteNaN!  Methods   Mads.deleteNaN!(df::DataFrames.DataFrame)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:921   Arguments   df::DataFrames.DataFrame   source  #  Mads.deletekeyword!     Function .  Delete a  keyword  in a  class  within the Mads dictionary  madsdata  Mads.deletekeyword!  Methods   Mads.deletekeyword!(madsdata::Associative, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:196  Mads.deletekeyword!(madsdata::Associative, class::String, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:202   Arguments   class::String  keyword::String  madsdata::Associative   source  #  Mads.dependents     Function .  Lists modules dependents on a module (Mads by default)  Mads.dependents  Methods   Mads.dependents(modulename::String, filter::Bool)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45  Mads.dependents(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45  Mads.dependents()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:45   Arguments   filter::Bool  modulename::String   source  #  Mads.display     Method .  Display image file  Mads.display  Methods   Mads.display(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsDisplay.jl:9   Arguments   filename::String   source  #  Mads.dobigdt     Method .  Perform Bayesian Information Gap Decision Theory (BIG-DT) analysis  Arguments:   madsdata  : MADS problem dictionary  nummodelruns  : number of model runs  numhorizons  : number of info-gap horizons of uncertainty  maxHorizon  : maximum info-gap horizons of uncertainty  numlikelihoods  : number of Bayesian likelihoods   Returns:   bigdtresults  : dictionary with BIG-DT results   Mads.dobigdt  Methods   Mads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, numlikelihoods, maxHorizon)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:131   Arguments   madsdata::Associative  nummodelruns::Int64   Keywords   maxHorizon  numhorizons  numlikelihoods   source  #  Mads.documentfunction     Method .  Create function document  source  #  Mads.dumpasciifile     Method .  Dump ASCII file  Mads.dumpasciifile  Methods   Mads.dumpasciifile(filename::String, data)  : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:17   Arguments   data  filename::String   source  #  Mads.dumpjsonfile     Method .  Dump a JSON file  Mads.dumpjsonfile  Methods   Mads.dumpjsonfile(filename::String, data)  : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:26   Arguments   data  filename::String   source  #  Mads.dumpwelldata     Method .  Dump well data from MADS problem dictionary into a ASCII file  Mads.dumpwelldata  Methods   Mads.dumpwelldata(madsdata::Associative, filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:813   Arguments   filename::String  madsdata::Associative   source  #  Mads.dumpyamlfile     Method .  Dump YAML file  Arguments:   filename  : file name  yamldata  : YAML data   Mads.dumpyamlfile  Methods   Mads.dumpyamlfile(filename::String, yamldata; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:40   Arguments   filename::String  yamldata   Keywords   julia   source  #  Mads.dumpyamlmadsfile     Method .  Dump YAML Mads file  Arguments:   madsdata  : MADS problem dictionary  filename  : file name   Mads.dumpyamlmadsfile  Methods   Mads.dumpyamlmadsfile(madsdata, filename::String; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:61   Arguments   filename::String  madsdata   Keywords   julia   source  #  Mads.efast     Method .  Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  M  : maximum number of harmonics  gamma  : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4)  seed  : initial random seed   Mads.efast  Methods   Mads.efast(md::Associative; N, M, gamma, plotresults, seed, issvr, truncateRanges, checkpointfrequency, restartdir, restart)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:1001   Arguments   md::Associative   Keywords   M  N  checkpointfrequency  gamma  issvr  plotresults  restart  restartdir  seed  truncateRanges   source  #  Mads.emceesampling     Function .  Bayesian sampling with Goodman   Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)  Mads.emceesampling  Methods   Mads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:9  Mads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:31   Arguments   madsdata::Associative  p0::Array   Keywords   burnin  nsteps  numwalkers  seed  sigma  thinning  weightfactor   Examples:  Mads.emceesampling(madsdata; numwalkers=10, nsteps=100, burnin=100, thinning=1, seed=2016, sigma=0.01)\nMads.emceesampling(madsdata, p0; numwalkers=10, nsteps=100, burnin=10, thinning=1, seed=2016)  Arguments:   madsdata  : MADS problem dictionary  p0  : initial parameters (matrix of size (length(optparams), numwalkers))  numwalkers  : number of walkers (if in parallel this can be the number of available processors)  nsteps  : number of final realizations in the chain  burnin  :  number of initial realizations before the MCMC are recorded  thinning  : removal of any  thinning  realization  seed  : initial random number seed  sigma  : a standard deviation parameter used to initialize the walkers   Returns:   mcmcchain  : MCMC chain  llhoodvals  : log likelihoods of the final samples in the chain   source  #  Mads.estimationerror     Method .  Estimate kriging error  Mads.estimationerror  Methods   Mads.estimationerror(w::Array{T :Any,1}, x0::Array{T :Any,1}, X::Array{T :Any,2}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:130   Arguments   X::Array{T :Any,2}  cov::Function  w::Array{T :Any,1}  x0::Array{T :Any,1}   source  #  Mads.evaluatemadsexpression     Method .  Evaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values  Mads.evaluatemadsexpression  Methods   Mads.evaluatemadsexpression(expressionstring::String, parameters::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:114   Arguments   expressionstring::String  parameters::Associative   source  #  Mads.evaluatemadsexpressions     Method .  Evaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values  Mads.evaluatemadsexpressions  Methods   Mads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:127   Arguments   madsdata::Associative  parameters::Associative   source  #  Mads.expcov     Method .  Exponential spatial covariance function  Mads.expcov  Methods   Mads.expcov(h::Number, maxcov::Number, scale::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:13   Arguments   h::Number  maxcov::Number  scale::Number   source  #  Mads.exponentialvariogram     Method .  Exponential variogram  Mads.exponentialvariogram  Methods   Mads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:43   Arguments   h::Number  nugget::Number  range::Number  sill::Number   source  #  Mads.filterkeys     Function .  Filter dictionary keys based on a string or regular expression  Mads.filterkeys  Methods   Mads.filterkeys(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:587  Mads.filterkeys(dict::Associative, key::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:586  Mads.filterkeys(dict::Associative, key::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:587   Arguments   dict::Associative  key::Regex  key::String   source  #  Mads.forward     Function .  Perform a forward run using the initial or provided values for the model parameters   forward(madsdata)  forward(madsdata, paramdict)  forward(madsdata, paramarray)   Arguments:   madsdata  : MADS problem dictionary  paramdict  : dictionary of model parameter values  paramarray  : array of model parameter values   Returns:   obsvalues  : dictionary of model predictions   Mads.forward  Methods   Mads.forward(madsdata::Associative; all)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:6  Mads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:10  Mads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:40   Arguments   madsdata::Associative  paramarray::Array  paramdict::Associative   Keywords   all  checkpointfilename  checkpointfrequency   source  #  Mads.forwardgrid     Function .  Perform a forward run over a 3D grid defined in  madsdata  using the initial or provided values for the model parameters   forwardgrid(madsdata)  forwardgrid(madsdata, paramvalues))   Arguments:   madsdata  : MADS problem dictionary  paramvalues  : dictionary of model parameter values   Returns:   array3d  : 3D array with model predictions along a 3D grid   Mads.forwardgrid  Methods   Mads.forwardgrid(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:116  Mads.forwardgrid(madsdatain::Associative, paramvalues::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsForward.jl:121   Arguments   madsdata::Associative  madsdatain::Associative  paramvalues::Associative   source  #  Mads.free     Function .  Free Mads / Julia modules  Mads.free  Methods   Mads.free(modulename::String; required, all)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:132  Mads.free()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:132   Arguments   modulename::String   Keywords   all  required   source  #  Mads.functions     Function .  List available functions in the MADS modules:  Mads.functions  Methods   Mads.functions(string::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:22  Mads.functions()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:22  Mads.functions(m::Union{Module,Symbol})  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:28  Mads.functions(m::Union{Module,Symbol}, string::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:28   Arguments   m::Union{Module,Symbol}  string::String   Examples:  Mads.functions()\nMads.functions(BIGUQ)\nMads.functions( get )\nMads.functions(Mads,  get )  Arguments:   module  : MADS module  string  : matching string   source  #  Mads.gaussiancov     Method .  Gaussian spatial covariance function  Mads.gaussiancov  Methods   Mads.gaussiancov(h::Number, maxcov::Number, scale::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:6   Arguments   h::Number  maxcov::Number  scale::Number   source  #  Mads.gaussianvariogram     Method .  Gaussian variogram  Mads.gaussianvariogram  Methods   Mads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:56   Arguments   h::Number  nugget::Number  range::Number  sill::Number   source  #  Mads.getcovmat     Method .  Get spatial covariance matrix  Mads.getcovmat  Methods   Mads.getcovmat(X::Array{T :Any,2}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:95   Arguments   X::Array{T :Any,2}  cov::Function   source  #  Mads.getcovvec!     Method .  Get spatial covariance vector  Mads.getcovvec!  Methods   Mads.getcovvec!(covvec::Array, x0::Array{T :Any,1}, X::Array{T :Any,2}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:113   Arguments   X::Array{T :Any,2}  cov::Function  covvec::Array  x0::Array{T :Any,1}   source  #  Mads.getdictvalues     Function .  Get dictionary values for keys based on a string or regular expression  Mads.getdictvalues  Methods   Mads.getdictvalues(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:605  Mads.getdictvalues(dict::Associative, key::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:604  Mads.getdictvalues(dict::Associative, key::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:605   Arguments   dict::Associative  key::Regex  key::String   source  #  Mads.getdir     Method .  Get directory  Example:  d = Mads.getdir( a.mads ) # d =  . \nd = Mads.getdir( test/a.mads ) # d =  test   Mads.getdir  Methods   Mads.getdir(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:266   Arguments   filename::String   source  #  Mads.getdistribution     Method .  Parse distribution from a string  Mads.getdistribution  Methods   Mads.getdistribution(dist::String, i::String, inputtype::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:147   Arguments   dist::String  i::String  inputtype::String   source  #  Mads.getextension     Method .  Get file name extension  Example:  ext = Mads.getextension( a.mads ) # ext =  mads   Mads.getextension  Methods   Mads.getextension(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:409   Arguments   filename::String   source  #  Mads.getfunctionarguments     Method .  Get function arguments  source  #  Mads.getfunctionargumentsold     Method .  Get function arguments  source  #  Mads.getfunctionkeywords     Method .  Get function keywords  source  #  Mads.getfunctionkeywordsold     Method .  Get function keywords  source  #  Mads.getimportantsamples     Method .  Get important samples  Arguments:   samples  : array of samples  llhoods  : vector of log-likelihoods   Returns:   imp_samples  : array of important samples   Mads.getimportantsamples  Methods   Mads.getimportantsamples(samples::Array, llhoods::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:239   Arguments   llhoods::Array{T :Any,1}  samples::Array   source  #  Mads.getlogparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are log-transformed ( log )  source  #  Mads.getmadsdir     Method .  Get the directory where currently Mads is running  problemdir = Mads.getmadsdir()  Mads.getmadsdir  Methods   Mads.getmadsdir()  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:301   source  #  Mads.getmadsinputfile     Method .  Get the default MADS input file set as a MADS global variable using  setmadsinputfile(filename)  Mads.getmadsinputfile()  Arguments:  none  Returns:   filename  : input file name (e.g.  input_file_name.mads )   Mads.getmadsinputfile  Methods   Mads.getmadsinputfile()  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:239   source  #  Mads.getmadsproblemdir     Method .  Get the directory where the Mads data file is located  Mads.getmadsproblemdir(madsdata)  Example:  madsdata = Mads.loadmadsproblem( ../../a.mads )\nmadsproblemdir = Mads.getmadsproblemdir(madsdata)  where  madsproblemdir  =  \"../../\"  Mads.getmadsproblemdir  Methods   Mads.getmadsproblemdir(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:290   Arguments   madsdata::Associative   source  #  Mads.getmadsrootname     Method .  Get the MADS problem root name  madsrootname = Mads.getmadsrootname(madsdata)  Mads.getmadsrootname  Methods   Mads.getmadsrootname(madsdata::Associative; first, version)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:250   Arguments   madsdata::Associative   Keywords   first  version   source  #  Mads.getnextmadsfilename     Method .  Get next mads file name  Mads.getnextmadsfilename  Methods   Mads.getnextmadsfilename(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:377   Arguments   filename::String   source  #  Mads.getnonlogparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are NOT log-transformed ( log )  source  #  Mads.getnonoptparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are NOT optimized ( opt )  source  #  Mads.getobsdist     Method .  Get an array with  dist  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsdist     Method .  Get an array with  dist  values for all observations in the MADS problem dictionary  source  #  Mads.getobskeys     Method .  Get keys for all observations in the MADS problem dictionary  Mads.getobskeys  Methods   Mads.getobskeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:31   Arguments   madsdata::Associative   source  #  Mads.getobslog     Method .  Get an array with  log  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobslog     Method .  Get an array with  log  values for all observations in the MADS problem dictionary  source  #  Mads.getobsmax     Method .  Get an array with  max  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsmax     Method .  Get an array with  max  values for all observations in the MADS problem dictionary  source  #  Mads.getobsmin     Method .  Get an array with  min  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsmin     Method .  Get an array with  min  values for all observations in the MADS problem dictionary  source  #  Mads.getobstarget     Method .  Get an array with  target  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobstarget     Method .  Get an array with  target  values for all observations in the MADS problem dictionary  source  #  Mads.getobstime     Method .  Get an array with  time  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobstime     Method .  Get an array with  time  values for all observations in the MADS problem dictionary  source  #  Mads.getobsweight     Method .  Get an array with  weight  values for observations in the MADS problem dictionary defined by  obskeys  source  #  Mads.getobsweight     Method .  Get an array with  weight  values for all observations in the MADS problem dictionary  source  #  Mads.getoptparamkeys     Method .  Get the keys in the MADS problem dictionary for parameters that are optimized ( opt )  source  #  Mads.getoptparams     Function .  Get optimizable parameters  Mads.getoptparams  Methods   Mads.getoptparams(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:313  Mads.getoptparams(madsdata::Associative, parameterarray::Array)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:316  Mads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:316   Arguments   madsdata::Associative  optparameterkey::Array  parameterarray::Array   source  #  Mads.getparamdict     Method .  Get dictionary with all parameters and their respective initial values  Mads.getparamdict(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   paramdict  : dictionary with all parameters and their respective initial values   Mads.getparamdict  Methods   Mads.getparamdict(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:62   Arguments   madsdata::Associative   source  #  Mads.getparamdistributions     Method .  Get probabilistic distributions of all parameters in the MADS problem dictionary  Mads.getparamdistributions(madsdata; init_dist=false)  Note:  Probabilistic distribution of parameters can be defined only if  dist  or  min / max  model parameter fields are specified in the MADS problem dictionary  madsdata .  Arguments:   madsdata  : MADS problem dictionary  init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field)   Mads.getparamdistributions  Methods   Mads.getparamdistributions(madsdata::Associative; init_dist)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:577   Arguments   madsdata::Associative   Keywords   init_dist   source  #  Mads.getparamkeys     Method .  Get keys of all parameters in the MADS dictionary  Mads.getparamkeys(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   paramkeys  : array with the keys of all parameters in the MADS dictionary   Mads.getparamkeys  Methods   Mads.getparamkeys(madsdata::Associative; filter)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:41   Arguments   madsdata::Associative   Keywords   filter   source  #  Mads.getparamrandom     Function .  Get independent sampling of model parameters defined in the MADS problem dictionary  Mads.getparamrandom  Methods   Mads.getparamrandom(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:280  Mads.getparamrandom(madsdata::Associative, numsamples::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:280  Mads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:280  Mads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, init_dist, paramdist)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:293   Arguments   madsdata::Associative  numsamples::Integer  parameterkey::String   Keywords   init_dist  numsamples  paramdist   Arguments:   madsdata  : MADS problem dictionary  numsamples  : number of samples  parameterkey  : model parameter key  init_dist  : if  true  use the distribution defined for initialization in the MADS problem dictionary (defined using  init_dist  parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using  dist  parameter field)   source  #  Mads.getparamsinit     Method .  Get an array with  init  values for parameters defined by  paramkeys  source  #  Mads.getparamsinit     Method .  Get an array with  init  values for all the MADS model parameters  source  #  Mads.getparamsinit_max     Function .  Get an array with  init_max  values for parameters defined by  paramkeys  Mads.getparamsinit_max  Methods   Mads.getparamsinit_max(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:283  Mads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:249   Arguments   madsdata::Associative  paramkeys::Array{T :Any,1}   source  #  Mads.getparamsinit_min     Function .  Get an array with  init_min  values for parameters  Mads.getparamsinit_min  Methods   Mads.getparamsinit_min(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:238  Mads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:204   Arguments   madsdata::Associative  paramkeys::Array{T :Any,1}   source  #  Mads.getparamslog     Method .  Get an array with  log  values for parameters defined by  paramkeys  source  #  Mads.getparamslog     Method .  Get an array with  log  values for all the MADS model parameters  source  #  Mads.getparamslongname     Method .  Get an array with  longname  values for parameters defined by  paramkeys  source  #  Mads.getparamslongname     Method .  Get an array with  longname  values for all the MADS model parameters  source  #  Mads.getparamsmax     Function .  Get an array with  max  values for parameters defined by  paramkeys  Mads.getparamsmax  Methods   Mads.getparamsmax(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:193  Mads.getparamsmax(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:171   Arguments   madsdata::Associative  paramkeys::Array{T :Any,1}   source  #  Mads.getparamsmin     Function .  Get an array with  min  values for parameters defined by  paramkeys  Mads.getparamsmin  Methods   Mads.getparamsmin(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:160  Mads.getparamsmin(madsdata::Associative, paramkeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:138   Arguments   madsdata::Associative  paramkeys::Array{T :Any,1}   source  #  Mads.getparamsplotname     Method .  Get an array with  plotname  values for parameters defined by  paramkeys  source  #  Mads.getparamsplotname     Method .  Get an array with  plotname  values for all the MADS model parameters  source  #  Mads.getparamsstep     Method .  Get an array with  step  values for parameters defined by  paramkeys  source  #  Mads.getparamsstep     Method .  Get an array with  step  values for all the MADS model parameters  source  #  Mads.getparamstype     Method .  Get an array with  type  values for parameters defined by  paramkeys  source  #  Mads.getparamstype     Method .  Get an array with  type  values for all the MADS model parameters  source  #  Mads.getprocs     Method .  Get the number of processors  Mads.getprocs  Methods   Mads.getprocs()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:36   source  #  Mads.getrestart     Method .  Get MADS restart status  Mads.getrestart  Methods   Mads.getrestart(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:25   Arguments   madsdata::Associative   source  #  Mads.getrestartdir     Function .  Get the directory where Mads restarts will be stored.  Mads.getrestartdir  Methods   Mads.getrestartdir(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:234  Mads.getrestartdir(madsdata::Associative, suffix::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:234   Arguments   madsdata::Associative  suffix::String   source  #  Mads.getrootname     Method .  Get file name root  Example:  r = Mads.getrootname( a.rnd.dat ) # r =  a \nr = Mads.getrootname( a.rnd.dat , first=false) # r =  a.rnd   Mads.getrootname  Methods   Mads.getrootname(filename::String; first, version)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:324   Arguments   filename::String   Keywords   first  version   source  #  Mads.getsindx     Method .  Get sin-space dx  Mads.getsindx  Methods   Mads.getsindx(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:226   Arguments   madsdata::Associative   source  #  Mads.getsourcekeys     Method .  Get keys of all source parameters in the MADS dictionary  Mads.getsourcekeys(madsdata)  Arguments:   madsdata  : MADS problem dictionary   Returns:   sourcekeys  : array with keys of all source parameters in the MADS dictionary   Mads.getsourcekeys  Methods   Mads.getsourcekeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:85   Arguments   madsdata::Associative   source  #  Mads.gettarget     Method .  Get observation target  Mads.gettarget  Methods   Mads.gettarget(o::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:177   Arguments   o::Associative   source  #  Mads.gettargetkeys     Method .  Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary  Mads.gettargetkeys  Methods   Mads.gettargetkeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:40   Arguments   madsdata::Associative   source  #  Mads.gettime     Method .  Get observation time  Mads.gettime  Methods   Mads.gettime(o::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:113   Arguments   o::Associative   source  #  Mads.getweight     Method .  Get observation weight  Mads.getweight  Methods   Mads.getweight(o::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:145   Arguments   o::Associative   source  #  Mads.getwellkeys     Method .  Get keys for all wells in the MADS problem dictionary  Mads.getwellkeys  Methods   Mads.getwellkeys(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:52   Arguments   madsdata::Associative   source  #  Mads.getwellsdata     Method .  Get  Wells  class spatial and temporal data  Mads.getwellsdata  Methods   Mads.getwellsdata(madsdata::Associative; time)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:535   Arguments   madsdata::Associative   Keywords   time   source  #  Mads.graphoff     Method .  MADS graph output off  Mads.graphoff  Methods   Mads.graphoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:63   source  #  Mads.graphon     Method .  MADS graph output on  Mads.graphon  Methods   Mads.graphon()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:54   source  #  Mads.haskeyword     Function .  Check for a  keyword  in a  class  within the Mads dictionary  madsdata   Mads.haskeyword(madsdata, keyword)  Mads.haskeyword(madsdata, class, keyword)   Arguments:   madsdata  : MADS problem dictionary  class  : dictionary class; if not provided searches for  keyword  in  Problem  class  keyword  : dictionary key   Returns:  true  or  false  Examples:   Mads.haskeyword(madsdata, \"disp\")  ... searches in  Problem  class by default  Mads.haskeyword(madsdata, \"Wells\", \"R-28\")  ... searches in  Wells  class for a keyword \"R-28\"   Mads.haskeyword  Methods   Mads.haskeyword(madsdata::Associative, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:130  Mads.haskeyword(madsdata::Associative, class::String, keyword::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:133   Arguments   class::String  keyword::String  madsdata::Associative   source  #  Mads.help     Method .  Produce MADS help information  Mads.help  Methods   Mads.help()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelp.jl:9   source  #  Mads.importeverywhere     Method .  Import function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations.  Mads.importeverywhere  Methods   Mads.importeverywhere(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:282   Arguments   filename::String   source  #  Mads.indexkeys     Function .  Find indexes for dictionary keys based on a string or regular expression  Mads.indexkeys  Methods   Mads.indexkeys(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:596  Mads.indexkeys(dict::Associative, key::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:595  Mads.indexkeys(dict::Associative, key::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:596   Arguments   dict::Associative  key::Regex  key::String   source  #  Mads.ins_obs     Method .  Apply Mads instruction file  instructionfilename  to read model input file  inputfilename  Mads.ins_obs  Methods   Mads.ins_obs(instructionfilename::String, inputfilename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:750   Arguments   inputfilename::String  instructionfilename::String   source  #  Mads.instline2regexs     Method .  Convert an instruction line in the Mads instruction file into regular expressions  Mads.instline2regexs  Methods   Mads.instline2regexs(instline::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:673   Arguments   instline::String   source  #  Mads.invobsweights!     Method .  Inversely proportional observation weights in the MADS problem dictionary  Mads.invobsweights!  Methods   Mads.invobsweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:283   Arguments   madsdata::Associative  value::Number   source  #  Mads.invwellweights!     Method .  Inversely proportional observation weights in the MADS problem dictionary  Mads.invwellweights!  Methods   Mads.invwellweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:328   Arguments   madsdata::Associative  value::Number   source  #  Mads.islog     Method .  Is parameter with key  parameterkey  log-transformed?  Mads.islog  Methods   Mads.islog(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:366   Arguments   madsdata::Associative  parameterkey::String   source  #  Mads.isobs     Method .  Is a dictionary containing all the observations  Mads.isobs  Methods   Mads.isobs(madsdata::Associative, dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:10   Arguments   dict::Associative  madsdata::Associative   source  #  Mads.isopt     Method .  Is parameter with key  parameterkey  optimizable?  Mads.isopt  Methods   Mads.isopt(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:352   Arguments   madsdata::Associative  parameterkey::String   source  #  Mads.isparam     Method .  Is the dictionary containing all the parameters  Mads.isparam  Methods   Mads.isparam(madsdata::Associative, dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:10   Arguments   dict::Associative  madsdata::Associative   source  #  Mads.ispkgavailable     Method .  Checks of package is available  Mads.ispkgavailable  Methods   Mads.ispkgavailable(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:9   Arguments   modulename::String   source  #  Mads.krige     Method .  Kriging  Mads.krige  Methods   Mads.krige(x0mat::Array, X::Array{T :Any,2}, Z::Array{T :Any,1}, cov::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:69   Arguments   X::Array{T :Any,2}  Z::Array{T :Any,1}  cov::Function  x0mat::Array   source  #  Mads.levenberg_marquardt     Function .  Levenberg-Marquardt optimization  Mads.levenberg_marquardt  Methods   Mads.levenberg_marquardt(f::Function, g::Function, x0)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:367  Mads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callback)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:367   Arguments   f::Function  g::Function  o::Function  x0   Keywords   alwaysDoJacobian  callback  lambda  lambda_mu  lambda_nu  lambda_scale  maxEval  maxIter  maxJacobians  np_lambda  root  show_trace  tolG  tolOF  tolX   Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  root  : Mads problem root name  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  maxJacobians  : maximum number of Jacobian solves  lambda  : initial Levenberg-Marquardt lambda [eps(Float32)]  lambda_scale  : lambda scaling factor  lambda_mu  : lambda multiplication factor \u03bc [10]  lambda_nu  : lambda multiplication factor \u03bd [10]  np_lambda  : number of parallel lambda solves  show_trace  : shows solution trace [default=false]  alwaysDoJacobian : computer Jacobian each iteration [false]  callback  : call back function for debugging   source  #  Mads.linktempdir     Method .  Link files in a temporary directory  Mads.linktempdir  Methods   Mads.linktempdir(madsproblemdir::String, tempdirname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:947   Arguments   madsproblemdir::String  tempdirname::String   source  #  Mads.loadasciifile     Method .  Load ASCII file  Mads.loadasciifile  Methods   Mads.loadasciifile(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:7   Arguments   filename::String   source  #  Mads.loadjsonfile     Method .  Load a JSON file  Mads.loadjsonfile  Methods   Mads.loadjsonfile(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:10   Arguments   filename::String   source  #  Mads.loadmadsfile     Method .  Load MADS input file defining a MADS problem dictionary   Mads.loadmadsfile(filename)  Mads.loadmadsfile(filename; julia=false)  Mads.loadmadsfile(filename; julia=true)   Arguments:   filename  : input file name (e.g.  input_file_name.mads )  julia  : if  true , force using  julia  parsing functions; if  false  (default), use  python  parsing functions [boolean]   Returns:   madsdata  : Mads problem dictionary   Example:  md = loadmadsfile(\"input_file_name.mads\")  Mads.loadmadsfile  Methods   Mads.loadmadsfile(filename::String; julia, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:24   Arguments   filename::String   Keywords   format  julia   source  #  Mads.loadyamlfile     Method .  Load YAML file  Arguments:   filename  : file name  julia=false  : use Python YAML library (if available)  julia=true  : use Julia YAML library (if available)   Mads.loadyamlfile  Methods   Mads.loadyamlfile(filename::String; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:17   Arguments   filename::String   Keywords   julia   source  #  Mads.localsa     Method .  Local sensitivity analysis based on eigen analysis of the parameter covariance matrix  Arguments:   madsdata  : MADS problem dictionary  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  par  : parameter set  obs  : observations for the parameter set   Mads.localsa  Methods   Mads.localsa(madsdata::Associative; sinspace, filename, format, datafiles, imagefiles, par, obs, J)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:43   Arguments   madsdata::Associative   Keywords   J  datafiles  filename  format  imagefiles  obs  par  sinspace   source  #  Mads.long_tests_off     Method .  Turn off execution of long MADS tests (default)  Mads.long_tests_off  Methods   Mads.long_tests_off()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:99   source  #  Mads.long_tests_on     Method .  Turn on execution of long MADS tests (dangerous)  Mads.long_tests_on  Methods   Mads.long_tests_on()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:90   source  #  Mads.madscores     Function .  Check the number of processors on a series of servers  Mads.madscores  Methods   Mads.madscores(nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:297  Mads.madscores()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:297   Arguments   nodenames::Array{String,1}   source  #  Mads.madscritical     Method .  MADS critical error messages  Mads.madscritical  Methods   Mads.madscritical(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:65   Arguments   message::String   source  #  Mads.madsdebug     Function .  MADS debug messages (controlled by  quiet  and  debuglevel )  Mads.madsdebug  Methods   Mads.madsdebug(message::String, level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:19  Mads.madsdebug(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:19   Arguments   level::Int64  message::String   source  #  Mads.madserror     Method .  MADS error messages  Mads.madserror  Methods   Mads.madserror(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:54   Arguments   message::String   source  #  Mads.madsinfo     Function .  MADS information/status messages (controlled by quiet and verbositylevel`)  Mads.madsinfo  Methods   Mads.madsinfo(message::String, level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:31  Mads.madsinfo(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:31   Arguments   level::Int64  message::String   source  #  Mads.madsload     Function .  Check the load of a series of servers  Mads.madsload  Methods   Mads.madsload(nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:315  Mads.madsload()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:315   Arguments   nodenames::Array{String,1}   source  #  Mads.madsmathprogbase     Function .  Mads execution using MathProgBase  Mads.madsmathprogbase  Methods   Mads.madsmathprogbase()  : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:13  Mads.madsmathprogbase(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:13   Arguments   madsdata::Associative   source  #  Mads.madsoutput     Function .  MADS output (controlled by quiet and verbositylevel`)  Mads.madsoutput  Methods   Mads.madsoutput(message::String, level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:7  Mads.madsoutput(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:7   Arguments   level::Int64  message::String   source  #  Mads.madsup     Function .  Check the uptime of a series of servers  Mads.madsup  Methods   Mads.madsup(nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:306  Mads.madsup()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:306   Arguments   nodenames::Array{String,1}   source  #  Mads.madswarn     Method .  MADS warning messages  Mads.madswarn  Methods   Mads.madswarn(message::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsLog.jl:43   Arguments   message::String   source  #  Mads.makearrayconditionalloglikelihood     Method .  Make a conditional log likelihood function that accepts an array containing the opt parameters' values  Mads.makearrayconditionalloglikelihood  Methods   Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:67   Arguments   conditionalloglikelihood  madsdata::Associative   source  #  Mads.makearrayfunction     Function .  Make a version of the function  f  that accepts an array containing the optimal parameters' values  Mads.makearrayfunction(madsdata, f)  Arguments:   madsdata  : MADS problem dictionary  f  : ...   Returns:   arrayfunction  : function accepting an array containing the optimal parameters' values   Mads.makearrayfunction  Methods   Mads.makearrayfunction(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:21  Mads.makearrayfunction(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:21   Arguments   f::Function  madsdata::Associative   source  #  Mads.makearrayloglikelihood     Method .  Make a log likelihood function that accepts an array containing the opt parameters' values  Mads.makearrayloglikelihood  Methods   Mads.makearrayloglikelihood(madsdata::Associative, loglikelihood)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:84   Arguments   loglikelihood  madsdata::Associative   source  #  Mads.makebigdt!     Method .  Setup Bayesian Information Gap Decision Theory (BIG-DT) problem  Arguments:   madsdata  : MADS problem dictionary  choice  : dictionary of BIG-DT choices (scenarios)   Returns:   bigdtproblem  : BIG-DT problem type   Mads.makebigdt!  Methods   Mads.makebigdt!(madsdata::Associative, choice::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:40   Arguments   choice::Associative  madsdata::Associative   source  #  Mads.makebigdt     Method .  Setup Bayesian Information Gap Decision Theory (BIG-DT) problem  Arguments:   madsdata  : MADS problem dictionary  choice  : dictionary of BIG-DT choices (scenarios)   Returns:   bigdtproblem  : BIG-DT problem type   Mads.makebigdt  Methods   Mads.makebigdt(madsdata::Associative, choice::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGap.jl:22   Arguments   choice::Associative  madsdata::Associative   source  #  Mads.makecomputeconcentrations     Method .  Create a function to compute concentrations for all the observation points using Anasol  Mads.makecomputeconcentrations  Methods   Mads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasol.jl:80   Arguments   madsdata::Associative   Keywords   calcpredictions  calczeroweightobs   Arguments:   madsdata  : MADS problem dictionary   Returns:   computeconcentrations  : function to compute concentrations;  computeconcentrations  returns a dictionary of observations and model predicted concentrations   Examples:  computeconcentrations()  or  computeconcentrations = Mads.makecomputeconcentrations(madsdata)\nparamkeys = Mads.getparamkeys(madsdata)\nparamdict = OrderedDict(zip(paramkeys, map(key- madsdata[ Parameters ][key][ init ], paramkeys)))\nforward_preds = computeconcentrations(paramdict)  source  #  Mads.makedoublearrayfunction     Function .  Make a version of the function  f  that accepts an array containing the optimal parameters' values, and returns an array of observations  Mads.makedoublearrayfunction(madsdata, f)  Arguments:   madsdata  : MADS problem dictionary  f  : ...   Returns:   doublearrayfunction  : function accepting an array containing the optimal parameters' values, and returning an array of observations   Mads.makedoublearrayfunction  Methods   Mads.makedoublearrayfunction(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:46  Mads.makedoublearrayfunction(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:46   Arguments   f::Function  madsdata::Associative   source  #  Mads.makelmfunctions     Method .  Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization  Mads.makelmfunctions  Methods   Mads.makelmfunctions(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:88   Arguments   madsdata::Associative   source  #  Mads.makelocalsafunction     Method .  Make gradient function needed for local sensitivity analysis  Mads.makelocalsafunction  Methods   Mads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:185   Arguments   madsdata::Associative   Keywords   multiplycenterbyweights   source  #  Mads.makelogprior     Method .  Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary  madsdata  Mads.makelogprior  Methods   Mads.makelogprior(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:389   Arguments   madsdata::Associative   source  #  Mads.makemadscommandfunction     Method .  Make MADS function to execute the model defined in the MADS problem dictionary  madsdata  Usage:  Mads.makemadscommandfunction(madsdata)  MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are:   Model  : execute a Julia function defined in an input Julia file. The function that should accept a  parameter  dictionary with all the model parameters as an input argument and should return an  observation  dictionary with all the model predicted observations. MADS will execute the first function defined in the file.  MADS model  : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.  Julia model  : execute an internal Julia function that accepts a  parameter  dictionary with all the model parameters as an input argument and will return an  observation  dictionary with all the model predicted observations.  Command  : execute an external UNIX command or script that will execute an external model.  Julia command  : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an  observation  dictionary with model predictions.   Both  Command  and  Julia command  can use different approaches to pass model parameters to the external model.  Only  Command  uses different approaches to get back the model outputs. The script defined under  Julia command  parses the model outputs using Julia.  The available options for writing model inputs and reading model outputs are as follows.  Options for writing model inputs:   Templates  : template files for writing model input files as defined at http://mads.lanl.gov  ASCIIParameters  : model parameters written in a ASCII file  JLDParameters  : model parameters written in a JLD file  YAMLParameters  : model parameters written in a YAML file  JSONParameters  : model parameters written in a JSON file   Options for reading model outputs:   Instructions  : instruction files for reading model output files as defined at http://mads.lanl.gov  ASCIIPredictions  : model predictions read from a ASCII file  JLDPredictions  : model predictions read from a JLD file  YAMLPredictions  : model predictions read from a YAML file  JSONPredictions  : model predictions read from a JSON file   Mads.makemadscommandfunction  Methods   Mads.makemadscommandfunction(madsdatawithobs::Associative; calczeroweightobs, calcpredictions)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:53   Arguments   madsdatawithobs::Associative   Keywords   calcpredictions  calczeroweightobs   source  #  Mads.makemadscommandfunctionandgradient     Method .  Make MADS forward   gradient functions for the model defined in the MADS problem dictionary  madsdata  Mads.makemadscommandfunctionandgradient  Methods   Mads.makemadscommandfunctionandgradient(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:321   Arguments   madsdata::Associative   source  #  Mads.makemadscommandgradient     Method .  Make MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary  madsdata  Mads.makemadscommandgradient  Methods   Mads.makemadscommandgradient(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:303   Arguments   madsdata::Associative   source  #  Mads.makemadsconditionalloglikelihood     Method .  Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary  madsdata .  Mads.makemadsconditionalloglikelihood  Methods   Mads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:406   Arguments   madsdata::Associative   Keywords   weightfactor   source  #  Mads.makemadsloglikelihood     Method .  Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under  LogLikelihood  or computed internally.  Mads.makemadsloglikelihood  Methods   Mads.makemadsloglikelihood(madsdata::Associative; weightfactor)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:434   Arguments   madsdata::Associative   Keywords   weightfactor   source  #  Mads.makemadsreusablefunction     Function .  Make Mads reusable function  Mads.makemadsreusablefunction  Methods   Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:204  Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:204  Mads.makemadsreusablefunction(paramkeys::Array{T :Any,1}, obskeys::Array{T :Any,1}, madsdatarestart::Union{Bool,String}, madscommandfunction::Function, restartdir::String; usedict)  : /Users/monty/.julia/v0.5/Mads/src/MadsFunc.jl:207   Arguments   madscommandfunction::Function  madsdata::Associative  madsdatarestart::Union{Bool,String}  obskeys::Array{T :Any,1}  paramkeys::Array{T :Any,1}  restartdir::String  suffix::String   Keywords   usedict   source  #  Mads.makempbfunctions     Method .  Make forward model, gradient, objective functions needed for MathProgBase optimization  Mads.makempbfunctions  Methods   Mads.makempbfunctions(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMathProgBase.jl:82   Arguments   madsdata::Associative   source  #  Mads.maxtorealmax!     Method .  Scale down values larger than max(Float32) in a Dataframe  df  so that Gadfly can plot the data  Mads.maxtorealmax!  Methods   Mads.maxtorealmax!(df::DataFrames.DataFrame)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:937   Arguments   df::DataFrames.DataFrame   source  #  Mads.modelinformationcriteria     Function .  Model section information criteria  Mads.modelinformationcriteria  Methods   Mads.modelinformationcriteria(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:7  Mads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N :Any})  : /Users/monty/.julia/v0.5/Mads/src/MadsModelSelection.jl:7   Arguments   madsdata::Associative  par::Array{Float64,N :Any}   source  #  Mads.modobsweights!     Method .  Modify (multiply) observation weights in the MADS problem dictionary  Mads.modobsweights!  Methods   Mads.modobsweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:271   Arguments   madsdata::Associative  value::Number   source  #  Mads.modwellweights!     Method .  Modify (multiply) well weights in the MADS problem dictionary  Mads.modwellweights!  Methods   Mads.modwellweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:313   Arguments   madsdata::Associative  value::Number   source  #  Mads.montecarlo     Method .  Monte Carlo analysis  Mads.montecarlo(madsdata; N=100)  Arguments:   madsdata  : MADS problem dictionary sampling uniformly between mins/maxs  N  : number of samples (default = 100)   Returns:   outputdicts  : parameter dictionary containing the data arrays   Dumps:   YAML output file with the parameter dictionary containing the data arrays ( mads_root_name .mcresults.yaml )   Mads.montecarlo  Methods   Mads.montecarlo(madsdata::Associative; N, filename)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:179   Arguments   madsdata::Associative   Keywords   N  filename   source  #  Mads.naive_get_deltax     Method .  Naive Levenberg-Marquardt optimization: get the LM parameter space step  Mads.naive_get_deltax  Methods   Mads.naive_get_deltax(JpJ::Array{Float64,2}, Jp::Array{Float64,2}, f0::Array{Float64,1}, lambda::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:261   Arguments   Jp::Array{Float64,2}  JpJ::Array{Float64,2}  f0::Array{Float64,1}  lambda::Number   source  #  Mads.naive_levenberg_marquardt     Function .  Naive Levenberg-Marquardt optimization  Arguments:   f  : forward model function  g  : gradient function for the forward model  x0  : initial parameter guess  o  : objective function  tolX  : parameter space tolerance  tolG  : parameter space update tolerance  tolOF  : objective function update tolerance  maxEval  : maximum number of model evaluations  maxIter  : maximum number of optimization iterations  lambda  : initial Levenberg-Marquardt lambda [100]  lambda_mu  : lambda multiplication factor \u03bc [10]  np_lambda  : number of parallel lambda solves   Mads.naive_levenberg_marquardt  Methods   Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:303  Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, np_lambda, lambda, lambda_mu)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:303   Arguments   f::Function  g::Function  o::Function  x0::Array{Float64,1}   Keywords   lambda  lambda_mu  maxEval  maxIter  np_lambda   source  #  Mads.naive_lm_iteration     Method .  Naive Levenberg-Marquardt optimization: perform LM iteration  Mads.naive_lm_iteration  Methods   Mads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:272   Arguments   f0::Array{Float64,1}  f::Function  g::Function  lambdas::Array{Float64,1}  o::Function  x0::Array{Float64,1}   source  #  Mads.noplot     Method .  Disable MADS plotting  Mads.noplot  Methods   Mads.noplot()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:239   source  #  Mads.obslineismatch     Method .  Match an instruction line in the Mads instruction file with model input file  Mads.obslineismatch  Methods   Mads.obslineismatch(obsline::String, regexs::Array{Regex,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:716   Arguments   obsline::String  regexs::Array{Regex,1}   source  #  Mads.of     Function .  Compute objective function  Mads.of  Methods   Mads.of(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:51  Mads.of(madsdata::Associative, results::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:44  Mads.of(madsdata::Associative, resultdict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:48   Arguments   madsdata::Associative  resultdict::Associative  results::Array{T :Any,1}   source  #  Mads.paramarray2dict     Method .  Convert a parameter array to a parameter dictionary of arrays  Mads.paramarray2dict  Methods   Mads.paramarray2dict(madsdata::Associative, array::Array)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:231   Arguments   array::Array  madsdata::Associative   source  #  Mads.paramdict2array     Method .  Convert a parameter dictionary of arrays to a parameter array  Mads.paramdict2array  Methods   Mads.paramdict2array(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:245   Arguments   dict::Associative   source  #  Mads.parsemadsdata!     Method .  Parse loaded Mads problem dictionary  Arguments:   madsdata  : Mads problem dictionary   Mads.parsemadsdata!  Methods   Mads.parsemadsdata!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:56   Arguments   madsdata::Associative   source  #  Mads.parsenodenames     Function .  Parse string with node names defined in SLURM  Mads.parsenodenames  Methods   Mads.parsenodenames(nodenames::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208  Mads.parsenodenames(nodenames::String, ntasks_per_node::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:208   Arguments   nodenames::String  ntasks_per_node::Integer   source  #  Mads.partialof     Method .  Compute the sum of squared residuals for observations that match a regular expression  Mads.partialof  Methods   Mads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:67   Arguments   madsdata::Associative  regex::Regex  resultdict::Associative   source  #  Mads.plotgrid     Function .  Plot a 3D grid solution based on model predictions in array  s , initial parameters, or user provided parameter values  Mads.plotgrid  Methods   Mads.plotgrid(madsdata::Associative; addtitle, title, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:55  Mads.plotgrid(madsdata::Associative, s::Array{Float64,N :Any}; addtitle, title, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:5  Mads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlotPy.jl:60   Arguments   madsdata::Associative  parameters::Associative  s::Array{Float64,N :Any}   Keywords   addtitle  filename  format  title   plotgrid(madsdata, s; addtitle=true, title= , filename= , format= )\nplotgrid(madsdata; addtitle=true, title= , filename= , format= )\nplotgrid(madsdata, parameters; addtitle=true, title= , filename= , format= )  Arguments:   madsdata  : MADS problem dictionary  parameters  : dictionary with model parameters  s  : model predictions array  addtitle  : add plot title [true]  title  : plot title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source  #  Mads.plotmadsproblem     Method .  Plot contaminant sources and wells defined in MADS problem dictionary  Arguments:   madsdata  : MADS problem dictionary  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  keyword  : to be added in the filename   Mads.plotmadsproblem  Methods   Mads.plotmadsproblem(madsdata::Associative; imagefile, format, filename, keyword)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:77   Arguments   madsdata::Associative   Keywords   filename  format  imagefile  keyword   source  #  Mads.plotmass     Method .  Plot injected/reduced contaminant mass   Mads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\")   Arguments:   lambda  : array with all the lambda values  mass_injected  : array with associated total injected mass  mass_reduced  : array with associated total reduced mass  filename  : output filename for the generated plot  format  : output plot format ( png ,  pdf , etc.)   Dumps: image file with name  filename  and in specified  format  Mads.plotmass  Methods   Mads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format)  : /Users/monty/.julia/v0.5/Mads/src/MadsAnasolPlot.jl:21   Arguments   filename::String  lambda::Array{Float64,1}  mass_injected::Array{Float64,1}  mass_reduced::Array{Float64,1}   Keywords   format   source  #  Mads.plotmatches     Function .  Plot the matches between model predictions and observations  Mads.plotmatches  Methods   Mads.plotmatches(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:148  Mads.plotmatches(madsdata::Associative, rx::Regex; filename, format, title, xtitle, ytitle, separate_files, hsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:148  Mads.plotmatches(madsdata::Associative, dict_in::Associative; filename, format, title, xtitle, ytitle, separate_files, hsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:180  Mads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; filename, format, key2time, title, xtitle, ytitle, separate_files, hsize)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:156   Arguments   dict_in::Associative  madsdata::Associative  result::Associative  rx::Regex   Keywords   filename  format  hsize  key2time  separate_files  title  xtitle  ytitle   plotmatches(madsdata; filename= , format= )\nplotmatches(madsdata, param; filename= , format= )\nplotmatches(madsdata, result; filename= , format= )\nplotmatches(madsdata, result, r NO3 ; filename= , format= )  Arguments:   madsdata  : MADS problem dictionary  param  : dictionary with model parameters  result  : dictionary with model predictions  rx  : regular expression to filter the outputs  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source  #  Mads.plotobsSAresults     Method .  Plot the sensitivity analysis results for the observations  Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  filter  : string or regex to plot only observations containing  filter  keyword  : to be added in the auto-generated filename  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   Mads.plotobsSAresults  Methods   Mads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:500   Arguments   madsdata::Associative  result::Associative   Keywords   debug  filename  filter  format  keyword  separate_files  xtitle  ytitle   source  #  Mads.plotrobustnesscurves     Method .  Plot BIG-DT robustness curves  Arguments:   madsdata  : MADS problem dictionary  bigdtresults  : BIG-DT results  filename  : output file name used to dump plots  format  : output plot format ( png ,  pdf , etc.)   Mads.plotrobustnesscurves  Methods   Mads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz)  : /Users/monty/.julia/v0.5/Mads/src/MadsBayesInfoGapPlot.jl:16   Arguments   bigdtresults::Dict  madsdata::Associative   Keywords   filename  format  maxhoriz  maxprob   source  #  Mads.plotseries     Function .  Create plots of data series  Arguments:   X  : matrix with the series data  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)  xtitle  : x-axis title  ytitle  : y-axis title  title  : plot title  name  : series name  combined  :  true  by default   Mads.plotseries  Methods   Mads.plotseries(X::Array{T :Any,2})  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:988  Mads.plotseries(X::Array{T :Any,2}, filename::String; combined, format, xtitle, ytitle, title, name)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:988   Arguments   X::Array{T :Any,2}  filename::String   Keywords   combined  format  name  title  xtitle  ytitle   source  #  Mads.plotwellSAresults     Function .  Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected)  Mads.plotwellSAresults  Methods   Mads.plotwellSAresults(madsdata::Associative, result; xtitle, ytitle, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:374  Mads.plotwellSAresults(madsdata::Associative, result, wellname; xtitle, ytitle, filename, format)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:385   Arguments   madsdata::Associative  result  wellname   Keywords   filename  format  xtitle  ytitle   Arguments:   madsdata  : MADS problem dictionary  result  : sensitivity analysis results  wellname  : well name  xtitle  : x-axis title  ytitle  : y-axis title  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   source  #  Mads.printSAresults     Method .  Print sensitivity analysis results  Mads.printSAresults  Methods   Mads.printSAresults(madsdata::Associative, results::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:778   Arguments   madsdata::Associative  results::Associative   source  #  Mads.printSAresults2     Method .  Print sensitivity analysis results (method 2)  Mads.printSAresults2  Methods   Mads.printSAresults2(madsdata::Associative, results::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:858   Arguments   madsdata::Associative  results::Associative   source  #  Mads.push     Function .  Push the latest version of the Mads / Julia modules in the repo  Mads.push  Methods   Mads.push(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:112  Mads.push()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:112   Arguments   modulename::String   source  #  Mads.quietoff     Method .  Make MADS not quiet  Mads.quietoff  Methods   Mads.quietoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:44   source  #  Mads.quieton     Method .  Make MADS quiet  Mads.quieton  Methods   Mads.quieton()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:34   source  #  Mads.readasciipredictions     Method .  Read MADS predictions from an ASCII file  Mads.readasciipredictions  Methods   Mads.readasciipredictions(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsASCII.jl:26   Arguments   filename::String   source  #  Mads.readjsonpredictions     Method .  Read MADS model predictions from a JSON file  Mads.readjsonpredictions  Methods   Mads.readjsonpredictions(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsJSON.jl:37   Arguments   filename::String   source  #  Mads.readmodeloutput     Method .  Read model outputs saved for MADS  Mads.readmodeloutput  Methods   Mads.readmodeloutput(madsdata::Associative; obskeys, path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:534   Arguments   madsdata::Associative   Keywords   obskeys  path   source  #  Mads.readobservations     Function .  Read observations  Mads.readobservations  Methods   Mads.readobservations(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:780  Mads.readobservations(madsdata::Associative, obskeys::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:780   Arguments   madsdata::Associative  obskeys::Array{T :Any,1}   source  #  Mads.readobservations_cmads     Method .  Read observations using C Mads library  Mads.readobservations_cmads  Methods   Mads.readobservations_cmads(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/../src-old/MadsCMads.jl:9   Arguments   madsdata::Associative   source  #  Mads.readyamlpredictions     Method .  Read MADS model predictions from a YAML file  filename  Mads.readyamlpredictions  Methods   Mads.readyamlpredictions(filename::String; julia)  : /Users/monty/.julia/v0.5/Mads/src/MadsYAML.jl:118   Arguments   filename::String   Keywords   julia   source  #  Mads.regexs2obs     Method .  Get observations for a set of regular expressions  Mads.regexs2obs  Methods   Mads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:726   Arguments   getparamhere::Array{Bool,1}  obsline::String  obsnames::Array{String,1}  regexs::Array{Regex,1}   source  #  Mads.reload     Method .  Reload Mads modules  Mads.reload  Methods   Mads.reload()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:34   source  #  Mads.required     Function .  Lists modules required by a module (Mads by default)  Mads.required  Methods   Mads.required(modulename::String, filtermodule::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25  Mads.required(modulename::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25  Mads.required()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:25   Arguments   filtermodule::String  modulename::String   source  #  Mads.resetmodelruns     Method .  Reset the model runs count to be equal to zero  Mads.resetmodelruns  Methods   Mads.resetmodelruns()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:126   source  #  Mads.residuals     Function .  Compute residuals  Mads.residuals  Methods   Mads.residuals(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:32  Mads.residuals(madsdata::Associative, results::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:6  Mads.residuals(madsdata::Associative, resultdict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsLevenbergMarquardt.jl:29   Arguments   madsdata::Associative  resultdict::Associative  results::Array{T :Any,1}   source  #  Mads.restartoff     Method .  MADS restart off  Mads.restartoff  Methods   Mads.restartoff()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:16   source  #  Mads.restarton     Method .  MADS restart on  Mads.restarton  Methods   Mads.restarton()  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:7   source  #  Mads.reweighsamples     Method .  Reweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing  Arguments:   madsdata  : MADS problem dictionary  predictions  : the model predictions for each of the samples  oldllhoods  : the log likelihoods of the parameters in the old distribution   Returns:   newllhoods  : vector of log-likelihoods after reweighing   Mads.reweighsamples  Methods   Mads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:210   Arguments   madsdata::Associative  oldllhoods::Array{T :Any,1}  predictions::Array   source  #  Mads.rmdir     Method .  Remove directory  Mads.rmdir  Methods   Mads.rmdir(dir::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:866   Arguments   dir::String   Keywords   path   source  #  Mads.rmfile     Method .  Remove file  Mads.rmfile  Methods   Mads.rmfile(filename::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:880   Arguments   filename::String   Keywords   path   source  #  Mads.rmfiles_ext     Method .  Remove files with extension  ext  Mads.rmfiles_ext  Methods   Mads.rmfiles_ext(ext::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:894   Arguments   ext::String   Keywords   path   source  #  Mads.rmfiles_root     Method .  Remove files with root  root  Mads.rmfiles_root  Methods   Mads.rmfiles_root(root::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:905   Arguments   root::String   Keywords   path   source  #  Mads.rosenbrock     Method .  Rosenbrock test function  Mads.rosenbrock  Methods   Mads.rosenbrock(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:30   Arguments   x::Array{T :Any,1}   source  #  Mads.rosenbrock2_gradient_lm     Method .  Parameter gradients of the Rosenbrock test function  Mads.rosenbrock2_gradient_lm  Methods   Mads.rosenbrock2_gradient_lm(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:16   Arguments   x::Array{T :Any,1}   source  #  Mads.rosenbrock2_lm     Method .  Rosenbrock test function (more difficult to solve)  Mads.rosenbrock2_lm  Methods   Mads.rosenbrock2_lm(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:7   Arguments   x::Array{T :Any,1}   source  #  Mads.rosenbrock_gradient!     Method .  Parameter gradients of the Rosenbrock test function  Mads.rosenbrock_gradient!  Methods   Mads.rosenbrock_gradient!(x::Array{T :Any,1}, storage::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:48   Arguments   storage::Array{T :Any,1}  x::Array{T :Any,1}   source  #  Mads.rosenbrock_gradient_lm     Method .  Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely)  Mads.rosenbrock_gradient_lm  Methods   Mads.rosenbrock_gradient_lm(x::Array{T :Any,1}; dx, center)  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:58   Arguments   x::Array{T :Any,1}   Keywords   center  dx   source  #  Mads.rosenbrock_hessian!     Method .  Parameter Hessian of the Rosenbrock test function  Mads.rosenbrock_hessian!  Methods   Mads.rosenbrock_hessian!(x::Array{T :Any,1}, storage::Array{T :Any,2})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:72   Arguments   storage::Array{T :Any,2}  x::Array{T :Any,1}   source  #  Mads.rosenbrock_lm     Method .  Rosenbrock test function for LM optimization (returns the 2 components separetely)  Mads.rosenbrock_lm  Methods   Mads.rosenbrock_lm(x::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsTestFunctions.jl:39   Arguments   x::Array{T :Any,1}   source  #  Mads.runcmd     Function .  Run external command and pipe stdout and stderr  Mads.runcmd  Methods   Mads.runcmd(cmd::Cmd, quiet::Bool)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:324  Mads.runcmd(cmd::Cmd)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:324   Arguments   cmd::Cmd  quiet::Bool   source  #  Mads.runremote     Function .  Run remote command on a series of servers  Mads.runremote  Methods   Mads.runremote(cmd::String, nodenames::Array{String,1})  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277  Mads.runremote(cmd::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:277   Arguments   cmd::String  nodenames::Array{String,1}   source  #  Mads.saltelli     Method .  Saltelli sensitivity analysis  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  seed  : initial random seed  restartdir  : directory where files will be stored containing model results for fast simulation restarts  parallel  : set to true if the model runs should be performed in parallel   Mads.saltelli  Methods   Mads.saltelli(madsdata::Associative; N, seed, parallel, restartdir, checkpointfrequency)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:511   Arguments   madsdata::Associative   Keywords   N  checkpointfrequency  parallel  restartdir  seed   source  #  Mads.saltellibrute     Method .  Saltelli sensitivity analysis (brute force)  Arguments:   madsdata  : MADS problem dictionary  N  : number of samples  seed  : initial random seed   Mads.saltellibrute  Methods   Mads.saltellibrute(madsdata::Associative; N, seed, restartdir)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:339   Arguments   madsdata::Associative   Keywords   N  restartdir  seed   source  #  Mads.saltellibruteparallel     Method .  Parallel version of saltellibrute  source  #  Mads.saltelliparallel     Method .  Parallel version of saltelli  source  #  Mads.savecalibrationresults     Method .  Save calibration results  Mads.savecalibrationresults  Methods   Mads.savecalibrationresults(madsdata::Associative, results)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:208   Arguments   madsdata::Associative  results   source  #  Mads.savemadsfile     Function .  Save MADS problem dictionary  madsdata  in MADS input file  filename   Mads.savemadsfile(madsdata)  Mads.savemadsfile(madsdata, \"test.mads\")  Mads.savemadsfile(madsdata, parameters, \"test.mads\")  Mads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true)   Arguments:   madsdata  : Mads problem dictionary  parameters  : Dictinary with parameters (optional)  filename  : input file name (e.g.  input_file_name.mads )  julia  : if  true  use Julia JSON module to save  explicit  : if  true  ignores MADS YAML file modifications and rereads the original input file   Mads.savemadsfile  Methods   Mads.savemadsfile(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:169  Mads.savemadsfile(madsdata::Associative, filename::String; julia, explicit)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:169   Arguments   filename::String  madsdata::Associative   Keywords   explicit  julia   source  #  Mads.savemcmcresults     Method .  Save MCMC chain in a file  Mads.savemcmcresults  Methods   Mads.savemcmcresults(chain::Array, filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsMonteCarlo.jl:136   Arguments   chain::Array  filename::String   source  #  Mads.scatterplotsamples     Method .  Create histogram/scatter plots of model parameter samples  Arguments:   madsdata  : MADS problem dictionary  samples  : matrix with model parameters  filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   Mads.scatterplotsamples  Methods   Mads.scatterplotsamples(madsdata::Associative, samples::Array{T :Any,2}, filename::String; format, dot_size)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:338   Arguments   filename::String  madsdata::Associative  samples::Array{T :Any,2}   Keywords   dot_size  format   source  #  Mads.searchdir     Function .  Get files in the current directory or in a directory defined by  path  matching pattern  key  which can be a string or regular expression  Mads.searchdir  Methods   Mads.searchdir(key::String; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:563  Mads.searchdir(key::Regex; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:562   Arguments   key::Regex  key::String   Keywords   path   Examples:   Mads.searchdir(\"a\")  Mads.searchdir(r\"[A-B]\"; path = \".\")  Mads.searchdir(r\".*.cov\"; path = \".\")   Arguments:   key  : matching pattern for Mads input files (string or regular expression accepted)  path  : search directory for the mads input files   Returns:   filename  : an array with file names matching the pattern in the specified directory   source  #  Mads.set_nprocs_per_task     Function .  Set number of processors needed for each parallel task at each node  Mads.set_nprocs_per_task  Methods   Mads.set_nprocs_per_task()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:27  Mads.set_nprocs_per_task(local_nprocs_per_task::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:27   Arguments   local_nprocs_per_task::Integer   source  #  Mads.setallparamsoff!     Method .  Set all parameters OFF  Mads.setallparamsoff!  Methods   Mads.setallparamsoff!(madsdata::Associative; filter)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:391   Arguments   madsdata::Associative   Keywords   filter   source  #  Mads.setallparamson!     Method .  Set all parameters ON  Mads.setallparamson!  Methods   Mads.setallparamson!(madsdata::Associative; filter)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:379   Arguments   madsdata::Associative   Keywords   filter   source  #  Mads.setdebuglevel     Method .  Set MADS debug level  Mads.setdebuglevel  Methods   Mads.setdebuglevel(level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:108   Arguments   level::Int64   source  #  Mads.setdefaultplotformat     Method .  Set the default plot format ( SVG  is the default format)  Mads.setdefaultplotformat  Methods   Mads.setdefaultplotformat(format::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:15   Arguments   format::String   source  #  Mads.setdir     Function .  Set the working directory (for parallel environments)  Usage:  @everywhere Mads.setdir()\n@everywhere Mads.setdir( /home/monty )  Mads.setdir  Methods   Mads.setdir()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:254  Mads.setdir(dir)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:249   Arguments   dir   source  #  Mads.setdynamicmodel     Method .  Set Dynamic Model for MADS model calls using internal Julia functions  Mads.setdynamicmodel  Methods   Mads.setdynamicmodel(madsdata::Associative, f::Function)  : /Users/monty/.julia/v0.5/Mads/src/MadsMisc.jl:105   Arguments   f::Function  madsdata::Associative   source  #  Mads.setmadsinputfile     Method .  Set a default MADS input file  Mads.setmadsinputfile(filename)  Arguments:   filename  : input file name (e.g.  input_file_name.mads )   Mads.setmadsinputfile  Methods   Mads.setmadsinputfile(filename::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:222   Arguments   filename::String   source  #  Mads.setmodelinputs     Method .  Set model input files; delete files where model output should be saved for MADS  Mads.setmodelinputs  Methods   Mads.setmodelinputs(madsdata::Associative, parameters::Associative; path)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:468   Arguments   madsdata::Associative  parameters::Associative   Keywords   path   source  #  Mads.setnewmadsfilename     Method .  Set new mads file name  Mads.setnewmadsfilename  Methods   Mads.setnewmadsfilename(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:352   Arguments   madsdata::Associative   source  #  Mads.setobservationtargets!     Method .  Set observations (calibration targets) in the MADS problem dictionary based on a  predictions  dictionary  Mads.setobservationtargets!  Methods   Mads.setobservationtargets!(madsdata::Associative, predictions::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:419   Arguments   madsdata::Associative  predictions::Associative   source  #  Mads.setobstime!     Function .  Set observation time based on the observation name in the MADS problem dictionary  Mads.setobstime!  Methods   Mads.setobstime!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:204  Mads.setobstime!(madsdata::Associative, separator::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:204  Mads.setobstime!(madsdata::Associative, rx::Regex)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:215   Arguments   madsdata::Associative  rx::Regex  separator::String   Usage:  Mads.setobstime!(madsdata, separator)\nMads.setobstime!(madsdata, regex)  Arguments:   madsdata  : MADS problem dictionary  separator  : string to separator  regex  : regular expression to match   Examples:  Mads.setobstime!(madsdata,  _t )\nMads.setobstime!(madsdata, r [A-x]*_t([0-9,.]+) )  source  #  Mads.setobsweights!     Method .  Set observation weights in the MADS problem dictionary  Mads.setobsweights!  Methods   Mads.setobsweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:259   Arguments   madsdata::Associative  value::Number   source  #  Mads.setparamoff!     Method .  Set a specific parameter with a key  parameterkey  OFF  Mads.setparamoff!  Methods   Mads.setparamoff!(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:412   Arguments   madsdata::Associative  parameterkey::String   source  #  Mads.setparamon!     Method .  Set a specific parameter with a key  parameterkey  ON  Mads.setparamon!  Methods   Mads.setparamon!(madsdata::Associative, parameterkey::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:403   Arguments   madsdata::Associative  parameterkey::String   source  #  Mads.setparamsdistnormal!     Method .  Set normal parameter distributions for all the model parameters in the MADS problem dictionary  Mads.setparamsdistnormal!(madsdata, mean, stddev)  Arguments:   madsdata  : MADS problem dictionary  mean  : array with the mean values  stddev  : array with the standard deviation values   Mads.setparamsdistnormal!  Methods   Mads.setparamsdistnormal!(madsdata::Associative, mean::Array{T :Any,1}, stddev::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:429   Arguments   madsdata::Associative  mean::Array{T :Any,1}  stddev::Array{T :Any,1}   source  #  Mads.setparamsdistuniform!     Method .  Set uniform parameter distributions for all the model parameters in the MADS problem dictionary  Mads.setparamsdistuniform!(madsdata, min, max)  Arguments:   madsdata  : MADS problem dictionary  min  : array with the minimum values  max  : array with the maximum values   Mads.setparamsdistuniform!  Methods   Mads.setparamsdistuniform!(madsdata::Associative, min::Array{T :Any,1}, max::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:449   Arguments   madsdata::Associative  max::Array{T :Any,1}  min::Array{T :Any,1}   source  #  Mads.setparamsinit!     Method .  Set initial parameter guesses in the MADS dictionary  Mads.setparamsinit!(madsdata, paramdict)  Arguments:   madsdata  : MADS problem dictionary  paramdict  : dictionary with initial model parameter values   Mads.setparamsinit!  Methods   Mads.setparamsinit!(madsdata::Associative, paramdict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:306   Arguments   madsdata::Associative  paramdict::Associative   source  #  Mads.setplotfileformat     Method .  Set image file  format  based on the  filename  extension, or sets the  filename  extension based on the requested  format . The default  format  is  SVG .  PNG ,  PDF ,  ESP , and  PS  are also supported.  Mads.setplotfileformat(filename::String, format::String)  Arguments:   filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   Returns:   filename  : output file name  format  : output plot format ( png ,  pdf , etc.)   Mads.setplotfileformat  Methods   Mads.setplotfileformat(filename::String, format::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:40   Arguments   filename::String  format::String   source  #  Mads.setprocs     Function .  Set the available processors based on environmental variables. Supports SLURM only at the moment.  Usage:  Mads . setprocs ()  Mads . setprocs ( 4 )  Mads . setprocs ( 4 ,   8 )  Mads . setprocs ( ntasks_per_node = 4 )  Mads . setprocs ( ntasks_per_node = 32 ,   mads_servers = true )  Mads . setprocs ( ntasks_per_node = 64 ,   nodenames = [ madsmax ,   madszem ])  Mads . setprocs ( ntasks_per_node = 64 ,   nodenames = wc[096-157,160,175] )  Mads . setprocs ( ntasks_per_node = 64 ,   mads_servers = true ,   exename = /home/monty/bin/julia ,   dir = /home/monty )   Arguments:   np  : number of processors  nt  : number of threads   Optional arguments:   ntasks_per_node  : number of parallel tasks per  nprocs_per_task  : number of processors needed for each parallel task at each node  nodenames  : array with names of machines/nodes to be invoked  dir  : common directory shared by all the jobs  exename  : location of the julia executable (the same version of julia is needed on all the workers)  mads_servers  : if  true  use MADS servers (LANL only)  quiet  : suppress output [default  true ]  test  : test the servers and connect to each one ones at a time [default  false ]   Mads.setprocs  Methods   Mads.setprocs(; ntasks_per_node, nprocs_per_task, mads_servers, test, dir, exename, nodenames, quiet)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:58  Mads.setprocs(np::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:54  Mads.setprocs(np::Integer, nt::Integer)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsParallel.jl:40   Arguments   np::Integer  nt::Integer   Keywords   dir  exename  mads_servers  nodenames  nprocs_per_task  ntasks_per_node  quiet  test   source  #  Mads.setseed     Method .  Set current seed  Mads.setseed  Methods   Mads.setseed(seed::Integer)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:20   Arguments   seed::Integer   source  #  Mads.settarget!     Method .  Set observation target  Mads.settarget!  Methods   Mads.settarget!(o::Associative, target::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:194   Arguments   o::Associative  target::Number   source  #  Mads.settime!     Method .  Set observation time  Mads.settime!  Methods   Mads.settime!(o::Associative, time::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:130   Arguments   o::Associative  time::Number   source  #  Mads.setverbositylevel     Method .  Set MADS verbosity level  Mads.setverbositylevel  Methods   Mads.setverbositylevel(level::Int64)  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:117   Arguments   level::Int64   source  #  Mads.setweight!     Method .  Set observation weight  Mads.setweight!  Methods   Mads.setweight!(o::Associative, weight::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:162   Arguments   o::Associative  weight::Number   source  #  Mads.setwellweights!     Method .  Set well weights in the MADS problem dictionary  Mads.setwellweights!  Methods   Mads.setwellweights!(madsdata::Associative, value::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:298   Arguments   madsdata::Associative  value::Number   source  #  Mads.showallparameters     Function .  Show all parameters in the MADS problem dictionary  Mads.showallparameters  Methods   Mads.showallparameters(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsParameters.jl:516   Arguments   madsdata::Associative   source  #  Mads.showobservations     Method .  Show observations in the MADS problem dictionary  Mads.showobservations  Methods   Mads.showobservations(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:346   Arguments   madsdata::Associative   source  #  Mads.sinetransform     Method .  Sine transformation of model parameters  Mads.sinetransform  Methods   Mads.sinetransform(sineparams::Array{T :Any,1}, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:19   Arguments   indexlogtransformed::Array{T :Any,1}  lowerbounds::Array{T :Any,1}  sineparams::Array{T :Any,1}  upperbounds::Array{T :Any,1}   source  #  Mads.sinetransformfunction     Method .  Sine transformation of a function  Mads.sinetransformfunction  Methods   Mads.sinetransformfunction(f::Function, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:30   Arguments   f::Function  indexlogtransformed::Array{T :Any,1}  lowerbounds::Array{T :Any,1}  upperbounds::Array{T :Any,1}   source  #  Mads.sinetransformgradient     Method .  Sine transformation of a gradient function  Mads.sinetransformgradient  Methods   Mads.sinetransformgradient(g::Function, lowerbounds::Array{T :Any,1}, upperbounds::Array{T :Any,1}, indexlogtransformed::Array{T :Any,1}; sindx)  : /Users/monty/.julia/v0.5/Mads/src/MadsSineTransformations.jl:42   Arguments   g::Function  indexlogtransformed::Array{T :Any,1}  lowerbounds::Array{T :Any,1}  upperbounds::Array{T :Any,1}   Keywords   sindx   source  #  Mads.spaghettiplot     Function .  Generate a combined spaghetti plot for the  selected  ( type != null ) model parameter  Mads.spaghettiplot  Methods   Mads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; filename, keyword, format, xtitle, ytitle, obs_plot_dots, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:798  Mads.spaghettiplot(madsdata::Associative, dictarray::Associative; filename, keyword, format, xtitle, ytitle, obs_plot_dots, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:802  Mads.spaghettiplot(madsdata::Associative, array::Array; filename, keyword, format, xtitle, ytitle, obs_plot_dots, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:839   Arguments   array::Array  dictarray::Associative  madsdata::Associative  number_of_samples::Integer   Keywords   filename  format  keyword  obs_plot_dots  seed  xtitle  ytitle   Mads.spaghettiplot(madsdata, paramdictarray; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplot(madsdata, obsmdictarray; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplot(madsdata, number_of_samples; filename= , keyword =  , format= , xtitle= X , ytitle= Y , obs_plot_dots=true)  Arguments:   madsdata  : MADS problem dictionary  paramdictarray  : parameter dictionary array containing the data arrays to be plotted  obsdictarray  : observation dictionary array containing the data arrays to be plotted  number_of_samples  : number of samples  filename  : output file name used to output the produced plots  keyword  : keyword to be added in the file name used to output the produced plots (if  filename  is not defined)  format  : output plot format ( png ,  pdf , etc.)  xtitle  :  x  axis title  ytitle  :  y  axis title  obs_plot_dots  : plot observation as dots ( true  [default] or  false )  seed  : initial random seed   Returns:  none  Dumps:   Image file with a spaghetti plot ( mads_rootname - keyword - number_of_samples -spaghetti. default_image_extension )   source  #  Mads.spaghettiplots     Function .  Generate separate spaghetti plots for each  selected  ( type != null ) model parameter  Mads.spaghettiplots  Methods   Mads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; format, keyword, xtitle, ytitle, obs_plot_dots, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:658  Mads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed)  : /Users/monty/.julia/v0.5/Mads/src/MadsPlot.jl:662   Arguments   madsdata::Associative  number_of_samples::Integer  paramdictarray::DataStructures.OrderedDict   Keywords   format  keyword  obs_plot_dots  seed  xtitle  ytitle   Mads.spaghettiplots(madsdata, paramdictarray; format= , keyword= , xtitle= X , ytitle= Y , obs_plot_dots=true)\nMads.spaghettiplots(madsdata, number_of_samples; format= , keyword= , xtitle= X , ytitle= Y , obs_plot_dots=true)  Arguments:   madsdata  : MADS problem dictionary  paramdictarray  : parameter dictionary containing the data arrays to be plotted  number_of_samples  : number of samples  keyword  : keyword to be added in the file name used to output the produced plots  format  : output plot format ( png ,  pdf , etc.)  xtitle  :  x  axis title  ytitle  :  y  axis title  obs_plot_dots  : plot observation as dots ( true  [default] or  false )  seed  : initial random seed   Dumps:   A series of image files with spaghetti plots for each  selected  ( type != null ) model parameter ( mads_rootname - keyword - param_key - number_of_samples -spaghetti. default_image_extension )   source  #  Mads.sphericalcov     Method .  Spherical spatial covariance function  Mads.sphericalcov  Methods   Mads.sphericalcov(h::Number, maxcov::Number, scale::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:20   Arguments   h::Number  maxcov::Number  scale::Number   source  #  Mads.sphericalvariogram     Method .  Spherical variogram  Mads.sphericalvariogram  Methods   Mads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number)  : /Users/monty/.julia/v0.5/Mads/src/MadsKriging.jl:28   Arguments   h::Number  nugget::Number  range::Number  sill::Number   source  #  Mads.sprintf     Method .  Convert  @sprintf  macro into  sprintf  function  source  #  Mads.status     Method .  Status of the Mads modules  Mads.status  Methods   Mads.status(; git, gitmore)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:178   Keywords   git  gitmore   source  #  Mads.stdoutcaptureoff     Method .  Restore STDOUT  source  #  Mads.stdoutcaptureon     Method .  Redirect STDOUT to a reader  source  #  Mads.symlinkdir     Method .  Create a symbolic link of a file  filename  in a directory  dirtarget  Mads.symlinkdir  Methods   Mads.symlinkdir(filename::String, dirtarget::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:854   Arguments   dirtarget::String  filename::String   source  #  Mads.symlinkdirfiles     Method .  Create a symbolic link of all the files in a directory  dirsource  in a directory  dirtarget  Mads.symlinkdirfiles  Methods   Mads.symlinkdirfiles(dirsource::String, dirtarget::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:838   Arguments   dirsource::String  dirtarget::String   source  #  Mads.tag     Function .  Tag the Mads modules with a default argument  :patch  Mads.tag  Methods   Mads.tag(madsmodule::String, sym::Symbol)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:231  Mads.tag(madsmodule::String)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:231  Mads.tag(sym::Symbol)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:226  Mads.tag()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsPublish.jl:226   Arguments   madsmodule::String  sym::Symbol   source  #  Mads.test     Function .  Perform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace;  reload(\"Mads.jl\")  if needed)  Mads.test  Methods   Mads.test(testname::String; madstest)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:48  Mads.test()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:48   Arguments   testname::String   Keywords   madstest  : test Mads [default= true ])   source  #  Mads.testj     Function .  Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial)  Mads.testj  Methods   Mads.testj(coverage::Bool)  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7  Mads.testj()  : /Users/monty/.julia/v0.5/Mads/src/../src-interactive/MadsTest.jl:7   Arguments   coverage::Bool   source  #  Mads.transposematrix     Method .  Transpose non-numeric matrix  Mads.transposematrix  Methods   Mads.transposematrix(a::Array{T :Any,2})  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:251   Arguments   a::Array{T :Any,2}   source  #  Mads.transposevector     Method .  Transpose non-numeric vector  Mads.transposevector  Methods   Mads.transposevector(a::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsHelpers.jl:242   Arguments   a::Array{T :Any,1}   source  #  Mads.void2nan!     Method .  Convert Void's into NaN's in a dictionary  Mads.void2nan!  Methods   Mads.void2nan!(dict::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:897   Arguments   dict::Associative   source  #  Mads.weightedstats     Method .  Get weighted mean and variance samples  Arguments:   samples  : array of samples  llhoods  : vector of log-likelihoods   Returns:   mean  : vector of sample means  var  : vector of sample variances   Mads.weightedstats  Methods   Mads.weightedstats(samples::Array, llhoods::Array{T :Any,1})  : /Users/monty/.julia/v0.5/Mads/src/MadsSenstivityAnalysis.jl:273   Arguments   llhoods::Array{T :Any,1}  samples::Array   source  #  Mads.welloff!     Method .  Turn off a specific well in the MADS problem dictionary  Mads.welloff!  Methods   Mads.welloff!(madsdata::Associative, wellname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:483   Arguments   madsdata::Associative  wellname::String   source  #  Mads.wellon!     Method .  Turn on a specific well in the MADS problem dictionary  Mads.wellon!  Methods   Mads.wellon!(madsdata::Associative, wellname::String)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:451   Arguments   madsdata::Associative  wellname::String   source  #  Mads.wells2observations!     Method .  Convert  Wells  class to  Observations  class in the MADS problem dictionary  Mads.wells2observations!  Methods   Mads.wells2observations!(madsdata::Associative)  : /Users/monty/.julia/v0.5/Mads/src/MadsObservations.jl:503   Arguments   madsdata::Associative   source  #  Mads.writeparameters     Function .  Write  parameters  via MADS template ( templatefilename ) to an output file ( outputfilename )  Mads.writeparametersviatemplate  Methods   Mads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space)  : /Users/monty/.julia/v0.5/Mads/src/MadsIO.jl:614   Arguments   outputfilename  parameters  templatefilename   Keywords   respect_space   source", 
            "title": "Mads.jl"
        }, 
        {
            "location": "/Modules/BIGUQ/", 
            "text": "BIGUQ.jl\n\n\nDocumentation for BIGUQ.jl module (all functions):\n\n\n#\n\n\nBIGUQ.getmcmcchain\n \n \nMethod\n.\n\n\nGet MCMC chain\n\n\nsource\n\n\n#\n\n\nBIGUQ.makebigdts\n \n \nMethod\n.\n\n\nMake BIGDT analyses for each possible decision assuming that the proposed observations \nproposedobs\n are observed\n\n\nsource\n\n\n#\n\n\nBIGUQ.makebigdts\n \n \nMethod\n.\n\n\nMakes BIGDT analyses for each possible decision assuming that no more observations will be made\n\n\nsource\n\n\n#\n\n\nBIGUQ.BigDT\n \n \nType\n.\n\n\nBigOED type\n\n\nsource\n\n\n#\n\n\nBIGUQ.BigOED\n \n \nType\n.\n\n\nBigOED type\n\n\nsource", 
            "title": "BIGUQ"
        }, 
        {
            "location": "/Modules/BIGUQ/#biguqjl", 
            "text": "Documentation for BIGUQ.jl module (all functions):  #  BIGUQ.getmcmcchain     Method .  Get MCMC chain  source  #  BIGUQ.makebigdts     Method .  Make BIGDT analyses for each possible decision assuming that the proposed observations  proposedobs  are observed  source  #  BIGUQ.makebigdts     Method .  Makes BIGDT analyses for each possible decision assuming that no more observations will be made  source  #  BIGUQ.BigDT     Type .  BigOED type  source  #  BIGUQ.BigOED     Type .  BigOED type  source", 
            "title": "BIGUQ.jl"
        }, 
        {
            "location": "/Modules/Anasol/", 
            "text": "Anasol.jl\n\n\nDocumentation for Anasol.jl module (all functions):", 
            "title": "Anasol"
        }, 
        {
            "location": "/Modules/Anasol/#anasoljl", 
            "text": "Documentation for Anasol.jl module (all functions):", 
            "title": "Anasol.jl"
        }, 
        {
            "location": "/Modules/AffineInvariantMCMC/", 
            "text": "AffineInvariantMCMC.jl\n\n\nDocumentation for AffineInvariantMCMC.jl module (all functions):\n\n\n#\n\n\nAffineInvariantMCMC.flattenmcmcarray\n \n \nMethod\n.\n\n\nFlatten MCMC arrays\n\n\nsource\n\n\n#\n\n\nAffineInvariantMCMC.sample\n \n \nFunction\n.\n\n\nBayesian sampling using Goodman \n Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)\n\n\nAffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1)\n\n\n\n\n\nArguments:\n\n\n\n\nllhood\n : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood())\n\n\nnumwalkers\n : number of walkers\n\n\nx0\n : normalized initial parameters (matrix of size (length(params), numwalkers))\n\n\nthinning\n : removal of any \nthinning\n realization\n\n\na\n :\n\n\n\n\nReturns:\n\n\n\n\nmcmcchain\n : final MCMC chain\n\n\nllhoodvals\n : log likelihoods of the final samples in the chain\n\n\n\n\nReference:\n\n\nGoodman, Jonathan, and Jonathan Weare. \"Ensemble samplers with affine invariance.\" Communications in applied mathematics and computational science 5.1 (2010): 65-80.\n\n\nsource", 
            "title": "AffineInvariantMCMC"
        }, 
        {
            "location": "/Modules/AffineInvariantMCMC/#affineinvariantmcmcjl", 
            "text": "Documentation for AffineInvariantMCMC.jl module (all functions):  #  AffineInvariantMCMC.flattenmcmcarray     Method .  Flatten MCMC arrays  source  #  AffineInvariantMCMC.sample     Function .  Bayesian sampling using Goodman   Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee)  AffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1)  Arguments:   llhood  : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood())  numwalkers  : number of walkers  x0  : normalized initial parameters (matrix of size (length(params), numwalkers))  thinning  : removal of any  thinning  realization  a  :   Returns:   mcmcchain  : final MCMC chain  llhoodvals  : log likelihoods of the final samples in the chain   Reference:  Goodman, Jonathan, and Jonathan Weare. \"Ensemble samplers with affine invariance.\" Communications in applied mathematics and computational science 5.1 (2010): 65-80.  source", 
            "title": "AffineInvariantMCMC.jl"
        }, 
        {
            "location": "/Modules/GeostatInversion/", 
            "text": "GeostatInversion.jl\n\n\nDocumentation for GeostatInversion.jl module (all functions):\n\n\n#\n\n\nGeostatInversion.getxis\n \n \nFunction\n.\n\n\nGet the parameter subspace that will be explored during the inverse analysis\n\n\ngetxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing)\ngetxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing)\n\n\n\n\n\nArguments:\n\n\n\n\nsamplefield : a function that takes no arguments and returns a sample of the field\n\n\nQ : the covariance matrix of the parameter field\n\n\nnumfields : the number of fields that will be used to find the subspace\n\n\nnumxis : the dimension of the subspace\n\n\np : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)\n\n\nq : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)\n\n\nseed : an optional seed to use when doing the randomized matrix factorization\n\n\n\n\nsource\n\n\n#\n\n\nGeostatInversion.pcgadirect\n \n \nMethod\n.\n\n\nDirect principal component geostatistical approach\n\n\npcgadirect\n(\nforwardmodel\n::\nFunction\n,\n \ns0\n::\nVector\n,\n \nX\n::\nVector\n,\n \nxis\n::\nArray\n{\nArray{Float64,\n \n1\n}\n,\n \n1\n}\n,\n \nR\n,\n \ny\n::\nVector\n;\n \nmaxiters\n::\nInt\n=\n5\n,\n \ndelta\n::\nFloat64\n=\nsqrt\n(\neps\n(\nFloat64\n)),\n \nxtol\n::\nFloat64\n=\n1e-6\n,\n \ncallback\n=(\ns\n,\n \nobs_cal\n)\n-\nnothing\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nforwardmodel : param to obs map h(s)\n\n\ns0 : initial guess\n\n\nX : mean of parameter prior (replace with B*X drift matrix later for p\n1)\n\n\nxis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix\n\n\nR : covariance of measurement error (data misfit term)\n\n\ny : data vector\n\n\nmaxiters : maximum # of PCGA iterations\n\n\ndelta : the finite difference step size\n\n\nxtol : convergence tolerence for the parameters\n\n\ncallback : a function of the form \n(params, observations)-\n...\n that is called during each iteration\n\n\n\n\nsource\n\n\n#\n\n\nGeostatInversion.pcgalsqr\n \n \nMethod\n.\n\n\nIterative principal component geostatistical approach\n\n\npcgalsqr\n(\nforwardmodel\n::\nFunction\n,\n \ns0\n::\nVector\n,\n \nX\n::\nVector\n,\n \nxis\n::\nArray\n{\nArray{Float64,\n \n1\n}\n,\n \n1\n}\n,\n \nR\n,\n \ny\n::\nVector\n;\n \nmaxiters\n::\nInt\n=\n5\n,\n \ndelta\n::\nFloat64\n=\nsqrt\n(\neps\n(\nFloat64\n)),\n \nxtol\n::\nFloat64\n=\n1e-6\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nforwardmodel : param to obs map h(s)\n\n\ns0 : initial guess\n\n\nX : mean of parameter prior (replace with B*X drift matrix later for p\n1)\n\n\nxis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix\n\n\nR : covariance of measurement error (data misfit term)\n\n\ny : data vector\n\n\nmaxiters : maximum # of PCGA iterations\n\n\ndelta : the finite difference step size\n\n\nxtol : convergence tolerence for the parameters\n\n\n\n\nsource\n\n\n#\n\n\nGeostatInversion.rga\n \n \nMethod\n.\n\n\nRandomized (principal component) geostatistical approach\n\n\nExample:\n\n\nfunction\n \nrga\n(\nforwardmodel\n::\nFunction\n,\n \ns0\n::\nVector\n,\n \nX\n::\nVector\n,\n \nxis\n::\nArray\n{\nArray\n{\nFloat64\n,\n \n1\n},\n \n1\n},\n \nR\n,\n \ny\n::\nVector\n,\n \nS\n;\n \nmaxiters\n::\nInt\n=\n5\n,\n \ndelta\n::\nFloat64\n=\nsqrt\n(\neps\n(\nFloat64\n)),\n \nxtol\n::\nFloat64\n=\n1\ne\n-\n6\n,\n \npcgafunc\n=\npcgadirect\n,\n \ncallback\n=\n(\ns\n,\n \nobs_cal\n)\n-\nnothing\n)\n\n\n\n\n\n\nArguments:\n\n\n\n\nforwardmodel : param to obs map h(s)\n\n\ns0 : initial guess\n\n\nX : mean of parameter prior (replace with B*X drift matrix later for p\n1)\n\n\nxis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix\n\n\nR : covariance of measurement error (data misfit term)\n\n\ny : data vector\n\n\nS : sketching matrix\n\n\nmaxiters : maximum # of PCGA iterations\n\n\ndelta : the finite difference step size\n\n\nxtol : convergence tolerance for the parameters\n\n\ncallback : a function of the form \n(params, observations)-\n...\n that is called during each iteration\n\n\n\n\nsource\n\n\n\n\nModule GeostatInversion.FDDerivatives\n\n\nDocumentation for GeostatInversion.FDDerivatives module (all functions):\n\n\n#\n\n\nGeostatInversion.FDDerivatives.makegradient\n \n \nFunction\n.\n\n\nCreate Gradient function\n\n\nsource\n\n\n#\n\n\nGeostatInversion.FDDerivatives.makejacobian\n \n \nFunction\n.\n\n\nCreate Jacobian function\n\n\nsource\n\n\n\n\nModule GeostatInversion.RandMatFact\n\n\nDocumentation for GeostatInversion.RandMatFact module (all functions):\n\n\n#\n\n\nGeostatInversion.RandMatFact.randsvd\n \n \nMethod\n.\n\n\nRandom SVD based on algorithm 5.1 from Halko et al.\n\n\nsource\n\n\n\n\nModule GeostatInversion.FFTRF\n\n\nDocumentation for GeostatInversion.FFTRF module (all functions):\n\n\n#\n\n\nGeostatInversion.FFTRF.reducek\n \n \nMethod\n.\n\n\nReduce k\n\n\nsource", 
            "title": "GeostatInversion"
        }, 
        {
            "location": "/Modules/GeostatInversion/#geostatinversionjl", 
            "text": "Documentation for GeostatInversion.jl module (all functions):  #  GeostatInversion.getxis     Function .  Get the parameter subspace that will be explored during the inverse analysis  getxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing)\ngetxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing)  Arguments:   samplefield : a function that takes no arguments and returns a sample of the field  Q : the covariance matrix of the parameter field  numfields : the number of fields that will be used to find the subspace  numxis : the dimension of the subspace  p : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)  q : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011)  seed : an optional seed to use when doing the randomized matrix factorization   source  #  GeostatInversion.pcgadirect     Method .  Direct principal component geostatistical approach  pcgadirect ( forwardmodel :: Function ,   s0 :: Vector ,   X :: Vector ,   xis :: Array { Array{Float64,   1 } ,   1 } ,   R ,   y :: Vector ;   maxiters :: Int = 5 ,   delta :: Float64 = sqrt ( eps ( Float64 )),   xtol :: Float64 = 1e-6 ,   callback =( s ,   obs_cal ) - nothing )   Arguments:   forwardmodel : param to obs map h(s)  s0 : initial guess  X : mean of parameter prior (replace with B*X drift matrix later for p 1)  xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix  R : covariance of measurement error (data misfit term)  y : data vector  maxiters : maximum # of PCGA iterations  delta : the finite difference step size  xtol : convergence tolerence for the parameters  callback : a function of the form  (params, observations)- ...  that is called during each iteration   source  #  GeostatInversion.pcgalsqr     Method .  Iterative principal component geostatistical approach  pcgalsqr ( forwardmodel :: Function ,   s0 :: Vector ,   X :: Vector ,   xis :: Array { Array{Float64,   1 } ,   1 } ,   R ,   y :: Vector ;   maxiters :: Int = 5 ,   delta :: Float64 = sqrt ( eps ( Float64 )),   xtol :: Float64 = 1e-6 )   Arguments:   forwardmodel : param to obs map h(s)  s0 : initial guess  X : mean of parameter prior (replace with B*X drift matrix later for p 1)  xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix  R : covariance of measurement error (data misfit term)  y : data vector  maxiters : maximum # of PCGA iterations  delta : the finite difference step size  xtol : convergence tolerence for the parameters   source  #  GeostatInversion.rga     Method .  Randomized (principal component) geostatistical approach  Example:  function   rga ( forwardmodel :: Function ,   s0 :: Vector ,   X :: Vector ,   xis :: Array { Array { Float64 ,   1 },   1 },   R ,   y :: Vector ,   S ;   maxiters :: Int = 5 ,   delta :: Float64 = sqrt ( eps ( Float64 )),   xtol :: Float64 = 1 e - 6 ,   pcgafunc = pcgadirect ,   callback = ( s ,   obs_cal ) - nothing )   Arguments:   forwardmodel : param to obs map h(s)  s0 : initial guess  X : mean of parameter prior (replace with B*X drift matrix later for p 1)  xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix  R : covariance of measurement error (data misfit term)  y : data vector  S : sketching matrix  maxiters : maximum # of PCGA iterations  delta : the finite difference step size  xtol : convergence tolerance for the parameters  callback : a function of the form  (params, observations)- ...  that is called during each iteration   source", 
            "title": "GeostatInversion.jl"
        }, 
        {
            "location": "/Modules/GeostatInversion/#module-geostatinversionfdderivatives", 
            "text": "Documentation for GeostatInversion.FDDerivatives module (all functions):  #  GeostatInversion.FDDerivatives.makegradient     Function .  Create Gradient function  source  #  GeostatInversion.FDDerivatives.makejacobian     Function .  Create Jacobian function  source", 
            "title": "Module GeostatInversion.FDDerivatives"
        }, 
        {
            "location": "/Modules/GeostatInversion/#module-geostatinversionrandmatfact", 
            "text": "Documentation for GeostatInversion.RandMatFact module (all functions):  #  GeostatInversion.RandMatFact.randsvd     Method .  Random SVD based on algorithm 5.1 from Halko et al.  source", 
            "title": "Module GeostatInversion.RandMatFact"
        }, 
        {
            "location": "/Modules/GeostatInversion/#module-geostatinversionfftrf", 
            "text": "Documentation for GeostatInversion.FFTRF module (all functions):  #  GeostatInversion.FFTRF.reducek     Method .  Reduce k  source", 
            "title": "Module GeostatInversion.FFTRF"
        }, 
        {
            "location": "/Modules/ReusableFunctions/", 
            "text": "ReusableFunctions.jl\n\n\nDocumentation for ReusableFunctions.jl module (all functions):\n\n\n#\n\n\nReusableFunctions.checkhashfilename\n \n \nMethod\n.\n\n\nCheck if a file with a filename based on hash exists\n\n\nsource\n\n\n#\n\n\nReusableFunctions.gethashfilename\n \n \nMethod\n.\n\n\nDefine a filename based on hash\n\n\nsource\n\n\n#\n\n\nReusableFunctions.loadresultfile\n \n \nMethod\n.\n\n\nLoad JLD result file\n\n\nsource\n\n\n#\n\n\nReusableFunctions.maker3function\n \n \nMethod\n.\n\n\nMake a reusable function expecting both regular and keyword arguments\n\n\nsource\n\n\n#\n\n\nReusableFunctions.quietoff\n \n \nMethod\n.\n\n\nMake ReusableFunctions not quiet\n\n\nsource\n\n\n#\n\n\nReusableFunctions.quieton\n \n \nMethod\n.\n\n\nMake ReusableFunctions quiet\n\n\nsource\n\n\n#\n\n\nReusableFunctions.resetrestarts\n \n \nMethod\n.\n\n\nReset restart counter\n\n\nsource\n\n\n#\n\n\nReusableFunctions.saveresultfile\n \n \nMethod\n.\n\n\nSave JLD result file\n\n\nsource", 
            "title": "ReusableFunctions"
        }, 
        {
            "location": "/Modules/ReusableFunctions/#reusablefunctionsjl", 
            "text": "Documentation for ReusableFunctions.jl module (all functions):  #  ReusableFunctions.checkhashfilename     Method .  Check if a file with a filename based on hash exists  source  #  ReusableFunctions.gethashfilename     Method .  Define a filename based on hash  source  #  ReusableFunctions.loadresultfile     Method .  Load JLD result file  source  #  ReusableFunctions.maker3function     Method .  Make a reusable function expecting both regular and keyword arguments  source  #  ReusableFunctions.quietoff     Method .  Make ReusableFunctions not quiet  source  #  ReusableFunctions.quieton     Method .  Make ReusableFunctions quiet  source  #  ReusableFunctions.resetrestarts     Method .  Reset restart counter  source  #  ReusableFunctions.saveresultfile     Method .  Save JLD result file  source", 
            "title": "ReusableFunctions.jl"
        }, 
        {
            "location": "/Modules/MetaProgTools/", 
            "text": "MetaProgTools.jl\n\n\nDocumentation for MetaProgTools.jl module (all functions):\n\n\n#\n\n\nMetaProgTools.getsymbols\n \n \nMethod\n.\n\n\nGet symbols\n\n\nsource\n\n\n#\n\n\nMetaProgTools.in\n \n \nMethod\n.\n\n\nFind a needle in a haystack\n\n\nsource\n\n\n#\n\n\nMetaProgTools.populateexpression\n \n \nMethod\n.\n\n\nPopulate Expression\n\n\nsource\n\n\n#\n\n\nMetaProgTools.replacesymbol\n \n \nMethod\n.\n\n\nReplace Symbol\n\n\nsource", 
            "title": "MetaProgTools"
        }, 
        {
            "location": "/Modules/MetaProgTools/#metaprogtoolsjl", 
            "text": "Documentation for MetaProgTools.jl module (all functions):  #  MetaProgTools.getsymbols     Method .  Get symbols  source  #  MetaProgTools.in     Method .  Find a needle in a haystack  source  #  MetaProgTools.populateexpression     Method .  Populate Expression  source  #  MetaProgTools.replacesymbol     Method .  Replace Symbol  source", 
            "title": "MetaProgTools.jl"
        }, 
        {
            "location": "/Modules/RobustPmap/", 
            "text": "RobustPmap.jl\n\n\nDocumentation for RobustPmap.jl module (all functions):\n\n\n#\n\n\nRobustPmap.checkexceptions\n \n \nFunction\n.\n\n\nCheck for type exceptions\n\n\nsource\n\n\n#\n\n\nRobustPmap.crpmap\n \n \nMethod\n.\n\n\nRobust pmap call with checkpoints\n\n\nsource\n\n\n#\n\n\nRobustPmap.rpmap\n \n \nMethod\n.\n\n\nRobust pmap call\n\n\nsource", 
            "title": "RobustPmap"
        }, 
        {
            "location": "/Modules/RobustPmap/#robustpmapjl", 
            "text": "Documentation for RobustPmap.jl module (all functions):  #  RobustPmap.checkexceptions     Function .  Check for type exceptions  source  #  RobustPmap.crpmap     Method .  Robust pmap call with checkpoints  source  #  RobustPmap.rpmap     Method .  Robust pmap call  source", 
            "title": "RobustPmap.jl"
        }, 
        {
            "location": "/Modules/SVR/", 
            "text": "SVR.jl\n\n\nDocumentation for SVR.jl module (all functions):\n\n\n#\n\n\nSVR.freemodel\n \n \nMethod\n.\n\n\nFree a libSVM model\n\n\nsource\n\n\n#\n\n\nSVR.predict\n \n \nMethod\n.\n\n\nPredict based on a libSVM model\n\n\nsource\n\n\n#\n\n\nSVR.readlibsvmfile\n \n \nMethod\n.\n\n\nRead a libSVM file\n\n\nsource\n\n\n#\n\n\nSVR.savemodel\n \n \nMethod\n.\n\n\nSave a libSVM model\n\n\nsource\n\n\n#\n\n\nSVR.train\n \n \nMethod\n.\n\n\nTrain based on a libSVM model\n\n\nsource", 
            "title": "SVR"
        }, 
        {
            "location": "/Modules/SVR/#svrjl", 
            "text": "Documentation for SVR.jl module (all functions):  #  SVR.freemodel     Method .  Free a libSVM model  source  #  SVR.predict     Method .  Predict based on a libSVM model  source  #  SVR.readlibsvmfile     Method .  Read a libSVM file  source  #  SVR.savemodel     Method .  Save a libSVM model  source  #  SVR.train     Method .  Train based on a libSVM model  source", 
            "title": "SVR.jl"
        }, 
        {
            "location": "/acknowledgments/", 
            "text": "ACKNOWLEDGMENTS\n\n\nMADS development has been supported by:\n\n\n\n\nLos Alamos National Laboratory Environmental Programs (LANL-ADEP)\n\n\nLos Alamos National Laboratory Exploratory Research (LANL-ER)\n\n\nDepartment of Energy (DOE) DiaMonD project: An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions", 
            "title": "Acknowledgments"
        }, 
        {
            "location": "/acknowledgments/#acknowledgments", 
            "text": "MADS development has been supported by:   Los Alamos National Laboratory Environmental Programs (LANL-ADEP)  Los Alamos National Laboratory Exploratory Research (LANL-ER)  Department of Energy (DOE) DiaMonD project: An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions", 
            "title": "ACKNOWLEDGMENTS"
        }, 
        {
            "location": "/copying/", 
            "text": "Licensing: GPLv3: http://www.gnu.org/licenses/gpl-3.0.html\n\n\nCopyright 2016.  Los Alamos National Security, LLC.  All rights reserved.\n\n\nCopyright 2016.  Los Alamos National Security, LLC. This material was produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), which is operated by Los Alamos National Security, LLC for the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative works, such modified software should be clearly marked, so as not to confuse it with the version available from LANL.\n\n\nAdditionally, this program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. Accordingly, this program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n\nLA-CC-15-080; Copyright Number Assigned: C16008", 
            "title": "License"
        }
    ]
}
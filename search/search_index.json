{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MADS (Model Analysis & Decision Support) MADS is an integrated open-source high-performance computational (HPC) framework in Julia . MADS can execute a wide range of data- and model-based analyses: Sensitivity Analysis Parameter Estimation Model Inversion and Calibration Uncertainty Quantification Model Selection and Model Averaging Model Reduction and Surrogate Modeling Machine Learning (e.g. Blind Source Separation, Source Identification, Feature Extraction, etc.) Decision Analysis and Support MADS has been tested to perform HPC simulations on a wide-range multi-processor clusters and parallel environments (Moab, Slurm, etc.). MADS utilizes adaptive rules and techniques which allows the analyses to be performed with a minimum user input. The code provides a series of alternative algorithms to execute each type of data- and model-based analyses. For additional information: web: mads.lanl.gov madsc.lanl.gov (C version of MADS) documentation: github (recommended) readthedocs madsjulia.lanl.gov (it might not be up-to-date) repos: github (recommended) gitlab (it might not be up-to-date) git: git clone git@github.com:madsjulia/Mads.jl (recommended) git clone git@gitlab.com:mads/Mads.jl (it might not be up-to-date) email: mads@lanl.gov Builds & Tests Mads Build & Test Status @ JuliaLang.org Mads Build & Test Status @ Travis Continuous Integration (CI) service (OS X & linux) Coverage of the Build-in Mads Tests LA-CC-15-080 Publications, Presentations, Projects mads.gitlab.io mads.lanl.gov monty.gitlab.io ees.lanl.gov/monty","title":"Home"},{"location":"#mads-model-analysis-decision-support","text":"MADS is an integrated open-source high-performance computational (HPC) framework in Julia . MADS can execute a wide range of data- and model-based analyses: Sensitivity Analysis Parameter Estimation Model Inversion and Calibration Uncertainty Quantification Model Selection and Model Averaging Model Reduction and Surrogate Modeling Machine Learning (e.g. Blind Source Separation, Source Identification, Feature Extraction, etc.) Decision Analysis and Support MADS has been tested to perform HPC simulations on a wide-range multi-processor clusters and parallel environments (Moab, Slurm, etc.). MADS utilizes adaptive rules and techniques which allows the analyses to be performed with a minimum user input. The code provides a series of alternative algorithms to execute each type of data- and model-based analyses. For additional information: web: mads.lanl.gov madsc.lanl.gov (C version of MADS) documentation: github (recommended) readthedocs madsjulia.lanl.gov (it might not be up-to-date) repos: github (recommended) gitlab (it might not be up-to-date) git: git clone git@github.com:madsjulia/Mads.jl (recommended) git clone git@gitlab.com:mads/Mads.jl (it might not be up-to-date) email: mads@lanl.gov","title":"MADS (Model Analysis &amp; Decision Support)"},{"location":"#builds-tests","text":"Mads Build & Test Status @ JuliaLang.org Mads Build & Test Status @ Travis Continuous Integration (CI) service (OS X & linux) Coverage of the Build-in Mads Tests LA-CC-15-080","title":"Builds &amp; Tests"},{"location":"#publications-presentations-projects","text":"mads.gitlab.io mads.lanl.gov monty.gitlab.io ees.lanl.gov/monty","title":"Publications, Presentations, Projects"},{"location":"acknowledgments/","text":"ACKNOWLEDGMENTS MADS development has been supported by: Los Alamos National Laboratory Environmental Programs (LANL-ADEP) Los Alamos National Laboratory Exploratory Research Programs (LANL-ER) Los Alamos National Laboratory Research & Development Programs (LANL-LDRD) DiaMonD : An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions; U.S. Department of Energy Office of Science Mathematical Multifaceted Integrated Capabilities Center (MMICC)","title":"Acknowledgments"},{"location":"acknowledgments/#acknowledgments","text":"MADS development has been supported by: Los Alamos National Laboratory Environmental Programs (LANL-ADEP) Los Alamos National Laboratory Exploratory Research Programs (LANL-ER) Los Alamos National Laboratory Research & Development Programs (LANL-LDRD) DiaMonD : An Integrated Multifaceted Approach to Mathematics at the Interfaces of Data, Models, and Decisions; U.S. Department of Energy Office of Science Mathematical Multifaceted Integrated Capabilities Center (MMICC)","title":"ACKNOWLEDGMENTS"},{"location":"copying/","text":"Licensing: GPLv3: http://www.gnu.org/licenses/gpl-3.0.html Copyright 2016. Los Alamos National Security, LLC. All rights reserved. Copyright 2016. Los Alamos National Security, LLC. This material was produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), which is operated by Los Alamos National Security, LLC for the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this software. NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE. If software is modified to produce derivative works, such modified software should be clearly marked, so as not to confuse it with the version available from LANL. Additionally, this program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. Accordingly, this program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. LA-CC-15-080; Copyright Number Assigned: C16008","title":"License"},{"location":"functions/","text":"MADS Functions MADS includes several Modules. The modules include numerous functions. To list all the available functions execute: Mads . functions () To list all the functions in a module, do: Mads . functions ( BIGUQ ) To list all the functions containing get , execute: Mads . functions ( \"get\" ) Mads . functions ( Mads , \"get\" )","title":"Functions"},{"location":"functions/#mads-functions","text":"MADS includes several Modules. The modules include numerous functions. To list all the available functions execute: Mads . functions () To list all the functions in a module, do: Mads . functions ( BIGUQ ) To list all the functions containing get , execute: Mads . functions ( \"get\" ) Mads . functions ( Mads , \"get\" )","title":"MADS Functions"},{"location":"getting_started/","text":"MADS Getting Started Install Julia and MADS ( import Pkg; Pkg.add(\"Mads\") ) using the installation instruction in the README.md ( see also ). If you are not familiar with Julia, checkout Julia By Example , learn X in Y minutes , Julia Express ). You can also explore Julia examples provided in Mads: examples/learn_julia directory of the Mads.jl repository ( github ). To start using MADS, initiate the Julia REPL and execute import Mads to load MADS modules. All the MADS analyses are based on a MADS problem dictionary that defines the problem. The MADS problem dictionary is typically loaded from a YAML MADS input file. The loading of a MADS file can be executed as follows: madsdata = Mads . loadmadsfile ( \"<input_file_name>.mads\" ) For example, you can execute: madsdata = Mads . loadmadsfile ( Mads . madsdir * \"/../examples/getting_started/internal-linear.mads\" ) The file internal-linear.mads is located in examples/getting_started directory of the Mads.jl repository. Typically, the MADS problem dictionary includes several classes: Parameters : lists of model parameters Observations : lists of model observations Model : defines a model to predict the model observations using the model parameters The file internal-linear.mads looks like this: Parameters : - a : { init : 1 , dist : \"Uniform(-10, 10)\" } - b : { init : -1 , dist : \"Uniform(-10, 10)\" } Observations : - o1 : { target : -3 } - o2 : { target : 1 } - o3 : { target : 5 } - o4 : { target : 9 } Model : internal-linear.jl In this case, there are two parameters, a and b , defining a linear model, f(t) = a * t + b , described in internal-linearmodel.jl . The Julia file internal-linearmodel.jl is specified under Model in the MADS problem dictionary above. Execute: Mads.showallparameters(madsdata) to show all the parameters. Mads.showobservations(madsdata) to list all the observations. MADS can perform various types of analyses: Mads.forward(madsdata) will execute forward model simulation based on the initial parameter values. saresults = Mads.efast(madsdata) will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary. optparam, iaresults = Mads.calibrate(madsdata) will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization. Mads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values optparam` estimated by the inverse analyses above. More complicated analyses will require additional information to be provided in the MADS problem dictionary. Examples are given in the examples subdirectories of the Mads.jl repository ( github ). MADS Command-line execution MADS can be executed at the command line using madsjl.jl . Link this file in a directory in your search PATH . For example, using madsjl.jl you can execute: madsjl.jl diff internal-linear.mads internal-parabola.mads madsjl.jl internal-parabola.mads forward efast in the examples/getting_started subdirectory of the Mads.jl repository ( github ). MADS Documentation All the available MADS modules and functions are described at github and readthedocs MADS Licensing & Copyright Check the files COPYING and LICENSE to see the licensing & copyright information.","title":"Getting started"},{"location":"getting_started/#mads-getting-started","text":"Install Julia and MADS ( import Pkg; Pkg.add(\"Mads\") ) using the installation instruction in the README.md ( see also ). If you are not familiar with Julia, checkout Julia By Example , learn X in Y minutes , Julia Express ). You can also explore Julia examples provided in Mads: examples/learn_julia directory of the Mads.jl repository ( github ). To start using MADS, initiate the Julia REPL and execute import Mads to load MADS modules. All the MADS analyses are based on a MADS problem dictionary that defines the problem. The MADS problem dictionary is typically loaded from a YAML MADS input file. The loading of a MADS file can be executed as follows: madsdata = Mads . loadmadsfile ( \"<input_file_name>.mads\" ) For example, you can execute: madsdata = Mads . loadmadsfile ( Mads . madsdir * \"/../examples/getting_started/internal-linear.mads\" ) The file internal-linear.mads is located in examples/getting_started directory of the Mads.jl repository. Typically, the MADS problem dictionary includes several classes: Parameters : lists of model parameters Observations : lists of model observations Model : defines a model to predict the model observations using the model parameters The file internal-linear.mads looks like this: Parameters : - a : { init : 1 , dist : \"Uniform(-10, 10)\" } - b : { init : -1 , dist : \"Uniform(-10, 10)\" } Observations : - o1 : { target : -3 } - o2 : { target : 1 } - o3 : { target : 5 } - o4 : { target : 9 } Model : internal-linear.jl In this case, there are two parameters, a and b , defining a linear model, f(t) = a * t + b , described in internal-linearmodel.jl . The Julia file internal-linearmodel.jl is specified under Model in the MADS problem dictionary above. Execute: Mads.showallparameters(madsdata) to show all the parameters. Mads.showobservations(madsdata) to list all the observations. MADS can perform various types of analyses: Mads.forward(madsdata) will execute forward model simulation based on the initial parameter values. saresults = Mads.efast(madsdata) will perform eFAST sensitivity analysis of the model parameters against the model observations as defined in the MADS problem dictionary. optparam, iaresults = Mads.calibrate(madsdata) will perform calibration (inverse analysis) of the model parameters to reproduce the model observations as defined in the MADS problem dictionary; in this case, the calibration uses Levenberg-Marquardt optimization. Mads.forward(madsdata, optparam) will perform forward model simulation based on the parameter values optparam` estimated by the inverse analyses above. More complicated analyses will require additional information to be provided in the MADS problem dictionary. Examples are given in the examples subdirectories of the Mads.jl repository ( github ).","title":"MADS Getting Started"},{"location":"getting_started/#mads-command-line-execution","text":"MADS can be executed at the command line using madsjl.jl . Link this file in a directory in your search PATH . For example, using madsjl.jl you can execute: madsjl.jl diff internal-linear.mads internal-parabola.mads madsjl.jl internal-parabola.mads forward efast in the examples/getting_started subdirectory of the Mads.jl repository ( github ).","title":"MADS Command-line execution"},{"location":"getting_started/#mads-documentation","text":"All the available MADS modules and functions are described at github and readthedocs","title":"MADS Documentation"},{"location":"getting_started/#mads-licensing-copyright","text":"Check the files COPYING and LICENSE to see the licensing & copyright information.","title":"MADS Licensing &amp; Copyright"},{"location":"installation/","text":"Installation After starting Julia, execute: import Pkg ; Pkg . add ( \"Mads\" ) Installation of MADS without PYTHON MADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable: (bash) export MADS_NO_PYTHON = \"\" or (tcsh) setenv MADS_NO_PYTHON \"\" or (julia) ENV [ \"MADS_NO_PYTHON\" ] = \"\" Installation of MADS without plotting modules MADS uses Gadfly and matplotlib for plotting. To avoid using these modules set the following environmental variable: (bash) export MADS_NO_PLOT = \"\" or (tcsh) setenv MADS_NO_PLOT \"\" or (julia) ENV [ \"MADS_NO_PLOT\" ] = \"\" Installation of MADS behind a firewall ulia uses git for package management. Add in the .gitconfig file in your home directory to support git behind a firewall: [url \"https://\"] insteadOf = git:// or execute: git config --global url.\"https://\".insteadOf git:// Set proxies executing the following lines in the bash command-line environment: export ftp_proxy=http://proxyout.<your_site>:8080 export rsync_proxy=http://proxyout.<your_site>:8080 export http_proxy=http://proxyout.<your_site>:8080 export https_proxy=http://proxyout.<your_site>:8080 export no_proxy=.<your_site> For example, at LANL, you will need to execute the following lines in the bash command-line environment: export ftp_proxy=http://proxyout.lanl.gov:8080 export rsync_proxy=http://proxyout.lanl.gov:8080 export http_proxy=http://proxyout.lanl.gov:8080 export https_proxy=http://proxyout.lanl.gov:8080 export no_proxy=.lanl.gov","title":"Installation"},{"location":"installation/#installation","text":"After starting Julia, execute: import Pkg ; Pkg . add ( \"Mads\" )","title":"Installation"},{"location":"installation/#installation-of-mads-without-python","text":"MADS uses PyYAML and matplotlib. To avoid using these libraries set the following environmental variable: (bash) export MADS_NO_PYTHON = \"\" or (tcsh) setenv MADS_NO_PYTHON \"\" or (julia) ENV [ \"MADS_NO_PYTHON\" ] = \"\"","title":"Installation of MADS without PYTHON"},{"location":"installation/#installation-of-mads-without-plotting-modules","text":"MADS uses Gadfly and matplotlib for plotting. To avoid using these modules set the following environmental variable: (bash) export MADS_NO_PLOT = \"\" or (tcsh) setenv MADS_NO_PLOT \"\" or (julia) ENV [ \"MADS_NO_PLOT\" ] = \"\"","title":"Installation of MADS without plotting modules"},{"location":"installation/#installation-of-mads-behind-a-firewall","text":"ulia uses git for package management. Add in the .gitconfig file in your home directory to support git behind a firewall: [url \"https://\"] insteadOf = git:// or execute: git config --global url.\"https://\".insteadOf git:// Set proxies executing the following lines in the bash command-line environment: export ftp_proxy=http://proxyout.<your_site>:8080 export rsync_proxy=http://proxyout.<your_site>:8080 export http_proxy=http://proxyout.<your_site>:8080 export https_proxy=http://proxyout.<your_site>:8080 export no_proxy=.<your_site> For example, at LANL, you will need to execute the following lines in the bash command-line environment: export ftp_proxy=http://proxyout.lanl.gov:8080 export rsync_proxy=http://proxyout.lanl.gov:8080 export http_proxy=http://proxyout.lanl.gov:8080 export https_proxy=http://proxyout.lanl.gov:8080 export no_proxy=.lanl.gov","title":"Installation of MADS behind a firewall"},{"location":"mads/","text":"Mads Internal allwellsoff!(madsdata::Associative{K, V}) Turn off all the wells in the MADS problem dictionary source: Mads/src/MadsObservations.jl:377 allwellson!(madsdata::Associative{K, V}) Turn on all the wells in the MADS problem dictionary source: Mads/src/MadsObservations.jl:353 asinetransform(params::Array{T, 1}, lowerbounds::Array{T, 1}, upperbounds::Array{T, 1}, indexlogtransformed::Array{T, 1}) Arcsine transformation of model parameters source: Mads/src/MadsSine.jl:2 bayessampling(madsdata::Associative{K, V}) Bayesian Sampling Mads.bayessampling(madsdata; nsteps=1000, burnin=100, thinning=1, seed=2016) Mads.bayessampling(madsdata, numsequences; nsteps=1000, burnin=100, thinning=1, seed=2016) Arguments: madsdata : MADS problem dictionary numsequences : number of sequences executed in parallel nsteps : number of final realizations in the chain burnin : number of initial realizations before the MCMC are recorded thinning : removal of any thinning realization seed : initial random number seed Returns: mcmcchain : source: Mads/src/MadsMC.jl:27 calibrate(madsdata::Associative{K, V}) Calibrate Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Arguments: madsdata : MADS problem dictionary tolX : parameter space tolerance tolG : parameter space update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda lambda_mu : lambda multiplication factor [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] save_results : save intermediate results [default=true] usenaive : use naive Levenberg-Marquardt solver Returns: minimumdict : model parameter dictionary with the optimal values at the minimum results : optimization algorithm results (e.g. results.minimum) source: Mads/src/MadsCalibrate.jl:102 calibratenlopt(madsdata::Associative{K, V}) Do a calibration using NLopt source: Mads/src/MadsCalibrate.jl:151 calibraterandom(madsdata::Associative{K, V}) Calibrate with random initial guesses Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Mads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Arguments: madsdata : MADS problem dictionary numberofsamples : number of random initial samples tolX : parameter space tolerance tolG : parameter space update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda lambda_mu : lambda multiplication factor [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] save_results : save intermediate results [default=true] usenaive : use naive Levenberg-Marquardt solver seed : initial random seed Returns: bestresult : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum) source: Mads/src/MadsCalibrate.jl:34 calibraterandom(madsdata::Associative{K, V}, numberofsamples) Calibrate with random initial guesses Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Mads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Arguments: madsdata : MADS problem dictionary numberofsamples : number of random initial samples tolX : parameter space tolerance tolG : parameter space update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda lambda_mu : lambda multiplication factor [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] save_results : save intermediate results [default=true] usenaive : use naive Levenberg-Marquardt solver seed : initial random seed Returns: bestresult : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum) source: Mads/src/MadsCalibrate.jl:34 checkout() Checkout the latest version of the Mads modules source: Mads/src/MadsPublish.jl:2 checkout(git::Bool) Checkout the latest version of the Mads modules source: Mads/src/MadsPublish.jl:2 cleancoverage() Remove Mads coverage files source: Mads/src/MadsTest.jl:11 cmadsins_obs(obsid::Array{T, 1}, instructionfilename::AbstractString, inputfilename::AbstractString) Call C MADS ins_obs() function from the MADS dynamic library source: Mads/src/MadsIO.jl:540 computemass(madsdata::Associative{K, V}) Compute injected/reduced contaminant mass Mads.computemass(madsdata; time = 0) Arguments: madsdata : MADS problem dictionary time : computational time Returns: mass_injected : total injected mass mass_reduced : total reduced mass source: Mads/src/MadsAnasol.jl:193 computemass(madsfiles) Compute injected/reduced contaminant mass for a given set of mads input files Mads.computemass(madsfiles; time = 0, path = \".\") Arguments: madsfiles : matching pattern for Mads input files (string or regular expression accepted) time : computational time path : search directory for the mads input files Returns: lambda : array with all the lambda values mass_injected : array with associated total injected mass mass_reduced : array with associated total reduced mass source: Mads/src/MadsAnasol.jl:252 computeparametersensitities(madsdata::Associative{K, V}, saresults::Associative{K, V}) Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range Arguments: madsdata : MADS problem dictionary saresults : sensitivity analysis results source: Mads/src/MadsSA.jl:568 contamination(wellx, welly, wellz, n, lambda, theta, vx, vy, vz, ax, ay, az, H, x, y, z, dx, dy, dz, f, t0, t1, t) Compute concentration for a point in space and time (x,y,z,t) Mads.contamination(wellx, welly, wellz, n, lambda, theta, vx, vy, vz, ax, ay, az, H, x, y, z, dx, dy, dz, f, t0, t1, t; anasolfunction=\"long_bbb_ddd_iir_c\") Arguments: wellx - observation point (well) X coordinate welly - observation point (well) Y coordinate wellz - observation point (well) Z coordinate n - porosity lambda - first-order reaction rate theta - groundwater flow direction vx - advective transport velocity in X direction vy - advective transport velocity in Y direction vz - advective transport velocity in Z direction ax - dispersivity in X direction (longitudinal) ay - dispersivity in Y direction (transverse horizontal) az - dispersivity in Y direction (transverse vertical) H - Hurst coefficient for Fractional Brownian dispersion x - X coordinate of contaminant source location y - Y coordinate of contaminant source location z - Z coordinate of contaminant source location dx - source size (extent) in X direction dy - source size (extent) in Y direction dz - source size (extent) in Z direction f - source mass flux t0 - source starting time t1 - source termination time t - time to compute concentration at the observation point anasolfunction : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c] Returns: predicted concentration at (wellx, welly, wellz, t) source: Mads/src/MadsAnasol.jl:152 copyright() Produce MADS copyright information source: Mads/src/MadsHelp.jl:9 create_documentation() Create web documentation files for Mads functions source: Mads/src/MadsHelp.jl:62 create_tests_off() Turn off the generation of MADS tests (default) source: Mads/src/MadsHelpers.jl:17 create_tests_on() Turn on the generation of MADS tests (dangerous) source: Mads/src/MadsHelpers.jl:12 createmadsproblem(infilename::AbstractString, outfilename::AbstractString) Create a new Mads problem where the observation targets are computed based on the model predictions Mads.createmadsproblem(infilename, outfilename) Mads.createmadsproblem(madsdata, outfilename) `Mads.createmadsproblem(madsdata, predictions, outfilename) Arguments: infilename : input Mads file outfilename : output Mads file madsdata : MADS problem dictionary predictions : dictionary of model predictions source: Mads/src/MadsCreate.jl:16 createobservations!(madsdata::Associative{K, V}, time, observation) Create observations in the MADS problem dictionary based on time and observation arrays source: Mads/src/MadsObservations.jl:293 deleteNaN!(df::DataFrames.DataFrame) Delete rows with NaN in a Dataframe df source: Mads/src/MadsSA.jl:782 dobigdt(madsdata::Associative{K, V}, nummodelruns::Int64) Perform BIG-DT analysis Arguments: madsdata : MADS problem dictionary nummodelruns : number of model runs numhorizons : number of info-gap horizons of uncertainty maxHorizon : maximum info-gap horizons of uncertainty numlikelihoods : number of Bayesian likelihoods Returns: bigdtresults : dictionary with BIG-DT results source: Mads/src/MadsBIG.jl:123 dumpasciifile(filename::AbstractString, data) Dump ASCII file source: Mads/src/MadsASCII.jl:8 dumpjsonfile(filename::AbstractString, data) Dump a JSON file source: Mads/src/MadsJSON.jl:17 dumpwelldata(filename::AbstractString, madsdata) Dump well data from MADS problem dictionary into a ASCII file source: Mads/src/MadsYAML.jl:130 dumpyamlfile(filename::AbstractString, yamldata) Dump YAML file in JSON format source: Mads/src/MadsYAML.jl:55 dumpyamlmadsfile(madsdata, filename::AbstractString) Dump YAML Mads file Arguments: madsdata : MADS problem dictionary filename : file name source: Mads/src/MadsYAML.jl:72 efast(md::Associative{K, V}) Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method Arguments: madsdata : MADS problem dictionary N : number of samples M : maximum number of harmonics gamma : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) seed : initial random seed source: Mads/src/MadsSA.jl:818 evaluatemadsexpression(expressionstring, parameters) Evaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values source: Mads/src/MadsMisc.jl:92 evaluatemadsexpressions(madsdata::Associative{K, V}, parameters) Evaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values source: Mads/src/MadsMisc.jl:101 filterkeys(dict::Associative{K, V}, key::Regex) Filter dictionary keys based on a string or regular expression source: Mads/src/MadsIO.jl:349 forward(madsdata::Associative{K, V}) Perform a forward run using the initial or provided values for the model parameters forward(madsdata) forward(madsdata, paramdict) forward(madsdata, paramarray) Arguments: madsdata : MADS problem dictionary paramdict : dictionary of model parameter values paramarray : array of model parameter values Returns: obsvalues : dictionary of model predictions source: Mads/src/MadsForward.jl:21 forwardgrid(madsdata::Associative{K, V}) Perform a forward run over a 3D grid defined in madsdata using the initial or provided values for the model parameters forwardgrid(madsdata) forwardgrid(madsdata, paramvalues)) Arguments: madsdata : MADS problem dictionary paramvalues : dictionary of model parameter values Returns: array3d : 3D array with model predictions along a 3D grid source: Mads/src/MadsForward.jl:106 free() Use the latest tagged versions of the Mads modules source: Mads/src/MadsPublish.jl:84 functions() List available functions in the MADS modules: Examples: Mads.functions() Mads.functions(BIGUQ) Mads.functions(\"get\") Mads.functions(Mads, \"get\") Arguments: module : MADS module string : matching string source: Mads/src/MadsHelp.jl:30 functions(string::AbstractString) List available functions in the MADS modules: Examples: Mads.functions() Mads.functions(BIGUQ) Mads.functions(\"get\") Mads.functions(Mads, \"get\") Arguments: module : MADS module string : matching string source: Mads/src/MadsHelp.jl:30 getextension(filename) Get file name extension Example: ext = Mads.getextension(\"a.mads\") # ext = \"mads\" source: Mads/src/MadsIO.jl:320 getimportantsamples(samples::Array{T, N}, llhoods::Array{T, 1}) Get important samples Arguments: samples : array of samples llhoods : vector of log-likelihoods Returns: imp_samples : array of important samples source: Mads/src/MadsSA.jl:102 getmadsdir() Get the directory where currently Mads is running problemdir = Mads.getmadsdir() source: Mads/src/MadsIO.jl:276 getmadsinputfile() Get the default MADS input file set as a MADS global variable using setmadsinputfile(filename) Mads.getmadsinputfile() Arguments: none Returns: filename : input file name (e.g. input_file_name.mads ) source: Mads/src/MadsIO.jl:240 getmadsproblemdir(madsdata::Associative{K, V}) Get the directory where the Mads data file is located Mads.getmadsproblemdir(madsdata) Example: madsdata = Mads.loadmadsproblemdir(\"../../a.mads\") madsproblemdir = Mads.getmadsproblemdir(madsdata) where madsproblemdir = \"../../\" source: Mads/src/MadsIO.jl:267 getmadsrootname(madsdata::Associative{K, V}) Get the MADS problem root name madsrootname = Mads.getmadsrootname(madsdata) source: Mads/src/MadsIO.jl:249 getobskeys(madsdata::Associative{K, V}) Get keys for all observations in the MADS problem dictionary source: Mads/src/MadsObservations.jl:22 getparamdict(madsdata::Associative{K, V}) Get dictionary with all parameters and their respective initial values Mads.getparamdict(madsdata) Arguments: madsdata : MADS problem dictionary Returns: paramdict : dictionary with all parameters and their respective initial values source: Mads/src/MadsParameters.jl:49 getparamdistributions(madsdata::Associative{K, V}) Get probabilistic distributions of all parameters in the MADS problem dictionary Mads.getparamdistributions(madsdata; init_dist=false) Note: Probabilistic distribution of parameters can be defined only if dist or min / max model parameter fields are specified in the MADS problem dictionary madsdata . Arguments: madsdata : MADS problem dictionary init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field) source: Mads/src/MadsParameters.jl:501 getparamkeys(madsdata::Associative{K, V}) Get keys of all parameters in the MADS dictionary Mads.getparamkeys(madsdata) Arguments: madsdata : MADS problem dictionary Returns: paramkeys : array with the keys of all parameters in the MADS dictionary source: Mads/src/MadsParameters.jl:30 getparamsinit_max(madsdata) Get an array with init_max values for all the MADS model parameters source: Mads/src/MadsParameters.jl:256 getparamsinit_max(madsdata, paramkeys) Get an array with init_max values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:222 getparamsinit_min(madsdata) Get an array with init_min values for all the MADS model parameters source: Mads/src/MadsParameters.jl:216 getparamsinit_min(madsdata, paramkeys) Get an array with init_min values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:182 getparamsmax(madsdata) Get an array with min values for all the MADS model parameters source: Mads/src/MadsParameters.jl:176 getparamsmax(madsdata, paramkeys) Get an array with max values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:153 getparamsmin(madsdata) Get an array with min values for all the MADS model parameters source: Mads/src/MadsParameters.jl:147 getparamsmin(madsdata, paramkeys) Get an array with min values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:124 getprocs() Get the number of processors source: Mads/src/MadsParallel.jl:2 getrestartdir(madsdata::Associative{K, V}) Get the directory where restarts will be stored. source: Mads/src/MadsFunc.jl:296 getrestartdir(madsdata::Associative{K, V}, suffix) Get the directory where restarts will be stored. source: Mads/src/MadsFunc.jl:296 getrootname(filename::AbstractString) Get file name root Example: r = Mads.getrootname(\"a.rnd.dat\") # r = \"a\" r = Mads.getrootname(\"a.rnd.dat\", first=false) # r = \"a.rnd\" source: Mads/src/MadsIO.jl:297 getsourcekeys(madsdata::Associative{K, V}) Get keys of all source parameters in the MADS dictionary Mads.getsourcekeys(madsdata) Arguments: madsdata : MADS problem dictionary Returns: sourcekeys : array with keys of all source parameters in the MADS dictionary source: Mads/src/MadsParameters.jl:70 gettarget(o::Associative{K, V}) Get observation target source: Mads/src/MadsObservations.jl:140 gettargetkeys(madsdata::Associative{K, V}) Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary source: Mads/src/MadsObservations.jl:27 gettime(o::Associative{K, V}) Get observation time source: Mads/src/MadsObservations.jl:92 getweight(o::Associative{K, V}) Get observation weight source: Mads/src/MadsObservations.jl:116 getwellkeys(madsdata::Associative{K, V}) Get keys for all wells in the MADS problem dictionary source: Mads/src/MadsObservations.jl:35 haskeyword(madsdata::Associative{K, V}, keyword::AbstractString) Check for a keyword in a class within the Mads dictionary madsdata Mads.haskeyword(madsdata, keyword) Mads.haskeyword(madsdata, class, keyword) Arguments: madsdata : MADS problem dictionary class : dictionary class; if not provided searches for keyword in Problem class keyword : dictionary key Returns: true or false Examples: Mads.haskeyword(madsdata, \"disp\") ... searches in Problem class by default Mads.haskeyword(madsdata, \"Wells\", \"R-28\") ... searches in Wells class for a keyword \"R-28\" source: Mads/src/MadsHelpers.jl:65 help() Produce MADS help information source: Mads/src/MadsHelp.jl:4 importeverywhere(finename) Import function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations. source: Mads/src/MadsFunc.jl:324 indexkeys(dict::Associative{K, V}, key::Regex) Find indexes for dictionary keys based on a string or regular expression source: Mads/src/MadsIO.jl:353 ins_obs(instructionfilename::AbstractString, inputfilename::AbstractString) Apply Mads instruction file instructionfilename to read model input file inputfilename source: Mads/src/MadsIO.jl:467 instline2regexs(instline::AbstractString) Convert an instruction line in the Mads instruction file into regular expressions source: Mads/src/MadsIO.jl:402 invobsweights!(madsdata::Associative{K, V}, value::Number) Inversely proportional observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:225 invwellweights!(madsdata::Associative{K, V}, value::Number) Inversely proportional observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:258 islog(madsdata::Associative{K, V}, parameterkey::AbstractString) Is parameter with key parameterkey log-transformed? source: Mads/src/MadsParameters.jl:315 isobs(madsdata::Associative{K, V}, dict::Associative{K, V}) Is a dictionary containing all the observations source: Mads/src/MadsObservations.jl:5 isopt(madsdata::Associative{K, V}, parameterkey::AbstractString) Is parameter with key parameterkey optimizable? source: Mads/src/MadsParameters.jl:305 isparam(madsdata::Associative{K, V}, dict::Associative{K, V}) Is the dictionary containing all the parameters source: Mads/src/MadsParameters.jl:5 levenberg_marquardt(f::Function, g::Function, x0) Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess root : Mads problem root name tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda [eps(Float32)] lambda_scale : lambda scaling factor lambda_mu : lambda multiplication factor \u03bc [10] lambda_nu : lambda multiplication factor \u03bd [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] alwaysDoJacobian : computer Jacobian each iteration [false] callback : call back function for debugging source: Mads/src/MadsLM.jl:295 levenberg_marquardt(f::Function, g::Function, x0, o::Function) Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess root : Mads problem root name tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda [eps(Float32)] lambda_scale : lambda scaling factor lambda_mu : lambda multiplication factor \u03bc [10] lambda_nu : lambda multiplication factor \u03bd [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] alwaysDoJacobian : computer Jacobian each iteration [false] callback : call back function for debugging source: Mads/src/MadsLM.jl:295 loadasciifile(filename::AbstractString) Load ASCII file source: Mads/src/MadsASCII.jl:2 loadjsonfile(filename::AbstractString) Load a JSON file source: Mads/src/MadsJSON.jl:5 loadmadsfile(filename::AbstractString) Load MADS input file defining a MADS problem dictionary Mads.loadmadsfile(filename) Mads.loadmadsfile(filename; julia=false) Mads.loadmadsfile(filename; julia=true) Arguments: filename : input file name (e.g. input_file_name.mads ) julia : if true , force using julia parsing functions; if false (default), use python parsing functions [boolean] Returns: madsdata : Mads problem dictionary Example: md = loadmadsfile(\"input_file_name.mads\") source: Mads/src/MadsIO.jl:21 loadyamlfile(filename::AbstractString) Load YAML file source: Mads/src/MadsYAML.jl:46 localsa(madsdata::Associative{K, V}) Local sensitivity analysis based on eigen analysis of covariance matrix Arguments: madsdata : MADS problem dictionary madsdata : MADS problem dictionary filename : output file name format : output plot format ( png , pdf , etc.) par : parameter set obs : observations for the parameter set source: Mads/src/MadsSAPlot.jl:15 long_tests_off() Turn off execution of long MADS tests (default) source: Mads/src/MadsHelpers.jl:27 long_tests_on() Turn on execution of long MADS tests (dangerous) source: Mads/src/MadsHelpers.jl:22 madscritical(message::AbstractString) MADS critical error messages source: Mads/src/MadsLog.jl:40 madsdebug(message::AbstractString) MADS debug messages (controlled by quiet and debuglevel ) source: Mads/src/MadsLog.jl:10 madsdebug(message::AbstractString, level::Int64) MADS debug messages (controlled by quiet and debuglevel ) source: Mads/src/MadsLog.jl:10 madserror(message::AbstractString) MADS error messages source: Mads/src/MadsLog.jl:33 madsinfo(message::AbstractString) MADS information/status messages (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:18 madsinfo(message::AbstractString, level::Int64) MADS information/status messages (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:18 madsoutput(message::AbstractString) MADS output (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:2 madsoutput(message::AbstractString, level::Int64) MADS output (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:2 madswarn(message::AbstractString) MADS warning messages source: Mads/src/MadsLog.jl:26 makearrayconditionalloglikelihood(madsdata::Associative{K, V}, conditionalloglikelihood) Make a conditional log likelihood function that accepts an array containing the opt parameters' values source: Mads/src/MadsMisc.jl:57 makearrayfunction(madsdata::Associative{K, V}) Model section information criteria source: Mads/src/MadsModelSelection.jl:2 makearrayfunction(madsdata::Associative{K, V}, f) Make a version of the function f that accepts an array containing the optimal parameters' values Mads.makearrayfunction(madsdata, f) Arguments: madsdata : MADS problem dictionary f : ... Returns: arrayfunction : function accepting an array containing the optimal parameters' values source: Mads/src/MadsMisc.jl:17 makearrayfunction(madsdata::Associative{K, V}, par::Array{T, N}) Model section information criteria source: Mads/src/MadsModelSelection.jl:2 makearrayloglikelihood(madsdata::Associative{K, V}, loglikelihood) Make a log likelihood function that accepts an array containing the opt parameters' values source: Mads/src/MadsMisc.jl:70 makebigdt!(madsdata::Associative{K, V}, choice::Associative{K, V}) Setup BIG-DT problem Arguments: madsdata : MADS problem dictionary choice : dictionary of BIG-DT choices (scenarios) Returns: bigdtproblem : BIG-DT problem type source: Mads/src/MadsBIG.jl:34 makebigdt(madsdata::Associative{K, V}, choice::Associative{K, V}) Setup BIG-DT problem Arguments: madsdata : MADS problem dictionary choice : dictionary of BIG-DT choices (scenarios) Returns: bigdtproblem : BIG-DT problem type source: Mads/src/MadsBIG.jl:18 makecomputeconcentrations(madsdata::Associative{K, V}) Create a function to compute concentrations for all the observation points using Anasol Mads.makecomputeconcentrations(madsdata) Arguments: madsdata : MADS problem dictionary Returns: computeconcentrations : function to compute concentrations; computeconcentrations returns a dictionary of observations and model predicted concentrations Examples: computeconcentrations() or computeconcentrations = Mads.makecomputeconcentrations(madsdata) paramkeys = Mads.getparamkeys(madsdata) paramdict = OrderedDict(zip(paramkeys, map(key->madsdata[\"Parameters\"][key][\"init\"], paramkeys))) forward_preds = computeconcentrations(paramdict) source: Mads/src/MadsAnasol.jl:31 makedoublearrayfunction(madsdata::Associative{K, V}) Make a version of the function f that accepts an array containing the optimal parameters' values, and returns an array of observations Mads.makedoublearrayfunction(madsdata, f) Arguments: madsdata : MADS problem dictionary f : ... Returns: doublearrayfunction : function accepting an array containing the optimal parameters' values, and returning an array of observations source: Mads/src/MadsMisc.jl:40 makedoublearrayfunction(madsdata::Associative{K, V}, f) Make a version of the function f that accepts an array containing the optimal parameters' values, and returns an array of observations Mads.makedoublearrayfunction(madsdata, f) Arguments: madsdata : MADS problem dictionary f : ... Returns: doublearrayfunction : function accepting an array containing the optimal parameters' values, and returning an array of observations source: Mads/src/MadsMisc.jl:40 makelmfunctions(madsdata::Associative{K, V}) Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization source: Mads/src/MadsLM.jl:67 makelocalsafunction(madsdata::Associative{K, V}) Make gradient function needed for local sensitivity analysis source: Mads/src/MadsLM.jl:156 makelogprior(madsdata::Associative{K, V}) Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata source: Mads/src/MadsFunc.jl:417 makemadscommandfunction(madsdatawithobs::Associative{K, V}) Make MADS function to execute the model defined in the MADS problem dictionary madsdata Usage: Mads.makemadscommandfunction(madsdata) MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : execute a Julia function defined in an input Julia file. The function that should accept a parameter dictionary with all the model parameters as an input argument and should return an observation dictionary with all the model predicted observations. MADS will execute the first function defined in the file. MADS model : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Julia model : execute an internal Julia function that accepts a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Command : execute an external UNIX command or script that will execute an external model. Julia command : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an observation dictionary with model predictions. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at http://mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at http://mads.lanl.gov ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file source: Mads/src/MadsFunc.jl:49 makemadscommandfunctionandgradient(madsdata::Associative{K, V}) Make MADS forward & gradient functions for the model defined in the MADS problem dictionary madsdata source: Mads/src/MadsFunc.jl:352 makemadscommandgradient(madsdata::Associative{K, V}) Make MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary madsdata source: Mads/src/MadsFunc.jl:337 makemadsconditionalloglikelihood(madsdata::Associative{K, V}) Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary madsdata . source: Mads/src/MadsFunc.jl:432 makemadsloglikelihood(madsdata::Associative{K, V}) Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under LogLikelihood or computed internally. source: Mads/src/MadsFunc.jl:457 maxtorealmaxFloat32!(df::DataFrames.DataFrame) Scale down values larger than max(Float32) in a Dataframe df so that Gadfly can plot the data source: Mads/src/MadsSA.jl:794 modobsweights!(madsdata::Associative{K, V}, value::Number) Modify (multiply) observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:217 modwellweights!(madsdata::Associative{K, V}, value::Number) Modify (multiply) well weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:247 montecarlo(madsdata::Associative{K, V}) Monte Carlo analysis Mads.montecarlo(madsdata; N=100) Arguments: madsdata : MADS problem dictionary sampling uniformly between mins/maxs N : number of samples (default = 100) Returns: outputdicts : parameter dictionary containing the data arrays Dumps: YAML output file with the parameter dictionary containing the data arrays ( <mads_root_name>.mcresults.yaml ) source: Mads/src/MadsMC.jl:104 naive_get_deltax(JpJ::Array{T, 2}, Jp::Array{T, 2}, f0::Array{T, 1}, lambda::Real) Naive Levenberg-Marquardt optimization: get the LM parameter space step source: Mads/src/MadsLM.jl:219 naive_levenberg_marquardt(f::Function, g::Function, x0::Array{T, 1}) Naive Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess o : objective function tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations lambda : initial Levenberg-Marquardt lambda [100] lambda_mu : lambda multiplication factor \u03bc [10] np_lambda : number of parallel lambda solves source: Mads/src/MadsLM.jl:255 naive_levenberg_marquardt(f::Function, g::Function, x0::Array{T, 1}, o::Function) Naive Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess o : objective function tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations lambda : initial Levenberg-Marquardt lambda [100] lambda_mu : lambda multiplication factor \u03bc [10] np_lambda : number of parallel lambda solves source: Mads/src/MadsLM.jl:255 naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{T, 1}, f0::Array{T, 1}, lambdas::Array{T, 1}) Naive Levenberg-Marquardt optimization: perform LM iteration source: Mads/src/MadsLM.jl:226 noplot() Disable MADS plotting source: Mads/src/MadsParallel.jl:173 obslineismatch(obsline::AbstractString, regexs::Array{Regex, 1}) Match an instruction line in the Mads instruction file with model input file source: Mads/src/MadsIO.jl:441 of(madsdata::Associative{K, V}, results::Array{T, 1}) Compute objective function source: Mads/src/MadsLM.jl:37 paramarray2dict(madsdata::Associative{K, V}, array::Array{T, N}) Convert parameter array to a parameter dictionary of arrays source: Mads/src/MadsMC.jl:154 parametersample(madsdata::Associative{K, V}, numsamples::Integer) Independent sampling of model parameters defined in the MADS problem dictionary Arguments: madsdata : MADS problem dictionary numsamples : number of samples parameterkey : model parameter key init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field) source: Mads/src/MadsSA.jl:151 parametersample(madsdata::Associative{K, V}, numsamples::Integer, parameterkey::AbstractString) Independent sampling of model parameters defined in the MADS problem dictionary Arguments: madsdata : MADS problem dictionary numsamples : number of samples parameterkey : model parameter key init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field) source: Mads/src/MadsSA.jl:151 paramrand(madsdata::Associative{K, V}, parameterkey::AbstractString) Random numbers for a MADS model parameter defined by parameterkey Arguments: madsdata : MADS problem dictionary parameterkey : model parameter key numsamples : number of samples paramdist : dictionary with parameter distributions source: Mads/src/MadsSA.jl:174 parsemadsdata(madsdata::Associative{K, V}) Parse loaded Mads problem dictionary Arguments: madsdata : Mads problem dictionary source: Mads/src/MadsIO.jl:39 parser_amanzi() Parse Amanzi output provided in an external file ( filename ) Mads.parser_amanzi() Mads.parser_amanzi(\"observations.out\") Arguments: filename : external file name (optional) Returns: dict : a dictionary with model observations following MADS requirements source: Mads/src/MadsParsers.jl:19 parser_amanzi(filename::AbstractString) Parse Amanzi output provided in an external file ( filename ) Mads.parser_amanzi() Mads.parser_amanzi(\"observations.out\") Arguments: filename : external file name (optional) Returns: dict : a dictionary with model observations following MADS requirements source: Mads/src/MadsParsers.jl:19 partialof(madsdata::Associative{K, V}, resultdict::Associative{K, V}, regex::Regex) Compute the sum of squared residuals for observations that match a regular expression source: Mads/src/MadsLM.jl:50 plotSAresults_monty(wellname, madsdata, result) Plot the sensitivity analysis results for each well (Specific plot requested by Monty) source: Mads/src/MadsSAPlot.jl:108 plotgrid(madsdata::Associative{K, V}, s::Array{Float64, N}) Plot a 3D grid solution based on model predictions in array s , initial parameters, or user provided parameter values plotgrid(madsdata, s; addtitle=true, title=\"\", filename=\"\", format=\"\") plotgrid(madsdata; addtitle=true, title=\"\", filename=\"\", format=\"\") plotgrid(madsdata, parameters; addtitle=true, title=\"\", filename=\"\", format=\"\") Arguments: madsdata : MADS problem dictionary parameters : dictionary with model parameters s : model predictions array addtitle : add plot title [true] title : plot title filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlotPy.jl:22 plotmadsproblem(madsdata::Associative{K, V}) Plot contaminant sources and wells defined in MADS problem dictionary Arguments: madsdata : MADS problem dictionary filename : output file name format : output plot format ( png , pdf , etc.) keyword : to be added in the filename source: Mads/src/MadsPlot.jl:58 plotmass(lambda, mass_injected, mass_reduced, filename::AbstractString) Plot injected/reduced contaminant mass Mads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\") Arguments: lambda : array with all the lambda values mass_injected : array with associated total injected mass mass_reduced : array with associated total reduced mass filename : output filename for the generated plot format : output plot format ( png , pdf , etc.) Dumps: image file with name filename and in specified format source: Mads/src/MadsAnasolPlot.jl:18 plotmatches(madsdata_in::Associative{K, V}) Plot the matches between model predictions and observations plotmatches(madsdata; filename=\"\", format=\"\") plotmatches(madsdata, param; filename=\"\", format=\"\") plotmatches(madsdata, result; filename=\"\", format=\"\") plotmatches(madsdata, result, r\"NO3\"; filename=\"\", format=\"\") Arguments: madsdata : MADS problem dictionary param : dictionary with model parameters result : dictionary with model predictions rx : regular expression to filter the outputs filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:143 plotobsSAresults(madsdata, result) Plot the sensitivity analysis results for the observations Arguments: madsdata : MADS problem dictionary result : sensitivity analysis results filter : string or regex to plot only observations containing filter keyword : to be added in the auto-generated filename filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:462 plotrobustnesscurves(madsdata::Associative{K, V}, bigdtresults::Dict{K, V}) Plot BIG-DT robustness curves Arguments: madsdata : MADS problem dictionary bigdtresults : BIG-DT results filename : output file name used to dump plots format : output plot format ( png , pdf , etc.) source: Mads/src/MadsBIGPlot.jl:13 plotseries(X::Array{T, 2}, filename::AbstractString) Create plots of data series Arguments: X : matrix with the series data filename : output file name format : output plot format ( png , pdf , etc.) xtitle : x-axis title ytitle : y-axis title title : plot title name : series name combined : true by default source: Mads/src/MadsPlot.jl:946 plotwellSAresults(madsdata, result) Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected) Arguments: madsdata : MADS problem dictionary result : sensitivity analysis results xtitle : x-axis title ytitle : y-axis title filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:343 plotwellSAresults(madsdata, result, wellname) Plot the sensitivity analysis results for a given well in the MADS problem dictionary (wells class expected) Arguments: madsdata : MADS problem dictionary result : sensitivity analysis results wellname : well name xtitle : x-axis title ytitle : y-axis title filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:368 printSAresults(madsdata::Associative{K, V}, results::Associative{K, V}) Print sensitivity analysis results source: Mads/src/MadsSA.jl:651 quietoff() Make MADS not quiet source: Mads/src/MadsHelpers.jl:7 quieton() Make MADS quiet source: Mads/src/MadsHelpers.jl:2 readasciipredictions(filename::AbstractString) Read MADS predictions from an ASCII file source: Mads/src/MadsASCII.jl:13 readjsonpredictions(filename::AbstractString) Read MADS model predictions from a JSON file source: Mads/src/MadsJSON.jl:24 readobservations(madsdata::Associative{K, V}) Read observations source: Mads/src/MadsIO.jl:493 readobservations(madsdata::Associative{K, V}, obsids) Read observations source: Mads/src/MadsIO.jl:493 readobservations_cmads(madsdata::Associative{K, V}) Read observations using C Mads library source: Mads/src/MadsIO.jl:526 readyamlpredictions(filename::AbstractString) Read MADS model predictions from a YAML file filename source: Mads/src/MadsYAML.jl:125 regexs2obs(obsline, regexs, obsnames, getparamhere) Get observations for a set of regular expressions source: Mads/src/MadsIO.jl:447 resetmodelruns() Reset the model runs count to be equal to zero source: Mads/src/MadsHelpers.jl:42 residuals(madsdata::Associative{K, V}, results::Array{T, 1}) Compute residuals source: Mads/src/MadsLM.jl:5 reweighsamples(madsdata::Associative{K, V}, predictions::Array{T, N}, oldllhoods::Array{T, 1}) Reweigh samples using importance sampling -- returns a vector of log-likelihoods after reweighing Arguments: madsdata : MADS problem dictionary predictions : the model predictions for each of the samples oldllhoods : the log likelihoods of the parameters in the old distribution Returns: newllhoods : vector of log-likelihoods after reweighing source: Mads/src/MadsSA.jl:75 rosenbrock(x::Array{T, 1}) Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:17 rosenbrock2_gradient_lm(x) Parameter gradients of the Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:7 rosenbrock2_lm(x) Rosenbrock test function (more difficult to solve) source: Mads/src/MadsTestFunctions.jl:2 rosenbrock_gradient!(x::Array{T, 1}, storage::Array{T, 1}) Parameter gradients of the Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:27 rosenbrock_gradient_lm(x::Array{T, 1}) Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely) source: Mads/src/MadsTestFunctions.jl:33 rosenbrock_hessian!(x::Array{T, 1}, storage::Array{T, 2}) Parameter Hessian of the Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:43 rosenbrock_lm(x::Array{T, 1}) Rosenbrock test function for LM optimization (returns the 2 components separetely) source: Mads/src/MadsTestFunctions.jl:22 saltelli(madsdata::Associative{K, V}) Saltelli sensitivity analysis Arguments: madsdata : MADS problem dictionary N : number of samples seed : initial random seed restartdir : directory where files will be stored containing model results for fast simulation restarts parallel : set to true if the model runs should be performed in parallel source: Mads/src/MadsSA.jl:376 saltellibrute(madsdata::Associative{K, V}) Saltelli sensitivity analysis (brute force) Arguments: madsdata : MADS problem dictionary N : number of samples seed : initial random seed source: Mads/src/MadsSA.jl:206 saltelliprintresults2(madsdata::Associative{K, V}, results::Associative{K, V}) Print sensitivity analysis results (method 2) source: Mads/src/MadsSA.jl:727 savemadsfile(madsdata::Associative{K, V}) Save MADS problem dictionary madsdata in MADS input file filename Mads.savemadsfile(madsdata) Mads.savemadsfile(madsdata, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true) Arguments: madsdata : Mads problem dictionary parameters : Dictinary with parameters (optional) filename : input file name (e.g. input_file_name.mads ) julia : if true use Julia JSON module to save explicit : if true ignores MADS YAML file modifications and rereads the original input file source: Mads/src/MadsIO.jl:158 savemadsfile(madsdata::Associative{K, V}, filename::AbstractString) Save MADS problem dictionary madsdata in MADS input file filename Mads.savemadsfile(madsdata) Mads.savemadsfile(madsdata, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true) Arguments: madsdata : Mads problem dictionary parameters : Dictinary with parameters (optional) filename : input file name (e.g. input_file_name.mads ) julia : if true use Julia JSON module to save explicit : if true ignores MADS YAML file modifications and rereads the original input file source: Mads/src/MadsIO.jl:158 savemcmcresults(chain::Array{T, N}, filename::AbstractString) Save MCMC chain in a file source: Mads/src/MadsMC.jl:63 scatterplotsamples(madsdata, samples::Array{T, 2}, filename::AbstractString) Create histogram/scatter plots of model parameter samples Arguments: madsdata : MADS problem dictionary samples : matrix with model parameters filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:299 searchdir(key::Regex) Get files in the current directory or in a directory defined by path matching pattern key which can be a string or regular expression Mads.searchdir(key) Mads.searchdir(key; path = \".\") Arguments: key : matching pattern for Mads input files (string or regular expression accepted) path : search directory for the mads input files Returns: filename : an array with file names matching the pattern in the specified directory source: Mads/src/MadsIO.jl:345 setallparamsoff!(madsdata::Associative{K, V}) Set all parameters OFF source: Mads/src/MadsParameters.jl:332 setallparamson!(madsdata::Associative{K, V}) Set all parameters ON source: Mads/src/MadsParameters.jl:324 setdebuglevel(level::Int64) Set MADS debug level source: Mads/src/MadsHelpers.jl:32 setdir(dir::ASCIIString) Set the working directory (for parallel environments) @everywhere Mads.setdir() @everywhere Mads.setdir(\"/home/monty\") source: Mads/src/MadsParallel.jl:191 setdynamicmodel(madsdata::Associative{K, V}, f::Function) Set Dynamic Model for MADS model calls using internal Julia functions source: Mads/src/MadsMisc.jl:87 setplotfileformat(filename, format) Set image file format based on the filename extension, or sets the filename extension based on the requested format . The default format is SVG . PNG , PDF , ESP , and PS are also supported. setplotfileformat(filename, format) Arguments: filename : output file name format : output plot format ( png , pdf , etc.) Returns: filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:23 setmadsinputfile(filename::AbstractString) Set a default MADS input file Mads.setmadsinputfile(filename) Arguments: filename : input file name (e.g. input_file_name.mads ) source: Mads/src/MadsIO.jl:225 setobservationtargets!(madsdata::Associative{K, V}, predictions::Associative{K, V}) Set observations (calibration targets) in the MADS problem dictionary based on a predictions dictionary source: Mads/src/MadsObservations.jl:337 setobstime!(madsdata::Associative{K, V}, separator::AbstractString) Set observation time based on the observation name in the MADS problem dictionary Usage: Mads.setobstime!(madsdata, separator) Mads.setobstime!(madsdata, regex) Arguments: madsdata : MADS problem dictionary separator : string to separator regex : regular expression to match Examples: Mads.setobstime!(madsdata, \"_t\") Mads.setobstime!(madsdata, r\"[A-x]*_t([0-9,.]+)\") source: Mads/src/MadsObservations.jl:185 setobsweights!(madsdata::Associative{K, V}, value::Number) Set observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:209 setparamoff!(madsdata::Associative{K, V}, parameterkey) Set a specific parameter with a key parameterkey OFF source: Mads/src/MadsParameters.jl:345 setparamon!(madsdata::Associative{K, V}, parameterkey::AbstractString) Set a specific parameter with a key parameterkey ON source: Mads/src/MadsParameters.jl:340 setparamsdistnormal!(madsdata::Associative{K, V}, mean, stddev) Set normal parameter distributions for all the model parameters in the MADS problem dictionary Mads.setparamsdistnormal!(madsdata, mean, stddev) Arguments: madsdata : MADS problem dictionary mean : array with the mean values stddev : array with the standard deviation values source: Mads/src/MadsParameters.jl:360 setparamsdistuniform!(madsdata::Associative{K, V}, min, max) Set uniform parameter distributions for all the model parameters in the MADS problem dictionary Mads.setparamsdistuniform!(madsdata, min, max) Arguments: madsdata : MADS problem dictionary min : array with the minimum values max : array with the maximum values source: Mads/src/MadsParameters.jl:378 setparamsinit!(madsdata::Associative{K, V}, paramdict::Associative{K, V}) Set initial parameter guesses in the MADS dictionary Mads.setparamsinit!(madsdata, paramdict) Arguments: madsdata : MADS problem dictionary paramdict : dictionary with initial model parameter values source: Mads/src/MadsParameters.jl:271 setprocs() Set the available processors based on environmental variables. Supports SLURM only at the moment. Usage: Mads.setprocs() Mads.setprocs(ntasks_per_node=4) Mads.setprocs(ntasks_per_node=32, mads_servers=true) Mads.setprocs(ntasks_per_node=64, machinenames=[\"madsmax\", \"madszem\"]) Mads.setprocs(ntasks_per_node=64, mads_servers=true, exename=\"/home/monty/bin/julia\", dir=\"/home/monty\") Optional arguments: ntasks_per_node : number of parallel tasks per node machinenames : array with machines names to invoked dir : common directory shared by all the jobs exename : location of the julia executable (the same version of julia is needed on all the workers) mads_servers : if true use MADS servers (LANL only) quiet : suppress output [default true ] test : test the servers and connect to each one ones at a time [default false ] source: Mads/src/MadsParallel.jl:64 setprocs(np::Int64, nt::Int64) Set the number of processors to np and the number of threads to nt Usage: Mads.setprocs(4) Mads.setprocs(4, 8) Arguments: np : number of processors nt : number of threads source: Mads/src/MadsParallel.jl:20 setseed(seed::Number) Set current seed source: Mads/src/MadsSA.jl:11 settarget!(o::Associative{K, V}, target) Set observation target source: Mads/src/MadsObservations.jl:153 settime!(o::Associative{K, V}, time) Set observation time source: Mads/src/MadsObservations.jl:105 setverbositylevel(level::Int64) Set MADS verbosity level source: Mads/src/MadsHelpers.jl:37 setweight!(o::Associative{K, V}, weight) Set observation weight source: Mads/src/MadsObservations.jl:129 setwellweights!(madsdata::Associative{K, V}, value::Number) Set well weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:236 showallparameters(madsdata::Associative{K, V}) Show all parameters in the MADS problem dictionary source: Mads/src/MadsParameters.jl:448 showobservations(madsdata::Associative{K, V}) Show observations in the MADS problem dictionary source: Mads/src/MadsObservations.jl:272 showparameters(madsdata::Associative{K, V}) Show optimizable parameters in the MADS problem dictionary source: Mads/src/MadsParameters.jl:417 sinetransform(sineparams::Array{T, 1}, lowerbounds::Array{T, 1}, upperbounds::Array{T, 1}, indexlogtransformed::Array{T, 1}) Sine transformation of model parameters source: Mads/src/MadsSine.jl:10 sinetransformfunction(f::Function, lowerbounds::Array{T, 1}, upperbounds::Array{T, 1}, indexlogtransformed::Array{T, 1}) Sine transformation of a function source: Mads/src/MadsSine.jl:17 sinetransformgradient(g::Function, lowerbounds::Array{T, 1}, upperbounds::Array{T, 1}, indexlogtransformed::Array{T, 1}) Sine transformation of a gradient function source: Mads/src/MadsSine.jl:25 spaghettiplot(madsdata::Associative{K, V}, number_of_samples::Int64) Generate a combined spaghetti plot for the selected ( type != null ) model parameter Mads.spaghettiplot(madsdata, paramdictarray; filename=\"\", keyword = \"\", format=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Mads.spaghettiplot(madsdata, obsmdictarray; filename=\"\", keyword = \"\", format=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Mads.spaghettiplot(madsdata, number_of_samples; filename=\"\", keyword = \"\", format=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Arguments: madsdata : MADS problem dictionary paramdictarray : parameter dictionary array containing the data arrays to be plotted obsdictarray : observation dictionary array containing the data arrays to be plotted number_of_samples : number of samples filename : output file name used to output the produced plots keyword : keyword to be added in the file name used to output the produced plots (if filename is not defined) format : output plot format ( png , pdf , etc.) xtitle : x axis title ytitle : y axis title obs_plot_dots : plot observation as dots ( true [default] or false ) seed : initial random seed Returns: none Dumps: Image file with a spaghetti plot ( <mads_rootname>-<keyword>-<number_of_samples>-spaghetti.<default_image_extension> ) source: Mads/src/MadsPlot.jl:788 spaghettiplots(madsdata::Associative{K, V}, number_of_samples::Int64) Generate separate spaghetti plots for each selected ( type != null ) model parameter Mads.spaghettiplots(madsdata, paramdictarray; format=\"\", keyword=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Mads.spaghettiplots(madsdata, number_of_samples; format=\"\", keyword=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Arguments: madsdata : MADS problem dictionary paramdictarray : parameter dictionary containing the data arrays to be plotted number_of_samples : number of samples keyword : keyword to be added in the file name used to output the produced plots format : output plot format ( png , pdf , etc.) xtitle : x axis title ytitle : y axis title obs_plot_dots : plot observation as dots ( true [default] or false ) seed : initial random seed Dumps: A series of image files with spaghetti plots for each selected ( type != null ) model parameter ( <mads_rootname>-<keyword>-<param_key>-<number_of_samples>-spaghetti.<default_image_extension> ) source: Mads/src/MadsPlot.jl:643 sprintf(args...) Convert @sprintf macro into sprintf function source: Mads/src/MadsParallel.jl:39 status() Status of the Mads modules source: Mads/src/MadsPublish.jl:17 tag() Tag the Mads modules with a default argument :patch source: Mads/src/MadsPublish.jl:67 tag(sym::Symbol) Tag the Mads modules with a default argument :patch source: Mads/src/MadsPublish.jl:67 test() Execute Mads tests (the tests will be in parallel if processors are defined) source: Mads/src/MadsTest.jl:21 test(testmod) Execute Mads tests (the tests will be in parallel if processors are defined) source: Mads/src/MadsTest.jl:21 testj() Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) source: Mads/src/MadsTest.jl:2 testj(coverage::Bool) Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) source: Mads/src/MadsTest.jl:2 void2nan!(dict::Associative{K, V}) Convert Void's into NaN's in a dictionary source: Mads/src/MadsSA.jl:762 weightedstats(samples::Array{T, N}, llhoods::Array{T, 1}) Get weighted mean and variance samples Arguments: samples : array of samples llhoods : vector of log-likelihoods Returns: mean : vector of sample means var : vector of sample variances source: Mads/src/MadsSA.jl:134 welloff!(madsdata, wellname::AbstractString) Turn off a specific well in the MADS problem dictionary source: Mads/src/MadsObservations.jl:385 wellon!(madsdata::Associative{K, V}, wellname::AbstractString) Turn on a specific well in the MADS problem dictionary source: Mads/src/MadsObservations.jl:361 wells2observations!(madsdata::Associative{K, V}) Convert Wells class to Observations class in the MADS problem dictionary source: Mads/src/MadsObservations.jl:401 writeparameters(madsdata::Associative{K, V}) Write initial parameters source: Mads/src/MadsIO.jl:386 writeparameters(madsdata::Associative{K, V}, parameters) Write parameters source: Mads/src/MadsIO.jl:393 writeparametersviatemplate(parameters, templatefilename, outputfilename) Write parameters via MADS template ( templatefilename ) to an output file ( outputfilename ) source: Mads/src/MadsIO.jl:357","title":"Mads"},{"location":"mads/#mads","text":"","title":"Mads"},{"location":"mads/#internal","text":"","title":"Internal"},{"location":"mads/#allwellsoffmadsdataassociativek-v","text":"Turn off all the wells in the MADS problem dictionary source: Mads/src/MadsObservations.jl:377","title":"allwellsoff!(madsdata::Associative{K, V})"},{"location":"mads/#allwellsonmadsdataassociativek-v","text":"Turn on all the wells in the MADS problem dictionary source: Mads/src/MadsObservations.jl:353","title":"allwellson!(madsdata::Associative{K, V})"},{"location":"mads/#asinetransformparamsarrayt-1-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1","text":"Arcsine transformation of model parameters source: Mads/src/MadsSine.jl:2","title":"asinetransform(params::Array{T, 1},  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"},{"location":"mads/#bayessamplingmadsdataassociativek-v","text":"Bayesian Sampling Mads.bayessampling(madsdata; nsteps=1000, burnin=100, thinning=1, seed=2016) Mads.bayessampling(madsdata, numsequences; nsteps=1000, burnin=100, thinning=1, seed=2016) Arguments: madsdata : MADS problem dictionary numsequences : number of sequences executed in parallel nsteps : number of final realizations in the chain burnin : number of initial realizations before the MCMC are recorded thinning : removal of any thinning realization seed : initial random number seed Returns: mcmcchain : source: Mads/src/MadsMC.jl:27","title":"bayessampling(madsdata::Associative{K, V})"},{"location":"mads/#calibratemadsdataassociativek-v","text":"Calibrate Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Arguments: madsdata : MADS problem dictionary tolX : parameter space tolerance tolG : parameter space update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda lambda_mu : lambda multiplication factor [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] save_results : save intermediate results [default=true] usenaive : use naive Levenberg-Marquardt solver Returns: minimumdict : model parameter dictionary with the optimal values at the minimum results : optimization algorithm results (e.g. results.minimum) source: Mads/src/MadsCalibrate.jl:102","title":"calibrate(madsdata::Associative{K, V})"},{"location":"mads/#calibratenloptmadsdataassociativek-v","text":"Do a calibration using NLopt source: Mads/src/MadsCalibrate.jl:151","title":"calibratenlopt(madsdata::Associative{K, V})"},{"location":"mads/#calibraterandommadsdataassociativek-v","text":"Calibrate with random initial guesses Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Mads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Arguments: madsdata : MADS problem dictionary numberofsamples : number of random initial samples tolX : parameter space tolerance tolG : parameter space update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda lambda_mu : lambda multiplication factor [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] save_results : save intermediate results [default=true] usenaive : use naive Levenberg-Marquardt solver seed : initial random seed Returns: bestresult : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum) source: Mads/src/MadsCalibrate.jl:34","title":"calibraterandom(madsdata::Associative{K, V})"},{"location":"mads/#calibraterandommadsdataassociativek-v-numberofsamples","text":"Calibrate with random initial guesses Mads.calibraterandom(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Mads.calibraterandom(madsdata, numberofsamples; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Arguments: madsdata : MADS problem dictionary numberofsamples : number of random initial samples tolX : parameter space tolerance tolG : parameter space update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda lambda_mu : lambda multiplication factor [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] save_results : save intermediate results [default=true] usenaive : use naive Levenberg-Marquardt solver seed : initial random seed Returns: bestresult : optimal results tuple: [1] model parameter dictionary with the optimal values at the minimum; [2] optimization algorithm results (e.g. bestresult[2].minimum) source: Mads/src/MadsCalibrate.jl:34","title":"calibraterandom(madsdata::Associative{K, V},  numberofsamples)"},{"location":"mads/#checkout","text":"Checkout the latest version of the Mads modules source: Mads/src/MadsPublish.jl:2","title":"checkout()"},{"location":"mads/#checkoutgitbool","text":"Checkout the latest version of the Mads modules source: Mads/src/MadsPublish.jl:2","title":"checkout(git::Bool)"},{"location":"mads/#cleancoverage","text":"Remove Mads coverage files source: Mads/src/MadsTest.jl:11","title":"cleancoverage()"},{"location":"mads/#cmadsins_obsobsidarrayt-1-instructionfilenameabstractstring-inputfilenameabstractstring","text":"Call C MADS ins_obs() function from the MADS dynamic library source: Mads/src/MadsIO.jl:540","title":"cmadsins_obs(obsid::Array{T, 1},  instructionfilename::AbstractString,  inputfilename::AbstractString)"},{"location":"mads/#computemassmadsdataassociativek-v","text":"Compute injected/reduced contaminant mass Mads.computemass(madsdata; time = 0) Arguments: madsdata : MADS problem dictionary time : computational time Returns: mass_injected : total injected mass mass_reduced : total reduced mass source: Mads/src/MadsAnasol.jl:193","title":"computemass(madsdata::Associative{K, V})"},{"location":"mads/#computemassmadsfiles","text":"Compute injected/reduced contaminant mass for a given set of mads input files Mads.computemass(madsfiles; time = 0, path = \".\") Arguments: madsfiles : matching pattern for Mads input files (string or regular expression accepted) time : computational time path : search directory for the mads input files Returns: lambda : array with all the lambda values mass_injected : array with associated total injected mass mass_reduced : array with associated total reduced mass source: Mads/src/MadsAnasol.jl:252","title":"computemass(madsfiles)"},{"location":"mads/#computeparametersensititiesmadsdataassociativek-v-saresultsassociativek-v","text":"Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range Arguments: madsdata : MADS problem dictionary saresults : sensitivity analysis results source: Mads/src/MadsSA.jl:568","title":"computeparametersensitities(madsdata::Associative{K, V},  saresults::Associative{K, V})"},{"location":"mads/#contaminationwellx-welly-wellz-n-lambda-theta-vx-vy-vz-ax-ay-az-h-x-y-z-dx-dy-dz-f-t0-t1-t","text":"Compute concentration for a point in space and time (x,y,z,t) Mads.contamination(wellx, welly, wellz, n, lambda, theta, vx, vy, vz, ax, ay, az, H, x, y, z, dx, dy, dz, f, t0, t1, t; anasolfunction=\"long_bbb_ddd_iir_c\") Arguments: wellx - observation point (well) X coordinate welly - observation point (well) Y coordinate wellz - observation point (well) Z coordinate n - porosity lambda - first-order reaction rate theta - groundwater flow direction vx - advective transport velocity in X direction vy - advective transport velocity in Y direction vz - advective transport velocity in Z direction ax - dispersivity in X direction (longitudinal) ay - dispersivity in Y direction (transverse horizontal) az - dispersivity in Y direction (transverse vertical) H - Hurst coefficient for Fractional Brownian dispersion x - X coordinate of contaminant source location y - Y coordinate of contaminant source location z - Z coordinate of contaminant source location dx - source size (extent) in X direction dy - source size (extent) in Y direction dz - source size (extent) in Z direction f - source mass flux t0 - source starting time t1 - source termination time t - time to compute concentration at the observation point anasolfunction : Anasol function to call (check out the Anasol module) [long_bbb_ddd_iir_c] Returns: predicted concentration at (wellx, welly, wellz, t) source: Mads/src/MadsAnasol.jl:152","title":"contamination(wellx,  welly,  wellz,  n,  lambda,  theta,  vx,  vy,  vz,  ax,  ay,  az,  H,  x,  y,  z,  dx,  dy,  dz,  f,  t0,  t1,  t)"},{"location":"mads/#copyright","text":"Produce MADS copyright information source: Mads/src/MadsHelp.jl:9","title":"copyright()"},{"location":"mads/#create_documentation","text":"Create web documentation files for Mads functions source: Mads/src/MadsHelp.jl:62","title":"create_documentation()"},{"location":"mads/#create_tests_off","text":"Turn off the generation of MADS tests (default) source: Mads/src/MadsHelpers.jl:17","title":"create_tests_off()"},{"location":"mads/#create_tests_on","text":"Turn on the generation of MADS tests (dangerous) source: Mads/src/MadsHelpers.jl:12","title":"create_tests_on()"},{"location":"mads/#createmadsprobleminfilenameabstractstring-outfilenameabstractstring","text":"Create a new Mads problem where the observation targets are computed based on the model predictions Mads.createmadsproblem(infilename, outfilename) Mads.createmadsproblem(madsdata, outfilename) `Mads.createmadsproblem(madsdata, predictions, outfilename) Arguments: infilename : input Mads file outfilename : output Mads file madsdata : MADS problem dictionary predictions : dictionary of model predictions source: Mads/src/MadsCreate.jl:16","title":"createmadsproblem(infilename::AbstractString,  outfilename::AbstractString)"},{"location":"mads/#createobservationsmadsdataassociativek-v-time-observation","text":"Create observations in the MADS problem dictionary based on time and observation arrays source: Mads/src/MadsObservations.jl:293","title":"createobservations!(madsdata::Associative{K, V},  time,  observation)"},{"location":"mads/#deletenandfdataframesdataframe","text":"Delete rows with NaN in a Dataframe df source: Mads/src/MadsSA.jl:782","title":"deleteNaN!(df::DataFrames.DataFrame)"},{"location":"mads/#dobigdtmadsdataassociativek-v-nummodelrunsint64","text":"Perform BIG-DT analysis Arguments: madsdata : MADS problem dictionary nummodelruns : number of model runs numhorizons : number of info-gap horizons of uncertainty maxHorizon : maximum info-gap horizons of uncertainty numlikelihoods : number of Bayesian likelihoods Returns: bigdtresults : dictionary with BIG-DT results source: Mads/src/MadsBIG.jl:123","title":"dobigdt(madsdata::Associative{K, V},  nummodelruns::Int64)"},{"location":"mads/#dumpasciifilefilenameabstractstring-data","text":"Dump ASCII file source: Mads/src/MadsASCII.jl:8","title":"dumpasciifile(filename::AbstractString,  data)"},{"location":"mads/#dumpjsonfilefilenameabstractstring-data","text":"Dump a JSON file source: Mads/src/MadsJSON.jl:17","title":"dumpjsonfile(filename::AbstractString,  data)"},{"location":"mads/#dumpwelldatafilenameabstractstring-madsdata","text":"Dump well data from MADS problem dictionary into a ASCII file source: Mads/src/MadsYAML.jl:130","title":"dumpwelldata(filename::AbstractString,  madsdata)"},{"location":"mads/#dumpyamlfilefilenameabstractstring-yamldata","text":"Dump YAML file in JSON format source: Mads/src/MadsYAML.jl:55","title":"dumpyamlfile(filename::AbstractString,  yamldata)"},{"location":"mads/#dumpyamlmadsfilemadsdata-filenameabstractstring","text":"Dump YAML Mads file Arguments: madsdata : MADS problem dictionary filename : file name source: Mads/src/MadsYAML.jl:72","title":"dumpyamlmadsfile(madsdata,  filename::AbstractString)"},{"location":"mads/#efastmdassociativek-v","text":"Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method Arguments: madsdata : MADS problem dictionary N : number of samples M : maximum number of harmonics gamma : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) seed : initial random seed source: Mads/src/MadsSA.jl:818","title":"efast(md::Associative{K, V})"},{"location":"mads/#evaluatemadsexpressionexpressionstring-parameters","text":"Evaluate the expression in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values source: Mads/src/MadsMisc.jl:92","title":"evaluatemadsexpression(expressionstring,  parameters)"},{"location":"mads/#evaluatemadsexpressionsmadsdataassociativek-v-parameters","text":"Evaluate the expressions in terms of the parameters, return a Dict() containing the expression names as keys, and the values of the expression as values source: Mads/src/MadsMisc.jl:101","title":"evaluatemadsexpressions(madsdata::Associative{K, V},  parameters)"},{"location":"mads/#filterkeysdictassociativek-v-keyregex","text":"Filter dictionary keys based on a string or regular expression source: Mads/src/MadsIO.jl:349","title":"filterkeys(dict::Associative{K, V},  key::Regex)"},{"location":"mads/#forwardmadsdataassociativek-v","text":"Perform a forward run using the initial or provided values for the model parameters forward(madsdata) forward(madsdata, paramdict) forward(madsdata, paramarray) Arguments: madsdata : MADS problem dictionary paramdict : dictionary of model parameter values paramarray : array of model parameter values Returns: obsvalues : dictionary of model predictions source: Mads/src/MadsForward.jl:21","title":"forward(madsdata::Associative{K, V})"},{"location":"mads/#forwardgridmadsdataassociativek-v","text":"Perform a forward run over a 3D grid defined in madsdata using the initial or provided values for the model parameters forwardgrid(madsdata) forwardgrid(madsdata, paramvalues)) Arguments: madsdata : MADS problem dictionary paramvalues : dictionary of model parameter values Returns: array3d : 3D array with model predictions along a 3D grid source: Mads/src/MadsForward.jl:106","title":"forwardgrid(madsdata::Associative{K, V})"},{"location":"mads/#free","text":"Use the latest tagged versions of the Mads modules source: Mads/src/MadsPublish.jl:84","title":"free()"},{"location":"mads/#functions","text":"List available functions in the MADS modules: Examples: Mads.functions() Mads.functions(BIGUQ) Mads.functions(\"get\") Mads.functions(Mads, \"get\") Arguments: module : MADS module string : matching string source: Mads/src/MadsHelp.jl:30","title":"functions()"},{"location":"mads/#functionsstringabstractstring","text":"List available functions in the MADS modules: Examples: Mads.functions() Mads.functions(BIGUQ) Mads.functions(\"get\") Mads.functions(Mads, \"get\") Arguments: module : MADS module string : matching string source: Mads/src/MadsHelp.jl:30","title":"functions(string::AbstractString)"},{"location":"mads/#getextensionfilename","text":"Get file name extension Example: ext = Mads.getextension(\"a.mads\") # ext = \"mads\" source: Mads/src/MadsIO.jl:320","title":"getextension(filename)"},{"location":"mads/#getimportantsamplessamplesarrayt-n-llhoodsarrayt-1","text":"Get important samples Arguments: samples : array of samples llhoods : vector of log-likelihoods Returns: imp_samples : array of important samples source: Mads/src/MadsSA.jl:102","title":"getimportantsamples(samples::Array{T, N},  llhoods::Array{T, 1})"},{"location":"mads/#getmadsdir","text":"Get the directory where currently Mads is running problemdir = Mads.getmadsdir() source: Mads/src/MadsIO.jl:276","title":"getmadsdir()"},{"location":"mads/#getmadsinputfile","text":"Get the default MADS input file set as a MADS global variable using setmadsinputfile(filename) Mads.getmadsinputfile() Arguments: none Returns: filename : input file name (e.g. input_file_name.mads ) source: Mads/src/MadsIO.jl:240","title":"getmadsinputfile()"},{"location":"mads/#getmadsproblemdirmadsdataassociativek-v","text":"Get the directory where the Mads data file is located Mads.getmadsproblemdir(madsdata) Example: madsdata = Mads.loadmadsproblemdir(\"../../a.mads\") madsproblemdir = Mads.getmadsproblemdir(madsdata) where madsproblemdir = \"../../\" source: Mads/src/MadsIO.jl:267","title":"getmadsproblemdir(madsdata::Associative{K, V})"},{"location":"mads/#getmadsrootnamemadsdataassociativek-v","text":"Get the MADS problem root name madsrootname = Mads.getmadsrootname(madsdata) source: Mads/src/MadsIO.jl:249","title":"getmadsrootname(madsdata::Associative{K, V})"},{"location":"mads/#getobskeysmadsdataassociativek-v","text":"Get keys for all observations in the MADS problem dictionary source: Mads/src/MadsObservations.jl:22","title":"getobskeys(madsdata::Associative{K, V})"},{"location":"mads/#getparamdictmadsdataassociativek-v","text":"Get dictionary with all parameters and their respective initial values Mads.getparamdict(madsdata) Arguments: madsdata : MADS problem dictionary Returns: paramdict : dictionary with all parameters and their respective initial values source: Mads/src/MadsParameters.jl:49","title":"getparamdict(madsdata::Associative{K, V})"},{"location":"mads/#getparamdistributionsmadsdataassociativek-v","text":"Get probabilistic distributions of all parameters in the MADS problem dictionary Mads.getparamdistributions(madsdata; init_dist=false) Note: Probabilistic distribution of parameters can be defined only if dist or min / max model parameter fields are specified in the MADS problem dictionary madsdata . Arguments: madsdata : MADS problem dictionary init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field) source: Mads/src/MadsParameters.jl:501","title":"getparamdistributions(madsdata::Associative{K, V})"},{"location":"mads/#getparamkeysmadsdataassociativek-v","text":"Get keys of all parameters in the MADS dictionary Mads.getparamkeys(madsdata) Arguments: madsdata : MADS problem dictionary Returns: paramkeys : array with the keys of all parameters in the MADS dictionary source: Mads/src/MadsParameters.jl:30","title":"getparamkeys(madsdata::Associative{K, V})"},{"location":"mads/#getparamsinit_maxmadsdata","text":"Get an array with init_max values for all the MADS model parameters source: Mads/src/MadsParameters.jl:256","title":"getparamsinit_max(madsdata)"},{"location":"mads/#getparamsinit_maxmadsdata-paramkeys","text":"Get an array with init_max values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:222","title":"getparamsinit_max(madsdata,  paramkeys)"},{"location":"mads/#getparamsinit_minmadsdata","text":"Get an array with init_min values for all the MADS model parameters source: Mads/src/MadsParameters.jl:216","title":"getparamsinit_min(madsdata)"},{"location":"mads/#getparamsinit_minmadsdata-paramkeys","text":"Get an array with init_min values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:182","title":"getparamsinit_min(madsdata,  paramkeys)"},{"location":"mads/#getparamsmaxmadsdata","text":"Get an array with min values for all the MADS model parameters source: Mads/src/MadsParameters.jl:176","title":"getparamsmax(madsdata)"},{"location":"mads/#getparamsmaxmadsdata-paramkeys","text":"Get an array with max values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:153","title":"getparamsmax(madsdata,  paramkeys)"},{"location":"mads/#getparamsminmadsdata","text":"Get an array with min values for all the MADS model parameters source: Mads/src/MadsParameters.jl:147","title":"getparamsmin(madsdata)"},{"location":"mads/#getparamsminmadsdata-paramkeys","text":"Get an array with min values for parameters defined by paramkeys source: Mads/src/MadsParameters.jl:124","title":"getparamsmin(madsdata,  paramkeys)"},{"location":"mads/#getprocs","text":"Get the number of processors source: Mads/src/MadsParallel.jl:2","title":"getprocs()"},{"location":"mads/#getrestartdirmadsdataassociativek-v","text":"Get the directory where restarts will be stored. source: Mads/src/MadsFunc.jl:296","title":"getrestartdir(madsdata::Associative{K, V})"},{"location":"mads/#getrestartdirmadsdataassociativek-v-suffix","text":"Get the directory where restarts will be stored. source: Mads/src/MadsFunc.jl:296","title":"getrestartdir(madsdata::Associative{K, V},  suffix)"},{"location":"mads/#getrootnamefilenameabstractstring","text":"Get file name root Example: r = Mads.getrootname(\"a.rnd.dat\") # r = \"a\" r = Mads.getrootname(\"a.rnd.dat\", first=false) # r = \"a.rnd\" source: Mads/src/MadsIO.jl:297","title":"getrootname(filename::AbstractString)"},{"location":"mads/#getsourcekeysmadsdataassociativek-v","text":"Get keys of all source parameters in the MADS dictionary Mads.getsourcekeys(madsdata) Arguments: madsdata : MADS problem dictionary Returns: sourcekeys : array with keys of all source parameters in the MADS dictionary source: Mads/src/MadsParameters.jl:70","title":"getsourcekeys(madsdata::Associative{K, V})"},{"location":"mads/#gettargetoassociativek-v","text":"Get observation target source: Mads/src/MadsObservations.jl:140","title":"gettarget(o::Associative{K, V})"},{"location":"mads/#gettargetkeysmadsdataassociativek-v","text":"Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary source: Mads/src/MadsObservations.jl:27","title":"gettargetkeys(madsdata::Associative{K, V})"},{"location":"mads/#gettimeoassociativek-v","text":"Get observation time source: Mads/src/MadsObservations.jl:92","title":"gettime(o::Associative{K, V})"},{"location":"mads/#getweightoassociativek-v","text":"Get observation weight source: Mads/src/MadsObservations.jl:116","title":"getweight(o::Associative{K, V})"},{"location":"mads/#getwellkeysmadsdataassociativek-v","text":"Get keys for all wells in the MADS problem dictionary source: Mads/src/MadsObservations.jl:35","title":"getwellkeys(madsdata::Associative{K, V})"},{"location":"mads/#haskeywordmadsdataassociativek-v-keywordabstractstring","text":"Check for a keyword in a class within the Mads dictionary madsdata Mads.haskeyword(madsdata, keyword) Mads.haskeyword(madsdata, class, keyword) Arguments: madsdata : MADS problem dictionary class : dictionary class; if not provided searches for keyword in Problem class keyword : dictionary key Returns: true or false Examples: Mads.haskeyword(madsdata, \"disp\") ... searches in Problem class by default Mads.haskeyword(madsdata, \"Wells\", \"R-28\") ... searches in Wells class for a keyword \"R-28\" source: Mads/src/MadsHelpers.jl:65","title":"haskeyword(madsdata::Associative{K, V},  keyword::AbstractString)"},{"location":"mads/#help","text":"Produce MADS help information source: Mads/src/MadsHelp.jl:4","title":"help()"},{"location":"mads/#importeverywherefinename","text":"Import function everywhere from a file. The first function in the file is the one that will be called by Mads to perform the model simulations. source: Mads/src/MadsFunc.jl:324","title":"importeverywhere(finename)"},{"location":"mads/#indexkeysdictassociativek-v-keyregex","text":"Find indexes for dictionary keys based on a string or regular expression source: Mads/src/MadsIO.jl:353","title":"indexkeys(dict::Associative{K, V},  key::Regex)"},{"location":"mads/#ins_obsinstructionfilenameabstractstring-inputfilenameabstractstring","text":"Apply Mads instruction file instructionfilename to read model input file inputfilename source: Mads/src/MadsIO.jl:467","title":"ins_obs(instructionfilename::AbstractString,  inputfilename::AbstractString)"},{"location":"mads/#instline2regexsinstlineabstractstring","text":"Convert an instruction line in the Mads instruction file into regular expressions source: Mads/src/MadsIO.jl:402","title":"instline2regexs(instline::AbstractString)"},{"location":"mads/#invobsweightsmadsdataassociativek-v-valuenumber","text":"Inversely proportional observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:225","title":"invobsweights!(madsdata::Associative{K, V},  value::Number)"},{"location":"mads/#invwellweightsmadsdataassociativek-v-valuenumber","text":"Inversely proportional observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:258","title":"invwellweights!(madsdata::Associative{K, V},  value::Number)"},{"location":"mads/#islogmadsdataassociativek-v-parameterkeyabstractstring","text":"Is parameter with key parameterkey log-transformed? source: Mads/src/MadsParameters.jl:315","title":"islog(madsdata::Associative{K, V},  parameterkey::AbstractString)"},{"location":"mads/#isobsmadsdataassociativek-v-dictassociativek-v","text":"Is a dictionary containing all the observations source: Mads/src/MadsObservations.jl:5","title":"isobs(madsdata::Associative{K, V},  dict::Associative{K, V})"},{"location":"mads/#isoptmadsdataassociativek-v-parameterkeyabstractstring","text":"Is parameter with key parameterkey optimizable? source: Mads/src/MadsParameters.jl:305","title":"isopt(madsdata::Associative{K, V},  parameterkey::AbstractString)"},{"location":"mads/#isparammadsdataassociativek-v-dictassociativek-v","text":"Is the dictionary containing all the parameters source: Mads/src/MadsParameters.jl:5","title":"isparam(madsdata::Associative{K, V},  dict::Associative{K, V})"},{"location":"mads/#levenberg_marquardtffunction-gfunction-x0","text":"Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess root : Mads problem root name tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda [eps(Float32)] lambda_scale : lambda scaling factor lambda_mu : lambda multiplication factor \u03bc [10] lambda_nu : lambda multiplication factor \u03bd [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] alwaysDoJacobian : computer Jacobian each iteration [false] callback : call back function for debugging source: Mads/src/MadsLM.jl:295","title":"levenberg_marquardt(f::Function,  g::Function,  x0)"},{"location":"mads/#levenberg_marquardtffunction-gfunction-x0-ofunction","text":"Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess root : Mads problem root name tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations maxJacobians : maximum number of Jacobian solves lambda : initial Levenberg-Marquardt lambda [eps(Float32)] lambda_scale : lambda scaling factor lambda_mu : lambda multiplication factor \u03bc [10] lambda_nu : lambda multiplication factor \u03bd [10] np_lambda : number of parallel lambda solves show_trace : shows solution trace [default=false] alwaysDoJacobian : computer Jacobian each iteration [false] callback : call back function for debugging source: Mads/src/MadsLM.jl:295","title":"levenberg_marquardt(f::Function,  g::Function,  x0,  o::Function)"},{"location":"mads/#loadasciifilefilenameabstractstring","text":"Load ASCII file source: Mads/src/MadsASCII.jl:2","title":"loadasciifile(filename::AbstractString)"},{"location":"mads/#loadjsonfilefilenameabstractstring","text":"Load a JSON file source: Mads/src/MadsJSON.jl:5","title":"loadjsonfile(filename::AbstractString)"},{"location":"mads/#loadmadsfilefilenameabstractstring","text":"Load MADS input file defining a MADS problem dictionary Mads.loadmadsfile(filename) Mads.loadmadsfile(filename; julia=false) Mads.loadmadsfile(filename; julia=true) Arguments: filename : input file name (e.g. input_file_name.mads ) julia : if true , force using julia parsing functions; if false (default), use python parsing functions [boolean] Returns: madsdata : Mads problem dictionary Example: md = loadmadsfile(\"input_file_name.mads\") source: Mads/src/MadsIO.jl:21","title":"loadmadsfile(filename::AbstractString)"},{"location":"mads/#loadyamlfilefilenameabstractstring","text":"Load YAML file source: Mads/src/MadsYAML.jl:46","title":"loadyamlfile(filename::AbstractString)"},{"location":"mads/#localsamadsdataassociativek-v","text":"Local sensitivity analysis based on eigen analysis of covariance matrix Arguments: madsdata : MADS problem dictionary madsdata : MADS problem dictionary filename : output file name format : output plot format ( png , pdf , etc.) par : parameter set obs : observations for the parameter set source: Mads/src/MadsSAPlot.jl:15","title":"localsa(madsdata::Associative{K, V})"},{"location":"mads/#long_tests_off","text":"Turn off execution of long MADS tests (default) source: Mads/src/MadsHelpers.jl:27","title":"long_tests_off()"},{"location":"mads/#long_tests_on","text":"Turn on execution of long MADS tests (dangerous) source: Mads/src/MadsHelpers.jl:22","title":"long_tests_on()"},{"location":"mads/#madscriticalmessageabstractstring","text":"MADS critical error messages source: Mads/src/MadsLog.jl:40","title":"madscritical(message::AbstractString)"},{"location":"mads/#madsdebugmessageabstractstring","text":"MADS debug messages (controlled by quiet and debuglevel ) source: Mads/src/MadsLog.jl:10","title":"madsdebug(message::AbstractString)"},{"location":"mads/#madsdebugmessageabstractstring-levelint64","text":"MADS debug messages (controlled by quiet and debuglevel ) source: Mads/src/MadsLog.jl:10","title":"madsdebug(message::AbstractString,  level::Int64)"},{"location":"mads/#madserrormessageabstractstring","text":"MADS error messages source: Mads/src/MadsLog.jl:33","title":"madserror(message::AbstractString)"},{"location":"mads/#madsinfomessageabstractstring","text":"MADS information/status messages (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:18","title":"madsinfo(message::AbstractString)"},{"location":"mads/#madsinfomessageabstractstring-levelint64","text":"MADS information/status messages (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:18","title":"madsinfo(message::AbstractString,  level::Int64)"},{"location":"mads/#madsoutputmessageabstractstring","text":"MADS output (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:2","title":"madsoutput(message::AbstractString)"},{"location":"mads/#madsoutputmessageabstractstring-levelint64","text":"MADS output (controlled by quiet and verbositylevel`) source: Mads/src/MadsLog.jl:2","title":"madsoutput(message::AbstractString,  level::Int64)"},{"location":"mads/#madswarnmessageabstractstring","text":"MADS warning messages source: Mads/src/MadsLog.jl:26","title":"madswarn(message::AbstractString)"},{"location":"mads/#makearrayconditionalloglikelihoodmadsdataassociativek-v-conditionalloglikelihood","text":"Make a conditional log likelihood function that accepts an array containing the opt parameters' values source: Mads/src/MadsMisc.jl:57","title":"makearrayconditionalloglikelihood(madsdata::Associative{K, V},  conditionalloglikelihood)"},{"location":"mads/#makearrayfunctionmadsdataassociativek-v","text":"Model section information criteria source: Mads/src/MadsModelSelection.jl:2","title":"makearrayfunction(madsdata::Associative{K, V})"},{"location":"mads/#makearrayfunctionmadsdataassociativek-v-f","text":"Make a version of the function f that accepts an array containing the optimal parameters' values Mads.makearrayfunction(madsdata, f) Arguments: madsdata : MADS problem dictionary f : ... Returns: arrayfunction : function accepting an array containing the optimal parameters' values source: Mads/src/MadsMisc.jl:17","title":"makearrayfunction(madsdata::Associative{K, V},  f)"},{"location":"mads/#makearrayfunctionmadsdataassociativek-v-pararrayt-n","text":"Model section information criteria source: Mads/src/MadsModelSelection.jl:2","title":"makearrayfunction(madsdata::Associative{K, V},  par::Array{T, N})"},{"location":"mads/#makearrayloglikelihoodmadsdataassociativek-v-loglikelihood","text":"Make a log likelihood function that accepts an array containing the opt parameters' values source: Mads/src/MadsMisc.jl:70","title":"makearrayloglikelihood(madsdata::Associative{K, V},  loglikelihood)"},{"location":"mads/#makebigdtmadsdataassociativek-v-choiceassociativek-v","text":"Setup BIG-DT problem Arguments: madsdata : MADS problem dictionary choice : dictionary of BIG-DT choices (scenarios) Returns: bigdtproblem : BIG-DT problem type source: Mads/src/MadsBIG.jl:34","title":"makebigdt!(madsdata::Associative{K, V},  choice::Associative{K, V})"},{"location":"mads/#makebigdtmadsdataassociativek-v-choiceassociativek-v_1","text":"Setup BIG-DT problem Arguments: madsdata : MADS problem dictionary choice : dictionary of BIG-DT choices (scenarios) Returns: bigdtproblem : BIG-DT problem type source: Mads/src/MadsBIG.jl:18","title":"makebigdt(madsdata::Associative{K, V},  choice::Associative{K, V})"},{"location":"mads/#makecomputeconcentrationsmadsdataassociativek-v","text":"Create a function to compute concentrations for all the observation points using Anasol Mads.makecomputeconcentrations(madsdata) Arguments: madsdata : MADS problem dictionary Returns: computeconcentrations : function to compute concentrations; computeconcentrations returns a dictionary of observations and model predicted concentrations Examples: computeconcentrations() or computeconcentrations = Mads.makecomputeconcentrations(madsdata) paramkeys = Mads.getparamkeys(madsdata) paramdict = OrderedDict(zip(paramkeys, map(key->madsdata[\"Parameters\"][key][\"init\"], paramkeys))) forward_preds = computeconcentrations(paramdict) source: Mads/src/MadsAnasol.jl:31","title":"makecomputeconcentrations(madsdata::Associative{K, V})"},{"location":"mads/#makedoublearrayfunctionmadsdataassociativek-v","text":"Make a version of the function f that accepts an array containing the optimal parameters' values, and returns an array of observations Mads.makedoublearrayfunction(madsdata, f) Arguments: madsdata : MADS problem dictionary f : ... Returns: doublearrayfunction : function accepting an array containing the optimal parameters' values, and returning an array of observations source: Mads/src/MadsMisc.jl:40","title":"makedoublearrayfunction(madsdata::Associative{K, V})"},{"location":"mads/#makedoublearrayfunctionmadsdataassociativek-v-f","text":"Make a version of the function f that accepts an array containing the optimal parameters' values, and returns an array of observations Mads.makedoublearrayfunction(madsdata, f) Arguments: madsdata : MADS problem dictionary f : ... Returns: doublearrayfunction : function accepting an array containing the optimal parameters' values, and returning an array of observations source: Mads/src/MadsMisc.jl:40","title":"makedoublearrayfunction(madsdata::Associative{K, V},  f)"},{"location":"mads/#makelmfunctionsmadsdataassociativek-v","text":"Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization source: Mads/src/MadsLM.jl:67","title":"makelmfunctions(madsdata::Associative{K, V})"},{"location":"mads/#makelocalsafunctionmadsdataassociativek-v","text":"Make gradient function needed for local sensitivity analysis source: Mads/src/MadsLM.jl:156","title":"makelocalsafunction(madsdata::Associative{K, V})"},{"location":"mads/#makelogpriormadsdataassociativek-v","text":"Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata source: Mads/src/MadsFunc.jl:417","title":"makelogprior(madsdata::Associative{K, V})"},{"location":"mads/#makemadscommandfunctionmadsdatawithobsassociativek-v","text":"Make MADS function to execute the model defined in the MADS problem dictionary madsdata Usage: Mads.makemadscommandfunction(madsdata) MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : execute a Julia function defined in an input Julia file. The function that should accept a parameter dictionary with all the model parameters as an input argument and should return an observation dictionary with all the model predicted observations. MADS will execute the first function defined in the file. MADS model : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Julia model : execute an internal Julia function that accepts a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Command : execute an external UNIX command or script that will execute an external model. Julia command : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an observation dictionary with model predictions. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at http://mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at http://mads.lanl.gov ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file source: Mads/src/MadsFunc.jl:49","title":"makemadscommandfunction(madsdatawithobs::Associative{K, V})"},{"location":"mads/#makemadscommandfunctionandgradientmadsdataassociativek-v","text":"Make MADS forward & gradient functions for the model defined in the MADS problem dictionary madsdata source: Mads/src/MadsFunc.jl:352","title":"makemadscommandfunctionandgradient(madsdata::Associative{K, V})"},{"location":"mads/#makemadscommandgradientmadsdataassociativek-v","text":"Make MADS gradient function to compute the parameter-space gradient for the model defined in the MADS problem dictionary madsdata source: Mads/src/MadsFunc.jl:337","title":"makemadscommandgradient(madsdata::Associative{K, V})"},{"location":"mads/#makemadsconditionalloglikelihoodmadsdataassociativek-v","text":"Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary madsdata . source: Mads/src/MadsFunc.jl:432","title":"makemadsconditionalloglikelihood(madsdata::Associative{K, V})"},{"location":"mads/#makemadsloglikelihoodmadsdataassociativek-v","text":"Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under LogLikelihood or computed internally. source: Mads/src/MadsFunc.jl:457","title":"makemadsloglikelihood(madsdata::Associative{K, V})"},{"location":"mads/#maxtorealmaxfloat32dfdataframesdataframe","text":"Scale down values larger than max(Float32) in a Dataframe df so that Gadfly can plot the data source: Mads/src/MadsSA.jl:794","title":"maxtorealmaxFloat32!(df::DataFrames.DataFrame)"},{"location":"mads/#modobsweightsmadsdataassociativek-v-valuenumber","text":"Modify (multiply) observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:217","title":"modobsweights!(madsdata::Associative{K, V},  value::Number)"},{"location":"mads/#modwellweightsmadsdataassociativek-v-valuenumber","text":"Modify (multiply) well weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:247","title":"modwellweights!(madsdata::Associative{K, V},  value::Number)"},{"location":"mads/#montecarlomadsdataassociativek-v","text":"Monte Carlo analysis Mads.montecarlo(madsdata; N=100) Arguments: madsdata : MADS problem dictionary sampling uniformly between mins/maxs N : number of samples (default = 100) Returns: outputdicts : parameter dictionary containing the data arrays Dumps: YAML output file with the parameter dictionary containing the data arrays ( <mads_root_name>.mcresults.yaml ) source: Mads/src/MadsMC.jl:104","title":"montecarlo(madsdata::Associative{K, V})"},{"location":"mads/#naive_get_deltaxjpjarrayt-2-jparrayt-2-f0arrayt-1-lambdareal","text":"Naive Levenberg-Marquardt optimization: get the LM parameter space step source: Mads/src/MadsLM.jl:219","title":"naive_get_deltax(JpJ::Array{T, 2},  Jp::Array{T, 2},  f0::Array{T, 1},  lambda::Real)"},{"location":"mads/#naive_levenberg_marquardtffunction-gfunction-x0arrayt-1","text":"Naive Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess o : objective function tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations lambda : initial Levenberg-Marquardt lambda [100] lambda_mu : lambda multiplication factor \u03bc [10] np_lambda : number of parallel lambda solves source: Mads/src/MadsLM.jl:255","title":"naive_levenberg_marquardt(f::Function,  g::Function,  x0::Array{T, 1})"},{"location":"mads/#naive_levenberg_marquardtffunction-gfunction-x0arrayt-1-ofunction","text":"Naive Levenberg-Marquardt optimization Arguments: f : forward model function g : gradient function for the forward model x0 : initial parameter guess o : objective function tolX : parameter space tolerance tolG : parameter space update tolerance tolOF : objective function update tolerance maxEval : maximum number of model evaluations maxIter : maximum number of optimization iterations lambda : initial Levenberg-Marquardt lambda [100] lambda_mu : lambda multiplication factor \u03bc [10] np_lambda : number of parallel lambda solves source: Mads/src/MadsLM.jl:255","title":"naive_levenberg_marquardt(f::Function,  g::Function,  x0::Array{T, 1},  o::Function)"},{"location":"mads/#naive_lm_iterationffunction-gfunction-ofunction-x0arrayt-1-f0arrayt-1-lambdasarrayt-1","text":"Naive Levenberg-Marquardt optimization: perform LM iteration source: Mads/src/MadsLM.jl:226","title":"naive_lm_iteration(f::Function,  g::Function,  o::Function,  x0::Array{T, 1},  f0::Array{T, 1},  lambdas::Array{T, 1})"},{"location":"mads/#noplot","text":"Disable MADS plotting source: Mads/src/MadsParallel.jl:173","title":"noplot()"},{"location":"mads/#obslineismatchobslineabstractstring-regexsarrayregex-1","text":"Match an instruction line in the Mads instruction file with model input file source: Mads/src/MadsIO.jl:441","title":"obslineismatch(obsline::AbstractString,  regexs::Array{Regex, 1})"},{"location":"mads/#ofmadsdataassociativek-v-resultsarrayt-1","text":"Compute objective function source: Mads/src/MadsLM.jl:37","title":"of(madsdata::Associative{K, V},  results::Array{T, 1})"},{"location":"mads/#paramarray2dictmadsdataassociativek-v-arrayarrayt-n","text":"Convert parameter array to a parameter dictionary of arrays source: Mads/src/MadsMC.jl:154","title":"paramarray2dict(madsdata::Associative{K, V},  array::Array{T, N})"},{"location":"mads/#parametersamplemadsdataassociativek-v-numsamplesinteger","text":"Independent sampling of model parameters defined in the MADS problem dictionary Arguments: madsdata : MADS problem dictionary numsamples : number of samples parameterkey : model parameter key init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field) source: Mads/src/MadsSA.jl:151","title":"parametersample(madsdata::Associative{K, V},  numsamples::Integer)"},{"location":"mads/#parametersamplemadsdataassociativek-v-numsamplesinteger-parameterkeyabstractstring","text":"Independent sampling of model parameters defined in the MADS problem dictionary Arguments: madsdata : MADS problem dictionary numsamples : number of samples parameterkey : model parameter key init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field) source: Mads/src/MadsSA.jl:151","title":"parametersample(madsdata::Associative{K, V},  numsamples::Integer,  parameterkey::AbstractString)"},{"location":"mads/#paramrandmadsdataassociativek-v-parameterkeyabstractstring","text":"Random numbers for a MADS model parameter defined by parameterkey Arguments: madsdata : MADS problem dictionary parameterkey : model parameter key numsamples : number of samples paramdist : dictionary with parameter distributions source: Mads/src/MadsSA.jl:174","title":"paramrand(madsdata::Associative{K, V},  parameterkey::AbstractString)"},{"location":"mads/#parsemadsdatamadsdataassociativek-v","text":"Parse loaded Mads problem dictionary Arguments: madsdata : Mads problem dictionary source: Mads/src/MadsIO.jl:39","title":"parsemadsdata(madsdata::Associative{K, V})"},{"location":"mads/#parser_amanzi","text":"Parse Amanzi output provided in an external file ( filename ) Mads.parser_amanzi() Mads.parser_amanzi(\"observations.out\") Arguments: filename : external file name (optional) Returns: dict : a dictionary with model observations following MADS requirements source: Mads/src/MadsParsers.jl:19","title":"parser_amanzi()"},{"location":"mads/#parser_amanzifilenameabstractstring","text":"Parse Amanzi output provided in an external file ( filename ) Mads.parser_amanzi() Mads.parser_amanzi(\"observations.out\") Arguments: filename : external file name (optional) Returns: dict : a dictionary with model observations following MADS requirements source: Mads/src/MadsParsers.jl:19","title":"parser_amanzi(filename::AbstractString)"},{"location":"mads/#partialofmadsdataassociativek-v-resultdictassociativek-v-regexregex","text":"Compute the sum of squared residuals for observations that match a regular expression source: Mads/src/MadsLM.jl:50","title":"partialof(madsdata::Associative{K, V},  resultdict::Associative{K, V},  regex::Regex)"},{"location":"mads/#plotsaresults_montywellname-madsdata-result","text":"Plot the sensitivity analysis results for each well (Specific plot requested by Monty) source: Mads/src/MadsSAPlot.jl:108","title":"plotSAresults_monty(wellname,  madsdata,  result)"},{"location":"mads/#plotgridmadsdataassociativek-v-sarrayfloat64-n","text":"Plot a 3D grid solution based on model predictions in array s , initial parameters, or user provided parameter values plotgrid(madsdata, s; addtitle=true, title=\"\", filename=\"\", format=\"\") plotgrid(madsdata; addtitle=true, title=\"\", filename=\"\", format=\"\") plotgrid(madsdata, parameters; addtitle=true, title=\"\", filename=\"\", format=\"\") Arguments: madsdata : MADS problem dictionary parameters : dictionary with model parameters s : model predictions array addtitle : add plot title [true] title : plot title filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlotPy.jl:22","title":"plotgrid(madsdata::Associative{K, V},  s::Array{Float64, N})"},{"location":"mads/#plotmadsproblemmadsdataassociativek-v","text":"Plot contaminant sources and wells defined in MADS problem dictionary Arguments: madsdata : MADS problem dictionary filename : output file name format : output plot format ( png , pdf , etc.) keyword : to be added in the filename source: Mads/src/MadsPlot.jl:58","title":"plotmadsproblem(madsdata::Associative{K, V})"},{"location":"mads/#plotmasslambda-mass_injected-mass_reduced-filenameabstractstring","text":"Plot injected/reduced contaminant mass Mads.plotmass(lambda, mass_injected, mass_reduced, filename=\"file_name\") Arguments: lambda : array with all the lambda values mass_injected : array with associated total injected mass mass_reduced : array with associated total reduced mass filename : output filename for the generated plot format : output plot format ( png , pdf , etc.) Dumps: image file with name filename and in specified format source: Mads/src/MadsAnasolPlot.jl:18","title":"plotmass(lambda,  mass_injected,  mass_reduced,  filename::AbstractString)"},{"location":"mads/#plotmatchesmadsdata_inassociativek-v","text":"Plot the matches between model predictions and observations plotmatches(madsdata; filename=\"\", format=\"\") plotmatches(madsdata, param; filename=\"\", format=\"\") plotmatches(madsdata, result; filename=\"\", format=\"\") plotmatches(madsdata, result, r\"NO3\"; filename=\"\", format=\"\") Arguments: madsdata : MADS problem dictionary param : dictionary with model parameters result : dictionary with model predictions rx : regular expression to filter the outputs filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:143","title":"plotmatches(madsdata_in::Associative{K, V})"},{"location":"mads/#plotobssaresultsmadsdata-result","text":"Plot the sensitivity analysis results for the observations Arguments: madsdata : MADS problem dictionary result : sensitivity analysis results filter : string or regex to plot only observations containing filter keyword : to be added in the auto-generated filename filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:462","title":"plotobsSAresults(madsdata,  result)"},{"location":"mads/#plotrobustnesscurvesmadsdataassociativek-v-bigdtresultsdictk-v","text":"Plot BIG-DT robustness curves Arguments: madsdata : MADS problem dictionary bigdtresults : BIG-DT results filename : output file name used to dump plots format : output plot format ( png , pdf , etc.) source: Mads/src/MadsBIGPlot.jl:13","title":"plotrobustnesscurves(madsdata::Associative{K, V},  bigdtresults::Dict{K, V})"},{"location":"mads/#plotseriesxarrayt-2-filenameabstractstring","text":"Create plots of data series Arguments: X : matrix with the series data filename : output file name format : output plot format ( png , pdf , etc.) xtitle : x-axis title ytitle : y-axis title title : plot title name : series name combined : true by default source: Mads/src/MadsPlot.jl:946","title":"plotseries(X::Array{T, 2},  filename::AbstractString)"},{"location":"mads/#plotwellsaresultsmadsdata-result","text":"Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected) Arguments: madsdata : MADS problem dictionary result : sensitivity analysis results xtitle : x-axis title ytitle : y-axis title filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:343","title":"plotwellSAresults(madsdata,  result)"},{"location":"mads/#plotwellsaresultsmadsdata-result-wellname","text":"Plot the sensitivity analysis results for a given well in the MADS problem dictionary (wells class expected) Arguments: madsdata : MADS problem dictionary result : sensitivity analysis results wellname : well name xtitle : x-axis title ytitle : y-axis title filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:368","title":"plotwellSAresults(madsdata,  result,  wellname)"},{"location":"mads/#printsaresultsmadsdataassociativek-v-resultsassociativek-v","text":"Print sensitivity analysis results source: Mads/src/MadsSA.jl:651","title":"printSAresults(madsdata::Associative{K, V},  results::Associative{K, V})"},{"location":"mads/#quietoff","text":"Make MADS not quiet source: Mads/src/MadsHelpers.jl:7","title":"quietoff()"},{"location":"mads/#quieton","text":"Make MADS quiet source: Mads/src/MadsHelpers.jl:2","title":"quieton()"},{"location":"mads/#readasciipredictionsfilenameabstractstring","text":"Read MADS predictions from an ASCII file source: Mads/src/MadsASCII.jl:13","title":"readasciipredictions(filename::AbstractString)"},{"location":"mads/#readjsonpredictionsfilenameabstractstring","text":"Read MADS model predictions from a JSON file source: Mads/src/MadsJSON.jl:24","title":"readjsonpredictions(filename::AbstractString)"},{"location":"mads/#readobservationsmadsdataassociativek-v","text":"Read observations source: Mads/src/MadsIO.jl:493","title":"readobservations(madsdata::Associative{K, V})"},{"location":"mads/#readobservationsmadsdataassociativek-v-obsids","text":"Read observations source: Mads/src/MadsIO.jl:493","title":"readobservations(madsdata::Associative{K, V},  obsids)"},{"location":"mads/#readobservations_cmadsmadsdataassociativek-v","text":"Read observations using C Mads library source: Mads/src/MadsIO.jl:526","title":"readobservations_cmads(madsdata::Associative{K, V})"},{"location":"mads/#readyamlpredictionsfilenameabstractstring","text":"Read MADS model predictions from a YAML file filename source: Mads/src/MadsYAML.jl:125","title":"readyamlpredictions(filename::AbstractString)"},{"location":"mads/#regexs2obsobsline-regexs-obsnames-getparamhere","text":"Get observations for a set of regular expressions source: Mads/src/MadsIO.jl:447","title":"regexs2obs(obsline,  regexs,  obsnames,  getparamhere)"},{"location":"mads/#resetmodelruns","text":"Reset the model runs count to be equal to zero source: Mads/src/MadsHelpers.jl:42","title":"resetmodelruns()"},{"location":"mads/#residualsmadsdataassociativek-v-resultsarrayt-1","text":"Compute residuals source: Mads/src/MadsLM.jl:5","title":"residuals(madsdata::Associative{K, V},  results::Array{T, 1})"},{"location":"mads/#reweighsamplesmadsdataassociativek-v-predictionsarrayt-n-oldllhoodsarrayt-1","text":"Reweigh samples using importance sampling -- returns a vector of log-likelihoods after reweighing Arguments: madsdata : MADS problem dictionary predictions : the model predictions for each of the samples oldllhoods : the log likelihoods of the parameters in the old distribution Returns: newllhoods : vector of log-likelihoods after reweighing source: Mads/src/MadsSA.jl:75","title":"reweighsamples(madsdata::Associative{K, V},  predictions::Array{T, N},  oldllhoods::Array{T, 1})"},{"location":"mads/#rosenbrockxarrayt-1","text":"Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:17","title":"rosenbrock(x::Array{T, 1})"},{"location":"mads/#rosenbrock2_gradient_lmx","text":"Parameter gradients of the Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:7","title":"rosenbrock2_gradient_lm(x)"},{"location":"mads/#rosenbrock2_lmx","text":"Rosenbrock test function (more difficult to solve) source: Mads/src/MadsTestFunctions.jl:2","title":"rosenbrock2_lm(x)"},{"location":"mads/#rosenbrock_gradientxarrayt-1-storagearrayt-1","text":"Parameter gradients of the Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:27","title":"rosenbrock_gradient!(x::Array{T, 1},  storage::Array{T, 1})"},{"location":"mads/#rosenbrock_gradient_lmxarrayt-1","text":"Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separetely) source: Mads/src/MadsTestFunctions.jl:33","title":"rosenbrock_gradient_lm(x::Array{T, 1})"},{"location":"mads/#rosenbrock_hessianxarrayt-1-storagearrayt-2","text":"Parameter Hessian of the Rosenbrock test function source: Mads/src/MadsTestFunctions.jl:43","title":"rosenbrock_hessian!(x::Array{T, 1},  storage::Array{T, 2})"},{"location":"mads/#rosenbrock_lmxarrayt-1","text":"Rosenbrock test function for LM optimization (returns the 2 components separetely) source: Mads/src/MadsTestFunctions.jl:22","title":"rosenbrock_lm(x::Array{T, 1})"},{"location":"mads/#saltellimadsdataassociativek-v","text":"Saltelli sensitivity analysis Arguments: madsdata : MADS problem dictionary N : number of samples seed : initial random seed restartdir : directory where files will be stored containing model results for fast simulation restarts parallel : set to true if the model runs should be performed in parallel source: Mads/src/MadsSA.jl:376","title":"saltelli(madsdata::Associative{K, V})"},{"location":"mads/#saltellibrutemadsdataassociativek-v","text":"Saltelli sensitivity analysis (brute force) Arguments: madsdata : MADS problem dictionary N : number of samples seed : initial random seed source: Mads/src/MadsSA.jl:206","title":"saltellibrute(madsdata::Associative{K, V})"},{"location":"mads/#saltelliprintresults2madsdataassociativek-v-resultsassociativek-v","text":"Print sensitivity analysis results (method 2) source: Mads/src/MadsSA.jl:727","title":"saltelliprintresults2(madsdata::Associative{K, V},  results::Associative{K, V})"},{"location":"mads/#savemadsfilemadsdataassociativek-v","text":"Save MADS problem dictionary madsdata in MADS input file filename Mads.savemadsfile(madsdata) Mads.savemadsfile(madsdata, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true) Arguments: madsdata : Mads problem dictionary parameters : Dictinary with parameters (optional) filename : input file name (e.g. input_file_name.mads ) julia : if true use Julia JSON module to save explicit : if true ignores MADS YAML file modifications and rereads the original input file source: Mads/src/MadsIO.jl:158","title":"savemadsfile(madsdata::Associative{K, V})"},{"location":"mads/#savemadsfilemadsdataassociativek-v-filenameabstractstring","text":"Save MADS problem dictionary madsdata in MADS input file filename Mads.savemadsfile(madsdata) Mads.savemadsfile(madsdata, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\") Mads.savemadsfile(madsdata, parameters, \"test.mads\", explicit=true) Arguments: madsdata : Mads problem dictionary parameters : Dictinary with parameters (optional) filename : input file name (e.g. input_file_name.mads ) julia : if true use Julia JSON module to save explicit : if true ignores MADS YAML file modifications and rereads the original input file source: Mads/src/MadsIO.jl:158","title":"savemadsfile(madsdata::Associative{K, V},  filename::AbstractString)"},{"location":"mads/#savemcmcresultschainarrayt-n-filenameabstractstring","text":"Save MCMC chain in a file source: Mads/src/MadsMC.jl:63","title":"savemcmcresults(chain::Array{T, N},  filename::AbstractString)"},{"location":"mads/#scatterplotsamplesmadsdata-samplesarrayt-2-filenameabstractstring","text":"Create histogram/scatter plots of model parameter samples Arguments: madsdata : MADS problem dictionary samples : matrix with model parameters filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:299","title":"scatterplotsamples(madsdata,  samples::Array{T, 2},  filename::AbstractString)"},{"location":"mads/#searchdirkeyregex","text":"Get files in the current directory or in a directory defined by path matching pattern key which can be a string or regular expression Mads.searchdir(key) Mads.searchdir(key; path = \".\") Arguments: key : matching pattern for Mads input files (string or regular expression accepted) path : search directory for the mads input files Returns: filename : an array with file names matching the pattern in the specified directory source: Mads/src/MadsIO.jl:345","title":"searchdir(key::Regex)"},{"location":"mads/#setallparamsoffmadsdataassociativek-v","text":"Set all parameters OFF source: Mads/src/MadsParameters.jl:332","title":"setallparamsoff!(madsdata::Associative{K, V})"},{"location":"mads/#setallparamsonmadsdataassociativek-v","text":"Set all parameters ON source: Mads/src/MadsParameters.jl:324","title":"setallparamson!(madsdata::Associative{K, V})"},{"location":"mads/#setdebuglevellevelint64","text":"Set MADS debug level source: Mads/src/MadsHelpers.jl:32","title":"setdebuglevel(level::Int64)"},{"location":"mads/#setdirdirasciistring","text":"Set the working directory (for parallel environments) @everywhere Mads.setdir() @everywhere Mads.setdir(\"/home/monty\") source: Mads/src/MadsParallel.jl:191","title":"setdir(dir::ASCIIString)"},{"location":"mads/#setdynamicmodelmadsdataassociativek-v-ffunction","text":"Set Dynamic Model for MADS model calls using internal Julia functions source: Mads/src/MadsMisc.jl:87","title":"setdynamicmodel(madsdata::Associative{K, V},  f::Function)"},{"location":"mads/#setplotfileformatfilename-format","text":"Set image file format based on the filename extension, or sets the filename extension based on the requested format . The default format is SVG . PNG , PDF , ESP , and PS are also supported. setplotfileformat(filename, format) Arguments: filename : output file name format : output plot format ( png , pdf , etc.) Returns: filename : output file name format : output plot format ( png , pdf , etc.) source: Mads/src/MadsPlot.jl:23","title":"setplotfileformat(filename,  format)"},{"location":"mads/#setmadsinputfilefilenameabstractstring","text":"Set a default MADS input file Mads.setmadsinputfile(filename) Arguments: filename : input file name (e.g. input_file_name.mads ) source: Mads/src/MadsIO.jl:225","title":"setmadsinputfile(filename::AbstractString)"},{"location":"mads/#setobservationtargetsmadsdataassociativek-v-predictionsassociativek-v","text":"Set observations (calibration targets) in the MADS problem dictionary based on a predictions dictionary source: Mads/src/MadsObservations.jl:337","title":"setobservationtargets!(madsdata::Associative{K, V},  predictions::Associative{K, V})"},{"location":"mads/#setobstimemadsdataassociativek-v-separatorabstractstring","text":"Set observation time based on the observation name in the MADS problem dictionary Usage: Mads.setobstime!(madsdata, separator) Mads.setobstime!(madsdata, regex) Arguments: madsdata : MADS problem dictionary separator : string to separator regex : regular expression to match Examples: Mads.setobstime!(madsdata, \"_t\") Mads.setobstime!(madsdata, r\"[A-x]*_t([0-9,.]+)\") source: Mads/src/MadsObservations.jl:185","title":"setobstime!(madsdata::Associative{K, V},  separator::AbstractString)"},{"location":"mads/#setobsweightsmadsdataassociativek-v-valuenumber","text":"Set observation weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:209","title":"setobsweights!(madsdata::Associative{K, V},  value::Number)"},{"location":"mads/#setparamoffmadsdataassociativek-v-parameterkey","text":"Set a specific parameter with a key parameterkey OFF source: Mads/src/MadsParameters.jl:345","title":"setparamoff!(madsdata::Associative{K, V},  parameterkey)"},{"location":"mads/#setparamonmadsdataassociativek-v-parameterkeyabstractstring","text":"Set a specific parameter with a key parameterkey ON source: Mads/src/MadsParameters.jl:340","title":"setparamon!(madsdata::Associative{K, V},  parameterkey::AbstractString)"},{"location":"mads/#setparamsdistnormalmadsdataassociativek-v-mean-stddev","text":"Set normal parameter distributions for all the model parameters in the MADS problem dictionary Mads.setparamsdistnormal!(madsdata, mean, stddev) Arguments: madsdata : MADS problem dictionary mean : array with the mean values stddev : array with the standard deviation values source: Mads/src/MadsParameters.jl:360","title":"setparamsdistnormal!(madsdata::Associative{K, V},  mean,  stddev)"},{"location":"mads/#setparamsdistuniformmadsdataassociativek-v-min-max","text":"Set uniform parameter distributions for all the model parameters in the MADS problem dictionary Mads.setparamsdistuniform!(madsdata, min, max) Arguments: madsdata : MADS problem dictionary min : array with the minimum values max : array with the maximum values source: Mads/src/MadsParameters.jl:378","title":"setparamsdistuniform!(madsdata::Associative{K, V},  min,  max)"},{"location":"mads/#setparamsinitmadsdataassociativek-v-paramdictassociativek-v","text":"Set initial parameter guesses in the MADS dictionary Mads.setparamsinit!(madsdata, paramdict) Arguments: madsdata : MADS problem dictionary paramdict : dictionary with initial model parameter values source: Mads/src/MadsParameters.jl:271","title":"setparamsinit!(madsdata::Associative{K, V},  paramdict::Associative{K, V})"},{"location":"mads/#setprocs","text":"Set the available processors based on environmental variables. Supports SLURM only at the moment. Usage: Mads.setprocs() Mads.setprocs(ntasks_per_node=4) Mads.setprocs(ntasks_per_node=32, mads_servers=true) Mads.setprocs(ntasks_per_node=64, machinenames=[\"madsmax\", \"madszem\"]) Mads.setprocs(ntasks_per_node=64, mads_servers=true, exename=\"/home/monty/bin/julia\", dir=\"/home/monty\") Optional arguments: ntasks_per_node : number of parallel tasks per node machinenames : array with machines names to invoked dir : common directory shared by all the jobs exename : location of the julia executable (the same version of julia is needed on all the workers) mads_servers : if true use MADS servers (LANL only) quiet : suppress output [default true ] test : test the servers and connect to each one ones at a time [default false ] source: Mads/src/MadsParallel.jl:64","title":"setprocs()"},{"location":"mads/#setprocsnpint64-ntint64","text":"Set the number of processors to np and the number of threads to nt Usage: Mads.setprocs(4) Mads.setprocs(4, 8) Arguments: np : number of processors nt : number of threads source: Mads/src/MadsParallel.jl:20","title":"setprocs(np::Int64,  nt::Int64)"},{"location":"mads/#setseedseednumber","text":"Set current seed source: Mads/src/MadsSA.jl:11","title":"setseed(seed::Number)"},{"location":"mads/#settargetoassociativek-v-target","text":"Set observation target source: Mads/src/MadsObservations.jl:153","title":"settarget!(o::Associative{K, V},  target)"},{"location":"mads/#settimeoassociativek-v-time","text":"Set observation time source: Mads/src/MadsObservations.jl:105","title":"settime!(o::Associative{K, V},  time)"},{"location":"mads/#setverbositylevellevelint64","text":"Set MADS verbosity level source: Mads/src/MadsHelpers.jl:37","title":"setverbositylevel(level::Int64)"},{"location":"mads/#setweightoassociativek-v-weight","text":"Set observation weight source: Mads/src/MadsObservations.jl:129","title":"setweight!(o::Associative{K, V},  weight)"},{"location":"mads/#setwellweightsmadsdataassociativek-v-valuenumber","text":"Set well weights in the MADS problem dictionary source: Mads/src/MadsObservations.jl:236","title":"setwellweights!(madsdata::Associative{K, V},  value::Number)"},{"location":"mads/#showallparametersmadsdataassociativek-v","text":"Show all parameters in the MADS problem dictionary source: Mads/src/MadsParameters.jl:448","title":"showallparameters(madsdata::Associative{K, V})"},{"location":"mads/#showobservationsmadsdataassociativek-v","text":"Show observations in the MADS problem dictionary source: Mads/src/MadsObservations.jl:272","title":"showobservations(madsdata::Associative{K, V})"},{"location":"mads/#showparametersmadsdataassociativek-v","text":"Show optimizable parameters in the MADS problem dictionary source: Mads/src/MadsParameters.jl:417","title":"showparameters(madsdata::Associative{K, V})"},{"location":"mads/#sinetransformsineparamsarrayt-1-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1","text":"Sine transformation of model parameters source: Mads/src/MadsSine.jl:10","title":"sinetransform(sineparams::Array{T, 1},  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"},{"location":"mads/#sinetransformfunctionffunction-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1","text":"Sine transformation of a function source: Mads/src/MadsSine.jl:17","title":"sinetransformfunction(f::Function,  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"},{"location":"mads/#sinetransformgradientgfunction-lowerboundsarrayt-1-upperboundsarrayt-1-indexlogtransformedarrayt-1","text":"Sine transformation of a gradient function source: Mads/src/MadsSine.jl:25","title":"sinetransformgradient(g::Function,  lowerbounds::Array{T, 1},  upperbounds::Array{T, 1},  indexlogtransformed::Array{T, 1})"},{"location":"mads/#spaghettiplotmadsdataassociativek-v-number_of_samplesint64","text":"Generate a combined spaghetti plot for the selected ( type != null ) model parameter Mads.spaghettiplot(madsdata, paramdictarray; filename=\"\", keyword = \"\", format=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Mads.spaghettiplot(madsdata, obsmdictarray; filename=\"\", keyword = \"\", format=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Mads.spaghettiplot(madsdata, number_of_samples; filename=\"\", keyword = \"\", format=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Arguments: madsdata : MADS problem dictionary paramdictarray : parameter dictionary array containing the data arrays to be plotted obsdictarray : observation dictionary array containing the data arrays to be plotted number_of_samples : number of samples filename : output file name used to output the produced plots keyword : keyword to be added in the file name used to output the produced plots (if filename is not defined) format : output plot format ( png , pdf , etc.) xtitle : x axis title ytitle : y axis title obs_plot_dots : plot observation as dots ( true [default] or false ) seed : initial random seed Returns: none Dumps: Image file with a spaghetti plot ( <mads_rootname>-<keyword>-<number_of_samples>-spaghetti.<default_image_extension> ) source: Mads/src/MadsPlot.jl:788","title":"spaghettiplot(madsdata::Associative{K, V},  number_of_samples::Int64)"},{"location":"mads/#spaghettiplotsmadsdataassociativek-v-number_of_samplesint64","text":"Generate separate spaghetti plots for each selected ( type != null ) model parameter Mads.spaghettiplots(madsdata, paramdictarray; format=\"\", keyword=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Mads.spaghettiplots(madsdata, number_of_samples; format=\"\", keyword=\"\", xtitle=\"X\", ytitle=\"Y\", obs_plot_dots=true) Arguments: madsdata : MADS problem dictionary paramdictarray : parameter dictionary containing the data arrays to be plotted number_of_samples : number of samples keyword : keyword to be added in the file name used to output the produced plots format : output plot format ( png , pdf , etc.) xtitle : x axis title ytitle : y axis title obs_plot_dots : plot observation as dots ( true [default] or false ) seed : initial random seed Dumps: A series of image files with spaghetti plots for each selected ( type != null ) model parameter ( <mads_rootname>-<keyword>-<param_key>-<number_of_samples>-spaghetti.<default_image_extension> ) source: Mads/src/MadsPlot.jl:643","title":"spaghettiplots(madsdata::Associative{K, V},  number_of_samples::Int64)"},{"location":"mads/#sprintfargs","text":"Convert @sprintf macro into sprintf function source: Mads/src/MadsParallel.jl:39","title":"sprintf(args...)"},{"location":"mads/#status","text":"Status of the Mads modules source: Mads/src/MadsPublish.jl:17","title":"status()"},{"location":"mads/#tag","text":"Tag the Mads modules with a default argument :patch source: Mads/src/MadsPublish.jl:67","title":"tag()"},{"location":"mads/#tagsymsymbol","text":"Tag the Mads modules with a default argument :patch source: Mads/src/MadsPublish.jl:67","title":"tag(sym::Symbol)"},{"location":"mads/#test","text":"Execute Mads tests (the tests will be in parallel if processors are defined) source: Mads/src/MadsTest.jl:21","title":"test()"},{"location":"mads/#testtestmod","text":"Execute Mads tests (the tests will be in parallel if processors are defined) source: Mads/src/MadsTest.jl:21","title":"test(testmod)"},{"location":"mads/#testj","text":"Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) source: Mads/src/MadsTest.jl:2","title":"testj()"},{"location":"mads/#testjcoveragebool","text":"Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) source: Mads/src/MadsTest.jl:2","title":"testj(coverage::Bool)"},{"location":"mads/#void2nandictassociativek-v","text":"Convert Void's into NaN's in a dictionary source: Mads/src/MadsSA.jl:762","title":"void2nan!(dict::Associative{K, V})"},{"location":"mads/#weightedstatssamplesarrayt-n-llhoodsarrayt-1","text":"Get weighted mean and variance samples Arguments: samples : array of samples llhoods : vector of log-likelihoods Returns: mean : vector of sample means var : vector of sample variances source: Mads/src/MadsSA.jl:134","title":"weightedstats(samples::Array{T, N},  llhoods::Array{T, 1})"},{"location":"mads/#welloffmadsdata-wellnameabstractstring","text":"Turn off a specific well in the MADS problem dictionary source: Mads/src/MadsObservations.jl:385","title":"welloff!(madsdata,  wellname::AbstractString)"},{"location":"mads/#wellonmadsdataassociativek-v-wellnameabstractstring","text":"Turn on a specific well in the MADS problem dictionary source: Mads/src/MadsObservations.jl:361","title":"wellon!(madsdata::Associative{K, V},  wellname::AbstractString)"},{"location":"mads/#wells2observationsmadsdataassociativek-v","text":"Convert Wells class to Observations class in the MADS problem dictionary source: Mads/src/MadsObservations.jl:401","title":"wells2observations!(madsdata::Associative{K, V})"},{"location":"mads/#writeparametersmadsdataassociativek-v","text":"Write initial parameters source: Mads/src/MadsIO.jl:386","title":"writeparameters(madsdata::Associative{K, V})"},{"location":"mads/#writeparametersmadsdataassociativek-v-parameters","text":"Write parameters source: Mads/src/MadsIO.jl:393","title":"writeparameters(madsdata::Associative{K, V},  parameters)"},{"location":"mads/#writeparametersviatemplateparameters-templatefilename-outputfilename","text":"Write parameters via MADS template ( templatefilename ) to an output file ( outputfilename ) source: Mads/src/MadsIO.jl:357","title":"writeparametersviatemplate(parameters,  templatefilename,  outputfilename)"},{"location":"model_coupling/","text":"Model Coupling MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : Julia model defined in an external Julia file. MADS model : Julia model defined in an external Julia file using information from the MADS problem dictionary. Julia model : Julia model defined internally (already in the Julia workspace). Command : external model executed by an UNIX command or script. Julia command : external model executed by a Julia script. The Julia script is defined in an external Julia file. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov) ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file","title":"Model Coupling"},{"location":"model_coupling/#model-coupling","text":"MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : Julia model defined in an external Julia file. MADS model : Julia model defined in an external Julia file using information from the MADS problem dictionary. Julia model : Julia model defined internally (already in the Julia workspace). Command : external model executed by an UNIX command or script. Julia command : external model executed by a Julia script. The Julia script is defined in an external Julia file. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at mads.lanl.gov](http://mads.lanl.gov) ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file","title":"Model Coupling"},{"location":"test/","text":"Testing & Verification MADS includes a series of test and verification problems. These are also provided as examples how to run the code and perform various types of data and model analyses. All the MADS examples can be found in the MADS repository: github . All the test and verification problems can be executed using: import Mads Mads . test ()","title":"Testing & Verification"},{"location":"test/#testing-verification","text":"MADS includes a series of test and verification problems. These are also provided as examples how to run the code and perform various types of data and model analyses. All the MADS examples can be found in the MADS repository: github . All the test and verification problems can be executed using: import Mads Mads . test ()","title":"Testing &amp; Verification"},{"location":"Examples/","text":"Mads Examples Setup Decision Analysis Information Gap Decision Analysis Uncertainty Quantification Machine Learning Contaminant Source Identification Blind Source Separation Contaminant Transport ODE Analysis","title":"Examples Links"},{"location":"Examples/#mads-examples","text":"","title":"Mads Examples"},{"location":"Examples/#setup","text":"","title":"Setup"},{"location":"Examples/#decision-analysis","text":"","title":"Decision Analysis"},{"location":"Examples/#information-gap-decision-analysis","text":"","title":"Information Gap Decision Analysis"},{"location":"Examples/#uncertainty-quantification","text":"","title":"Uncertainty Quantification"},{"location":"Examples/#machine-learning","text":"","title":"Machine Learning"},{"location":"Examples/#contaminant-source-identification","text":"","title":"Contaminant Source Identification"},{"location":"Examples/#blind-source-separation","text":"","title":"Blind Source Separation"},{"location":"Examples/#contaminant-transport","text":"","title":"Contaminant Transport"},{"location":"Examples/#ode-analysis","text":"","title":"ODE Analysis"},{"location":"Examples/setup/","text":"MADS examples In Julia REPL, do the following commands: import Mads To explore getting-started instructions, execute: Mads . help () There are various examples located in the examples directory of the Mads repository. For example, execute include ( Mads . madsdir * \"/../examples/contamination/contamination.jl\" ) to perform various example analyses related to groundwater contaminant transport, or execute include ( Mads . madsdir * \"/../examples/bigdt/bigdt.jl\" ) to perform Bayesian Information Gap Decision Theory (BIG-DT) analysis.","title":"Setup"},{"location":"Examples/setup/#mads-examples","text":"In Julia REPL, do the following commands: import Mads To explore getting-started instructions, execute: Mads . help () There are various examples located in the examples directory of the Mads repository. For example, execute include ( Mads . madsdir * \"/../examples/contamination/contamination.jl\" ) to perform various example analyses related to groundwater contaminant transport, or execute include ( Mads . madsdir * \"/../examples/bigdt/bigdt.jl\" ) to perform Bayesian Information Gap Decision Theory (BIG-DT) analysis.","title":"MADS examples"},{"location":"Examples/bayesian_sampling/","text":"Bayesian Sampling All the figures below are generated using examples/bayesian_sampling/bayesian_sampling.jl . Model setup Contaminant source (orange rectangle) 3 monitoring wells Prior spaghetti plots Spaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells. Joint spaghetti plots All model parameters are changed simultaneously within their prior uncertainty ranges. Individual spaghetti plots A single model parameter is changed at a time. Source $x$ location Source $y$ location Source size along $x$ axis Source size along $y$ axis Source release time $t_0$ Source termination time $t_1$ Model calibration match Bayesian sampling results Posterior spaghetti plots Spaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells. Joint spaghetti plots All model parameters are changed simultaneously within their prior uncertainty ranges. Individual spaghetti plots A single model parameter is changed at a time. Note that only the posterior uncertainties in the source release time ($t_0$) and the source termination time ($t_1$) are producing large impact in the model predictions. Source $x$ location (all the 1000 model predictions are overlapping) Source $y$ location (all the 1000 model predictions are overlapping Source size along $x$ axis (all the 1000 model predictions are overlapping Source size along $y$ axis (all the 1000 model predictions are overlapping Source release time $t_0$ Source termination time $t_1$","title":"Uncertainty Quantification"},{"location":"Examples/bayesian_sampling/#bayesian-sampling","text":"All the figures below are generated using examples/bayesian_sampling/bayesian_sampling.jl .","title":"Bayesian Sampling"},{"location":"Examples/bayesian_sampling/#model-setup","text":"Contaminant source (orange rectangle) 3 monitoring wells","title":"Model setup"},{"location":"Examples/bayesian_sampling/#prior-spaghetti-plots","text":"Spaghetti plots of 100 model runs representing the prior model prediction uncertainties at the 3 monitoring wells.","title":"Prior spaghetti plots"},{"location":"Examples/bayesian_sampling/#joint-spaghetti-plots","text":"All model parameters are changed simultaneously within their prior uncertainty ranges.","title":"Joint spaghetti plots"},{"location":"Examples/bayesian_sampling/#individual-spaghetti-plots","text":"A single model parameter is changed at a time. Source $x$ location Source $y$ location Source size along $x$ axis Source size along $y$ axis Source release time $t_0$ Source termination time $t_1$","title":"Individual spaghetti plots"},{"location":"Examples/bayesian_sampling/#model-calibration-match","text":"","title":"Model calibration match"},{"location":"Examples/bayesian_sampling/#bayesian-sampling-results","text":"","title":"Bayesian sampling results"},{"location":"Examples/bayesian_sampling/#posterior-spaghetti-plots","text":"Spaghetti plots of 1000 model predictions representing the posterior model uncertainties at the 3 monitoring wells.","title":"Posterior spaghetti plots"},{"location":"Examples/bayesian_sampling/#joint-spaghetti-plots_1","text":"All model parameters are changed simultaneously within their prior uncertainty ranges.","title":"Joint spaghetti plots"},{"location":"Examples/bayesian_sampling/#individual-spaghetti-plots_1","text":"A single model parameter is changed at a time. Note that only the posterior uncertainties in the source release time ($t_0$) and the source termination time ($t_1$) are producing large impact in the model predictions. Source $x$ location (all the 1000 model predictions are overlapping) Source $y$ location (all the 1000 model predictions are overlapping Source size along $x$ axis (all the 1000 model predictions are overlapping Source size along $y$ axis (all the 1000 model predictions are overlapping Source release time $t_0$ Source termination time $t_1$","title":"Individual spaghetti plots"},{"location":"Examples/bigdt/source_termination/","text":"Contaminant Source Termination All the figures below are generated using examples/bigdt/source_termination.jl . Model setup Contaminant source (orange rectangle) 3 monitoring wells We know some of the properties of the source (location, shape, strength, release start time, etc.). We know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015). We do NOT know: groundwater flow velocity longitudinal dispersion of the plume Inverse modeling can be used to estimate these parameters. However, there are uncertainties with the inverse model estimates. Because of these uncertainties, we perform a decision analysis. Uncertainties Probabilistic uncertainties prior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion) measurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights) posterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions) Non-probabilistic uncertainties conceptual uncertainties in the applied model uncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance. Goal Future concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb Scenarios Terminate the source in 2015 (now) Terminate the source in 2020 (in 5 years) Terminate the source in 2025 (in 10 years) Terminate the source in 2030 (in 15 years) Task Evaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods. Method Bayesian Information Gap Decision Theory (BIG-DT). O'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089. Grasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80. O'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621. O'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256. Horizon (level) of uncertainty Horizon (level) of uncertainty is a non-negative index that defines (1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and (2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation. The likelihood functions differ in the variance. The set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty. The set of variances is $$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$ where \\(\u03c3^2_0\\) is the nominal variance (500; the nominal standard deviation \\(\u03c3_0\\) is ~22) and \\(h\\) is the horizon of uncertainty. As the index increases, these sets become bigger, allowing for more possibilities. Robustness The horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached Results Figures representing robustness of model predictions: (a) Complete robustness curves (b) Zoomed-in robustness curves Discussion We nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb. This is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero. The zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties. On the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case. The sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high. Another possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25. Here we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure. In this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030. At this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness. However, it may not be enough to merit action in the short term. Based on the robustness of the model predictions the decision makers can decide the course of action. Their decision can also rely on (1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and (2) financial constraints (e.g., costs associated with the source termination over different time frames). Model Analytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl). The contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the \\(x\\) and \\(y\\) axes; the contaminant is released in 1985. The presented analyses required ~4,000 forward model runs (~1,000 per scenario). The analysis took about 5 minutes in a serial mode using the Julia version of Mads. The runs are independent and can be computed efficiently in parallel.","title":"Decision Analysis"},{"location":"Examples/bigdt/source_termination/#contaminant-source-termination","text":"All the figures below are generated using examples/bigdt/source_termination.jl .","title":"Contaminant Source Termination"},{"location":"Examples/bigdt/source_termination/#model-setup","text":"Contaminant source (orange rectangle) 3 monitoring wells We know some of the properties of the source (location, shape, strength, release start time, etc.). We know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015). We do NOT know: groundwater flow velocity longitudinal dispersion of the plume Inverse modeling can be used to estimate these parameters. However, there are uncertainties with the inverse model estimates. Because of these uncertainties, we perform a decision analysis.","title":"Model setup"},{"location":"Examples/bigdt/source_termination/#uncertainties","text":"","title":"Uncertainties"},{"location":"Examples/bigdt/source_termination/#probabilistic-uncertainties","text":"prior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion) measurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights) posterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)","title":"Probabilistic uncertainties"},{"location":"Examples/bigdt/source_termination/#non-probabilistic-uncertainties","text":"conceptual uncertainties in the applied model uncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.","title":"Non-probabilistic uncertainties"},{"location":"Examples/bigdt/source_termination/#goal","text":"Future concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb","title":"Goal"},{"location":"Examples/bigdt/source_termination/#scenarios","text":"Terminate the source in 2015 (now) Terminate the source in 2020 (in 5 years) Terminate the source in 2025 (in 10 years) Terminate the source in 2030 (in 15 years)","title":"Scenarios"},{"location":"Examples/bigdt/source_termination/#task","text":"Evaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.","title":"Task"},{"location":"Examples/bigdt/source_termination/#method","text":"Bayesian Information Gap Decision Theory (BIG-DT). O'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089. Grasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80. O'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621. O'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.","title":"Method"},{"location":"Examples/bigdt/source_termination/#horizon-level-of-uncertainty","text":"Horizon (level) of uncertainty is a non-negative index that defines (1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and (2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation. The likelihood functions differ in the variance. The set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty. The set of variances is $$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$ where \\(\u03c3^2_0\\) is the nominal variance (500; the nominal standard deviation \\(\u03c3_0\\) is ~22) and \\(h\\) is the horizon of uncertainty. As the index increases, these sets become bigger, allowing for more possibilities.","title":"Horizon (level) of uncertainty"},{"location":"Examples/bigdt/source_termination/#robustness","text":"The horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached","title":"Robustness"},{"location":"Examples/bigdt/source_termination/#results","text":"Figures representing robustness of model predictions: (a) Complete robustness curves (b) Zoomed-in robustness curves","title":"Results"},{"location":"Examples/bigdt/source_termination/#discussion","text":"We nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb. This is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero. The zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties. On the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case. The sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high. Another possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25. Here we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure. In this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030. At this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness. However, it may not be enough to merit action in the short term. Based on the robustness of the model predictions the decision makers can decide the course of action. Their decision can also rely on (1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and (2) financial constraints (e.g., costs associated with the source termination over different time frames).","title":"Discussion"},{"location":"Examples/bigdt/source_termination/#model","text":"Analytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl). The contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the \\(x\\) and \\(y\\) axes; the contaminant is released in 1985. The presented analyses required ~4,000 forward model runs (~1,000 per scenario). The analysis took about 5 minutes in a serial mode using the Julia version of Mads. The runs are independent and can be computed efficiently in parallel.","title":"Model"},{"location":"Examples/bigdt/source_termination/source_termination/","text":"Contaminant Source Termination All the figures below are generated using examples/bigdt/source_termination.jl . Model setup Contaminant source (orange rectangle) 3 monitoring wells We know some of the properties of the source (location, shape, strength, release start time, etc.). We know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015). We do NOT know: groundwater flow velocity longitudinal dispersion of the plume Inverse modeling can be used to estimate these parameters. However, there are uncertainties with the inverse model estimates. Because of these uncertainties, we perform a decision analysis. Uncertainties Probabilistic uncertainties prior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion) measurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights) posterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions) Non-probabilistic uncertainties conceptual uncertainties in the applied model uncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance. Goal Future concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb Scenarios Terminate the source in 2015 (now) Terminate the source in 2020 (in 5 years) Terminate the source in 2025 (in 10 years) Terminate the source in 2030 (in 15 years) Task Evaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods. Method Bayesian Information Gap Decision Theory (BIG-DT). O'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089. Grasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80. O'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621. O'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256. Horizon (level) of uncertainty Horizon (level) of uncertainty is a non-negative index that defines (1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and (2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation. The likelihood functions differ in the variance. The set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty. The set of variances is $$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$ where \\(\u03c3^2_0\\) is the nominal variance (500; the nominal standard deviation \\(\u03c3_0\\) is ~22) and \\(h\\) is the horizon of uncertainty. As the index increases, these sets become bigger, allowing for more possibilities. Robustness The horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached Results Figures representing robustness of model predictions: (a) Complete robustness curves (b) Zoomed-in robustness curves Discussion We nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb. This is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero. The zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties. On the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case. The sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high. Another possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25. Here we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure. In this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030. At this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness. However, it may not be enough to merit action in the short term. Based on the robustness of the model predictions the decision makers can decide the course of action. Their decision can also rely on (1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and (2) financial constraints (e.g., costs associated with the source termination over different time frames). Model Analytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl). The contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the \\(x\\) and \\(y\\) axes; the contaminant is released in 1985. The presented analyses required ~4,000 forward model runs (~1,000 per scenario). The analysis took about 5 minutes in a serial mode using the Julia version of Mads. The runs are independent and can be computed efficiently in parallel.","title":"Source termination"},{"location":"Examples/bigdt/source_termination/source_termination/#contaminant-source-termination","text":"All the figures below are generated using examples/bigdt/source_termination.jl .","title":"Contaminant Source Termination"},{"location":"Examples/bigdt/source_termination/source_termination/#model-setup","text":"Contaminant source (orange rectangle) 3 monitoring wells We know some of the properties of the source (location, shape, strength, release start time, etc.). We know concentrations observed at the 3 monitoring wells (10 annual measurements per well from 2006-2015). We do NOT know: groundwater flow velocity longitudinal dispersion of the plume Inverse modeling can be used to estimate these parameters. However, there are uncertainties with the inverse model estimates. Because of these uncertainties, we perform a decision analysis.","title":"Model setup"},{"location":"Examples/bigdt/source_termination/source_termination/#uncertainties","text":"","title":"Uncertainties"},{"location":"Examples/bigdt/source_termination/source_termination/#probabilistic-uncertainties","text":"prior probability distributions of unknown model parameters (groundwater flow velocity and longitudinal plume dispersion) measurement errors of the observed concentrations (assumed to be normally distributed with zero mean and predefined standard deviation; the standard deviation is equal to the reciprocal of observation weights) posterior probabilities distributions of unknown model parameters (informed through Bayes' theorem accounting for the impact of observed concentrations to constrain the prior belief about the model parameter uncertainties represented is prior probability distributions)","title":"Probabilistic uncertainties"},{"location":"Examples/bigdt/source_termination/source_termination/#non-probabilistic-uncertainties","text":"conceptual uncertainties in the applied model uncertainties in the statistical model characterizing the discrepancies (residuals) between model predictions and concentration observations; typically the discrepancies (residuals) are considered to be normally distributed with some fixed variance (e.g. in the case of Bayesian decision analysis); the Information-gap decision approach allows for (1) deviations from the assumption of normality or (2) deviations from the assumed variance.","title":"Non-probabilistic uncertainties"},{"location":"Examples/bigdt/source_termination/source_termination/#goal","text":"Future concentrations at monitoring well w2 (from 2016 till 2025) are less than MCL of 2500 ppb","title":"Goal"},{"location":"Examples/bigdt/source_termination/source_termination/#scenarios","text":"Terminate the source in 2015 (now) Terminate the source in 2020 (in 5 years) Terminate the source in 2025 (in 10 years) Terminate the source in 2030 (in 15 years)","title":"Scenarios"},{"location":"Examples/bigdt/source_termination/source_termination/#task","text":"Evaluate the robustness of decision scenarios to keep future concentrations at w2 being below 2500 ppb with respect to the uncertainties in the model and the statistical methods.","title":"Task"},{"location":"Examples/bigdt/source_termination/source_termination/#method","text":"Bayesian Information Gap Decision Theory (BIG-DT). O'Malley, D., and V. V. Vesselinov. \"Bayesian\u2010information\u2010gap decision theory with an application to CO2 sequestration.\" Water Resources Research 51.9 (2015): 7080-7089. Grasinger, Matthew, et al. \"Decision analysis for robust CO 2 injection: Application of Bayesian-Information-Gap Decision Theory.\" International Journal of Greenhouse Gas Control 49 (2016): 73-80. O'Malley, D., and V. V. Vesselinov. \"A combined probabilistic/nonprobabilistic decision analysis for contaminant remediation.\" SIAM/ASA Journal on Uncertainty Quantification 2.1 (2014): 607-621. O'Malley, D., and V. V. Vesselinov. \"Groundwater remediation using the information gap decision theory.\" Water Resources Research 50.1 (2014): 246-256.","title":"Method"},{"location":"Examples/bigdt/source_termination/source_termination/#horizon-level-of-uncertainty","text":"Horizon (level) of uncertainty is a non-negative index that defines (1) a set of possible concentrations at w2 (including possibilities not predicted by the model) and (2) a set of likelihood functions for the discrepancy (residual) between the model prediction and the observation. The likelihood functions differ in the variance. The set of possible concentrations at w2 is the set of concentrations whose relative error with respect to the model is less than the horizon of uncertainty. The set of variances is $$ { \u03c3^2: \\frac{\u03c3^2_0}{10^h} \u2264 \u03c3^2 \u2264 10^h \u03c3^2_0 } $$ where \\(\u03c3^2_0\\) is the nominal variance (500; the nominal standard deviation \\(\u03c3_0\\) is ~22) and \\(h\\) is the horizon of uncertainty. As the index increases, these sets become bigger, allowing for more possibilities.","title":"Horizon (level) of uncertainty"},{"location":"Examples/bigdt/source_termination/source_termination/#robustness","text":"The horizon (level) of uncertainty at which the maximum acceptable probability of failure is reached","title":"Robustness"},{"location":"Examples/bigdt/source_termination/source_termination/#results","text":"Figures representing robustness of model predictions: (a) Complete robustness curves (b) Zoomed-in robustness curves","title":"Results"},{"location":"Examples/bigdt/source_termination/source_termination/#discussion","text":"We nominally expect that terminating the source at any of these dates (2015, 2020, 2025 or 2030) will probably ensure that future concentrations at w2 remain below 2500 ppb. This is because the maximum probability of failure is almost zero when the horizon of uncertainty is zero. The zero-horizon of uncertainty estimate also corresponds to the result obtained using a Bayesian decision analysis that does not account for non-probabilistic (information gap) uncertainties. On the other hand, we are somewhat vulnerable to uncertain outcomes that deviate from our nominal case. The sharp rise in the maximum probability of failure for the 2025 and 2030 scenarios when the horizon (level) of uncertainty is approximately 0.25 (25%) indicates that, e.g., if the model is underestimating the actual concentrations at the site by 25%, the probability of failure could be quite high. Another possibility is that undesirable outcomes that appear unlikely with the nominal variance appear more likely with some another possible variance within a horizon of uncertainty of 0.25. Here we assume that the maximum acceptable probability of failure (vertical axis in the figure above) is equal to 0.05 (5%), and base our decision analysis on where each of the curves reaches 5% maximum probability of failure. In this case, the scenarios terminating the source in 2025 and 2030 produce similar robustness; i.e., if we are willing to wait until 2025, then we may as well wait until 2030. At this level of risk (5%), terminating the source in 2015 and 2020 provides additional robustness. However, it may not be enough to merit action in the short term. Based on the robustness of the model predictions the decision makers can decide the course of action. Their decision can also rely on (1) risk assessment (e.g., differences in the exposure times depending on when the source is terminated) and (2) financial constraints (e.g., costs associated with the source termination over different time frames).","title":"Discussion"},{"location":"Examples/bigdt/source_termination/source_termination/#model","text":"Analytical solution of groundwater contaminant transport assuming Fickian dispersion (coded in Mads.jl). The contaminant source is assumed to have a Gaussian shape in space; the rectangle sides in the figure at the beginning represent the standard deviation along the \\(x\\) and \\(y\\) axes; the contaminant is released in 1985. The presented analyses required ~4,000 forward model runs (~1,000 per scenario). The analysis took about 5 minutes in a serial mode using the Julia version of Mads. The runs are independent and can be computed efficiently in parallel.","title":"Model"},{"location":"Examples/blind_source_separation/","text":"Blind Source Separation using Unsupervised Machine Learning Frequently, there are several different physical phenomena or mechanisms (sources/signals) than may can cause transients in the observed data. For example, in the case of water-level (hydraulic pressure) data, these might be barometric pressure fluctuations, tidal effects, pumping effects, etc. In the case of geochemical concentrations, these may represent a mixture of different groundwater types (groundwater sources) with different initial geochemical compositions. The separation of the different signals observed in the data is important for many tasks including model conceptualization and setup. Below a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals. More complicated Blind Source Separation (BSS) analyses can be found in: Alexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research, doi: 0.1002/2013WR015037 , 50.9, 7332-7347, 2014. All the figures below are generated using examples/blind_source_separation.jl . BSS can be performed using different methods. The examples below use the Ipopt implementation in the JuMP Julia module. Sources generated using sine functions and random noise Original signals (assumed unknown) Let us assume there are 3 unknown sources (physical processes/phenomena) causing transients in some observable state variable. Let us assume the transients (signals) associated with these 3 unknown sources look like this: Mixed signals observed at 4 different monitoring locations (representing 4 different observation streams) Let us assume that the transients of the original unknown sources are observed as a mixture at 4 different monitoring locations (observation points). Let us assume that the mixtures looks like this: Reconstructed (unmixed) original signals (sources) based on the observed data We want to find the original unknown signals (sources) based on the observed mixtures above. BSS method in MADS allow us to do this. From the mixture at the 4 monitoring locations (observation points), we can reconstruct (unmix) original signals (sources) almost perfectly: Sources generated using sine functions and random noise representing a disturbance of normal pace of life Original sources (assumed unknown) Mixed sources observed at 7 different observation points Reconstructed (unmixed) original signals based on the observed data Sources generated using sine functions Original sources (assumed unknown) Mixed sources observed at 4 different observation points Reconstructed (unmixed) original signals based on the observed data Sources generated using random noise Original signals (assumed unknown) Mixed signals observed at 4 different observation points Reconstructed (unmixed) original signals based on the observed data","title":"Blind Source Separation"},{"location":"Examples/blind_source_separation/#blind-source-separation-using-unsupervised-machine-learning","text":"Frequently, there are several different physical phenomena or mechanisms (sources/signals) than may can cause transients in the observed data. For example, in the case of water-level (hydraulic pressure) data, these might be barometric pressure fluctuations, tidal effects, pumping effects, etc. In the case of geochemical concentrations, these may represent a mixture of different groundwater types (groundwater sources) with different initial geochemical compositions. The separation of the different signals observed in the data is important for many tasks including model conceptualization and setup. Below a series of synthetic examples are presented how transient data can be used to identify (separate/unmix) the original signals. More complicated Blind Source Separation (BSS) analyses can be found in: Alexandrov, Boian S., and Velimir V. Vesselinov. \"Blind source separation for groundwater pressure analysis based on nonnegative matrix factorization.\" Water Resources Research, doi: 0.1002/2013WR015037 , 50.9, 7332-7347, 2014. All the figures below are generated using examples/blind_source_separation.jl . BSS can be performed using different methods. The examples below use the Ipopt implementation in the JuMP Julia module.","title":"Blind Source Separation using Unsupervised Machine Learning"},{"location":"Examples/blind_source_separation/#sources-generated-using-sine-functions-and-random-noise","text":"","title":"Sources generated using sine functions and random noise"},{"location":"Examples/blind_source_separation/#original-signals-assumed-unknown","text":"Let us assume there are 3 unknown sources (physical processes/phenomena) causing transients in some observable state variable. Let us assume the transients (signals) associated with these 3 unknown sources look like this:","title":"Original signals (assumed unknown)"},{"location":"Examples/blind_source_separation/#mixed-signals-observed-at-4-different-monitoring-locations-representing-4-different-observation-streams","text":"Let us assume that the transients of the original unknown sources are observed as a mixture at 4 different monitoring locations (observation points). Let us assume that the mixtures looks like this:","title":"Mixed signals observed at 4 different monitoring locations (representing 4 different observation streams)"},{"location":"Examples/blind_source_separation/#reconstructed-unmixed-original-signals-sources-based-on-the-observed-data","text":"We want to find the original unknown signals (sources) based on the observed mixtures above. BSS method in MADS allow us to do this. From the mixture at the 4 monitoring locations (observation points), we can reconstruct (unmix) original signals (sources) almost perfectly:","title":"Reconstructed (unmixed) original signals (sources) based on the observed data"},{"location":"Examples/blind_source_separation/#sources-generated-using-sine-functions-and-random-noise-representing-a-disturbance-of-normal-pace-of-life","text":"","title":"Sources generated using sine functions and random noise representing a disturbance of normal pace of life"},{"location":"Examples/blind_source_separation/#original-sources-assumed-unknown","text":"","title":"Original sources (assumed unknown)"},{"location":"Examples/blind_source_separation/#mixed-sources-observed-at-7-different-observation-points","text":"","title":"Mixed sources observed at 7 different observation points"},{"location":"Examples/blind_source_separation/#reconstructed-unmixed-original-signals-based-on-the-observed-data","text":"","title":"Reconstructed (unmixed) original signals based on the observed data"},{"location":"Examples/blind_source_separation/#sources-generated-using-sine-functions","text":"","title":"Sources generated using sine functions"},{"location":"Examples/blind_source_separation/#original-sources-assumed-unknown_1","text":"","title":"Original sources (assumed unknown)"},{"location":"Examples/blind_source_separation/#mixed-sources-observed-at-4-different-observation-points","text":"","title":"Mixed sources observed at 4 different observation points"},{"location":"Examples/blind_source_separation/#reconstructed-unmixed-original-signals-based-on-the-observed-data_1","text":"","title":"Reconstructed (unmixed) original signals based on the observed data"},{"location":"Examples/blind_source_separation/#sources-generated-using-random-noise","text":"","title":"Sources generated using random noise"},{"location":"Examples/blind_source_separation/#original-signals-assumed-unknown_1","text":"","title":"Original signals (assumed unknown)"},{"location":"Examples/blind_source_separation/#mixed-signals-observed-at-4-different-observation-points","text":"","title":"Mixed signals observed at 4 different observation points"},{"location":"Examples/blind_source_separation/#reconstructed-unmixed-original-signals-based-on-the-observed-data_2","text":"","title":"Reconstructed (unmixed) original signals based on the observed data"},{"location":"Examples/contaminant_source_identification/","text":"Contaminant Source Identification using Unsupervised Machine Learning Machine Learning can be effectively applied to identify and characterize sources that are causing signals observed at monitoring points. Recently we have performed a series of analyses related to contaminant source identification. Research Papers Vesselinov, V.V., Alexandrov, B.S., O'Malley, D., Nonnegative Tensor Factorization for Contaminant Source Identification, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2018.11.010, 2018. PDF Iliev, F.L., Stanev, V.G., Vesselinov, V.V., Alexandrov, B.S., Nonnegative Matrix Factorization for identification of unknown number of sources emitting delayed signals PLoS ONE, 10.1371/journal.pone.0193974. 2018. PDF Stanev, V.G., Iliev, F.L., Hansen, S.K., Vesselinov, V.V., Alexandrov, B.S., Identification of the release sources in advection-diffusion system by machine learning combined with Green function inverse method, Applied Mathematical Modelling, 10.1016/j.apm.2018.03.006, 2018. PDF Vesselinov, V.V., O'Malley, D., Alexandrov, B.S., Contaminant source identification using semi-supervised machine learning, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2017.11.002, 2017. PDF Presentations Vesselinov, V.V., Alexandrov, B.A, Model-free Source Identification, AGU Fall Meeting, San Francisco, CA, 2014. PDF >","title":"Contaminant Source Identification"},{"location":"Examples/contaminant_source_identification/#contaminant-source-identification-using-unsupervised-machine-learning","text":"Machine Learning can be effectively applied to identify and characterize sources that are causing signals observed at monitoring points. Recently we have performed a series of analyses related to contaminant source identification.","title":"Contaminant Source Identification using Unsupervised Machine Learning"},{"location":"Examples/contaminant_source_identification/#research-papers","text":"Vesselinov, V.V., Alexandrov, B.S., O'Malley, D., Nonnegative Tensor Factorization for Contaminant Source Identification, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2018.11.010, 2018. PDF Iliev, F.L., Stanev, V.G., Vesselinov, V.V., Alexandrov, B.S., Nonnegative Matrix Factorization for identification of unknown number of sources emitting delayed signals PLoS ONE, 10.1371/journal.pone.0193974. 2018. PDF Stanev, V.G., Iliev, F.L., Hansen, S.K., Vesselinov, V.V., Alexandrov, B.S., Identification of the release sources in advection-diffusion system by machine learning combined with Green function inverse method, Applied Mathematical Modelling, 10.1016/j.apm.2018.03.006, 2018. PDF Vesselinov, V.V., O'Malley, D., Alexandrov, B.S., Contaminant source identification using semi-supervised machine learning, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2017.11.002, 2017. PDF","title":"Research Papers"},{"location":"Examples/contaminant_source_identification/#presentations","text":"Vesselinov, V.V., Alexandrov, B.A, Model-free Source Identification, AGU Fall Meeting, San Francisco, CA, 2014. PDF >","title":"Presentations"},{"location":"Examples/contamination/","text":"Analysis of contaminant transport in an aquifer All the figures below are generated using examples/contamination/contamination.jl . Model setup There are 20 monitoring wells. Each well has 2 measurement ports: shallow (3 m below the water table labeled a ) and deep (33 m below the water table labeled b ). Contaminant concentrations are observed for 50 years at each well. The contaminant transport is solved using the Anasol package in Mads. Unknown model parameters Start time of contaminant release $t_0$ End time of contaminant release $t_1$ Advective pore velocity $v$ Reduced model setup Analysis of the data from only 2 monitoring locations: w13a and w20a . Example model solution Model parameter values: $t_0 = 4$ $t_1 = 15$ $v = 40$ Model calibration A calibration match between observations and model predictions obtained by model inversion: Prior parameter uncertainties Probabilistic distributions of the prior parameter uncertainties are: $t_0$ = Uniform(0, 10) $t_1$ = Uniform(5, 40) $v$ = LogUniform(0.1, 200) Spaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data): The observation data are plotted as red dots. Bayesian global sensitivity analysis Histograms and scatter plots of the Bayesian MCMC results: Posterior parameter uncertainties Spaghetti plots representing the posterior uncertainties: Note that the parameter uncertainties are constrained by the observation data. The observation data are plotted as red dots. eFAST global sensitivity analysis eFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli & Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999). Total and main sensitivity indices over time for monitoring wells w13a and w20a: The differences between main and total effect estimates suggest correlations among the parameters. Saltelli's global sensitivity analysis Classical Saltelli's (Sobol's) global sensitivity analysis. Total and main sensitivity indices over time for monitoring wells w13a and w20a: There are differences between eFAST & Saltelli estimates. The eFAST results should be considered more reliable.","title":"Contaminant Transport"},{"location":"Examples/contamination/#analysis-of-contaminant-transport-in-an-aquifer","text":"All the figures below are generated using examples/contamination/contamination.jl .","title":"Analysis of contaminant transport in an aquifer"},{"location":"Examples/contamination/#model-setup","text":"There are 20 monitoring wells. Each well has 2 measurement ports: shallow (3 m below the water table labeled a ) and deep (33 m below the water table labeled b ). Contaminant concentrations are observed for 50 years at each well. The contaminant transport is solved using the Anasol package in Mads.","title":"Model setup"},{"location":"Examples/contamination/#unknown-model-parameters","text":"Start time of contaminant release $t_0$ End time of contaminant release $t_1$ Advective pore velocity $v$","title":"Unknown model parameters"},{"location":"Examples/contamination/#reduced-model-setup","text":"Analysis of the data from only 2 monitoring locations: w13a and w20a .","title":"Reduced model setup"},{"location":"Examples/contamination/#example-model-solution","text":"Model parameter values: $t_0 = 4$ $t_1 = 15$ $v = 40$","title":"Example model solution"},{"location":"Examples/contamination/#model-calibration","text":"A calibration match between observations and model predictions obtained by model inversion:","title":"Model calibration"},{"location":"Examples/contamination/#prior-parameter-uncertainties","text":"Probabilistic distributions of the prior parameter uncertainties are: $t_0$ = Uniform(0, 10) $t_1$ = Uniform(5, 40) $v$ = LogUniform(0.1, 200) Spaghetti plots representing the prior uncertainties (note that the uncertainties are not constrained by the observed data): The observation data are plotted as red dots.","title":"Prior parameter uncertainties"},{"location":"Examples/contamination/#bayesian-global-sensitivity-analysis","text":"Histograms and scatter plots of the Bayesian MCMC results:","title":"Bayesian global sensitivity analysis"},{"location":"Examples/contamination/#posterior-parameter-uncertainties","text":"Spaghetti plots representing the posterior uncertainties: Note that the parameter uncertainties are constrained by the observation data. The observation data are plotted as red dots.","title":"Posterior parameter uncertainties"},{"location":"Examples/contamination/#efast-global-sensitivity-analysis","text":"eFAST has proven to be one of the most reliable methods among the existing variance-based techniques for quantification of parameter sensitivity (Saltelli, 2004; Saltelli & Bolado, 1998; Saltelli et al., 2000; Saltelli et al., 1999). Total and main sensitivity indices over time for monitoring wells w13a and w20a: The differences between main and total effect estimates suggest correlations among the parameters.","title":"eFAST global sensitivity analysis"},{"location":"Examples/contamination/#saltellis-global-sensitivity-analysis","text":"Classical Saltelli's (Sobol's) global sensitivity analysis. Total and main sensitivity indices over time for monitoring wells w13a and w20a: There are differences between eFAST & Saltelli estimates. The eFAST results should be considered more reliable.","title":"Saltelli's global sensitivity analysis"},{"location":"Examples/infogap/","text":"Information Gap Analysis All the figures below are generated using examples/model_analysis/infogap.jl . Setup There are 4 uncertain observations at times t = [1,2,3,4] There are 4 possible models that can be applied to match the data y(t) = a * t + c y(t) = a * t^(1.1) + b * t + c y(t) = a * t^n + b * t + c y(t) = a * exp(t * n) + b * t + c There are 4 unknown model parameters with uniform prior probability functions: a = Uniform(-10, 10) b = Uniform(-10, 10) c = Uniform(-5, 5) n = Uniform(-3, 3) The model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated The horizon of information gap uncertainty h is applied to define the acceptable deviations in the 4 uncertain observations. Infogap in model y(t) = a * t + c Infogap in model y(t) = a * t^(1.1) + b * t + c Infogap in model y(t) = a * t^n + b * t + c Infogap in model y(t) = a * exp(t * n) + b * t + c Opportuneness and Robustness of the 4 models","title":"Information Gap Decision Analysis"},{"location":"Examples/infogap/#information-gap-analysis","text":"All the figures below are generated using examples/model_analysis/infogap.jl .","title":"Information Gap Analysis"},{"location":"Examples/infogap/#setup","text":"There are 4 uncertain observations at times t = [1,2,3,4] There are 4 possible models that can be applied to match the data y(t) = a * t + c y(t) = a * t^(1.1) + b * t + c y(t) = a * t^n + b * t + c y(t) = a * exp(t * n) + b * t + c There are 4 unknown model parameters with uniform prior probability functions: a = Uniform(-10, 10) b = Uniform(-10, 10) c = Uniform(-5, 5) n = Uniform(-3, 3) The model prediction for t = 5 is unknown and information gap prediction uncertainty needs to be evaluated The horizon of information gap uncertainty h is applied to define the acceptable deviations in the 4 uncertain observations.","title":"Setup"},{"location":"Examples/infogap/#infogap-in-model-yt-a-t-c","text":"","title":"Infogap in model y(t) = a * t + c"},{"location":"Examples/infogap/#infogap-in-model-yt-a-t11-b-t-c","text":"","title":"Infogap in model y(t) = a * t^(1.1) + b * t + c"},{"location":"Examples/infogap/#infogap-in-model-yt-a-tn-b-t-c","text":"","title":"Infogap in model y(t) = a * t^n + b * t + c"},{"location":"Examples/infogap/#infogap-in-model-yt-a-expt-n-b-t-c","text":"","title":"Infogap in model y(t) = a * exp(t * n) + b * t + c"},{"location":"Examples/infogap/#opportuneness-and-robustness-of-the-4-models","text":"","title":"Opportuneness and Robustness of the 4 models"},{"location":"Examples/machine_learning/","text":"Unsupervised Machine Learning Unsupervised Machine Learning methods are powerful data-analytics tools capable of extracting important features hidden (latent) in large datasets without any prior information. The physical interpretation of the extracted features is done a posteriori by subject-matter experts. In contrast, supervised Machine Learning methods are trained based on large labeled datasets The labeling is performed a priori by subject-matter experts. The process of deep Machine Learning commonly includes both unsupervised and supervised techniques LeCun, Bengio, and Hinton 2015 where unsupervised Machine Learning are applied to facilitate the process of data labeling. The integration of large datasets, powerful computational capabilities, and affordable data storage has resulted in the widespread use of Machine Learning in science, technology, and industry. Recently we have developed a novel unsupervised Machine Learning methods. The methods are based on Matrix/Tensor Decomposition (Factorization) coupled with sparsity and nonnegativity constraints. The method reveals the temporal and spatial footprints of the extracted features. Tensor Decomposition A novel unsupervised Machine Learning based on Tensor Decomposition coupled with sparsity and nonnegativity constraints has been applied to extract the temporal and spatial footprints of the features in multi-dimensional datasets in the form of multi-way arrays or tensors. The decomposition (factorization) of a given tensor \\(X\\) is typically performed by minimization of the Frobenius norm: $$ \\frac{1}{2} ||X-G \\otimes_1 A_1 \\otimes_2 A_2 \\dots \\otimes_n A_n ||_F^2 $$ where: \\(n\\) is the dimensionality of the tensor \\(X\\) \\(G\\) is a \"mixing\" core tensor \\(A_1,A_2,\\dots,A_n\\) are \"feature\u201d factors (in the form of vectors or matrices) \\(\\otimes\\) is a tensor product applied to fold-in factors \\(A_1,A_2,\\dots,A_n\\) in each of the tensor dimensions The product \\(G \\otimes_1 A_1 \\otimes_2 A_2 \\dots \\otimes_n A_n\\) is an estimate of \\(X\\) (\\(X_{est}\\)). The reconstruction error \\(X - X_{est}\\) is expected to be random uncorrelated noise. \\(G\\) is a \\(n\\)-dimensional tensor with a size and a rank lower than the size and the rank of \\(X\\). The size of tensor \\(G\\) defines the number of extracted features (signals) in each of the tensor dimensions. The factor matrices \\(A_1,A_2,\\dots,A_n\\) represent the extracted features (signals) in each of the tensor dimensions. The number of matrix columns equals the number of features in the respective tensor dimensions (if there is only 1 column, the particular factor is a vector). The number of matrix rows in each factor (matrix) \\(A_i\\) equals the size of tensor X in the respective dimensions. The elements of tensor \\(G\\) define how the features along each dimension (\\(A_1,A_2,\\dots,A_n\\)) are mixed to represent the original tensor \\(X\\). The Tensor Decomposition is commonly performed using Candecomp/Parafac (CP) or Tucker decomposition models. Some of the decomposition models can theoretically lead to unique solutions under specific, albeit rarely satisfied, noiseless conditions. When these conditions are not satisfied, additional minimization constraints can assist the factorization. A popular approach is to add sparsity and nonnegative constraints. Sparsity constraints on the elements of G reduce the number of features and their mixing (by having as many zero entries as possible). Nonnegativity enforces parts-based representation of the original data which also allows the Tensor Decomposition results for \\(G\\) and \\(A_1,A_2,\\dots,A_n\\) to be easily interrelated Cichocki et al, 2009 . Algorithms called NMFk and NTFk for Matrix/Tensor Factorization (Decomposition) coupled with sparsity and nonnegativity constraints custom k-means clustering has been developed in Julia NMFk and NTFk codes will be available soon as open-source on GitHub . Research Papers Vesselinov, V.V., Mudunuru, M., Karra, S., O'Malley, D., Alexandrov, B.S., Unsupervised Machine Learning Based on Non-Negative Tensor Factorization for Analyzing Reactive-Mixing, Journal of Computational Physics, 2018 (in review). PDF Vesselinov, V.V., Alexandrov, B.S., O'Malley, D., Nonnegative Tensor Factorization for Contaminant Source Identification, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2018.11.010, 2018. PDF O'Malley, D., Vesselinov, V.V., Alexandrov, B.S., Alexandrov, L.B., Nonnegative/binary matrix factorization with a D-Wave quantum annealer, PNAS, 2018, (accepted). PDF Stanev, V., Vesselinov, V.V., Kusne, A.G., Antoszewski, G., Takeuchi,I., Alexandrov, B.A., Unsupervised Phase Mapping of X-ray Diffraction Data by Nonnegative Matrix Factorization Integrated with Custom Clustering, Nature Computational Materials, 10.1038/s41524-018-0099-2, 2018. PDF Iliev, F.L., Stanev, V.G., Vesselinov, V.V., Alexandrov, B.S., Nonnegative Matrix Factorization for identification of unknown number of sources emitting delayed signals PLoS ONE, 10.1371/journal.pone.0193974. 2018. PDF Stanev, V.G., Iliev, F.L., Hansen, S.K., Vesselinov, V.V., Alexandrov, B.S., Identification of the release sources in advection-diffusion system by machine learning combined with Green function inverse method, Applied Mathematical Modelling, 10.1016/j.apm.2018.03.006, 2018. PDF Vesselinov, V.V., O'Malley, D., Alexandrov, B.S., Contaminant source identification using semi-supervised machine learning, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2017.11.002, 2017. PDF Alexandrov, B., Vesselinov, V.V., Blind source separation for groundwater level analysis based on non-negative matrix factorization, Water Resources Research, doi: 10.1002/2013WR015037, 2014. PDF For more information, visit monty.gitlab.io Presentations Vesselinov, V.V., Novel Machine Learning Methods for Extraction of Features Characterizing Datasets and Models, AGU Fall meeting, Washington D.C., 2018. PDF Vesselinov, V.V., Novel Machine Learning Methods for Extraction of Features Characterizing Complex Datasets and Models, Recent Advances in Machine Learning and Computational Methods for Geoscience, Institute for Mathematics and its Applications, University of Minnesota, 2018. PDF O'Malley, D., Vesselinov, V.V., Alexandrov, B.S., Alexandrov, L.B., Nonnegative/binary matrix factorization with a D-Wave quantum annealer PDF Vesselinov, V.V., Alexandrov, B.A, Model-free Source Identification, AGU Fall Meeting, San Francisco, CA, 2014. PDF > For more information, visit monty.gitlab.io Presentations are also available at slideshare.net Videos Vesselinov, V.V., Novel Machine Learning Methods for Extraction of Features Characterizing Complex Datasets and Models, Recent Advances in Machine Learning and Computational Methods for Geoscience, Institute for Mathematics and its Applications, University of Minnesota, 2018. Examples Blind Source Separation (i.e. Feature Extraction) Contaminant Source Identification","title":"Machine Learning"},{"location":"Examples/machine_learning/#unsupervised-machine-learning","text":"Unsupervised Machine Learning methods are powerful data-analytics tools capable of extracting important features hidden (latent) in large datasets without any prior information. The physical interpretation of the extracted features is done a posteriori by subject-matter experts. In contrast, supervised Machine Learning methods are trained based on large labeled datasets The labeling is performed a priori by subject-matter experts. The process of deep Machine Learning commonly includes both unsupervised and supervised techniques LeCun, Bengio, and Hinton 2015 where unsupervised Machine Learning are applied to facilitate the process of data labeling. The integration of large datasets, powerful computational capabilities, and affordable data storage has resulted in the widespread use of Machine Learning in science, technology, and industry. Recently we have developed a novel unsupervised Machine Learning methods. The methods are based on Matrix/Tensor Decomposition (Factorization) coupled with sparsity and nonnegativity constraints. The method reveals the temporal and spatial footprints of the extracted features.","title":"Unsupervised Machine Learning"},{"location":"Examples/machine_learning/#tensor-decomposition","text":"A novel unsupervised Machine Learning based on Tensor Decomposition coupled with sparsity and nonnegativity constraints has been applied to extract the temporal and spatial footprints of the features in multi-dimensional datasets in the form of multi-way arrays or tensors. The decomposition (factorization) of a given tensor \\(X\\) is typically performed by minimization of the Frobenius norm: $$ \\frac{1}{2} ||X-G \\otimes_1 A_1 \\otimes_2 A_2 \\dots \\otimes_n A_n ||_F^2 $$ where: \\(n\\) is the dimensionality of the tensor \\(X\\) \\(G\\) is a \"mixing\" core tensor \\(A_1,A_2,\\dots,A_n\\) are \"feature\u201d factors (in the form of vectors or matrices) \\(\\otimes\\) is a tensor product applied to fold-in factors \\(A_1,A_2,\\dots,A_n\\) in each of the tensor dimensions The product \\(G \\otimes_1 A_1 \\otimes_2 A_2 \\dots \\otimes_n A_n\\) is an estimate of \\(X\\) (\\(X_{est}\\)). The reconstruction error \\(X - X_{est}\\) is expected to be random uncorrelated noise. \\(G\\) is a \\(n\\)-dimensional tensor with a size and a rank lower than the size and the rank of \\(X\\). The size of tensor \\(G\\) defines the number of extracted features (signals) in each of the tensor dimensions. The factor matrices \\(A_1,A_2,\\dots,A_n\\) represent the extracted features (signals) in each of the tensor dimensions. The number of matrix columns equals the number of features in the respective tensor dimensions (if there is only 1 column, the particular factor is a vector). The number of matrix rows in each factor (matrix) \\(A_i\\) equals the size of tensor X in the respective dimensions. The elements of tensor \\(G\\) define how the features along each dimension (\\(A_1,A_2,\\dots,A_n\\)) are mixed to represent the original tensor \\(X\\). The Tensor Decomposition is commonly performed using Candecomp/Parafac (CP) or Tucker decomposition models. Some of the decomposition models can theoretically lead to unique solutions under specific, albeit rarely satisfied, noiseless conditions. When these conditions are not satisfied, additional minimization constraints can assist the factorization. A popular approach is to add sparsity and nonnegative constraints. Sparsity constraints on the elements of G reduce the number of features and their mixing (by having as many zero entries as possible). Nonnegativity enforces parts-based representation of the original data which also allows the Tensor Decomposition results for \\(G\\) and \\(A_1,A_2,\\dots,A_n\\) to be easily interrelated Cichocki et al, 2009 . Algorithms called NMFk and NTFk for Matrix/Tensor Factorization (Decomposition) coupled with sparsity and nonnegativity constraints custom k-means clustering has been developed in Julia NMFk and NTFk codes will be available soon as open-source on GitHub .","title":"Tensor Decomposition"},{"location":"Examples/machine_learning/#research-papers","text":"Vesselinov, V.V., Mudunuru, M., Karra, S., O'Malley, D., Alexandrov, B.S., Unsupervised Machine Learning Based on Non-Negative Tensor Factorization for Analyzing Reactive-Mixing, Journal of Computational Physics, 2018 (in review). PDF Vesselinov, V.V., Alexandrov, B.S., O'Malley, D., Nonnegative Tensor Factorization for Contaminant Source Identification, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2018.11.010, 2018. PDF O'Malley, D., Vesselinov, V.V., Alexandrov, B.S., Alexandrov, L.B., Nonnegative/binary matrix factorization with a D-Wave quantum annealer, PNAS, 2018, (accepted). PDF Stanev, V., Vesselinov, V.V., Kusne, A.G., Antoszewski, G., Takeuchi,I., Alexandrov, B.A., Unsupervised Phase Mapping of X-ray Diffraction Data by Nonnegative Matrix Factorization Integrated with Custom Clustering, Nature Computational Materials, 10.1038/s41524-018-0099-2, 2018. PDF Iliev, F.L., Stanev, V.G., Vesselinov, V.V., Alexandrov, B.S., Nonnegative Matrix Factorization for identification of unknown number of sources emitting delayed signals PLoS ONE, 10.1371/journal.pone.0193974. 2018. PDF Stanev, V.G., Iliev, F.L., Hansen, S.K., Vesselinov, V.V., Alexandrov, B.S., Identification of the release sources in advection-diffusion system by machine learning combined with Green function inverse method, Applied Mathematical Modelling, 10.1016/j.apm.2018.03.006, 2018. PDF Vesselinov, V.V., O'Malley, D., Alexandrov, B.S., Contaminant source identification using semi-supervised machine learning, Journal of Contaminant Hydrology, 10.1016/j.jconhyd.2017.11.002, 2017. PDF Alexandrov, B., Vesselinov, V.V., Blind source separation for groundwater level analysis based on non-negative matrix factorization, Water Resources Research, doi: 10.1002/2013WR015037, 2014. PDF For more information, visit monty.gitlab.io","title":"Research Papers"},{"location":"Examples/machine_learning/#presentations","text":"Vesselinov, V.V., Novel Machine Learning Methods for Extraction of Features Characterizing Datasets and Models, AGU Fall meeting, Washington D.C., 2018. PDF Vesselinov, V.V., Novel Machine Learning Methods for Extraction of Features Characterizing Complex Datasets and Models, Recent Advances in Machine Learning and Computational Methods for Geoscience, Institute for Mathematics and its Applications, University of Minnesota, 2018. PDF O'Malley, D., Vesselinov, V.V., Alexandrov, B.S., Alexandrov, L.B., Nonnegative/binary matrix factorization with a D-Wave quantum annealer PDF Vesselinov, V.V., Alexandrov, B.A, Model-free Source Identification, AGU Fall Meeting, San Francisco, CA, 2014. PDF > For more information, visit monty.gitlab.io Presentations are also available at slideshare.net","title":"Presentations"},{"location":"Examples/machine_learning/#videos","text":"Vesselinov, V.V., Novel Machine Learning Methods for Extraction of Features Characterizing Complex Datasets and Models, Recent Advances in Machine Learning and Computational Methods for Geoscience, Institute for Mathematics and its Applications, University of Minnesota, 2018.","title":"Videos"},{"location":"Examples/machine_learning/#examples","text":"Blind Source Separation (i.e. Feature Extraction) Contaminant Source Identification","title":"Examples"},{"location":"Examples/ode/","text":"Analysis of an Ordinary Differential Equation (ODE) All the figures below are generated using examples/ode/ode.jl . ODE $$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$ Unknown ODE parameters k $\\omega$ Example ODE solution For model parameters: k = 0.1 $\\omega$ = 0.2 Local sensitivity analysis Global sensitivity analysis (using eFAST) Probabilistic distributions of the prior parameter uncertainties are: k = LogUniform(0.01, 0.1) $\\omega$ = Uniform(0.1, 0.3) Bayesian sensitivity analysis Observations Synthetic observations are applied to constrain the ODE parameters Observation errors are equal for all the sample locations with standard deviation equal to 1 ( observation weight = 1 / observation standard deviation = 1 / 1 = 1) Prior parameter uncertainties k only $\\omega$ only Both parameters The observation data are plotted as a solid black line. Histograms/scatter plots of Bayesian MCMC results Posterior parameter uncertainties Note that now the parameter uncertainties are constrained by the observation data. k only $\\omega$ only Both parameters The observation data are plotted as a solid black line.","title":"ODE Analysis"},{"location":"Examples/ode/#analysis-of-an-ordinary-differential-equation-ode","text":"All the figures below are generated using examples/ode/ode.jl .","title":"Analysis of an Ordinary Differential Equation (ODE)"},{"location":"Examples/ode/#ode","text":"$$x''(t) = -\\omega^2 * x(t) - k * x'(t)$$","title":"ODE"},{"location":"Examples/ode/#unknown-ode-parameters","text":"k $\\omega$","title":"Unknown ODE parameters"},{"location":"Examples/ode/#example-ode-solution","text":"For model parameters: k = 0.1 $\\omega$ = 0.2","title":"Example ODE solution"},{"location":"Examples/ode/#local-sensitivity-analysis","text":"","title":"Local sensitivity analysis"},{"location":"Examples/ode/#global-sensitivity-analysis-using-efast","text":"Probabilistic distributions of the prior parameter uncertainties are: k = LogUniform(0.01, 0.1) $\\omega$ = Uniform(0.1, 0.3)","title":"Global sensitivity analysis (using eFAST)"},{"location":"Examples/ode/#bayesian-sensitivity-analysis","text":"","title":"Bayesian sensitivity analysis"},{"location":"Examples/ode/#observations","text":"Synthetic observations are applied to constrain the ODE parameters Observation errors are equal for all the sample locations with standard deviation equal to 1 ( observation weight = 1 / observation standard deviation = 1 / 1 = 1)","title":"Observations"},{"location":"Examples/ode/#prior-parameter-uncertainties","text":"","title":"Prior parameter uncertainties"},{"location":"Examples/ode/#k-only","text":"","title":"k only"},{"location":"Examples/ode/#omega-only","text":"","title":"$\\omega$ only"},{"location":"Examples/ode/#both-parameters","text":"The observation data are plotted as a solid black line.","title":"Both parameters"},{"location":"Examples/ode/#histogramsscatter-plots-of-bayesian-mcmc-results","text":"","title":"Histograms/scatter plots of Bayesian MCMC results"},{"location":"Examples/ode/#posterior-parameter-uncertainties","text":"Note that now the parameter uncertainties are constrained by the observation data.","title":"Posterior parameter uncertainties"},{"location":"Examples/ode/#k-only_1","text":"","title":"k only"},{"location":"Examples/ode/#omega-only_1","text":"","title":"$\\omega$ only"},{"location":"Examples/ode/#both-parameters_1","text":"The observation data are plotted as a solid black line.","title":"Both parameters"},{"location":"Modules/AffineInvariantMCMC/","text":"AffineInvariantMCMC.jl Module AffineInvariantMCMC.jl provides functions for Bayesian sampling using Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) based on a paper by Goodman & Weare, \"Ensemble samplers with affine invariance\" Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65 , 2010. AffineInvariantMCMC.jl module functions: # AffineInvariantMCMC.flattenmcmcarray \u2014 Method . Flatten MCMC arrays source # AffineInvariantMCMC.sample \u2014 Function . Bayesian sampling using Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) AffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1) Arguments: llhood : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood()) numwalkers : number of walkers x0 : normalized initial parameters (matrix of size (length(params), numwalkers)) thinning : removal of any thinning realization a : Returns: mcmcchain : final MCMC chain llhoodvals : log likelihoods of the final samples in the chain Reference: Goodman & Weare, \"Ensemble samplers with affine invariance\", Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65, 2010. source","title":"AffineInvariantMCMC"},{"location":"Modules/AffineInvariantMCMC/#affineinvariantmcmcjl","text":"Module AffineInvariantMCMC.jl provides functions for Bayesian sampling using Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) based on a paper by Goodman & Weare, \"Ensemble samplers with affine invariance\" Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65 , 2010. AffineInvariantMCMC.jl module functions: # AffineInvariantMCMC.flattenmcmcarray \u2014 Method . Flatten MCMC arrays source # AffineInvariantMCMC.sample \u2014 Function . Bayesian sampling using Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) AffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1) Arguments: llhood : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood()) numwalkers : number of walkers x0 : normalized initial parameters (matrix of size (length(params), numwalkers)) thinning : removal of any thinning realization a : Returns: mcmcchain : final MCMC chain llhoodvals : log likelihoods of the final samples in the chain Reference: Goodman & Weare, \"Ensemble samplers with affine invariance\", Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65, 2010. source","title":"AffineInvariantMCMC.jl"},{"location":"Modules/Anasol/","text":"Anasol.jl Module Anasol.jl provides a series of analytical solutions for groundwater contaminant transport in 1, 2, and 3 dimensions. The provided solutions have: different source types - instantaneous contaminant release - continuous contaminant release with a unit flux - continuous contaminant release with a given constant flux different source shapes - constrained (within predefined limits) - distributed (assuming normal distribution) different dispersion models - classical (Fickian) - fractional Brownian different boundaries along each axis - infinite (no boundary) - reflecting - absorbing Functions have the following arguments: t : time to compute the concentration x : spatial coordinates of the point to compute the concentration x01 / x02 / x03 : contaminant source coordinates sigma01 / sigma02 / sigma01 : contaminant source sizes (if a constrained source) or standard deviations (if a distributed source) sourcestrength : user-provided function defining time-dependent source strength t0 / t1 : contaminant release times (source is released between t0 and t1 ) v1 / v2 / v3 : groundwater flow velocity components sigma1 / sigma2 / sigma3 : groundwater flow dispersion components lambda : half-life contaminant decay H1 / H2 / H3 : Hurst coefficients in the case of fractional Brownian dispersion xb1 / xb2 / xb3 : locations of the domain boundaries Anasol.jl module functions: # Anasol.documentationoff \u2014 Method . Do not make documentation Methods Anasol.documentationoff() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:236 source # Anasol.documentationon \u2014 Method . Make documentation Methods Anasol.documentationon() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:227 source # Anasol.@code \u2014 Macro . code the code macro is used to put a line of code (or a quote) onto the growing gen_code function. source # Anasol.@gen_code \u2014 Macro . gen_code rejigs the standard julia @generate macro so that it creates a code expression variable that can be extended using the @code macro. At the end of the function it automatically outputs the result. source","title":"Anasol"},{"location":"Modules/Anasol/#anasoljl","text":"Module Anasol.jl provides a series of analytical solutions for groundwater contaminant transport in 1, 2, and 3 dimensions. The provided solutions have: different source types - instantaneous contaminant release - continuous contaminant release with a unit flux - continuous contaminant release with a given constant flux different source shapes - constrained (within predefined limits) - distributed (assuming normal distribution) different dispersion models - classical (Fickian) - fractional Brownian different boundaries along each axis - infinite (no boundary) - reflecting - absorbing Functions have the following arguments: t : time to compute the concentration x : spatial coordinates of the point to compute the concentration x01 / x02 / x03 : contaminant source coordinates sigma01 / sigma02 / sigma01 : contaminant source sizes (if a constrained source) or standard deviations (if a distributed source) sourcestrength : user-provided function defining time-dependent source strength t0 / t1 : contaminant release times (source is released between t0 and t1 ) v1 / v2 / v3 : groundwater flow velocity components sigma1 / sigma2 / sigma3 : groundwater flow dispersion components lambda : half-life contaminant decay H1 / H2 / H3 : Hurst coefficients in the case of fractional Brownian dispersion xb1 / xb2 / xb3 : locations of the domain boundaries Anasol.jl module functions: # Anasol.documentationoff \u2014 Method . Do not make documentation Methods Anasol.documentationoff() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:236 source # Anasol.documentationon \u2014 Method . Make documentation Methods Anasol.documentationon() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:227 source # Anasol.@code \u2014 Macro . code the code macro is used to put a line of code (or a quote) onto the growing gen_code function. source # Anasol.@gen_code \u2014 Macro . gen_code rejigs the standard julia @generate macro so that it creates a code expression variable that can be extended using the @code macro. At the end of the function it automatically outputs the result. source","title":"Anasol.jl"},{"location":"Modules/BIGUQ/","text":"BIGUQ.jl Module BIGUQ provides advanced techniques for Uncertainty Quantification, Experimental Design and Decision Analysis based on Bayesian Information Gap Decision Theory (BIGDT). References: O\u2019Malley, D., Vesselinov, V.V., A combined probabilistic/non-probabilistic decision analysis for contaminant remediation, Journal on Uncertainty Quantification, SIAM/ASA, 10.1137/140965132, 2014. O\u2019Malley, D., Vesselinov, V.V., Bayesian-Information-Gap decision theory with an application to CO2 sequestration, Water Resources Research, 10.1002/2015WR017413, 2015. Grasinger, M., O'Malley, D., Vesselinov, V.V., Karra, S., Decision Analysis for Robust CO2 Injection: Application of Bayesian-Information-Gap Decision Theory, International Journal of Greenhouse Gas Control, 10.1016/j.ijggc.2016.02.017, 2016. Relevant examples: Information Gap Analysis Decision Analysis BIGUQ.jl module functions: # BIGUQ.getmcmcchain \u2014 Method . Get MCMC chain source # BIGUQ.makebigdts \u2014 Method . Make BIGDT analyses for each possible decision assuming that the proposed observations proposedobs are observed source # BIGUQ.makebigdts \u2014 Method . Makes BIGDT analyses for each possible decision assuming that no more observations will be made source # BIGUQ.BigDT \u2014 Type . BigOED type source # BIGUQ.BigOED \u2014 Type . BigOED type source","title":"BIGUQ"},{"location":"Modules/BIGUQ/#biguqjl","text":"Module BIGUQ provides advanced techniques for Uncertainty Quantification, Experimental Design and Decision Analysis based on Bayesian Information Gap Decision Theory (BIGDT). References: O\u2019Malley, D., Vesselinov, V.V., A combined probabilistic/non-probabilistic decision analysis for contaminant remediation, Journal on Uncertainty Quantification, SIAM/ASA, 10.1137/140965132, 2014. O\u2019Malley, D., Vesselinov, V.V., Bayesian-Information-Gap decision theory with an application to CO2 sequestration, Water Resources Research, 10.1002/2015WR017413, 2015. Grasinger, M., O'Malley, D., Vesselinov, V.V., Karra, S., Decision Analysis for Robust CO2 Injection: Application of Bayesian-Information-Gap Decision Theory, International Journal of Greenhouse Gas Control, 10.1016/j.ijggc.2016.02.017, 2016. Relevant examples: Information Gap Analysis Decision Analysis BIGUQ.jl module functions: # BIGUQ.getmcmcchain \u2014 Method . Get MCMC chain source # BIGUQ.makebigdts \u2014 Method . Make BIGDT analyses for each possible decision assuming that the proposed observations proposedobs are observed source # BIGUQ.makebigdts \u2014 Method . Makes BIGDT analyses for each possible decision assuming that no more observations will be made source # BIGUQ.BigDT \u2014 Type . BigOED type source # BIGUQ.BigOED \u2014 Type . BigOED type source","title":"BIGUQ.jl"},{"location":"Modules/DocumentFunction/","text":"DocumentFunction.jl Module provides tools for documenting Julia functions providing information about function methods, arguments and keywords. DocumentFunction.jl module functions: # DocumentFunction.documentfunction \u2014 Function . Create function documentation Arguments: f : function to be documented\" Keywords: maintext : function description argtext : dictionary with text for each argument keytext : dictionary with text for each keyword location : show/hide function location on the disk source # DocumentFunction.getfunctionarguments \u2014 Function . Get function arguments Arguments: f : function to be documented\" m : function methods source # DocumentFunction.getfunctionkeywords \u2014 Function . Get function keywords Arguments: f : function to be documented m : function methods source # DocumentFunction.getfunctionmethods \u2014 Method . Get function methods Arguments: f : function to be documented Return: array with function methods source # DocumentFunction.stdoutcaptureoff \u2014 Method . Restore STDOUT source # DocumentFunction.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader source","title":"DocumentFunction"},{"location":"Modules/DocumentFunction/#documentfunctionjl","text":"Module provides tools for documenting Julia functions providing information about function methods, arguments and keywords. DocumentFunction.jl module functions: # DocumentFunction.documentfunction \u2014 Function . Create function documentation Arguments: f : function to be documented\" Keywords: maintext : function description argtext : dictionary with text for each argument keytext : dictionary with text for each keyword location : show/hide function location on the disk source # DocumentFunction.getfunctionarguments \u2014 Function . Get function arguments Arguments: f : function to be documented\" m : function methods source # DocumentFunction.getfunctionkeywords \u2014 Function . Get function keywords Arguments: f : function to be documented m : function methods source # DocumentFunction.getfunctionmethods \u2014 Method . Get function methods Arguments: f : function to be documented Return: array with function methods source # DocumentFunction.stdoutcaptureoff \u2014 Method . Restore STDOUT source # DocumentFunction.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader source","title":"DocumentFunction.jl"},{"location":"Modules/GeostatInversion/","text":"GeostatInversion.jl This package provides methods for inverse analysis using parameter fields that are represented using geostatistical (stochastic) methods. Currently, two geostatistical methods are implemented. One is the Principal Component Geostatistical Approach (PCGA) proposed by Kitanidis & Lee . The other utilizes a Randomized Geostatistical Approach (RGA) that builds on PCGA. Randomized Geostatistical Approach (RGA) references: O'Malley, D., Le, E., Vesselinov, V.V., Fast Geostatistical Inversion using Randomized Matrix Decompositions and Sketchings for Heterogeneous Aquifer Characterization, AGU Fall Meeting, San Francisco, CA, December 14\u201318, 2015. Lin, Y, Le, E.B, O'Malley, D., Vesselinov, V.V., Bui-Thanh, T., Large-Scale Inverse Model Analyses Employing Fast Randomized Data Reduction, 2016. Two versions of PCGA are implemented in this package pcgadirect , which uses full matrices and direct solvers during iterations pcgalsqr , which uses low rank representations of the matrices combined with iterative solvers during iterations The RGA method, rga , can use either of these approaches using the keyword argument. That is, by doing rga(...; pcgafunc=GeostatInversion.pcgadirect) or rga(...; pcgafunc=GeostatInversion.pcgalsqr) . GeostatInversion.jl module functions: # GeostatInversion.getxis \u2014 Function . Get the parameter subspace that will be explored during the inverse analysis getxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing) getxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing) Arguments: samplefield : a function that takes no arguments and returns a sample of the field Q : the covariance matrix of the parameter field numfields : the number of fields that will be used to find the subspace numxis : the dimension of the subspace p : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) q : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) seed : an optional seed to use when doing the randomized matrix factorization source # GeostatInversion.pcgadirect \u2014 Method . Direct principal component geostatistical approach pcgadirect ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 , callback =( s , obs_cal ) - > nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source # GeostatInversion.pcgalsqr \u2014 Method . Iterative principal component geostatistical approach pcgalsqr ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters source # GeostatInversion.rga \u2014 Method . Randomized (principal component) geostatistical approach Example: function rga ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array { Float64 , 1 }, 1 }, R , y :: Vector , S ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1 e - 6 , pcgafunc = pcgadirect , callback = ( s , obs_cal ) -> nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector S : sketching matrix maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerance for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source Module GeostatInversion.FDDerivatives GeostatInversion.FDDerivatives module functions: # GeostatInversion.FDDerivatives.makegradient \u2014 Function . Create Gradient function source # GeostatInversion.FDDerivatives.makejacobian \u2014 Function . Create Jacobian function source Module GeostatInversion.RandMatFact GeostatInversion.RandMatFact module functions: # GeostatInversion.RandMatFact.randsvd \u2014 Method . Random SVD based on algorithm 5.1 from Halko et al. source Module GeostatInversion.FFTRF GeostatInversion.FFTRF module functions: # GeostatInversion.FFTRF.reducek \u2014 Method . Reduce k source","title":"GeostatInversion"},{"location":"Modules/GeostatInversion/#geostatinversionjl","text":"This package provides methods for inverse analysis using parameter fields that are represented using geostatistical (stochastic) methods. Currently, two geostatistical methods are implemented. One is the Principal Component Geostatistical Approach (PCGA) proposed by Kitanidis & Lee . The other utilizes a Randomized Geostatistical Approach (RGA) that builds on PCGA. Randomized Geostatistical Approach (RGA) references: O'Malley, D., Le, E., Vesselinov, V.V., Fast Geostatistical Inversion using Randomized Matrix Decompositions and Sketchings for Heterogeneous Aquifer Characterization, AGU Fall Meeting, San Francisco, CA, December 14\u201318, 2015. Lin, Y, Le, E.B, O'Malley, D., Vesselinov, V.V., Bui-Thanh, T., Large-Scale Inverse Model Analyses Employing Fast Randomized Data Reduction, 2016. Two versions of PCGA are implemented in this package pcgadirect , which uses full matrices and direct solvers during iterations pcgalsqr , which uses low rank representations of the matrices combined with iterative solvers during iterations The RGA method, rga , can use either of these approaches using the keyword argument. That is, by doing rga(...; pcgafunc=GeostatInversion.pcgadirect) or rga(...; pcgafunc=GeostatInversion.pcgalsqr) . GeostatInversion.jl module functions: # GeostatInversion.getxis \u2014 Function . Get the parameter subspace that will be explored during the inverse analysis getxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing) getxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing) Arguments: samplefield : a function that takes no arguments and returns a sample of the field Q : the covariance matrix of the parameter field numfields : the number of fields that will be used to find the subspace numxis : the dimension of the subspace p : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) q : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) seed : an optional seed to use when doing the randomized matrix factorization source # GeostatInversion.pcgadirect \u2014 Method . Direct principal component geostatistical approach pcgadirect ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 , callback =( s , obs_cal ) - > nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source # GeostatInversion.pcgalsqr \u2014 Method . Iterative principal component geostatistical approach pcgalsqr ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters source # GeostatInversion.rga \u2014 Method . Randomized (principal component) geostatistical approach Example: function rga ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array { Float64 , 1 }, 1 }, R , y :: Vector , S ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1 e - 6 , pcgafunc = pcgadirect , callback = ( s , obs_cal ) -> nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector S : sketching matrix maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerance for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source","title":"GeostatInversion.jl"},{"location":"Modules/GeostatInversion/#module-geostatinversionfdderivatives","text":"GeostatInversion.FDDerivatives module functions: # GeostatInversion.FDDerivatives.makegradient \u2014 Function . Create Gradient function source # GeostatInversion.FDDerivatives.makejacobian \u2014 Function . Create Jacobian function source","title":"Module GeostatInversion.FDDerivatives"},{"location":"Modules/GeostatInversion/#module-geostatinversionrandmatfact","text":"GeostatInversion.RandMatFact module functions: # GeostatInversion.RandMatFact.randsvd \u2014 Method . Random SVD based on algorithm 5.1 from Halko et al. source","title":"Module GeostatInversion.RandMatFact"},{"location":"Modules/GeostatInversion/#module-geostatinversionfftrf","text":"GeostatInversion.FFTRF module functions: # GeostatInversion.FFTRF.reducek \u2014 Method . Reduce k source","title":"Module GeostatInversion.FFTRF"},{"location":"Modules/Mads/","text":"Mads.jl MADS (Model Analysis & Decision Support) Mads.jl is MADS main module. Mads.jl module functions: # Mads.MFlm \u2014 Method . Matrix Factorization using Levenberg Marquardt Methods Mads.MFlm(X::Array{T,2}, range::Range{Int64}; kw...) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:103 Mads.MFlm(X::Array{T,2}, nk::Integer; method, log_W, log_H, retries, initW, initH, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, quiet) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:133 Arguments X::Array{T,2} : matrix to factorize nk::Integer : number of features to extract range::Range{Int64} Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix lambda lambda_mu log_H : log-transform H (feature) matrix[default= false ] log_W : log-transform W (weight) matrix [default= false ] maxEval maxIter maxJacobians method np_lambda quiet retries : number of solution retries [default= 1 ] show_trace tolG tolOF tolX Returns: NMF results source # Mads.NMFipopt \u2014 Function . Non-negative Matrix Factorization using JuMP/Ipopt Methods Mads.NMFipopt(X::Array{T,2} where T, nk::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Mads.NMFipopt(X::Array{T,2} where T, nk::Integer, retries::Integer; random, maxiter, maxguess, initW, initH, verbosity, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Arguments X::Array{T,2} where T : matrix to factorize nk::Integer : number of features to extract retries::Integer : number of solution retries [default= 1 ] Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix maxguess : guess about the maximum for the H (feature) matrix [default= 1 ] maxiter : maximum number of iterations [default= 100000 ] quiet : quiet [default= false ] random : random initial guesses [default= false ] verbosity : verbosity output level [default= 0 ] Returns: NMF results source # Mads.NMFm \u2014 Method . Non-negative Matrix Factorization using NMF Methods Mads.NMFm(X::Array, nk::Integer; retries, tol, maxiter) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:22 Arguments X::Array : matrix to factorize nk::Integer : number of features to extract Keywords maxiter : maximum number of iterations [default= 10000 ] retries : number of solution retries [default= 1 ] tol : solution tolerance [default= 1.0e-9 ] Returns: NMF results source # Mads.addkeyword! \u2014 Function . Add a keyword in a class within the Mads dictionary madsdata Methods Mads.addkeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:249 Mads.addkeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:253 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.addsource! \u2014 Function . Add an additional contamination source Methods Mads.addsource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Mads.addsource!(madsdata::Associative, sourceid::Int64; dict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] Keywords dict source # Mads.addsourceparameters! \u2014 Method . Add contaminant source parameters Methods Mads.addsourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:76 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellsoff! \u2014 Method . Turn off all the wells in the MADS problem dictionary Methods Mads.allwellsoff!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:607 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellson! \u2014 Method . Turn on all the wells in the MADS problem dictionary Methods Mads.allwellson!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:549 Arguments madsdata::Associative : MADS problem dictionary source # Mads.amanzi \u2014 Function . Execute Amanzi external groundwater flow and transport simulator Methods Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String, setup::String; amanzi_exe) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Arguments filename::String : amanzi input file name nproc::Int64 : number of processor to be used by Amanzi [default= Mads.nprocs_per_task_default ] observation_filename::String : Amanzi observation file name [default= \"observations.out\" ] quiet::Bool : suppress output [default= Mads.quiet ] setup::String : bash script to setup Amanzi environmental variables [default= \"source-amanzi-setup\" ] Keywords amanzi_exe : full path to the Amanzi executable source # Mads.amanzi_output_parser \u2014 Function . Parse Amanzi output provided in an external file ( filename ) Methods Mads.amanzi_output_parser(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Mads.amanzi_output_parser() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Arguments filename::String : external file name [default= \"observations.out\" ] Returns: dictionary with model observations following MADS requirements Example: Mads . amanzi_output_parser () Mads . amanzi_output_parser ( \"observations.out\" ) source # Mads.asinetransform \u2014 Function . Arcsine transformation of model parameters Methods Mads.asinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:4 Mads.asinetransform(params::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:14 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Arcsine transformation of model parameters source # Mads.bayessampling \u2014 Function . Bayesian Sampling Methods Mads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:78 Mads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:99 Arguments madsdata::Associative : MADS problem dictionary numsequences::Integer : number of sequences executed in parallel Keywords burnin : number of initial realizations before the MCMC are recorded [default= 100 ] nsteps : number of final realizations in the chain [default= 1000 ] seed : random seed [default= 0 ] thinning : removal of any thinning realization [default= 1 ] Returns: MCMC chain Examples: Mads . bayessampling ( madsdata ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) Mads . bayessampling ( madsdata , numsequences ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) source # Mads.calibrate \u2014 Method . Calibrate Mads model using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative : MADS problem dictionary Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results : save intermediate results [default= true ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.calibraterandom \u2014 Function . Calibrate with random initial guesses Methods Mads.calibraterandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Mads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords all : all model results are returned [default= false ] lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. bestresult[2].minimizer) Example: Mads . calibraterandom ( madsdata ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) Mads . calibraterandom ( madsdata , numberofsamples ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) source # Mads.calibraterandom_parallel \u2014 Function . Calibrate with random initial guesses in parallel Methods Mads.calibraterandom_parallel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Mads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : suppress output [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: vector with all objective function values boolean vector (converged/not converged) array with estimate model parameters source # Mads.captureoff \u2014 Method . Make MADS not capture Methods Mads.captureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:114 source # Mads.captureon \u2014 Method . Make MADS capture Methods Mads.captureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:105 source # Mads.checkmodeloutputdirs \u2014 Method . Check the directories where model outputs should be saved for MADS Methods Mads.checkmodeloutputdirs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:599 Arguments madsdata::Associative : MADS problem dictionary Returns: true or false source # Mads.checknodedir \u2014 Function . Check if a directory is readable Methods Mads.checknodedir(dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(node::String, dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Mads.checknodedir(node::String, dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Arguments dir::String : directory node::String : computational node name (e.g. madsmax.lanl.gov , wf03 , or 127.0.0.1 ) waittime::Float64 : wait time in seconds [default= 10 ] Returns: true if the directory is readable, false otherwise source # Mads.checkout \u2014 Function . Checkout (pull) the latest version of Mads modules Methods Mads.checkout(modulename::String; git, master, force, pull, required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Mads.checkout() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Arguments modulename::String : module name Keywords all : whether to checkout all the modules [default= false ] force : whether to overwrite local changes when checkout [default= false ] git : whether to use \"git checkout\" [default= true ] master : whether on master branch [default= false ] pull : whether to run \"git pull\" [default= true ] required : whether only checkout Mads.required modules [default= false ] source # Mads.checkparameterranges \u2014 Method . Check parameter ranges for model parameters Methods Mads.checkparameterranges(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:709 Arguments madsdata::Associative : MADS problem dictionary source # Mads.cleancoverage \u2014 Method . Remove Mads coverage files Methods Mads.cleancoverage() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:24 source # Mads.cmadsins_obs \u2014 Method . Call C MADS ins_obs() function from MADS dynamic library Methods Mads.cmadsins_obs(obsid::Array{T,1} where T, instructionfilename::String, inputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:40 Arguments inputfilename::String : input file name instructionfilename::String : instruction file name obsid::Array{T,1} where T : observation id Return: observations source # Mads.commit \u2014 Function . Commit the latest version of Mads modules in the repository Methods Mads.commit(commitmsg::String, modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Mads.commit(commitmsg::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Arguments commitmsg::String : commit message modulename::String : module name source # Mads.computemass \u2014 Function . Compute injected/reduced contaminant mass (for a given set of mads input files when \"path\" is provided) Methods Mads.computemass(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:459 Mads.computemass(madsfiles::Union{Regex, String}; time, path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:486 Arguments String} madsdata::Associative : MADS problem dictionary madsfiles::Union{Regex : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= \".\" ] time : computational time [default= 0 ] Returns: array with all the lambda values array with associated total injected mass array with associated total reduced mass Example: Mads . computemass ( madsfiles ; time = 0 , path = \".\" ) source # Mads.computeparametersensitities \u2014 Method . Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range Methods Mads.computeparametersensitities(madsdata::Associative, saresults::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:842 Arguments madsdata::Associative : MADS problem dictionary saresults::Associative : dictionary with sensitivity analysis results source # Mads.contamination \u2014 Method . Compute concentration for a point in space and time (x,y,z,t) Methods Mads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Array{T,1} where T, anasolfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:429 Arguments H::Number : Hurst coefficient for Fractional Brownian dispersion anasolfunction::Function ax::Number : dispersivity in X direction (longitudinal) ay::Number : dispersivity in Y direction (transverse horizontal) az::Number : dispersivity in Y direction (transverse vertical) dx::Number : source size (extent) in X direction dy::Number : source size (extent) in Y direction dz::Number : source size (extent) in Z direction f::Number : source mass flux lambda::Number : first-order reaction rate n::Number : porosity t0::Number : source starting time t1::Number : source termination time t::Array{T,1} where T : vector of times to compute concentration at the observation point theta::Number : groundwater flow direction vx::Number : advective transport velocity in X direction vy::Number : advective transport velocity in Y direction vz::Number : advective transport velocity in Z direction wellx::Number : observation point (well) X coordinate welly::Number : observation point (well) Y coordinate wellz::Number : observation point (well) Z coordinate x::Number : X coordinate of contaminant source location y::Number : Y coordinate of contaminant source location z::Number : Z coordinate of contaminant source location Returns: a vector of predicted concentration at (wellx, welly, wellz, t) source # Mads.copyaquifer2sourceparameters! \u2014 Method . Copy aquifer parameters to become contaminant source parameters Methods Mads.copyaquifer2sourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:115 Arguments madsdata::Associative : MADS problem dictionary source # Mads.copyright \u2014 Method . Produce MADS copyright information Methods Mads.copyright() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:18 source # Mads.create_documentation \u2014 Method . Create web documentation files for Mads functions Methods Mads.create_documentation() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:382 source # Mads.create_tests_off \u2014 Method . Turn off the generation of MADS tests (default) Methods Mads.create_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:150 source # Mads.create_tests_on \u2014 Method . Turn on the generation of MADS tests (dangerous) Methods Mads.create_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:141 source # Mads.createmadsobservations \u2014 Function . Create Mads dictionary of observations and instruction file Methods Mads.createmadsobservations(nrow::Int64, ncol::Int64; obstring, pretext, prestring, poststring, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Mads.createmadsobservations(nrow::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Arguments ncol::Int64 : number of columns [default 1] nrow::Int64 : number of rows Keywords filename : file name obstring : observation string poststring : post instruction file string prestring : pre instruction file string pretext : preamble instructions ) Returns: observation dictionary source # Mads.createmadsproblem \u2014 Function . Create a new Mads problem where the observation targets are computed based on the model predictions Methods Mads.createmadsproblem(infilename::String, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:26 Mads.createmadsproblem(madsdata::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:51 Mads.createmadsproblem(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:60 Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:56 Arguments infilename::String : input Mads file madsdata::Associative : MADS problem dictionary outfilename::String : output Mads file predictions::Associative : dictionary of model predictions Returns: new MADS problem dictionary source # Mads.createobservations! \u2014 Function . Create observations in the MADS problem dictionary based on time and observation vectors Methods Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T, observation::Array{T,1} where T; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, observation::Associative; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:488 Arguments madsdata::Associative : MADS problem dictionary observation::Array{T,1} where T : dictionary of observations observation::Associative : dictionary of observations time::Array{T,1} where T : vector of observation times Keywords logtransform : log transform observations [default= false ] weight : weight value [default= 1 ] weight_type : weight type [default= constant ] source # Mads.createtempdir \u2014 Method . Create temporary directory Methods Mads.createtempdir(tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1226 Arguments tempdirname::String : temporary directory name source # Mads.deleteNaN! \u2014 Method . Delete rows with NaN in a dataframe df Methods Mads.deleteNaN!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1068 Arguments df::DataFrames.DataFrame : dataframe source # Mads.deletekeyword! \u2014 Function . Delete a keyword in a class within the Mads dictionary madsdata Methods Mads.deletekeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:276 Mads.deletekeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:282 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.deleteoffwells! \u2014 Method . Delete all wells marked as being off in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.deletetimes! \u2014 Method . Delete all times in the MADS problem dictionary in a given list. Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.dependents \u2014 Function . Lists module dependents on a module (Mads by default) Methods Mads.dependents(modulename::String, filter::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Arguments filter::Bool : whether to filter modules [default= false ] modulename::String : module name [default= \"Mads\" ] Returns: modules that are dependents of the input module source # Mads.diff \u2014 Function . Diff the latest version of Mads modules in the repository Methods Mads.diff(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Mads.diff() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Arguments modulename::String : module name source # Mads.display \u2014 Function . Display image file Methods Mads.display(p::Compose.Context) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:71 Mads.display(p::Gadfly.Plot) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:65 Mads.display(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:8 Arguments filename::String : image file name p::Compose.Context : plotting object p::Gadfly.Plot : plotting object source # Mads.dobigdt \u2014 Method . Perform Bayesian Information Gap Decision Theory (BIG-DT) analysis Methods Mads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, maxHorizon, numlikelihoods) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:123 Arguments madsdata::Associative : MADS problem dictionary nummodelruns::Int64 : number of model runs Keywords maxHorizon : maximum info-gap horizons of uncertainty [default= 3 ] numhorizons : number of info-gap horizons of uncertainty [default= 100 ] numlikelihoods : number of Bayesian likelihoods [default= 25 ] Returns: dictionary with BIG-DT results source # Mads.dumpasciifile \u2014 Method . Dump ASCII file Methods Mads.dumpasciifile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:30 Arguments data : data to dump filename::String : ASCII file name Dumps: ASCII file with the name in \"filename\" source # Mads.dumpjsonfile \u2014 Method . Dump a JSON file Methods Mads.dumpjsonfile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:38 Arguments data : data to dump filename::String : JSON file name Dumps: JSON file with the name in \"filename\" source # Mads.dumpwelldata \u2014 Method . Dump well data from MADS problem dictionary into a ASCII file Methods Mads.dumpwelldata(madsdata::Associative, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1092 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Dumps: filename : a ASCII file source # Mads.dumpyamlfile \u2014 Method . Dump YAML file Methods Mads.dumpyamlfile(filename::String, data; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:55 Arguments data : YAML data filename::String : output file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) source # Mads.dumpyamlmadsfile \u2014 Method . Dump YAML Mads file Methods Mads.dumpyamlmadsfile(madsdata::Associative, filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:74 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Keywords julia : use julia YAML [default= false ] source # Mads.efast \u2014 Method . Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method Methods Mads.efast(md::Associative; N, M, gamma, seed, checkpointfrequency, restartdir, restart) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1111 Arguments md::Associative : MADS problem dictionary Keywords M : maximum number of harmonics [default= 6 ] N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] gamma : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) [default= 4 ] restart : save restart information [default= false ] restartdir : directory where files will be stored containing model results for the efast simulation restarts [default= \"efastcheckpoints\" ] seed : random seed [default= 0 ] source # Mads.emceesampling \u2014 Function . Bayesian sampling with Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) Methods Mads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:9 Mads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:32 Arguments madsdata::Associative : MADS problem dictionary p0::Array : initial parameters (matrix of size (number of parameters, number of walkers) or (length(Mads.getoptparamkeys(madsdata)), numwalkers)) Keywords burnin : number of initial realizations before the MCMC are recorded [default= 10 ] nsteps : number of final realizations in the chain [default= 100 ] numwalkers : number of walkers (if in parallel this can be the number of available processors; in general, the higher the number of walkers, the better the results and computational time [default= 10 ] seed : random seed [default= 0 ] sigma : a standard deviation parameter used to initialize the walkers [default= 0.01 ] thinning : removal of any thinning realization [default= 1 ] weightfactor : weight factor [default= 1.0 ] Returns: MCMC chain log likelihoods of the final samples in the chain Examples: Mads . emceesampling ( madsdata ; numwalkers = 10 , nsteps = 100 , burnin = 100 , thinning = 1 , seed = 2016 , sigma = 0.01 ) Mads . emceesampling ( madsdata , p0 ; numwalkers = 10 , nsteps = 100 , burnin = 10 , thinning = 1 , seed = 2016 ) source # Mads.estimationerror \u2014 Function . Estimate kriging error Methods Mads.estimationerror(w::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:197 Mads.estimationerror(w::Array{T,1} where T, covmat::Array{T,2} where T, covvec::Array{T,1} where T, cov0::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:204 Arguments X::Array{T,2} where T : observation matrix cov0::Number : zero-separation covariance cov::Function : spatial covariance function covmat::Array{T,2} where T : covariance matrix covvec::Array{T,1} where T : covariance vector w::Array{T,1} where T : kriging weights x0::Array{T,1} where T : estimated locations Returns: estimation kriging error source # Mads.evaluatemadsexpression \u2014 Method . Evaluate an expression string based on a parameter dictionary Methods Mads.evaluatemadsexpression(expressionstring::String, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:154 Arguments expressionstring::String : expression string parameters::Associative : parameter dictionary applied to evaluate the expression string Returns: dictionary containing the expression names as keys, and the values of the expression as values source # Mads.evaluatemadsexpressions \u2014 Method . Evaluate all the expressions in the Mads problem dictiorany based on a parameter dictionary Methods Mads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:173 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameter dictionary applied to evaluate the expression strings Returns: dictionary containing the parameter and expression names as keys, and the values of the expression as values source # Mads.expcov \u2014 Method . Exponential spatial covariance function Methods Mads.expcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:29 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.exponentialvariogram \u2014 Method . Exponential variogram Methods Mads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:82 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Exponential variogram source # Mads.filterkeys \u2014 Function . Filter dictionary keys based on a string or regular expression Methods Mads.filterkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Mads.filterkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:786 Mads.filterkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Arguments dict::Associative : dictionary key::Regex : the regular expression or string used to filter dictionary keys key::String : the regular expression or string used to filter dictionary keys source # Mads.forward \u2014 Function . Perform a forward run using the initial or provided values for the model parameters Methods Mads.forward(madsdata::Associative; all) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:6 Mads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:10 Mads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:44 Arguments madsdata::Associative : MADS problem dictionary paramarray::Array : array of model parameter values paramdict::Associative : dictionary of model parameter values Keywords all : all model results are returned [default= false ] checkpointfilename : check point file name [default=\"checkpoint_forward\"] checkpointfrequency : check point frequency for storing restart information [default= 0 ] Returns: dictionary of model predictions source # Mads.forwardgrid \u2014 Function . Perform a forward run over a 3D grid defined in madsdata using the initial or provided values for the model parameters Methods Mads.forwardgrid(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:132 Mads.forwardgrid(madsdatain::Associative, paramvalues::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:137 Arguments madsdata::Associative : MADS problem dictionary madsdatain::Associative : MADS problem dictionary paramvalues::Associative : dictionary of model parameter values Returns: 3D array with model predictions along a 3D grid source # Mads.free \u2014 Function . Free Mads modules Methods Mads.free(modulename::String; required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Mads.free() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Arguments modulename::String : module name Keywords all : free all the modules [default= false ] required : only free Mads.required modules [default= false ] source # Mads.functions \u2014 Function . List available functions in the MADS modules: Methods Mads.functions(string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions(re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:22 Mads.functions(m::Union{Module, Symbol}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Mads.functions(m::Union{Module, Symbol}, re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:40 Mads.functions(m::Union{Module, Symbol}, string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Arguments Symbol} m::Union{Module : MADS module re::Regex string::String : string to display functions with matching names Keywords quiet stdout Examples: Mads . functions () Mads . functions ( BIGUQ ) Mads . functions ( \"get\" ) Mads . functions ( Mads , \"get\" ) source # Mads.gaussiancov \u2014 Method . Gaussian spatial covariance function Methods Mads.gaussiancov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:15 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.gaussianvariogram \u2014 Method . Gaussian variogram Methods Mads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:103 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Gaussian variogram source # Mads.getcovmat \u2014 Method . Get spatial covariance matrix Methods Mads.getcovmat(X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:159 Arguments X::Array{T,2} where T : matrix with coordinates of the data points (x or y) cov::Function : spatial covariance function Returns: spatial covariance matrix source # Mads.getcovvec! \u2014 Method . Get spatial covariance vector Methods Mads.getcovvec!(covvec::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:185 Arguments X::Array{T,2} where T : matrix with coordinates of the data points cov::Function : spatial covariance function covvec::Array{T,1} where T : spatial covariance vector x0::Array{T,1} where T : vector with coordinates of the estimation points (x or y) Returns: spatial covariance vector source # Mads.getdictvalues \u2014 Function . Get dictionary values for keys based on a string or regular expression Methods Mads.getdictvalues(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Mads.getdictvalues(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:808 Mads.getdictvalues(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Arguments dict::Associative : dictionary key::Regex : the key to find value for key::String : the key to find value for source # Mads.getdir \u2014 Method . Get directory Methods Mads.getdir(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:407 Arguments filename::String : file name Returns: directory in file name Example: d = Mads . getdir ( \"a.mads\" ) # d = \".\" d = Mads . getdir ( \"test/a.mads\" ) # d = \"test\" source # Mads.getdistribution \u2014 Method . Parse parameter distribution from a string Methods Mads.getdistribution(dist::String, i::String, inputtype::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:202 Arguments dist::String : parameter distribution i::String inputtype::String : input type (parameter or observation) Returns: distribution source # Mads.getextension \u2014 Method . Get file name extension Methods Mads.getextension(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:579 Arguments filename::String : file name Returns: file name extension Example: ext = Mads . getextension ( \"a.mads\" ) # ext = \"mads\" source # Mads.getimportantsamples \u2014 Method . Get important samples Methods Mads.getimportantsamples(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:351 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: array of important samples source # Mads.getlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are log-transformed ( log ) source # Mads.getmadsdir \u2014 Method . Get the directory where currently Mads is running Methods Mads.getmadsdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:449 Example: problemdir = Mads . getmadsdir () Returns: Mads problem directory source # Mads.getmadsinputfile \u2014 Method . Get the default MADS input file set as a MADS global variable using setmadsinputfile(filename) Methods Mads.getmadsinputfile() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:364 Returns: input file name (e.g. input_file_name.mads ) source # Mads.getmadsproblemdir \u2014 Method . Get the directory where the Mads data file is located Methods Mads.getmadsproblemdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:430 Arguments madsdata::Associative : MADS problem dictionary Example: madsdata = Mads . loadmadsfile ( \"../../a.mads\" ) madsproblemdir = Mads . getmadsproblemdir ( madsdata ) where madsproblemdir = \"../../\" source # Mads.getmadsrootname \u2014 Method . Get the MADS problem root name Methods Mads.getmadsrootname(madsdata::Associative; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:386 Arguments madsdata::Associative : MADS problem dictionary Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Example: madsrootname = Mads . getmadsrootname ( madsdata ) Returns: root of file name source # Mads.getnextmadsfilename \u2014 Method . Get next mads file name Methods Mads.getnextmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:542 Arguments filename::String : file name Returns: next mads file name source # Mads.getnonlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT log-transformed ( log ) source # Mads.getnonoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT optimized ( opt ) source # Mads.getobsdist \u2014 Method . Get an array with dist values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsdist \u2014 Method . Get an array with dist values for all observations in the MADS problem dictionary source # Mads.getobskeys \u2014 Method . Get keys for all observations in the MADS problem dictionary Methods Mads.getobskeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:45 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all observations in the MADS problem dictionary source # Mads.getobslog \u2014 Method . Get an array with log values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobslog \u2014 Method . Get an array with log values for all observations in the MADS problem dictionary source # Mads.getobsmax \u2014 Method . Get an array with max values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmax \u2014 Method . Get an array with max values for all observations in the MADS problem dictionary source # Mads.getobsmin \u2014 Method . Get an array with min values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmin \u2014 Method . Get an array with min values for all observations in the MADS problem dictionary source # Mads.getobstarget \u2014 Method . Get an array with target values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstarget \u2014 Method . Get an array with target values for all observations in the MADS problem dictionary source # Mads.getobstime \u2014 Method . Get an array with time values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstime \u2014 Method . Get an array with time values for all observations in the MADS problem dictionary source # Mads.getobsweight \u2014 Method . Get an array with weight values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsweight \u2014 Method . Get an array with weight values for all observations in the MADS problem dictionary source # Mads.getoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are optimized ( opt ) source # Mads.getoptparams \u2014 Function . Get optimizable parameters Methods Mads.getoptparams(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:369 Mads.getoptparams(madsdata::Associative, parameterarray::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Mads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Arguments madsdata::Associative : MADS problem dictionary optparameterkey::Array : optimizable parameter keys parameterarray::Array : parameter array Returns: parameter array source # Mads.getparamdict \u2014 Method . Get dictionary with all parameters and their respective initial values Methods Mads.getparamdict(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:60 Arguments madsdata::Associative : MADS problem dictionary Returns: dictionary with all parameters and their respective initial values source # Mads.getparamdistributions \u2014 Method . Get probabilistic distributions of all parameters in the MADS problem dictionary Note: Probabilistic distribution of parameters can be defined only if dist or min / max model parameter fields are specified in the MADS problem dictionary madsdata . Methods Mads.getparamdistributions(madsdata::Associative; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:664 Arguments madsdata::Associative : MADS problem dictionary Keywords init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field [default= false ] Returns: probabilistic distributions source # Mads.getparamkeys \u2014 Method . Get keys of all parameters in the MADS problem dictionary Methods Mads.getparamkeys(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:44 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter Returns: array with the keys of all parameters in the MADS problem dictionary source # Mads.getparamrandom \u2014 Function . Get independent sampling of model parameters defined in the MADS problem dictionary Methods Mads.getparamrandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, paramdist, init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:404 Arguments madsdata::Associative : MADS problem dictionary numsamples::Integer : number of samples, [default= 1 ] parameterkey::String : model parameter key Keywords init_dist : if true use the distribution set for initialization in the MADS problem dictionary (defined using init_dist parameter field); if false (default) use the regular distribution set in the MADS problem dictionary (defined using dist parameter field) numsamples : number of samples paramdist : dictionary of parameter distributions Returns: generated sample source # Mads.getparamsinit \u2014 Method . Get an array with init values for parameters defined by paramkeys source # Mads.getparamsinit \u2014 Method . Get an array with init values for all the MADS model parameters source # Mads.getparamsinit_max \u2014 Function . Get an array with init_max values for parameters defined by paramkeys Methods Mads.getparamsinit_max(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:298 Mads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:264 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsinit_min \u2014 Function . Get an array with init_min values for parameters Methods Mads.getparamsinit_min(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:247 Mads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:213 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamslog \u2014 Method . Get an array with log values for parameters defined by paramkeys source # Mads.getparamslog \u2014 Method . Get an array with log values for all the MADS model parameters source # Mads.getparamslongname \u2014 Method . Get an array with longname values for parameters defined by paramkeys source # Mads.getparamslongname \u2014 Method . Get an array with longname values for all the MADS model parameters source # Mads.getparamsmax \u2014 Function . Get an array with max values for parameters defined by paramkeys Methods Mads.getparamsmax(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:196 Mads.getparamsmax(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:174 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: returns the parameter values source # Mads.getparamsmin \u2014 Function . Get an array with min values for parameters defined by paramkeys Methods Mads.getparamsmin(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:157 Mads.getparamsmin(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:135 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for parameters defined by paramkeys source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for all the MADS model parameters source # Mads.getparamsstep \u2014 Method . Get an array with step values for parameters defined by paramkeys source # Mads.getparamsstep \u2014 Method . Get an array with step values for all the MADS model parameters source # Mads.getparamstype \u2014 Method . Get an array with type values for parameters defined by paramkeys source # Mads.getparamstype \u2014 Method . Get an array with type values for all the MADS model parameters source # Mads.getprocs \u2014 Method . Get the number of processors Methods Mads.getprocs() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:28 source # Mads.getrestart \u2014 Method . Get MADS restart status Methods Mads.getrestart(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:78 Arguments madsdata::Associative : MADS problem dictionary source # Mads.getrestartdir \u2014 Function . Get the directory where Mads restarts will be stored Methods Mads.getrestartdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Mads.getrestartdir(madsdata::Associative, suffix::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Arguments madsdata::Associative : MADS problem dictionary suffix::String : Suffix to be added to the name of restart directory Returns: restart directory where reusable model results will be stored source # Mads.getrootname \u2014 Method . Get file name root Methods Mads.getrootname(filename::String; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:479 Arguments filename::String : file name Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Returns: root of file name Example: r = Mads . getrootname ( \"a.rnd.dat\" ) # r = \"a\" r = Mads . getrootname ( \"a.rnd.dat\" , first = false ) # r = \"a.rnd\" source # Mads.getseed \u2014 Method . Get and return current random seed. Methods Mads.getseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:432 source # Mads.getsindx \u2014 Method . Get sin-space dx Methods Mads.getsindx(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:314 Arguments madsdata::Associative : MADS problem dictionary Returns: sin-space dx value source # Mads.getsourcekeys \u2014 Method . Get keys of all source parameters in the MADS problem dictionary Methods Mads.getsourcekeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:78 Arguments madsdata::Associative : MADS problem dictionary Returns: array with keys of all source parameters in the MADS problem dictionary source # Mads.gettarget \u2014 Method . Get observation target Methods Mads.gettarget(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:224 Arguments o::Associative : observation data Returns: observation target source # Mads.gettargetkeys \u2014 Method . Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary Methods Mads.gettargetkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:59 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all targets in the MADS problem dictionary source # Mads.gettime \u2014 Method . Get observation time Methods Mads.gettime(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:146 Arguments o::Associative : observation data Returns: observation time (\"NaN\" it time is missing) source # Mads.getweight \u2014 Method . Get observation weight Methods Mads.getweight(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:185 Arguments o::Associative : observation data Returns: observation weight (\"NaN\" when weight is missing) source # Mads.getwelldata \u2014 Method . Get spatial and temporal data in the Wells class Methods Mads.getwelldata(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:716 Arguments madsdata::Associative : Mads problem dictionary Keywords time : get observation times [default= false ] Returns: array with spatial and temporal data in the Wells class source # Mads.getwellkeys \u2014 Method . Get keys for all wells in the MADS problem dictionary Methods Mads.getwellkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:76 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all wells in the MADS problem dictionary source # Mads.getwelltargets \u2014 Method . Methods Mads.getwelltargets(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:750 Arguments madsdata::Associative : Mads problem dictionary Returns: array with targets in the Wells class source # Mads.graphoff \u2014 Method . MADS graph output off Methods Mads.graphoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:132 source # Mads.graphon \u2014 Method . MADS graph output on Methods Mads.graphon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:123 source # Mads.haskeyword \u2014 Function . Check for a keyword in a class within the Mads dictionary madsdata Methods Mads.haskeyword(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:211 Mads.haskeyword(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:214 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary Returns: true or false Examples: - `Mads.haskeyword(madsdata, \"disp\")` ... searches in `Problem` class by default - `Mads.haskeyword(madsdata, \"Wells\", \"R-28\")` ... searches in `Wells` class for a keyword \"R-28\" source # Mads.help \u2014 Method . Produce MADS help information Methods Mads.help() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:9 source # Mads.importeverywhere \u2014 Method . Import Julia function everywhere from a file. The first function in the Julia input file is the one that will be called by Mads to perform the model simulations. Methods Mads.importeverywhere(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:373 Arguments filename::String : file name Returns: Julia function to execute the model source # Mads.indexkeys \u2014 Function . Find indexes for dictionary keys based on a string or regular expression Methods Mads.indexkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Mads.indexkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:797 Mads.indexkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Arguments dict::Associative : dictionary key::Regex : the key to find index for key::String : the key to find index for source # Mads.infogap_jump \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Mads.infogap_jump(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_jump_polinomial \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Mads.infogap_jump_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, quiet, plot, model, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] model : model id [default= 1 ] plot : activate plotting [default= false ] quiet : quiet [default= false ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] Returns: hmin, hmax source # Mads.infogap_mpb_lin \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_lin() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Mads.infogap_mpb_lin(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_mpb_polinomial \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Mads.infogap_mpb_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.ins_obs \u2014 Method . Apply Mads instruction file instructionfilename to read model output file modeloutputfilename Methods Mads.ins_obs(instructionfilename::String, modeloutputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1005 Arguments instructionfilename::String : instruction file name modeloutputfilename::String : model output file name Returns: obsdict : observation dictionary with the model outputs source # Mads.instline2regexs \u2014 Method . Convert an instruction line in the Mads instruction file into regular expressions Methods Mads.instline2regexs(instline::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:905 Arguments instline::String : instruction line Returns: regexs : regular expressions obsnames : observation names getparamhere : parameters source # Mads.invobsweights! \u2014 Method . Set inversely proportional observation weights in the MADS problem dictionary Methods Mads.invobsweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:327 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.invwellweights! \u2014 Method . Set inversely proportional well weights in the MADS problem dictionary Methods Mads.invwellweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:382 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.islog \u2014 Method . Is parameter with key parameterkey log-transformed? Methods Mads.islog(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:445 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if log-transformed, false otherwise source # Mads.isobs \u2014 Method . Is a dictionary containing all the observations Methods Mads.isobs(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:19 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary contain all the observations, false otherwise source # Mads.isopt \u2014 Method . Is parameter with key parameterkey optimizable? Methods Mads.isopt(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:425 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if optimizable, false if not source # Mads.isparam \u2014 Method . Check if a dictionary containing all the Mads model parameters Methods Mads.isparam(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:17 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary containing all the parameters, false otherwise source # Mads.ispkgavailable \u2014 Function . Checks if package is available Methods Mads.ispkgavailable(modulename::String; quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:468 Arguments modulename::String : module name Keywords quiet Returns: true or false source # Mads.krige \u2014 Method . Kriging Methods Mads.krige(x0mat::Array{T,2} where T, X::Array{T,2} where T, Z::Array{T,1} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:124 Arguments X::Array{T,2} where T : coordinates of the observation (conditioning) data Z::Array{T,1} where T : values for the observation (conditioning) data cov::Function : spatial covariance function x0mat::Array{T,2} where T : point coordinates at which to obtain kriging estimates Returns: kriging estimates at x0mat source # Mads.levenberg_marquardt \u2014 Function . Levenberg-Marquardt optimization Methods Mads.levenberg_marquardt(f::Function, g::Function, x0) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Mads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callbackiteration, callbackjacobian) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default= x->(x'*x)[1] ] x0 : initial parameter guess Keywords alwaysDoJacobian : computer Jacobian each iteration [default= false ] callbackiteration : call back function for each iteration [default= (best_x::Vector, of::Number, lambda::Number)->nothing ] callbackjacobian : call back function for each Jacobian [default= (x::Vector, J::Matrix)->nothing ] lambda : initial Levenberg-Marquardt lambda [default= eps(Float32) ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] lambda_nu : lambda multiplication factor \u03bd [default= 2 ] lambda_scale : lambda scaling factor [default= 1e-3, ] maxEval : maximum number of model evaluations [default= 1001 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] root : Mads problem root name show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function update tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] source # Mads.linktempdir \u2014 Method . Link files in a temporary directory Methods Mads.linktempdir(madsproblemdir::String, tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1252 Arguments madsproblemdir::String : Mads problem directory tempdirname::String : temporary directory name source # Mads.loadasciifile \u2014 Method . Load ASCII file Methods Mads.loadasciifile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:14 Arguments filename::String : ASCII file name Returns: data from the file source # Mads.loadbigyamlfile \u2014 Method . Load BIG YAML input file Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format julia Returns: MADS problem dictionary source # Mads.loadjsonfile \u2014 Method . Load a JSON file Methods Mads.loadjsonfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:16 Arguments filename::String : JSON file name Returns: data from the JSON file source # Mads.loadmadsfile \u2014 Method . Load MADS input file defining a MADS problem dictionary Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format : acceptable formats are yaml and json [default= yaml ] julia : if true , force using julia parsing functions; if false (default), use python parsing functions Returns: MADS problem dictionary Example: md = Mads . loadmadsfile ( \"input_file_name.mads\" ) source # Mads.loadmadsproblem \u2014 Method . Load a predefined Mads problem Methods Mads.loadmadsproblem(name::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:15 Arguments name::String : predefined MADS problem name Returns: MADS problem dictionary source # Mads.loadsaltellirestart! \u2014 Method . Load Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.loadsaltellirestart!(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:598 Arguments evalmat::Array : loaded array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts Returns: true when successfully loaded, false when it is not source # Mads.loadyamlfile \u2014 Method . Load YAML file Methods Mads.loadyamlfile(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:18 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in the yaml input file source # Mads.localsa \u2014 Method . Local sensitivity analysis based on eigen analysis of the parameter covariance matrix Methods Mads.localsa(madsdata::Associative; sinspace, keyword, filename, format, datafiles, imagefiles, par, obs, J) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:126 Arguments madsdata::Associative : MADS problem dictionary Keywords J : Jacobian matrix datafiles : flag to write data files [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) imagefiles : flag to create image files [default= Mads.graphoutput ] keyword : keyword to be added in the filename root obs : observations for the parameter set par : parameter set sinspace : apply sin transformation [default= true ] Dumps: filename : output plot file source # Mads.long_tests_off \u2014 Method . Turn off execution of long MADS tests (default) Methods Mads.long_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:168 source # Mads.long_tests_on \u2014 Method . Turn on execution of long MADS tests Methods Mads.long_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:159 source # Mads.madscores \u2014 Function . Check the number of processors on a series of servers Methods Mads.madscores(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Mads.madscores() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madscritical \u2014 Method . MADS critical error messages Methods Mads.madscritical(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:73 Arguments message::AbstractString : critical error message source # Mads.madsdebug \u2014 Function . MADS debug messages (controlled by quiet and debuglevel ) Methods Mads.madsdebug(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Mads.madsdebug(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : debug message source # Mads.madserror \u2014 Method . MADS error messages Methods Mads.madserror(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:63 Arguments message::AbstractString : error message source # Mads.madsinfo \u2014 Function . MADS information/status messages (controlled by quiet and verbositylevel`) Methods Mads.madsinfo(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Mads.madsinfo(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : information/status message source # Mads.madsload \u2014 Function . Check the load of a series of servers Methods Mads.madsload(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Mads.madsload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madsmathprogbase \u2014 Function . Define MadsModel type applied for Mads execution using MathProgBase Methods Mads.madsmathprogbase() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Mads.madsmathprogbase(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Arguments madsdata::Associative : MADS problem dictionary [default= Dict() ] source # Mads.madsoutput \u2014 Function . MADS output (controlled by quiet and verbositylevel ) Methods Mads.madsoutput(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Mads.madsoutput(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : output message source # Mads.madsup \u2014 Function . Check the uptime of a series of servers Methods Mads.madsup(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Mads.madsup() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madswarn \u2014 Method . MADS warning messages Methods Mads.madswarn(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:53 Arguments message::AbstractString : warning message source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make a conditional log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood : conditional log likelihood madsdata::Associative : MADS problem dictionary Returns: a conditional log likelihood function that accepts an array source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make array of conditional log-likelihoods Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:160 Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood madsdata::Associative : MADS problem dictionary Returns: array of conditional log-likelihoods source # Mads.makearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values Methods Mads.makearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Mads.makearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values source # Mads.makearrayloglikelihood \u2014 Method . Make a log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayloglikelihood(madsdata::Associative, loglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:127 Arguments loglikelihood : log likelihood madsdata::Associative : MADS problem dictionary Returns: a log likelihood function that accepts an array source # Mads.makebigdt! \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt!(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:35 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makebigdt \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:20 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makecomputeconcentrations \u2014 Method . Create a function to compute concentrations for all the observation points using Anasol Methods Mads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:179 Arguments madsdata::Associative : MADS problem dictionary Keywords calcpredictions : calculate zero weight predictions [default= true ] calczeroweightobs : calculate zero weight observations[default= false ] Returns: function to compute concentrations; the new function returns a dictionary of observations and model predicted concentrations Examples: computeconcentrations = Mads . makecomputeconcentrations ( madsdata ) paramkeys = Mads . getparamkeys ( madsdata ) paramdict = OrderedDict ( zip ( paramkeys , map ( key -> madsdata [ \"Parameters\" ][ key ][ \"init\" ], paramkeys ))) forward_preds = computeconcentrations ( paramdict ) source # Mads.makedixonprice \u2014 Method . Make dixon price Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price source # Mads.makedixonprice_gradient \u2014 Method . Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price gradient source # Mads.makedoublearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values, and returns an array of observations Methods Mads.makedoublearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Mads.makedoublearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values, and returning an array of observations source # Mads.makelmfunctions \u2014 Function . Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization Methods Mads.makelmfunctions(f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:100 Mads.makelmfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:121 Arguments f::Function : Function madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makelocalsafunction \u2014 Method . Make gradient function needed for local sensitivity analysis Methods Mads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:27 Arguments madsdata::Associative : MADS problem dictionary Keywords multiplycenterbyweights : multiply center by observation weights [default= true ] Returns: gradient function source # Mads.makelogprior \u2014 Method . Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata Methods Mads.makelogprior(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:396 Arguments madsdata::Associative : MADS problem dictionary Return: the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata source # Mads.makemadscommandfunction \u2014 Method . Make MADS function to execute the model defined in the input MADS problem dictionary Methods Mads.makemadscommandfunction(madsdata_in::Associative; obskeys, calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:60 Arguments madsdata_in::Associative : MADS problem dictionary Keywords calcpredictions : Calculate predictions [default= true ] calczeroweightobs : Calculate zero weight observations [default= false ] obskeys Example: Mads . makemadscommandfunction ( madsdata ) MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : execute a Julia function defined in an input Julia file. The function that should accept a parameter dictionary with all the model parameters as an input argument and should return an observation dictionary with all the model predicted observations. MADS will execute the first function defined in the file. MADS model : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Julia model : execute an internal Julia function that accepts a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Command : execute an external UNIX command or script that will execute an external model. Julia command : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an observation dictionary with model predictions. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at http://mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at http://mads.lanl.gov ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file Returns: Mads function to execute a forward model simulation source # Mads.makemadsconditionalloglikelihood \u2014 Method . Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary madsdata . Methods Mads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:419 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Return: the conditional log-likelihood source # Mads.makemadsloglikelihood \u2014 Method . Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under LogLikelihood or computed internally. Methods Mads.makemadsloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:454 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Returns: the log-likelihood for a given set of model parameters source # Mads.makemadsreusablefunction \u2014 Function . Make Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) Methods Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(paramkeys::Array{T,1} where T, obskeys::Array{T,1} where T, madsdatarestart::Union{Bool, String}, madscommandfunction::Function, restartdir::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:276 Arguments String} madscommandfunction::Function : Mads function to execute a forward model simulation madsdata::Associative : MADS problem dictionary madsdatarestart::Union{Bool : Restart type (memory/disk) or on/off status obskeys::Array{T,1} where T : Dictionary of observation keys paramkeys::Array{T,1} where T : Dictionary of parameter keys restartdir::String : Restart directory where the reusable model results are stored suffix::String : Suffix to be added to the name of restart directory Keywords usedict : Use dictionary [default= true ] Returns: Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) source # Mads.makempbfunctions \u2014 Method . Make forward model, gradient, objective functions needed for MathProgBase optimization Methods Mads.makempbfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:91 Arguments madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makepowell \u2014 Method . Make Powell test function for LM optimization Methods Mads.makepowell(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:163 Arguments n::Integer : number of observations Returns: Powell test function for LM optimization source # Mads.makepowell_gradient \u2014 Method . ake parameter gradients of the Powell test function for LM optimization Methods Mads.makepowell_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:187 Arguments n::Integer : number of observations Returns: arameter gradients of the Powell test function for LM optimization source # Mads.makerosenbrock \u2014 Method . Make Rosenbrock test function for LM optimization Methods Mads.makerosenbrock(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:118 Arguments n::Integer : number of observations Returns: Rosenbrock test function for LM optimization source # Mads.makerosenbrock_gradient \u2014 Method . Make parameter gradients of the Rosenbrock test function for LM optimization Methods Mads.makerosenbrock_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:140 Arguments n::Integer : number of observations Returns: parameter gradients of the Rosenbrock test function for LM optimization source # Mads.makerotatedhyperellipsoid \u2014 Method . Methods Mads.makerotatedhyperellipsoid(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:339 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid source # Mads.makerotatedhyperellipsoid_gradient \u2014 Method . Methods Mads.makerotatedhyperellipsoid_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:363 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid gradient source # Mads.makesphere \u2014 Method . Make sphere Methods Mads.makesphere(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:218 Arguments n::Integer : number of observations Returns: sphere source # Mads.makesphere_gradient \u2014 Method . Make sphere gradient Methods Mads.makesphere_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:239 Arguments n::Integer : number of observations Returns: sphere gradient source # Mads.makesumsquares \u2014 Method . Methods Mads.makesumsquares(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:301 Arguments n::Integer : number of observations Returns: sumsquares source # Mads.makesumsquares_gradient \u2014 Method . Methods Mads.makesumsquares_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:320 Arguments n::Integer : number of observations Returns: sumsquares gradient source # Mads.makesvrmodel \u2014 Function . Make SVR model functions (executor and cleaner) Methods Mads.makesvrmodel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Mads.makesvrmodel(madsdata::Associative, numberofsamples::Integer; check, addminmax, loadsvr, savesvr, svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of samples [default= 100 ] Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] loadsvr : load SVR models [default= false ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] seed : random seed [default= 0 ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: function performing SVR predictions function loading existing SVR models function saving SVR models function removing SVR models from the memory source # Mads.maxtorealmax! \u2014 Method . Scale down values larger than max(Float32) in a dataframe df so that Gadfly can plot the data Methods Mads.maxtorealmax!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1085 Arguments df::DataFrames.DataFrame : dataframe source # Mads.mdir \u2014 Method . Change the current directory to the Mads source dictionary Methods Mads.mdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:11 source # Mads.meshgrid \u2014 Method . Create mesh grid Methods Mads.meshgrid(x::Array{T,1} where T, y::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:402 Arguments x::Array{T,1} where T : vector of grid x coordinates y::Array{T,1} where T : vector of grid y coordinates Returns: 2D grid coordinates based on the coordinates contained in vectors x and y source # Mads.minimize \u2014 Method . Minimize Julia function using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive Returns: vector with the optimal parameter values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.mkdir \u2014 Method . Create a directory (if does not already exist) Methods Mads.mkdir(dirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1279 Arguments dirname::String : directory source # Mads.modelinformationcriteria \u2014 Function . Model section information criteria Methods Mads.modelinformationcriteria(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Mads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N} where N) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Arguments madsdata::Associative : MADS problem dictionary par::Array{Float64,N} where N : parameter array source # Mads.modobsweights! \u2014 Method . Modify (multiply) observation weights in the MADS problem dictionary Methods Mads.modobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:313 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for modifing observation weights source # Mads.modwellweights! \u2014 Method . Modify (multiply) well weights in the MADS problem dictionary Methods Mads.modwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:363 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.montecarlo \u2014 Method . Monte Carlo analysis Methods Mads.montecarlo(madsdata::Associative; N, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:188 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] filename : file name to save Monte-Carlo results Returns: parameter dictionary containing the data arrays Dumps: YAML output file with the parameter dictionary containing the data arrays Example: Mads . montecarlo ( madsdata ; N = 100 ) source # Mads.naive_get_deltax \u2014 Method . Naive Levenberg-Marquardt optimization: get the LM parameter space step Methods Mads.naive_get_deltax(JpJ::AbstractArray{Float64,2}, Jp::AbstractArray{Float64,2}, f0::Array{Float64,1}, lambda::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:246 Arguments Jp::AbstractArray{Float64,2} : Jacobian matrix times model parameters JpJ::AbstractArray{Float64,2} : Jacobian matrix times model parameters times transposed Jacobian matrix f0::Array{Float64,1} : initial model observations lambda::Number : Levenberg-Marquardt lambda Returns: the LM parameter space step source # Mads.naive_levenberg_marquardt \u2014 Function . Naive Levenberg-Marquardt optimization Methods Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, lambda, lambda_mu, np_lambda) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default=x->(x'*x)[1]] x0::Array{Float64,1} : initial parameter guess Keywords lambda : initial Levenberg-Marquardt lambda [default= 100 ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] maxEval : maximum number of model evaluations [default= 101 ] maxIter : maximum number of optimization iterations [default= 10 ] np_lambda : number of parallel lambda solves [default= 10 ] Returns: source # Mads.naive_lm_iteration \u2014 Method . Naive Levenberg-Marquardt optimization: perform LM iteration Methods Mads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:267 Arguments f0::Array{Float64,1} : initial model observations f::Function : forward model function g::Function : gradient function for the forward model lambdas::Array{Float64,1} : Levenberg-Marquardt lambdas o::Function : objective function x0::Array{Float64,1} : initial parameter guess Returns: source # Mads.noplot \u2014 Method . Disable MADS plotting Methods Mads.noplot() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:237 source # Mads.obslineismatch \u2014 Method . Match an instruction line in the Mads instruction file with model input file Methods Mads.obslineismatch(obsline::String, regexs::Array{Regex,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:954 Arguments obsline::String : instruction line regexs::Array{Regex,1} : regular expressions Returns: true or false source # Mads.of \u2014 Function . Compute objective function Methods Mads.of(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:58 Mads.of(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:51 Mads.of(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:55 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector source # Mads.paramarray2dict \u2014 Method . Convert a parameter array to a parameter dictionary of arrays Methods Mads.paramarray2dict(madsdata::Associative, array::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:242 Arguments array::Array : parameter array madsdata::Associative : MADS problem dictionary Returns: a parameter dictionary of arrays source # Mads.paramdict2array \u2014 Method . Convert a parameter dictionary of arrays to a parameter array Methods Mads.paramdict2array(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:261 Arguments dict::Associative : parameter dictionary of arrays Returns: a parameter array source # Mads.parsemadsdata! \u2014 Method . Parse loaded MADS problem dictionary Methods Mads.parsemadsdata!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:161 Arguments madsdata::Associative : MADS problem dictionary source # Mads.parsenodenames \u2014 Function . Parse string with node names defined in SLURM Methods Mads.parsenodenames(nodenames::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Mads.parsenodenames(nodenames::String, ntasks_per_node::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Arguments nodenames::String : string with node names defined in SLURM ntasks_per_node::Integer : number of parallel tasks per node [default= 1 ] Returns: vector with names of compute nodes (hosts) source # Mads.partialof \u2014 Method . Compute the sum of squared residuals for observations that match a regular expression Methods Mads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:84 Arguments madsdata::Associative : MADS problem dictionary regex::Regex : regular expression resultdict::Associative : result dictionary Returns: the sum of squared residuals for observations that match the regular expression source # Mads.pkgversion \u2014 Method . Get package version Methods Mads.pkgversion(modulestr::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:445 Arguments modulestr::String Returns: package version source # Mads.plotgrid \u2014 Function . Plot a 3D grid solution based on model predictions in array s , initial parameters, or user provided parameter values Methods Mads.plotgrid(madsdata::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:56 Mads.plotgrid(madsdata::Associative, s::Array{Float64,N} where N; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:5 Mads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:61 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : dictionary with model parameters s::Array{Float64,N} where N : model predictions array Keywords addtitle : add plot title [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) title : plot title Examples: Mads . plotgrid ( madsdata , s ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata , parameters ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) source # Mads.plotlocalsa \u2014 Method . Plot local sensitivity analysis results Methods Mads.plotlocalsa(filenameroot::String; keyword, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1219 Arguments filenameroot::String : problem file name root Keywords filename : output file name format : output plot format ( png , pdf , etc.) keyword : keyword to be added in the filename root Dumps: filename : output plot file source # Mads.plotmadsproblem \u2014 Method . Plot contaminant sources and wells defined in MADS problem dictionary Methods Mads.plotmadsproblem(madsdata::Associative; format, filename, keyword, hsize, vsize, gm) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:77 Arguments madsdata::Associative : MADS problem dictionary Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] gm hsize keyword : to be added in the filename vsize Dumps: plot of contaminant sources and wells source # Mads.plotmass \u2014 Method . Plot injected/reduced contaminant mass Methods Mads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasolPlot.jl:19 Arguments filename::String : output filename for the generated plot lambda::Array{Float64,1} : array with all the lambda values mass_injected::Array{Float64,1} : array with associated total injected mass mass_reduced::Array{Float64,1} : array with associated total reduced mass Keywords format : output plot format ( png , pdf , etc.) Dumps: image file with name filename and in specified format source # Mads.plotmatches \u2014 Function . Plot the matches between model predictions and observations Methods Mads.plotmatches(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, rx::Regex; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, dict_in::Associative; plotdata, filename, format, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:189 Mads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; plotdata, filename, format, key2time, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:165 Arguments dict_in::Associative : dictionary with model parameters madsdata::Associative : MADS problem dictionary result::Associative : dictionary with model predictions rx::Regex : regular expression to filter the outputs Keywords colors : array with plot colors display : display plots [default= false ] dpi : graph resolution [default= Mads.dpi ] filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : graph horizontal size [default= 8Gadfly.inch ] key2time : user provided function to convert observation keys to observation times linewidth : line width [default= 2Gadfly.pt ] noise : random noise magnitude [default= 0 ; no noise] notitle obs_plot_dots : plot data as dots or line [default= true ] plotdata : plot data (if false model predictions are ploted only) [default= true ] pointsize : data dot size [default= 4Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] title : graph title vsize : graph vertical size [default= 4Gadfly.inch ] xtitle : x-axis title [default= \"Time\" ] ymax ymin ytitle : y-axis title [default= \"y\" ] Dumps: plot of the matches between model predictions and observations Examples: Mads . plotmatches ( madsdata ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , dict_in ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result , r\"NO3\" ; filename = \"\" , format = \"\" ) source # Mads.plotobsSAresults \u2014 Method . Plot the sensitivity analysis results for the observations Methods Mads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle, linewidth, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:571 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results Keywords debug : [default= false ] filename : output file name filter : string or regex to plot only observations containing filter format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] keyword : to be added in the auto-generated filename linewidth : line width [default= 2Gadfly.pt ] pointsize : point size [default= 2Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] xtitle : x-axis title ytitle : y-axis title Dumps: plot of the sensitivity analysis results for the observations source # Mads.plotrobustnesscurves \u2014 Method . Plot BIG-DT robustness curves Methods Mads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGapPlot.jl:20 Arguments bigdtresults::Dict : BIG-DT results madsdata::Associative : MADS problem dictionary Keywords filename : output file name used to dump plots format : output plot format ( png , pdf , etc.) maxhoriz : maximum horizon [default= Inf ] maxprob : maximum probability [default= 1.0 ] Dumps: image file with name filename and in specified format source # Mads.plotseries \u2014 Function . Create plots of data series Methods Mads.plotseries(X::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Mads.plotseries(X::Array{T,2} where T, filename::String; format, xtitle, ytitle, title, logx, logy, keytitle, name, names, combined, hsize, vsize, linewidth, dpi, colors, xmin, xmax, ymin, ymax, xaxis) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Arguments X::Array{T,2} where T : matrix with the series data filename::String : output file name Keywords colors : colors to use in plots combined : combine plots [default= true ] dpi : graph resolution [default= Mads.dpi ] format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : horizontal size [default= 8Gadfly.inch ] keytitle linewidth : width of the lines in plot [default= 2Gadfly.pt ] logx logy name : series name [default= Sources ] names title : plot title [default= Sources ] vsize : vertical size [default= 4Gadfly.inch ] xaxis xmax xmin xtitle : x-axis title [default= X ] ymax ymin ytitle : y-axis title [default= Y ] Dumps: Plots of data series source # Mads.plotwellSAresults \u2014 Function . Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected) Methods Mads.plotwellSAresults(madsdata::Associative, result::Associative; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:436 Mads.plotwellSAresults(madsdata::Associative, result::Associative, wellname::String; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:447 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results wellname::String : well name Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] xtitle : x-axis title ytitle : y-axis title Dumps: Plot of the sensitivity analysis results for all the wells in the MADS problem dictionary source # Mads.printSAresults \u2014 Method . Print sensitivity analysis results Methods Mads.printSAresults(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:921 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printSAresults2 \u2014 Method . Print sensitivity analysis results (method 2) Methods Mads.printSAresults2(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1003 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printerrormsg \u2014 Method . Print error message Methods Mads.printerrormsg(errmsg) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:382 Arguments errmsg : error message source # Mads.printobservations \u2014 Function . Print (emit) observations in the MADS problem dictionary Methods Mads.printobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, io::IO) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, filename::String; json) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:432 Arguments filename::String : output file name io::IO : output stream madsdata::Associative : MADS problem dictionary Keywords json source # Mads.pull \u2014 Function . Pull (checkout) the latest version of Mads modules Methods Mads.pull(modulename::String; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Mads.pull() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Arguments modulename::String : module name source # Mads.push \u2014 Function . Push the latest version of Mads modules in the default remote repository Methods Mads.push(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Mads.push() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Arguments modulename::String : module name source # Mads.quietoff \u2014 Method . Make MADS not quiet Methods Mads.quietoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:96 source # Mads.quieton \u2014 Method . Make MADS quiet Methods Mads.quieton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:87 source # Mads.readasciipredictions \u2014 Method . Read MADS predictions from an ASCII file Methods Mads.readasciipredictions(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:44 Arguments filename::String : ASCII file name Returns: MADS predictions source # Mads.readmodeloutput \u2014 Method . Read model outputs saved for MADS Methods Mads.readmodeloutput(madsdata::Associative; obskeys) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:724 Arguments madsdata::Associative : MADS problem dictionary Keywords obskeys : observation keys [default=getobskeys(madsdata)] source # Mads.readobservations \u2014 Function . Read observations Methods Mads.readobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Mads.readobservations(madsdata::Associative, obskeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Arguments madsdata::Associative : MADS problem dictionary obskeys::Array{T,1} where T : observation keys [default= getobskeys(madsdata) ] Returns: dictionary with Mads observations source # Mads.readobservations_cmads \u2014 Method . Read observations using C MADS dynamic library Methods Mads.readobservations_cmads(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:15 Arguments madsdata::Associative : Mads problem dictionary Returns: observations source # Mads.readyamlpredictions \u2014 Method . Read MADS model predictions from a YAML file filename Methods Mads.readyamlpredictions(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:137 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in yaml input file source # Mads.recursivemkdir \u2014 Method . Create directories recursively (if does not already exist) Methods Mads.recursivemkdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1291 Arguments s::String Keywords filename source # Mads.recursivermdir \u2014 Method . Remove directories recursively Methods Mads.recursivermdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1325 Arguments s::String Keywords filename source # Mads.regexs2obs \u2014 Method . Get observations for a set of regular expressions Methods Mads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:975 Arguments getparamhere::Array{Bool,1} : parameters obsline::String : observation line obsnames::Array{String,1} : observation names regexs::Array{Regex,1} : regular expressions Returns: obsdict : observations source # Mads.reload \u2014 Method . Reload Mads modules Methods Mads.reload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:38 source # Mads.removesource! \u2014 Function . Remove a contamination source Methods Mads.removesource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Mads.removesource!(madsdata::Associative, sourceid::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] source # Mads.removesourceparameters! \u2014 Method . Remove contaminant source parameters Methods Mads.removesourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:136 Arguments madsdata::Associative : MADS problem dictionary source # Mads.required \u2014 Function . Lists modules required by a module (Mads by default) Methods Mads.required(modulename::String, filtermodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Arguments filtermodule::String : filter module name modulename::String : module name [default= \"Mads\" ] Returns: filtered modules source # Mads.resetmodelruns \u2014 Method . Reset the model runs count to be equal to zero Methods Mads.resetmodelruns() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:207 source # Mads.residuals \u2014 Function . Compute residuals Methods Mads.residuals(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:32 Mads.residuals(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:6 Mads.residuals(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:29 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector Returns: source # Mads.restartoff \u2014 Method . MADS restart off Methods Mads.restartoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:68 source # Mads.restarton \u2014 Method . MADS restart on Methods Mads.restarton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:59 source # Mads.reweighsamples \u2014 Method . Reweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing Methods Mads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:325 Arguments madsdata::Associative : MADS problem dictionary oldllhoods::Array{T,1} where T : the log likelihoods of the parameters in the old distribution predictions::Array : the model predictions for each of the samples Returns: vector of log-likelihoods after reweighing source # Mads.rmdir \u2014 Method . Remove directory Methods Mads.rmdir(dir::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1151 Arguments dir::String : directory to be removed Keywords path : path of the directory [default= current path ] source # Mads.rmfile \u2014 Method . Remove file Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String : file to be removed Keywords path : path of the file [default= current path ] source # Mads.rmfiles \u2014 Method . Remove files Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String Keywords path : path of the file [default= current path ] source # Mads.rmfiles_ext \u2014 Method . Remove files with extension ext Methods Mads.rmfiles_ext(ext::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1196 Arguments ext::String : extension Keywords path : path of the files to be removed [default= . ] source # Mads.rmfiles_root \u2014 Method . Remove files with root root Methods Mads.rmfiles_root(root::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1209 Arguments root::String : root Keywords path : path of the files to be removed [default= . ] source # Mads.rosenbrock \u2014 Method . Rosenbrock test function Methods Mads.rosenbrock(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:43 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.rosenbrock2_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock2_gradient_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:24 Arguments x::Array{T,1} where T : parameter vector Returns: parameter gradients source # Mads.rosenbrock2_lm \u2014 Method . Rosenbrock test function (more difficult to solve) Methods Mads.rosenbrock2_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:10 Arguments x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient! \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock_gradient!(x::Array{T,1} where T, grad::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:68 Arguments grad::Array{T,1} where T : gradient vector x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separately) Methods Mads.rosenbrock_gradient_lm(x::Array{T,1} where T; dx, center) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:85 Arguments x::Array{T,1} where T : parameter vector Keywords center : array with parameter observations at the center applied to compute numerical derivatives [default= Array{Float64}(0) ] dx : apply parameter step to compute numerical derivatives [default= false ] Returns: parameter gradients source # Mads.rosenbrock_hessian! \u2014 Method . Parameter Hessian of the Rosenbrock test function Methods Mads.rosenbrock_hessian!(x::Array{T,1} where T, hess::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:101 Arguments hess::Array{T,2} where T : Hessian matrix x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_lm \u2014 Method . Rosenbrock test function for LM optimization (returns the 2 components separately) Methods Mads.rosenbrock_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:57 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.runcmd \u2014 Function . Run external command and pipe stdout and stderr Methods Mads.runcmd(cmdstring::String; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:97 Mads.runcmd(cmd::Cmd; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:42 Arguments cmd::Cmd : command (as a julia command; e.g. ls ) cmdstring::String : command (as a string; e.g. \"ls\") Keywords pipe : [default= false ] quiet : [default= Mads.quiet ] waittime : wait time is second [default= Mads.executionwaittime ] Returns: command output command error message source # Mads.runremote \u2014 Function . Run remote command on a series of servers Methods Mads.runremote(cmd::String, nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Mads.runremote(cmd::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Arguments cmd::String : remote command nodenames::Array{String,1} : names of machines/nodes [default= madsservers ] Returns: output of running remote command source # Mads.saltelli \u2014 Method . Saltelli sensitivity analysis Methods Mads.saltelli(madsdata::Associative; N, seed, restartdir, parallel, checkpointfrequency) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:638 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] parallel : set to true if the model runs should be performed in parallel [default= false ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibrute \u2014 Method . Saltelli sensitivity analysis (brute force) Methods Mads.saltellibrute(madsdata::Associative; N, seed, restartdir) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:450 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 1000 ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibruteparallel \u2014 Method . Parallel version of saltellibrute source # Mads.saltelliparallel \u2014 Method . Parallel version of saltelli source # Mads.sampling \u2014 Method . Methods Mads.sampling(param::Array{T,1} where T, J::Array, numsamples::Number; seed, scale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:274 Arguments J::Array : Jacobian matrix numsamples::Number : Number of samples param::Array{T,1} where T : Parameter vector Keywords scale : data scaling [default= 1 ] seed : random esee [default= 0 ] Returns: generated samples (vector or array) vector of log-likelihoods source # Mads.savemadsfile \u2014 Function . Save MADS problem dictionary madsdata in MADS input file filename Methods Mads.savemadsfile(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, filename::String; julia, observations_separate, filenameobs) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Mads.savemadsfile(madsdata::Associative, parameters::Associative, filename::String; julia, explicit, observations_separate) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Arguments filename::String : input file name (e.g. input_file_name.mads ) madsdata::Associative : MADS problem dictionary parameters::Associative : Dictionary with parameters (optional) Keywords explicit : if true ignores MADS YAML file modifications and rereads the original input file [default= false ] filenameobs julia : if true use Julia JSON module to save [default= false ] observations_separate Example: Mads . savemadsfile ( madsdata ) Mads . savemadsfile ( madsdata , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" , explicit = true ) source # Mads.savemcmcresults \u2014 Method . Save MCMC chain in a file Methods Mads.savemcmcresults(chain::Array, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:143 Arguments chain::Array : MCMC chain filename::String : file name Dumps: the file containing MCMC chain source # Mads.savesaltellirestart \u2014 Method . Save Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.savesaltellirestart(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:619 Arguments evalmat::Array : saved array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts source # Mads.scatterplotsamples \u2014 Method . Create histogram/scatter plots of model parameter samples Methods Mads.scatterplotsamples(madsdata::Associative, samples::Array{T,2} where T, filename::String; format, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:401 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary samples::Array{T,2} where T : matrix with model parameters Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] pointsize : point size [default= 0.9Gadfly.mm ] Dumps: histogram/scatter plots of model parameter samples source # Mads.searchdir \u2014 Function . Get files in the current directory or in a directory defined by path matching pattern key which can be a string or regular expression Methods Mads.searchdir(key::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:764 Mads.searchdir(key::Regex; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:763 Arguments key::Regex : matching pattern for Mads input files (string or regular expression accepted) key::String : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= . ] Returns: filename : an array with file names matching the pattern in the specified directory Examples: - `Mads.searchdir(\"a\")` - `Mads.searchdir(r\"[A-B]\"; path = \".\")` - `Mads.searchdir(r\".*.cov\"; path = \".\")` source # Mads.set_nprocs_per_task \u2014 Function . Set number of processors needed for each parallel task at each node Methods Mads.set_nprocs_per_task() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Mads.set_nprocs_per_task(local_nprocs_per_task::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Arguments local_nprocs_per_task::Integer source # Mads.setallparamsoff! \u2014 Method . Set all parameters OFF Methods Mads.setallparamsoff!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:474 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setallparamson! \u2014 Method . Set all parameters ON Methods Mads.setallparamson!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:460 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setdebuglevel \u2014 Method . Set MADS debug level Methods Mads.setdebuglevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:178 Arguments level::Int64 : debug level source # Mads.setdefaultplotformat \u2014 Method . Set the default plot format ( SVG is the default format) Methods Mads.setdefaultplotformat(format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:19 Arguments format::String : plot format source # Mads.setdir \u2014 Function . Set the working directory (for parallel environments) Methods Mads.setdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:252 Mads.setdir(dir) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:247 Arguments dir : directory Example: @everywhere Mads . setdir () @everywhere Mads . setdir ( \"/home/monty\" ) source # Mads.setexecutionwaittime \u2014 Method . Set maximum execution wait time for forward model runs in seconds Methods Mads.setexecutionwaittime(waitime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:198 Arguments waitime::Float64 : maximum execution wait time for forward model runs in seconds source # Mads.setmadsinputfile \u2014 Method . Set a default MADS input file Methods Mads.setmadsinputfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:351 Arguments filename::String : input file name (e.g. input_file_name.mads ) source # Mads.setmadsservers \u2014 Function . Generate a list of Mads servers Methods Mads.setmadsservers(first::Int64, last::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers(first::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Arguments first::Int64 : first [default= 0 ] last::Int64 : last [default= 18 ] Returns array string of mads servers source # Mads.setmodelinputs \u2014 Function . Set model input files; delete files where model output should be saved for MADS Methods Mads.setmodelinputs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Mads.setmodelinputs(madsdata::Associative, parameters::Associative; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords path : path for the files [default= . ] source # Mads.setnewmadsfilename \u2014 Function . Set new mads file name Methods Mads.setnewmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:505 Mads.setnewmadsfilename(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:502 Arguments filename::String : file name madsdata::Associative : MADS problem dictionary Returns: new file name source # Mads.setobservationtargets! \u2014 Method . Set observations (calibration targets) in the MADS problem dictionary based on a predictions dictionary Methods Mads.setobservationtargets!(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:528 Arguments madsdata::Associative : Mads problem dictionary predictions::Associative : dictionary with model predictions source # Mads.setobstime! \u2014 Function . Set observation time based on the observation name in the MADS problem dictionary Methods Mads.setobstime!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, separator::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:264 Arguments madsdata::Associative : MADS problem dictionary rx::Regex : regular expression to match separator::String : separator [default= _ ] Examples: Mads . setobstime! ( madsdata , \"_t\" ) Mads . setobstime! ( madsdata , r\"[A-x]*_t([0-9,.]+)\" ) source # Mads.setobsweights! \u2014 Method . Set observation weights in the MADS problem dictionary Methods Mads.setobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:299 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for observation weights source # Mads.setparamoff! \u2014 Method . Set a specific parameter with a key parameterkey OFF Methods Mads.setparamoff!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:499 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamon! \u2014 Method . Set a specific parameter with a key parameterkey ON Methods Mads.setparamon!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:488 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamsdistnormal! \u2014 Method . Set normal parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistnormal!(madsdata::Associative, mean::Array{T,1} where T, stddev::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:511 Arguments madsdata::Associative : MADS problem dictionary mean::Array{T,1} where T : array with the mean values stddev::Array{T,1} where T : array with the standard deviation values source # Mads.setparamsdistuniform! \u2014 Method . Set uniform parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistuniform!(madsdata::Associative, min::Array{T,1} where T, max::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:526 Arguments madsdata::Associative : MADS problem dictionary max::Array{T,1} where T : array with the maximum values min::Array{T,1} where T : array with the minimum values source # Mads.setparamsinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.setplotfileformat \u2014 Method . Set image file format based on the filename extension, or sets the filename extension based on the requested format . The default format is SVG . PNG , PDF , ESP , and PS are also supported. Methods Mads.setplotfileformat(filename::String, format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:39 Arguments filename::String : output file name format::String : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] Returns: output file name output plot format ( png , pdf , etc.) source # Mads.setprocs \u2014 Function . Set the available processors based on environmental variables (supports SLURM only at the moment) Methods Mads.setprocs(; ntasks_per_node, nprocs_per_task, nodenames, mads_servers, test, quiet, dir, exename) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:48 Mads.setprocs(np::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:45 Mads.setprocs(np::Integer, nt::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:32 Arguments np::Integer : number of processors [default= 1 ] nt::Integer : number of threads[default= 1 ] Keywords dir : common directory shared by all the jobs exename : location of the julia executable (the same version of julia is needed on all the workers) mads_servers : if true use MADS servers (LANL only) [default= false ] nodenames : array with names of machines/nodes to be invoked nprocs_per_task : number of processors needed for each parallel task at each node [default= Mads.nprocs_per_task ] ntasks_per_node : number of parallel tasks per node [default= 0 ] quiet : suppress output [default= Mads.quiet ] test : test the servers and connect to each one ones at a time [default= false ] Returns: vector with names of compute nodes (hosts) Example: Mads . setprocs () Mads . setprocs ( 4 ) Mads . setprocs ( 4 , 8 ) Mads . setprocs ( ntasks_per_node = 4 ) Mads . setprocs ( ntasks_per_node = 32 , mads_servers = true ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = madsservers ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = [ \"madsmax\" , \"madszem\" ]) Mads . setprocs ( ntasks_per_node = 64 , nodenames = \"wc[096-157,160,175]\" ) Mads . setprocs ( ntasks_per_node = 64 , mads_servers = true , exename = \"/home/monty/bin/julia\" , dir = \"/home/monty\" ) source # Mads.setseed \u2014 Function . Set / get current random seed. seed < 0 gets seed, anything else sets it. Methods Mads.setseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Arguments quiet::Bool : [default= true ] seed::Integer : random seed source # Mads.setsindx! \u2014 Method . Set sin-space dx Methods Mads.setsindx!(madsdata::Associative, sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:335 Arguments madsdata::Associative : MADS problem dictionary sindx::Number : sin-space dx value Returns: nothing source # Mads.setsindx \u2014 Method . Set sin-space dx Methods Mads.setsindx(sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:352 Arguments sindx::Number Returns: nothing source # Mads.setsourceinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary for the Source class Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.settarget! \u2014 Method . Set observation target Methods Mads.settarget!(o::Associative, target::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:243 Arguments o::Associative : observation data target::Number : observation target source # Mads.settime! \u2014 Method . Set observation time Methods Mads.settime!(o::Associative, time::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:165 Arguments o::Associative : observation data time::Number : observation time source # Mads.setverbositylevel \u2014 Method . Set MADS verbosity level Methods Mads.setverbositylevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:188 Arguments level::Int64 : debug level source # Mads.setweight! \u2014 Method . Set observation weight Methods Mads.setweight!(o::Associative, weight::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:204 Arguments o::Associative : observation data weight::Number : observation weight source # Mads.setwellweights! \u2014 Method . Set well weights in the MADS problem dictionary Methods Mads.setwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:344 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.showallparameters \u2014 Method . Show all parameters in the MADS problem dictionary Methods Mads.showallparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:610 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showobservations \u2014 Method . Show observations in the MADS problem dictionary Methods Mads.showobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:403 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showparameters \u2014 Method . Show parameters in the MADS problem dictionary Methods Mads.showparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:574 Arguments madsdata::Associative : MADS problem dictionary source # Mads.sinetransform \u2014 Function . Sine transformation of model parameters Methods Mads.sinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:36 Mads.sinetransform(sineparams::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:46 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T sineparams::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation of model parameters source # Mads.sinetransformfunction \u2014 Method . Sine transformation of a function Methods Mads.sinetransformfunction(f::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:80 Arguments f::Function : function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation source # Mads.sinetransformgradient \u2014 Method . Sine transformation of a gradient function Methods Mads.sinetransformgradient(g::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T; sindx) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:101 Arguments g::Function : gradient function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : vector with parameter lower bounds upperbounds::Array{T,1} where T : vector with parameter upper bounds Keywords sindx : sin-space parameter step applied to compute numerical derivatives [default= 0.1 ] Returns: Sine transformation of a gradient function source # Mads.spaghettiplot \u2014 Function . Generate a combined spaghetti plot for the selected ( type != null ) model parameter Methods Mads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:885 Mads.spaghettiplot(madsdata::Associative, dictarray::Associative; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:889 Mads.spaghettiplot(madsdata::Associative, array::Array; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:926 Arguments array::Array : data arrays to be plotted dictarray::Associative : dictionary array containing the data arrays to be plotted madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples Keywords filename : output file name used to output the produced plots format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots (if filename is not defined) linewidth : width of the lines in plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true [default] or false ) plotdata : plot data (if false model predictions are plotted only) [default= true ] pointsize : size of the markers in plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] yfit : fit vertical axis range [default= false ] ytitle : y axis title [default= Y ] Dumps: Image file with a spaghetti plot ( <mads_rootname>-<keyword>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplot ( madsdata , dictarray ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , array ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , number_of_samples ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.spaghettiplots \u2014 Function . Generate separate spaghetti plots for each selected ( type != null ) model parameter Methods Mads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:726 Mads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:731 Arguments madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples paramdictarray::DataStructures.OrderedDict : parameter dictionary containing the data arrays to be plotted Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots linewidth : width of the lines on the plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true (default) or false ) pointsize : size of the markers on the plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] ytitle : y axis title [default= Y ] Dumps: A series of image files with spaghetti plots for each selected ( type != null ) model parameter ( <mads_rootname>-<keyword>-<param_key>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplots ( madsdata , paramdictarray ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplots ( madsdata , number_of_samples ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.sphericalcov \u2014 Method . Spherical spatial covariance function Methods Mads.sphericalcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:43 Arguments h::Number : separation distance maxcov::Number : max covariance scale::Number : scale Returns: covariance source # Mads.sphericalvariogram \u2014 Method . Spherical variogram Methods Mads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:59 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Spherical variogram source # Mads.sprintf \u2014 Method . Convert @sprintf macro into sprintf function source # Mads.status \u2014 Function . Status of Mads modules Methods Mads.status(madsmodule::String; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:257 Mads.status(; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:252 Arguments madsmodule::String : mads module Keywords git : use git [default= true or Mads.madsgit ] gitmore : use even more git [default= false ] Returns: true or false source # Mads.stderrcaptureoff \u2014 Method . Restore STDERR Methods Mads.stderrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:140 Returns: standered error source # Mads.stderrcaptureon \u2014 Method . Redirect STDERR to a reader Methods Mads.stderrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:121 source # Mads.stdoutcaptureoff \u2014 Method . Restore STDOUT Methods Mads.stdoutcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:106 Returns: standered output source # Mads.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader Methods Mads.stdoutcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:87 source # Mads.stdouterrcaptureoff \u2014 Method . Restore STDOUT & STDERR Methods Mads.stdouterrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:171 Returns: standered output amd standered error source # Mads.stdouterrcaptureon \u2014 Method . Redirect STDOUT & STDERR to readers Methods Mads.stdouterrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:155 source # Mads.svrdump \u2014 Method . Dump SVR models in files Methods Mads.svrdump(svrmodel::Array{SVR.svmmodel,1}, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:141 Arguments numberofsamples::Int64 : number of samples rootname::String : root name svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrfree \u2014 Method . Free SVR Methods Mads.svrfree(svrmodel::Array{SVR.svmmodel,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:123 Arguments svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrload \u2014 Method . Load SVR models from files Methods Mads.svrload(npred::Int64, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:164 Arguments npred::Int64 : number of model predictions numberofsamples::Int64 : number of samples rootname::String : root name Returns: Array of SVR models for each model prediction source # Mads.svrpredict \u2014 Function . Predict SVR Methods Mads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,2}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:96 Arguments paramarray::Array{Float64,2} : parameter array svrmodel::Array{SVR.svmmodel,1} : array of SVR models Returns: SVR predicted observations (dependent variables) for a given set of parameters (independent variables) source # Mads.svrtrain \u2014 Function . Train SVR Methods Mads.svrtrain(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Mads.svrtrain(madsdata::Associative, paramarray::Array{Float64,2}; check, savesvr, addminmax, svm_type, kernel_type, degree, gamma, coef0, C, nu, cache_size, eps, shrinking, probability, verbose, tol) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:6 Mads.svrtrain(madsdata::Associative, numberofsamples::Integer; addminmax, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random samples in the training set [default= 100 ] paramarray::Array{Float64,2} Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: Array of SVR models source # Mads.symlinkdir \u2014 Method . Create a symbolic link of a file filename in a directory dirtarget Methods Mads.symlinkdir(filename::String, dirtarget::String, dirsource::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1137 Arguments dirsource::String dirtarget::String : target directory filename::String : file name source # Mads.symlinkdirfiles \u2014 Method . Create a symbolic link of all the files in a directory dirsource in a directory dirtarget Methods Mads.symlinkdirfiles(dirsource::String, dirtarget::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1119 Arguments dirsource::String : source directory dirtarget::String : target directory source # Mads.tag \u2014 Function . Tag Mads modules with a default argument :patch Methods Mads.tag(madsmodule::String, versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(madsmodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Mads.tag() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Arguments madsmodule::String : mads module name versionsym::Symbol : version symbol [default= :patch ] source # Mads.test \u2014 Function . Perform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace; reload(\"Mads.jl\") if needed) Methods Mads.test(testname::String; madstest) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Mads.test() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Arguments testname::String : name of the test to execute; module or example Keywords madstest : test Mads [default= true ] source # Mads.testj \u2014 Function . Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) Methods Mads.testj(coverage::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Mads.testj() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Arguments coverage::Bool : [default= false ] source # Mads.transposematrix \u2014 Method . Transpose non-numeric matrix Methods Mads.transposematrix(a::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:372 Arguments a::Array{T,2} where T : matrix source # Mads.transposevector \u2014 Method . Transpose non-numeric vector Methods Mads.transposevector(a::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:362 Arguments a::Array{T,1} where T : vector source # Mads.untag \u2014 Method . Untag specific version Methods Mads.untag(madsmodule::String, version::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:357 Arguments madsmodule::String : mads module name version::String : version source # Mads.vectoroff \u2014 Method . MADS vector calls off Methods Mads.vectoroff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:41 source # Mads.vectoron \u2014 Method . MADS vector calls on Methods Mads.vectoron() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:32 source # Mads.void2nan! \u2014 Method . Convert Void's into NaN's in a dictionary Methods Mads.void2nan!(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1043 Arguments dict::Associative : dictionary source # Mads.weightedstats \u2014 Method . Get weighted mean and variance samples Methods Mads.weightedstats(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:382 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: vector of sample means vector of sample variances source # Mads.welloff! \u2014 Method . Turn off a specific well in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Mads.wellon!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:585 Arguments madsdata::Associative : MADS problem dictionary rx::Regex wellname::String : name of the well to be turned on source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned on source # Mads.wells2observations! \u2014 Method . Convert Wells class to Observations class in the MADS problem dictionary Methods Mads.wells2observations!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:676 Arguments madsdata::Associative : MADS problem dictionary source # Mads.writeparameters \u2014 Function . Write model parameters Methods Mads.writeparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Mads.writeparameters(madsdata::Associative, parameters::Associative; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.writeparametersviatemplate \u2014 Method . Write parameters via MADS template ( templatefilename ) to an output file ( outputfilename ) Methods Mads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:829 Arguments outputfilename : output file name parameters : parameters templatefilename : tmplate file name Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.@stderrcapture \u2014 Macro . Capture STDERR of a block source # Mads.@stdoutcapture \u2014 Macro . Capture STDOUT of a block source # Mads.@stdouterrcapture \u2014 Macro . Capture STDERR & STDERR of a block source # Mads.@tryimport \u2014 Macro . Try to import a module source # Mads.MadsModel \u2014 Type . MadsModel type applied for MathProgBase analyses source","title":"Mads"},{"location":"Modules/Mads/#madsjl","text":"MADS (Model Analysis & Decision Support) Mads.jl is MADS main module. Mads.jl module functions: # Mads.MFlm \u2014 Method . Matrix Factorization using Levenberg Marquardt Methods Mads.MFlm(X::Array{T,2}, range::Range{Int64}; kw...) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:103 Mads.MFlm(X::Array{T,2}, nk::Integer; method, log_W, log_H, retries, initW, initH, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, quiet) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:133 Arguments X::Array{T,2} : matrix to factorize nk::Integer : number of features to extract range::Range{Int64} Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix lambda lambda_mu log_H : log-transform H (feature) matrix[default= false ] log_W : log-transform W (weight) matrix [default= false ] maxEval maxIter maxJacobians method np_lambda quiet retries : number of solution retries [default= 1 ] show_trace tolG tolOF tolX Returns: NMF results source # Mads.NMFipopt \u2014 Function . Non-negative Matrix Factorization using JuMP/Ipopt Methods Mads.NMFipopt(X::Array{T,2} where T, nk::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Mads.NMFipopt(X::Array{T,2} where T, nk::Integer, retries::Integer; random, maxiter, maxguess, initW, initH, verbosity, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Arguments X::Array{T,2} where T : matrix to factorize nk::Integer : number of features to extract retries::Integer : number of solution retries [default= 1 ] Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix maxguess : guess about the maximum for the H (feature) matrix [default= 1 ] maxiter : maximum number of iterations [default= 100000 ] quiet : quiet [default= false ] random : random initial guesses [default= false ] verbosity : verbosity output level [default= 0 ] Returns: NMF results source # Mads.NMFm \u2014 Method . Non-negative Matrix Factorization using NMF Methods Mads.NMFm(X::Array, nk::Integer; retries, tol, maxiter) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:22 Arguments X::Array : matrix to factorize nk::Integer : number of features to extract Keywords maxiter : maximum number of iterations [default= 10000 ] retries : number of solution retries [default= 1 ] tol : solution tolerance [default= 1.0e-9 ] Returns: NMF results source # Mads.addkeyword! \u2014 Function . Add a keyword in a class within the Mads dictionary madsdata Methods Mads.addkeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:249 Mads.addkeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:253 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.addsource! \u2014 Function . Add an additional contamination source Methods Mads.addsource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Mads.addsource!(madsdata::Associative, sourceid::Int64; dict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] Keywords dict source # Mads.addsourceparameters! \u2014 Method . Add contaminant source parameters Methods Mads.addsourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:76 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellsoff! \u2014 Method . Turn off all the wells in the MADS problem dictionary Methods Mads.allwellsoff!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:607 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellson! \u2014 Method . Turn on all the wells in the MADS problem dictionary Methods Mads.allwellson!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:549 Arguments madsdata::Associative : MADS problem dictionary source # Mads.amanzi \u2014 Function . Execute Amanzi external groundwater flow and transport simulator Methods Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String, setup::String; amanzi_exe) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Arguments filename::String : amanzi input file name nproc::Int64 : number of processor to be used by Amanzi [default= Mads.nprocs_per_task_default ] observation_filename::String : Amanzi observation file name [default= \"observations.out\" ] quiet::Bool : suppress output [default= Mads.quiet ] setup::String : bash script to setup Amanzi environmental variables [default= \"source-amanzi-setup\" ] Keywords amanzi_exe : full path to the Amanzi executable source # Mads.amanzi_output_parser \u2014 Function . Parse Amanzi output provided in an external file ( filename ) Methods Mads.amanzi_output_parser(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Mads.amanzi_output_parser() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Arguments filename::String : external file name [default= \"observations.out\" ] Returns: dictionary with model observations following MADS requirements Example: Mads . amanzi_output_parser () Mads . amanzi_output_parser ( \"observations.out\" ) source # Mads.asinetransform \u2014 Function . Arcsine transformation of model parameters Methods Mads.asinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:4 Mads.asinetransform(params::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:14 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Arcsine transformation of model parameters source # Mads.bayessampling \u2014 Function . Bayesian Sampling Methods Mads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:78 Mads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:99 Arguments madsdata::Associative : MADS problem dictionary numsequences::Integer : number of sequences executed in parallel Keywords burnin : number of initial realizations before the MCMC are recorded [default= 100 ] nsteps : number of final realizations in the chain [default= 1000 ] seed : random seed [default= 0 ] thinning : removal of any thinning realization [default= 1 ] Returns: MCMC chain Examples: Mads . bayessampling ( madsdata ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) Mads . bayessampling ( madsdata , numsequences ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) source # Mads.calibrate \u2014 Method . Calibrate Mads model using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative : MADS problem dictionary Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results : save intermediate results [default= true ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.calibraterandom \u2014 Function . Calibrate with random initial guesses Methods Mads.calibraterandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Mads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords all : all model results are returned [default= false ] lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. bestresult[2].minimizer) Example: Mads . calibraterandom ( madsdata ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) Mads . calibraterandom ( madsdata , numberofsamples ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) source # Mads.calibraterandom_parallel \u2014 Function . Calibrate with random initial guesses in parallel Methods Mads.calibraterandom_parallel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Mads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : suppress output [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: vector with all objective function values boolean vector (converged/not converged) array with estimate model parameters source # Mads.captureoff \u2014 Method . Make MADS not capture Methods Mads.captureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:114 source # Mads.captureon \u2014 Method . Make MADS capture Methods Mads.captureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:105 source # Mads.checkmodeloutputdirs \u2014 Method . Check the directories where model outputs should be saved for MADS Methods Mads.checkmodeloutputdirs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:599 Arguments madsdata::Associative : MADS problem dictionary Returns: true or false source # Mads.checknodedir \u2014 Function . Check if a directory is readable Methods Mads.checknodedir(dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(node::String, dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Mads.checknodedir(node::String, dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Arguments dir::String : directory node::String : computational node name (e.g. madsmax.lanl.gov , wf03 , or 127.0.0.1 ) waittime::Float64 : wait time in seconds [default= 10 ] Returns: true if the directory is readable, false otherwise source # Mads.checkout \u2014 Function . Checkout (pull) the latest version of Mads modules Methods Mads.checkout(modulename::String; git, master, force, pull, required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Mads.checkout() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Arguments modulename::String : module name Keywords all : whether to checkout all the modules [default= false ] force : whether to overwrite local changes when checkout [default= false ] git : whether to use \"git checkout\" [default= true ] master : whether on master branch [default= false ] pull : whether to run \"git pull\" [default= true ] required : whether only checkout Mads.required modules [default= false ] source # Mads.checkparameterranges \u2014 Method . Check parameter ranges for model parameters Methods Mads.checkparameterranges(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:709 Arguments madsdata::Associative : MADS problem dictionary source # Mads.cleancoverage \u2014 Method . Remove Mads coverage files Methods Mads.cleancoverage() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:24 source # Mads.cmadsins_obs \u2014 Method . Call C MADS ins_obs() function from MADS dynamic library Methods Mads.cmadsins_obs(obsid::Array{T,1} where T, instructionfilename::String, inputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:40 Arguments inputfilename::String : input file name instructionfilename::String : instruction file name obsid::Array{T,1} where T : observation id Return: observations source # Mads.commit \u2014 Function . Commit the latest version of Mads modules in the repository Methods Mads.commit(commitmsg::String, modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Mads.commit(commitmsg::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Arguments commitmsg::String : commit message modulename::String : module name source # Mads.computemass \u2014 Function . Compute injected/reduced contaminant mass (for a given set of mads input files when \"path\" is provided) Methods Mads.computemass(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:459 Mads.computemass(madsfiles::Union{Regex, String}; time, path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:486 Arguments String} madsdata::Associative : MADS problem dictionary madsfiles::Union{Regex : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= \".\" ] time : computational time [default= 0 ] Returns: array with all the lambda values array with associated total injected mass array with associated total reduced mass Example: Mads . computemass ( madsfiles ; time = 0 , path = \".\" ) source # Mads.computeparametersensitities \u2014 Method . Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range Methods Mads.computeparametersensitities(madsdata::Associative, saresults::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:842 Arguments madsdata::Associative : MADS problem dictionary saresults::Associative : dictionary with sensitivity analysis results source # Mads.contamination \u2014 Method . Compute concentration for a point in space and time (x,y,z,t) Methods Mads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Array{T,1} where T, anasolfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:429 Arguments H::Number : Hurst coefficient for Fractional Brownian dispersion anasolfunction::Function ax::Number : dispersivity in X direction (longitudinal) ay::Number : dispersivity in Y direction (transverse horizontal) az::Number : dispersivity in Y direction (transverse vertical) dx::Number : source size (extent) in X direction dy::Number : source size (extent) in Y direction dz::Number : source size (extent) in Z direction f::Number : source mass flux lambda::Number : first-order reaction rate n::Number : porosity t0::Number : source starting time t1::Number : source termination time t::Array{T,1} where T : vector of times to compute concentration at the observation point theta::Number : groundwater flow direction vx::Number : advective transport velocity in X direction vy::Number : advective transport velocity in Y direction vz::Number : advective transport velocity in Z direction wellx::Number : observation point (well) X coordinate welly::Number : observation point (well) Y coordinate wellz::Number : observation point (well) Z coordinate x::Number : X coordinate of contaminant source location y::Number : Y coordinate of contaminant source location z::Number : Z coordinate of contaminant source location Returns: a vector of predicted concentration at (wellx, welly, wellz, t) source # Mads.copyaquifer2sourceparameters! \u2014 Method . Copy aquifer parameters to become contaminant source parameters Methods Mads.copyaquifer2sourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:115 Arguments madsdata::Associative : MADS problem dictionary source # Mads.copyright \u2014 Method . Produce MADS copyright information Methods Mads.copyright() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:18 source # Mads.create_documentation \u2014 Method . Create web documentation files for Mads functions Methods Mads.create_documentation() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:382 source # Mads.create_tests_off \u2014 Method . Turn off the generation of MADS tests (default) Methods Mads.create_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:150 source # Mads.create_tests_on \u2014 Method . Turn on the generation of MADS tests (dangerous) Methods Mads.create_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:141 source # Mads.createmadsobservations \u2014 Function . Create Mads dictionary of observations and instruction file Methods Mads.createmadsobservations(nrow::Int64, ncol::Int64; obstring, pretext, prestring, poststring, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Mads.createmadsobservations(nrow::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Arguments ncol::Int64 : number of columns [default 1] nrow::Int64 : number of rows Keywords filename : file name obstring : observation string poststring : post instruction file string prestring : pre instruction file string pretext : preamble instructions ) Returns: observation dictionary source # Mads.createmadsproblem \u2014 Function . Create a new Mads problem where the observation targets are computed based on the model predictions Methods Mads.createmadsproblem(infilename::String, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:26 Mads.createmadsproblem(madsdata::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:51 Mads.createmadsproblem(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:60 Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:56 Arguments infilename::String : input Mads file madsdata::Associative : MADS problem dictionary outfilename::String : output Mads file predictions::Associative : dictionary of model predictions Returns: new MADS problem dictionary source # Mads.createobservations! \u2014 Function . Create observations in the MADS problem dictionary based on time and observation vectors Methods Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T, observation::Array{T,1} where T; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, observation::Associative; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:488 Arguments madsdata::Associative : MADS problem dictionary observation::Array{T,1} where T : dictionary of observations observation::Associative : dictionary of observations time::Array{T,1} where T : vector of observation times Keywords logtransform : log transform observations [default= false ] weight : weight value [default= 1 ] weight_type : weight type [default= constant ] source # Mads.createtempdir \u2014 Method . Create temporary directory Methods Mads.createtempdir(tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1226 Arguments tempdirname::String : temporary directory name source # Mads.deleteNaN! \u2014 Method . Delete rows with NaN in a dataframe df Methods Mads.deleteNaN!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1068 Arguments df::DataFrames.DataFrame : dataframe source # Mads.deletekeyword! \u2014 Function . Delete a keyword in a class within the Mads dictionary madsdata Methods Mads.deletekeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:276 Mads.deletekeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:282 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.deleteoffwells! \u2014 Method . Delete all wells marked as being off in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.deletetimes! \u2014 Method . Delete all times in the MADS problem dictionary in a given list. Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.dependents \u2014 Function . Lists module dependents on a module (Mads by default) Methods Mads.dependents(modulename::String, filter::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Arguments filter::Bool : whether to filter modules [default= false ] modulename::String : module name [default= \"Mads\" ] Returns: modules that are dependents of the input module source # Mads.diff \u2014 Function . Diff the latest version of Mads modules in the repository Methods Mads.diff(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Mads.diff() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Arguments modulename::String : module name source # Mads.display \u2014 Function . Display image file Methods Mads.display(p::Compose.Context) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:71 Mads.display(p::Gadfly.Plot) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:65 Mads.display(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:8 Arguments filename::String : image file name p::Compose.Context : plotting object p::Gadfly.Plot : plotting object source # Mads.dobigdt \u2014 Method . Perform Bayesian Information Gap Decision Theory (BIG-DT) analysis Methods Mads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, maxHorizon, numlikelihoods) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:123 Arguments madsdata::Associative : MADS problem dictionary nummodelruns::Int64 : number of model runs Keywords maxHorizon : maximum info-gap horizons of uncertainty [default= 3 ] numhorizons : number of info-gap horizons of uncertainty [default= 100 ] numlikelihoods : number of Bayesian likelihoods [default= 25 ] Returns: dictionary with BIG-DT results source # Mads.dumpasciifile \u2014 Method . Dump ASCII file Methods Mads.dumpasciifile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:30 Arguments data : data to dump filename::String : ASCII file name Dumps: ASCII file with the name in \"filename\" source # Mads.dumpjsonfile \u2014 Method . Dump a JSON file Methods Mads.dumpjsonfile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:38 Arguments data : data to dump filename::String : JSON file name Dumps: JSON file with the name in \"filename\" source # Mads.dumpwelldata \u2014 Method . Dump well data from MADS problem dictionary into a ASCII file Methods Mads.dumpwelldata(madsdata::Associative, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1092 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Dumps: filename : a ASCII file source # Mads.dumpyamlfile \u2014 Method . Dump YAML file Methods Mads.dumpyamlfile(filename::String, data; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:55 Arguments data : YAML data filename::String : output file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) source # Mads.dumpyamlmadsfile \u2014 Method . Dump YAML Mads file Methods Mads.dumpyamlmadsfile(madsdata::Associative, filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:74 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Keywords julia : use julia YAML [default= false ] source # Mads.efast \u2014 Method . Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method Methods Mads.efast(md::Associative; N, M, gamma, seed, checkpointfrequency, restartdir, restart) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1111 Arguments md::Associative : MADS problem dictionary Keywords M : maximum number of harmonics [default= 6 ] N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] gamma : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) [default= 4 ] restart : save restart information [default= false ] restartdir : directory where files will be stored containing model results for the efast simulation restarts [default= \"efastcheckpoints\" ] seed : random seed [default= 0 ] source # Mads.emceesampling \u2014 Function . Bayesian sampling with Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) Methods Mads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:9 Mads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:32 Arguments madsdata::Associative : MADS problem dictionary p0::Array : initial parameters (matrix of size (number of parameters, number of walkers) or (length(Mads.getoptparamkeys(madsdata)), numwalkers)) Keywords burnin : number of initial realizations before the MCMC are recorded [default= 10 ] nsteps : number of final realizations in the chain [default= 100 ] numwalkers : number of walkers (if in parallel this can be the number of available processors; in general, the higher the number of walkers, the better the results and computational time [default= 10 ] seed : random seed [default= 0 ] sigma : a standard deviation parameter used to initialize the walkers [default= 0.01 ] thinning : removal of any thinning realization [default= 1 ] weightfactor : weight factor [default= 1.0 ] Returns: MCMC chain log likelihoods of the final samples in the chain Examples: Mads . emceesampling ( madsdata ; numwalkers = 10 , nsteps = 100 , burnin = 100 , thinning = 1 , seed = 2016 , sigma = 0.01 ) Mads . emceesampling ( madsdata , p0 ; numwalkers = 10 , nsteps = 100 , burnin = 10 , thinning = 1 , seed = 2016 ) source # Mads.estimationerror \u2014 Function . Estimate kriging error Methods Mads.estimationerror(w::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:197 Mads.estimationerror(w::Array{T,1} where T, covmat::Array{T,2} where T, covvec::Array{T,1} where T, cov0::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:204 Arguments X::Array{T,2} where T : observation matrix cov0::Number : zero-separation covariance cov::Function : spatial covariance function covmat::Array{T,2} where T : covariance matrix covvec::Array{T,1} where T : covariance vector w::Array{T,1} where T : kriging weights x0::Array{T,1} where T : estimated locations Returns: estimation kriging error source # Mads.evaluatemadsexpression \u2014 Method . Evaluate an expression string based on a parameter dictionary Methods Mads.evaluatemadsexpression(expressionstring::String, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:154 Arguments expressionstring::String : expression string parameters::Associative : parameter dictionary applied to evaluate the expression string Returns: dictionary containing the expression names as keys, and the values of the expression as values source # Mads.evaluatemadsexpressions \u2014 Method . Evaluate all the expressions in the Mads problem dictiorany based on a parameter dictionary Methods Mads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:173 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameter dictionary applied to evaluate the expression strings Returns: dictionary containing the parameter and expression names as keys, and the values of the expression as values source # Mads.expcov \u2014 Method . Exponential spatial covariance function Methods Mads.expcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:29 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.exponentialvariogram \u2014 Method . Exponential variogram Methods Mads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:82 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Exponential variogram source # Mads.filterkeys \u2014 Function . Filter dictionary keys based on a string or regular expression Methods Mads.filterkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Mads.filterkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:786 Mads.filterkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Arguments dict::Associative : dictionary key::Regex : the regular expression or string used to filter dictionary keys key::String : the regular expression or string used to filter dictionary keys source # Mads.forward \u2014 Function . Perform a forward run using the initial or provided values for the model parameters Methods Mads.forward(madsdata::Associative; all) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:6 Mads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:10 Mads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:44 Arguments madsdata::Associative : MADS problem dictionary paramarray::Array : array of model parameter values paramdict::Associative : dictionary of model parameter values Keywords all : all model results are returned [default= false ] checkpointfilename : check point file name [default=\"checkpoint_forward\"] checkpointfrequency : check point frequency for storing restart information [default= 0 ] Returns: dictionary of model predictions source # Mads.forwardgrid \u2014 Function . Perform a forward run over a 3D grid defined in madsdata using the initial or provided values for the model parameters Methods Mads.forwardgrid(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:132 Mads.forwardgrid(madsdatain::Associative, paramvalues::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:137 Arguments madsdata::Associative : MADS problem dictionary madsdatain::Associative : MADS problem dictionary paramvalues::Associative : dictionary of model parameter values Returns: 3D array with model predictions along a 3D grid source # Mads.free \u2014 Function . Free Mads modules Methods Mads.free(modulename::String; required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Mads.free() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Arguments modulename::String : module name Keywords all : free all the modules [default= false ] required : only free Mads.required modules [default= false ] source # Mads.functions \u2014 Function . List available functions in the MADS modules: Methods Mads.functions(string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions(re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:22 Mads.functions(m::Union{Module, Symbol}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Mads.functions(m::Union{Module, Symbol}, re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:40 Mads.functions(m::Union{Module, Symbol}, string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Arguments Symbol} m::Union{Module : MADS module re::Regex string::String : string to display functions with matching names Keywords quiet stdout Examples: Mads . functions () Mads . functions ( BIGUQ ) Mads . functions ( \"get\" ) Mads . functions ( Mads , \"get\" ) source # Mads.gaussiancov \u2014 Method . Gaussian spatial covariance function Methods Mads.gaussiancov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:15 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.gaussianvariogram \u2014 Method . Gaussian variogram Methods Mads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:103 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Gaussian variogram source # Mads.getcovmat \u2014 Method . Get spatial covariance matrix Methods Mads.getcovmat(X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:159 Arguments X::Array{T,2} where T : matrix with coordinates of the data points (x or y) cov::Function : spatial covariance function Returns: spatial covariance matrix source # Mads.getcovvec! \u2014 Method . Get spatial covariance vector Methods Mads.getcovvec!(covvec::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:185 Arguments X::Array{T,2} where T : matrix with coordinates of the data points cov::Function : spatial covariance function covvec::Array{T,1} where T : spatial covariance vector x0::Array{T,1} where T : vector with coordinates of the estimation points (x or y) Returns: spatial covariance vector source # Mads.getdictvalues \u2014 Function . Get dictionary values for keys based on a string or regular expression Methods Mads.getdictvalues(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Mads.getdictvalues(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:808 Mads.getdictvalues(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Arguments dict::Associative : dictionary key::Regex : the key to find value for key::String : the key to find value for source # Mads.getdir \u2014 Method . Get directory Methods Mads.getdir(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:407 Arguments filename::String : file name Returns: directory in file name Example: d = Mads . getdir ( \"a.mads\" ) # d = \".\" d = Mads . getdir ( \"test/a.mads\" ) # d = \"test\" source # Mads.getdistribution \u2014 Method . Parse parameter distribution from a string Methods Mads.getdistribution(dist::String, i::String, inputtype::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:202 Arguments dist::String : parameter distribution i::String inputtype::String : input type (parameter or observation) Returns: distribution source # Mads.getextension \u2014 Method . Get file name extension Methods Mads.getextension(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:579 Arguments filename::String : file name Returns: file name extension Example: ext = Mads . getextension ( \"a.mads\" ) # ext = \"mads\" source # Mads.getimportantsamples \u2014 Method . Get important samples Methods Mads.getimportantsamples(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:351 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: array of important samples source # Mads.getlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are log-transformed ( log ) source # Mads.getmadsdir \u2014 Method . Get the directory where currently Mads is running Methods Mads.getmadsdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:449 Example: problemdir = Mads . getmadsdir () Returns: Mads problem directory source # Mads.getmadsinputfile \u2014 Method . Get the default MADS input file set as a MADS global variable using setmadsinputfile(filename) Methods Mads.getmadsinputfile() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:364 Returns: input file name (e.g. input_file_name.mads ) source # Mads.getmadsproblemdir \u2014 Method . Get the directory where the Mads data file is located Methods Mads.getmadsproblemdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:430 Arguments madsdata::Associative : MADS problem dictionary Example: madsdata = Mads . loadmadsfile ( \"../../a.mads\" ) madsproblemdir = Mads . getmadsproblemdir ( madsdata ) where madsproblemdir = \"../../\" source # Mads.getmadsrootname \u2014 Method . Get the MADS problem root name Methods Mads.getmadsrootname(madsdata::Associative; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:386 Arguments madsdata::Associative : MADS problem dictionary Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Example: madsrootname = Mads . getmadsrootname ( madsdata ) Returns: root of file name source # Mads.getnextmadsfilename \u2014 Method . Get next mads file name Methods Mads.getnextmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:542 Arguments filename::String : file name Returns: next mads file name source # Mads.getnonlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT log-transformed ( log ) source # Mads.getnonoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT optimized ( opt ) source # Mads.getobsdist \u2014 Method . Get an array with dist values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsdist \u2014 Method . Get an array with dist values for all observations in the MADS problem dictionary source # Mads.getobskeys \u2014 Method . Get keys for all observations in the MADS problem dictionary Methods Mads.getobskeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:45 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all observations in the MADS problem dictionary source # Mads.getobslog \u2014 Method . Get an array with log values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobslog \u2014 Method . Get an array with log values for all observations in the MADS problem dictionary source # Mads.getobsmax \u2014 Method . Get an array with max values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmax \u2014 Method . Get an array with max values for all observations in the MADS problem dictionary source # Mads.getobsmin \u2014 Method . Get an array with min values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmin \u2014 Method . Get an array with min values for all observations in the MADS problem dictionary source # Mads.getobstarget \u2014 Method . Get an array with target values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstarget \u2014 Method . Get an array with target values for all observations in the MADS problem dictionary source # Mads.getobstime \u2014 Method . Get an array with time values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstime \u2014 Method . Get an array with time values for all observations in the MADS problem dictionary source # Mads.getobsweight \u2014 Method . Get an array with weight values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsweight \u2014 Method . Get an array with weight values for all observations in the MADS problem dictionary source # Mads.getoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are optimized ( opt ) source # Mads.getoptparams \u2014 Function . Get optimizable parameters Methods Mads.getoptparams(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:369 Mads.getoptparams(madsdata::Associative, parameterarray::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Mads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Arguments madsdata::Associative : MADS problem dictionary optparameterkey::Array : optimizable parameter keys parameterarray::Array : parameter array Returns: parameter array source # Mads.getparamdict \u2014 Method . Get dictionary with all parameters and their respective initial values Methods Mads.getparamdict(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:60 Arguments madsdata::Associative : MADS problem dictionary Returns: dictionary with all parameters and their respective initial values source # Mads.getparamdistributions \u2014 Method . Get probabilistic distributions of all parameters in the MADS problem dictionary Note: Probabilistic distribution of parameters can be defined only if dist or min / max model parameter fields are specified in the MADS problem dictionary madsdata . Methods Mads.getparamdistributions(madsdata::Associative; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:664 Arguments madsdata::Associative : MADS problem dictionary Keywords init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field [default= false ] Returns: probabilistic distributions source # Mads.getparamkeys \u2014 Method . Get keys of all parameters in the MADS problem dictionary Methods Mads.getparamkeys(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:44 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter Returns: array with the keys of all parameters in the MADS problem dictionary source # Mads.getparamrandom \u2014 Function . Get independent sampling of model parameters defined in the MADS problem dictionary Methods Mads.getparamrandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, paramdist, init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:404 Arguments madsdata::Associative : MADS problem dictionary numsamples::Integer : number of samples, [default= 1 ] parameterkey::String : model parameter key Keywords init_dist : if true use the distribution set for initialization in the MADS problem dictionary (defined using init_dist parameter field); if false (default) use the regular distribution set in the MADS problem dictionary (defined using dist parameter field) numsamples : number of samples paramdist : dictionary of parameter distributions Returns: generated sample source # Mads.getparamsinit \u2014 Method . Get an array with init values for parameters defined by paramkeys source # Mads.getparamsinit \u2014 Method . Get an array with init values for all the MADS model parameters source # Mads.getparamsinit_max \u2014 Function . Get an array with init_max values for parameters defined by paramkeys Methods Mads.getparamsinit_max(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:298 Mads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:264 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsinit_min \u2014 Function . Get an array with init_min values for parameters Methods Mads.getparamsinit_min(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:247 Mads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:213 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamslog \u2014 Method . Get an array with log values for parameters defined by paramkeys source # Mads.getparamslog \u2014 Method . Get an array with log values for all the MADS model parameters source # Mads.getparamslongname \u2014 Method . Get an array with longname values for parameters defined by paramkeys source # Mads.getparamslongname \u2014 Method . Get an array with longname values for all the MADS model parameters source # Mads.getparamsmax \u2014 Function . Get an array with max values for parameters defined by paramkeys Methods Mads.getparamsmax(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:196 Mads.getparamsmax(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:174 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: returns the parameter values source # Mads.getparamsmin \u2014 Function . Get an array with min values for parameters defined by paramkeys Methods Mads.getparamsmin(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:157 Mads.getparamsmin(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:135 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for parameters defined by paramkeys source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for all the MADS model parameters source # Mads.getparamsstep \u2014 Method . Get an array with step values for parameters defined by paramkeys source # Mads.getparamsstep \u2014 Method . Get an array with step values for all the MADS model parameters source # Mads.getparamstype \u2014 Method . Get an array with type values for parameters defined by paramkeys source # Mads.getparamstype \u2014 Method . Get an array with type values for all the MADS model parameters source # Mads.getprocs \u2014 Method . Get the number of processors Methods Mads.getprocs() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:28 source # Mads.getrestart \u2014 Method . Get MADS restart status Methods Mads.getrestart(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:78 Arguments madsdata::Associative : MADS problem dictionary source # Mads.getrestartdir \u2014 Function . Get the directory where Mads restarts will be stored Methods Mads.getrestartdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Mads.getrestartdir(madsdata::Associative, suffix::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Arguments madsdata::Associative : MADS problem dictionary suffix::String : Suffix to be added to the name of restart directory Returns: restart directory where reusable model results will be stored source # Mads.getrootname \u2014 Method . Get file name root Methods Mads.getrootname(filename::String; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:479 Arguments filename::String : file name Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Returns: root of file name Example: r = Mads . getrootname ( \"a.rnd.dat\" ) # r = \"a\" r = Mads . getrootname ( \"a.rnd.dat\" , first = false ) # r = \"a.rnd\" source # Mads.getseed \u2014 Method . Get and return current random seed. Methods Mads.getseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:432 source # Mads.getsindx \u2014 Method . Get sin-space dx Methods Mads.getsindx(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:314 Arguments madsdata::Associative : MADS problem dictionary Returns: sin-space dx value source # Mads.getsourcekeys \u2014 Method . Get keys of all source parameters in the MADS problem dictionary Methods Mads.getsourcekeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:78 Arguments madsdata::Associative : MADS problem dictionary Returns: array with keys of all source parameters in the MADS problem dictionary source # Mads.gettarget \u2014 Method . Get observation target Methods Mads.gettarget(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:224 Arguments o::Associative : observation data Returns: observation target source # Mads.gettargetkeys \u2014 Method . Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary Methods Mads.gettargetkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:59 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all targets in the MADS problem dictionary source # Mads.gettime \u2014 Method . Get observation time Methods Mads.gettime(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:146 Arguments o::Associative : observation data Returns: observation time (\"NaN\" it time is missing) source # Mads.getweight \u2014 Method . Get observation weight Methods Mads.getweight(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:185 Arguments o::Associative : observation data Returns: observation weight (\"NaN\" when weight is missing) source # Mads.getwelldata \u2014 Method . Get spatial and temporal data in the Wells class Methods Mads.getwelldata(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:716 Arguments madsdata::Associative : Mads problem dictionary Keywords time : get observation times [default= false ] Returns: array with spatial and temporal data in the Wells class source # Mads.getwellkeys \u2014 Method . Get keys for all wells in the MADS problem dictionary Methods Mads.getwellkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:76 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all wells in the MADS problem dictionary source # Mads.getwelltargets \u2014 Method . Methods Mads.getwelltargets(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:750 Arguments madsdata::Associative : Mads problem dictionary Returns: array with targets in the Wells class source # Mads.graphoff \u2014 Method . MADS graph output off Methods Mads.graphoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:132 source # Mads.graphon \u2014 Method . MADS graph output on Methods Mads.graphon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:123 source # Mads.haskeyword \u2014 Function . Check for a keyword in a class within the Mads dictionary madsdata Methods Mads.haskeyword(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:211 Mads.haskeyword(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:214 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary Returns: true or false Examples: - `Mads.haskeyword(madsdata, \"disp\")` ... searches in `Problem` class by default - `Mads.haskeyword(madsdata, \"Wells\", \"R-28\")` ... searches in `Wells` class for a keyword \"R-28\" source # Mads.help \u2014 Method . Produce MADS help information Methods Mads.help() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:9 source # Mads.importeverywhere \u2014 Method . Import Julia function everywhere from a file. The first function in the Julia input file is the one that will be called by Mads to perform the model simulations. Methods Mads.importeverywhere(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:373 Arguments filename::String : file name Returns: Julia function to execute the model source # Mads.indexkeys \u2014 Function . Find indexes for dictionary keys based on a string or regular expression Methods Mads.indexkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Mads.indexkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:797 Mads.indexkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Arguments dict::Associative : dictionary key::Regex : the key to find index for key::String : the key to find index for source # Mads.infogap_jump \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Mads.infogap_jump(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_jump_polinomial \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Mads.infogap_jump_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, quiet, plot, model, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] model : model id [default= 1 ] plot : activate plotting [default= false ] quiet : quiet [default= false ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] Returns: hmin, hmax source # Mads.infogap_mpb_lin \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_lin() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Mads.infogap_mpb_lin(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_mpb_polinomial \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Mads.infogap_mpb_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.ins_obs \u2014 Method . Apply Mads instruction file instructionfilename to read model output file modeloutputfilename Methods Mads.ins_obs(instructionfilename::String, modeloutputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1005 Arguments instructionfilename::String : instruction file name modeloutputfilename::String : model output file name Returns: obsdict : observation dictionary with the model outputs source # Mads.instline2regexs \u2014 Method . Convert an instruction line in the Mads instruction file into regular expressions Methods Mads.instline2regexs(instline::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:905 Arguments instline::String : instruction line Returns: regexs : regular expressions obsnames : observation names getparamhere : parameters source # Mads.invobsweights! \u2014 Method . Set inversely proportional observation weights in the MADS problem dictionary Methods Mads.invobsweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:327 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.invwellweights! \u2014 Method . Set inversely proportional well weights in the MADS problem dictionary Methods Mads.invwellweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:382 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.islog \u2014 Method . Is parameter with key parameterkey log-transformed? Methods Mads.islog(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:445 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if log-transformed, false otherwise source # Mads.isobs \u2014 Method . Is a dictionary containing all the observations Methods Mads.isobs(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:19 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary contain all the observations, false otherwise source # Mads.isopt \u2014 Method . Is parameter with key parameterkey optimizable? Methods Mads.isopt(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:425 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if optimizable, false if not source # Mads.isparam \u2014 Method . Check if a dictionary containing all the Mads model parameters Methods Mads.isparam(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:17 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary containing all the parameters, false otherwise source # Mads.ispkgavailable \u2014 Function . Checks if package is available Methods Mads.ispkgavailable(modulename::String; quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:468 Arguments modulename::String : module name Keywords quiet Returns: true or false source # Mads.krige \u2014 Method . Kriging Methods Mads.krige(x0mat::Array{T,2} where T, X::Array{T,2} where T, Z::Array{T,1} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:124 Arguments X::Array{T,2} where T : coordinates of the observation (conditioning) data Z::Array{T,1} where T : values for the observation (conditioning) data cov::Function : spatial covariance function x0mat::Array{T,2} where T : point coordinates at which to obtain kriging estimates Returns: kriging estimates at x0mat source # Mads.levenberg_marquardt \u2014 Function . Levenberg-Marquardt optimization Methods Mads.levenberg_marquardt(f::Function, g::Function, x0) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Mads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callbackiteration, callbackjacobian) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default= x->(x'*x)[1] ] x0 : initial parameter guess Keywords alwaysDoJacobian : computer Jacobian each iteration [default= false ] callbackiteration : call back function for each iteration [default= (best_x::Vector, of::Number, lambda::Number)->nothing ] callbackjacobian : call back function for each Jacobian [default= (x::Vector, J::Matrix)->nothing ] lambda : initial Levenberg-Marquardt lambda [default= eps(Float32) ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] lambda_nu : lambda multiplication factor \u03bd [default= 2 ] lambda_scale : lambda scaling factor [default= 1e-3, ] maxEval : maximum number of model evaluations [default= 1001 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] root : Mads problem root name show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function update tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] source # Mads.linktempdir \u2014 Method . Link files in a temporary directory Methods Mads.linktempdir(madsproblemdir::String, tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1252 Arguments madsproblemdir::String : Mads problem directory tempdirname::String : temporary directory name source # Mads.loadasciifile \u2014 Method . Load ASCII file Methods Mads.loadasciifile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:14 Arguments filename::String : ASCII file name Returns: data from the file source # Mads.loadbigyamlfile \u2014 Method . Load BIG YAML input file Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format julia Returns: MADS problem dictionary source # Mads.loadjsonfile \u2014 Method . Load a JSON file Methods Mads.loadjsonfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:16 Arguments filename::String : JSON file name Returns: data from the JSON file source # Mads.loadmadsfile \u2014 Method . Load MADS input file defining a MADS problem dictionary Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format : acceptable formats are yaml and json [default= yaml ] julia : if true , force using julia parsing functions; if false (default), use python parsing functions Returns: MADS problem dictionary Example: md = Mads . loadmadsfile ( \"input_file_name.mads\" ) source # Mads.loadmadsproblem \u2014 Method . Load a predefined Mads problem Methods Mads.loadmadsproblem(name::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:15 Arguments name::String : predefined MADS problem name Returns: MADS problem dictionary source # Mads.loadsaltellirestart! \u2014 Method . Load Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.loadsaltellirestart!(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:598 Arguments evalmat::Array : loaded array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts Returns: true when successfully loaded, false when it is not source # Mads.loadyamlfile \u2014 Method . Load YAML file Methods Mads.loadyamlfile(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:18 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in the yaml input file source # Mads.localsa \u2014 Method . Local sensitivity analysis based on eigen analysis of the parameter covariance matrix Methods Mads.localsa(madsdata::Associative; sinspace, keyword, filename, format, datafiles, imagefiles, par, obs, J) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:126 Arguments madsdata::Associative : MADS problem dictionary Keywords J : Jacobian matrix datafiles : flag to write data files [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) imagefiles : flag to create image files [default= Mads.graphoutput ] keyword : keyword to be added in the filename root obs : observations for the parameter set par : parameter set sinspace : apply sin transformation [default= true ] Dumps: filename : output plot file source # Mads.long_tests_off \u2014 Method . Turn off execution of long MADS tests (default) Methods Mads.long_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:168 source # Mads.long_tests_on \u2014 Method . Turn on execution of long MADS tests Methods Mads.long_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:159 source # Mads.madscores \u2014 Function . Check the number of processors on a series of servers Methods Mads.madscores(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Mads.madscores() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madscritical \u2014 Method . MADS critical error messages Methods Mads.madscritical(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:73 Arguments message::AbstractString : critical error message source # Mads.madsdebug \u2014 Function . MADS debug messages (controlled by quiet and debuglevel ) Methods Mads.madsdebug(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Mads.madsdebug(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : debug message source # Mads.madserror \u2014 Method . MADS error messages Methods Mads.madserror(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:63 Arguments message::AbstractString : error message source # Mads.madsinfo \u2014 Function . MADS information/status messages (controlled by quiet and verbositylevel`) Methods Mads.madsinfo(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Mads.madsinfo(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : information/status message source # Mads.madsload \u2014 Function . Check the load of a series of servers Methods Mads.madsload(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Mads.madsload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madsmathprogbase \u2014 Function . Define MadsModel type applied for Mads execution using MathProgBase Methods Mads.madsmathprogbase() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Mads.madsmathprogbase(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Arguments madsdata::Associative : MADS problem dictionary [default= Dict() ] source # Mads.madsoutput \u2014 Function . MADS output (controlled by quiet and verbositylevel ) Methods Mads.madsoutput(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Mads.madsoutput(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : output message source # Mads.madsup \u2014 Function . Check the uptime of a series of servers Methods Mads.madsup(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Mads.madsup() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madswarn \u2014 Method . MADS warning messages Methods Mads.madswarn(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:53 Arguments message::AbstractString : warning message source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make a conditional log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood : conditional log likelihood madsdata::Associative : MADS problem dictionary Returns: a conditional log likelihood function that accepts an array source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make array of conditional log-likelihoods Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:160 Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood madsdata::Associative : MADS problem dictionary Returns: array of conditional log-likelihoods source # Mads.makearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values Methods Mads.makearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Mads.makearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values source # Mads.makearrayloglikelihood \u2014 Method . Make a log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayloglikelihood(madsdata::Associative, loglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:127 Arguments loglikelihood : log likelihood madsdata::Associative : MADS problem dictionary Returns: a log likelihood function that accepts an array source # Mads.makebigdt! \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt!(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:35 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makebigdt \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:20 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makecomputeconcentrations \u2014 Method . Create a function to compute concentrations for all the observation points using Anasol Methods Mads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:179 Arguments madsdata::Associative : MADS problem dictionary Keywords calcpredictions : calculate zero weight predictions [default= true ] calczeroweightobs : calculate zero weight observations[default= false ] Returns: function to compute concentrations; the new function returns a dictionary of observations and model predicted concentrations Examples: computeconcentrations = Mads . makecomputeconcentrations ( madsdata ) paramkeys = Mads . getparamkeys ( madsdata ) paramdict = OrderedDict ( zip ( paramkeys , map ( key -> madsdata [ \"Parameters\" ][ key ][ \"init\" ], paramkeys ))) forward_preds = computeconcentrations ( paramdict ) source # Mads.makedixonprice \u2014 Method . Make dixon price Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price source # Mads.makedixonprice_gradient \u2014 Method . Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price gradient source # Mads.makedoublearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values, and returns an array of observations Methods Mads.makedoublearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Mads.makedoublearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values, and returning an array of observations source # Mads.makelmfunctions \u2014 Function . Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization Methods Mads.makelmfunctions(f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:100 Mads.makelmfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:121 Arguments f::Function : Function madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makelocalsafunction \u2014 Method . Make gradient function needed for local sensitivity analysis Methods Mads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:27 Arguments madsdata::Associative : MADS problem dictionary Keywords multiplycenterbyweights : multiply center by observation weights [default= true ] Returns: gradient function source # Mads.makelogprior \u2014 Method . Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata Methods Mads.makelogprior(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:396 Arguments madsdata::Associative : MADS problem dictionary Return: the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata source # Mads.makemadscommandfunction \u2014 Method . Make MADS function to execute the model defined in the input MADS problem dictionary Methods Mads.makemadscommandfunction(madsdata_in::Associative; obskeys, calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:60 Arguments madsdata_in::Associative : MADS problem dictionary Keywords calcpredictions : Calculate predictions [default= true ] calczeroweightobs : Calculate zero weight observations [default= false ] obskeys Example: Mads . makemadscommandfunction ( madsdata ) MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : execute a Julia function defined in an input Julia file. The function that should accept a parameter dictionary with all the model parameters as an input argument and should return an observation dictionary with all the model predicted observations. MADS will execute the first function defined in the file. MADS model : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Julia model : execute an internal Julia function that accepts a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Command : execute an external UNIX command or script that will execute an external model. Julia command : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an observation dictionary with model predictions. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at http://mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at http://mads.lanl.gov ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file Returns: Mads function to execute a forward model simulation source # Mads.makemadsconditionalloglikelihood \u2014 Method . Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary madsdata . Methods Mads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:419 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Return: the conditional log-likelihood source # Mads.makemadsloglikelihood \u2014 Method . Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under LogLikelihood or computed internally. Methods Mads.makemadsloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:454 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Returns: the log-likelihood for a given set of model parameters source # Mads.makemadsreusablefunction \u2014 Function . Make Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) Methods Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(paramkeys::Array{T,1} where T, obskeys::Array{T,1} where T, madsdatarestart::Union{Bool, String}, madscommandfunction::Function, restartdir::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:276 Arguments String} madscommandfunction::Function : Mads function to execute a forward model simulation madsdata::Associative : MADS problem dictionary madsdatarestart::Union{Bool : Restart type (memory/disk) or on/off status obskeys::Array{T,1} where T : Dictionary of observation keys paramkeys::Array{T,1} where T : Dictionary of parameter keys restartdir::String : Restart directory where the reusable model results are stored suffix::String : Suffix to be added to the name of restart directory Keywords usedict : Use dictionary [default= true ] Returns: Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) source # Mads.makempbfunctions \u2014 Method . Make forward model, gradient, objective functions needed for MathProgBase optimization Methods Mads.makempbfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:91 Arguments madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makepowell \u2014 Method . Make Powell test function for LM optimization Methods Mads.makepowell(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:163 Arguments n::Integer : number of observations Returns: Powell test function for LM optimization source # Mads.makepowell_gradient \u2014 Method . ake parameter gradients of the Powell test function for LM optimization Methods Mads.makepowell_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:187 Arguments n::Integer : number of observations Returns: arameter gradients of the Powell test function for LM optimization source # Mads.makerosenbrock \u2014 Method . Make Rosenbrock test function for LM optimization Methods Mads.makerosenbrock(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:118 Arguments n::Integer : number of observations Returns: Rosenbrock test function for LM optimization source # Mads.makerosenbrock_gradient \u2014 Method . Make parameter gradients of the Rosenbrock test function for LM optimization Methods Mads.makerosenbrock_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:140 Arguments n::Integer : number of observations Returns: parameter gradients of the Rosenbrock test function for LM optimization source # Mads.makerotatedhyperellipsoid \u2014 Method . Methods Mads.makerotatedhyperellipsoid(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:339 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid source # Mads.makerotatedhyperellipsoid_gradient \u2014 Method . Methods Mads.makerotatedhyperellipsoid_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:363 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid gradient source # Mads.makesphere \u2014 Method . Make sphere Methods Mads.makesphere(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:218 Arguments n::Integer : number of observations Returns: sphere source # Mads.makesphere_gradient \u2014 Method . Make sphere gradient Methods Mads.makesphere_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:239 Arguments n::Integer : number of observations Returns: sphere gradient source # Mads.makesumsquares \u2014 Method . Methods Mads.makesumsquares(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:301 Arguments n::Integer : number of observations Returns: sumsquares source # Mads.makesumsquares_gradient \u2014 Method . Methods Mads.makesumsquares_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:320 Arguments n::Integer : number of observations Returns: sumsquares gradient source # Mads.makesvrmodel \u2014 Function . Make SVR model functions (executor and cleaner) Methods Mads.makesvrmodel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Mads.makesvrmodel(madsdata::Associative, numberofsamples::Integer; check, addminmax, loadsvr, savesvr, svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of samples [default= 100 ] Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] loadsvr : load SVR models [default= false ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] seed : random seed [default= 0 ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: function performing SVR predictions function loading existing SVR models function saving SVR models function removing SVR models from the memory source # Mads.maxtorealmax! \u2014 Method . Scale down values larger than max(Float32) in a dataframe df so that Gadfly can plot the data Methods Mads.maxtorealmax!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1085 Arguments df::DataFrames.DataFrame : dataframe source # Mads.mdir \u2014 Method . Change the current directory to the Mads source dictionary Methods Mads.mdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:11 source # Mads.meshgrid \u2014 Method . Create mesh grid Methods Mads.meshgrid(x::Array{T,1} where T, y::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:402 Arguments x::Array{T,1} where T : vector of grid x coordinates y::Array{T,1} where T : vector of grid y coordinates Returns: 2D grid coordinates based on the coordinates contained in vectors x and y source # Mads.minimize \u2014 Method . Minimize Julia function using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive Returns: vector with the optimal parameter values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.mkdir \u2014 Method . Create a directory (if does not already exist) Methods Mads.mkdir(dirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1279 Arguments dirname::String : directory source # Mads.modelinformationcriteria \u2014 Function . Model section information criteria Methods Mads.modelinformationcriteria(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Mads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N} where N) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Arguments madsdata::Associative : MADS problem dictionary par::Array{Float64,N} where N : parameter array source # Mads.modobsweights! \u2014 Method . Modify (multiply) observation weights in the MADS problem dictionary Methods Mads.modobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:313 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for modifing observation weights source # Mads.modwellweights! \u2014 Method . Modify (multiply) well weights in the MADS problem dictionary Methods Mads.modwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:363 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.montecarlo \u2014 Method . Monte Carlo analysis Methods Mads.montecarlo(madsdata::Associative; N, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:188 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] filename : file name to save Monte-Carlo results Returns: parameter dictionary containing the data arrays Dumps: YAML output file with the parameter dictionary containing the data arrays Example: Mads . montecarlo ( madsdata ; N = 100 ) source # Mads.naive_get_deltax \u2014 Method . Naive Levenberg-Marquardt optimization: get the LM parameter space step Methods Mads.naive_get_deltax(JpJ::AbstractArray{Float64,2}, Jp::AbstractArray{Float64,2}, f0::Array{Float64,1}, lambda::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:246 Arguments Jp::AbstractArray{Float64,2} : Jacobian matrix times model parameters JpJ::AbstractArray{Float64,2} : Jacobian matrix times model parameters times transposed Jacobian matrix f0::Array{Float64,1} : initial model observations lambda::Number : Levenberg-Marquardt lambda Returns: the LM parameter space step source # Mads.naive_levenberg_marquardt \u2014 Function . Naive Levenberg-Marquardt optimization Methods Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, lambda, lambda_mu, np_lambda) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default=x->(x'*x)[1]] x0::Array{Float64,1} : initial parameter guess Keywords lambda : initial Levenberg-Marquardt lambda [default= 100 ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] maxEval : maximum number of model evaluations [default= 101 ] maxIter : maximum number of optimization iterations [default= 10 ] np_lambda : number of parallel lambda solves [default= 10 ] Returns: source # Mads.naive_lm_iteration \u2014 Method . Naive Levenberg-Marquardt optimization: perform LM iteration Methods Mads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:267 Arguments f0::Array{Float64,1} : initial model observations f::Function : forward model function g::Function : gradient function for the forward model lambdas::Array{Float64,1} : Levenberg-Marquardt lambdas o::Function : objective function x0::Array{Float64,1} : initial parameter guess Returns: source # Mads.noplot \u2014 Method . Disable MADS plotting Methods Mads.noplot() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:237 source # Mads.obslineismatch \u2014 Method . Match an instruction line in the Mads instruction file with model input file Methods Mads.obslineismatch(obsline::String, regexs::Array{Regex,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:954 Arguments obsline::String : instruction line regexs::Array{Regex,1} : regular expressions Returns: true or false source # Mads.of \u2014 Function . Compute objective function Methods Mads.of(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:58 Mads.of(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:51 Mads.of(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:55 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector source # Mads.paramarray2dict \u2014 Method . Convert a parameter array to a parameter dictionary of arrays Methods Mads.paramarray2dict(madsdata::Associative, array::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:242 Arguments array::Array : parameter array madsdata::Associative : MADS problem dictionary Returns: a parameter dictionary of arrays source # Mads.paramdict2array \u2014 Method . Convert a parameter dictionary of arrays to a parameter array Methods Mads.paramdict2array(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:261 Arguments dict::Associative : parameter dictionary of arrays Returns: a parameter array source # Mads.parsemadsdata! \u2014 Method . Parse loaded MADS problem dictionary Methods Mads.parsemadsdata!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:161 Arguments madsdata::Associative : MADS problem dictionary source # Mads.parsenodenames \u2014 Function . Parse string with node names defined in SLURM Methods Mads.parsenodenames(nodenames::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Mads.parsenodenames(nodenames::String, ntasks_per_node::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Arguments nodenames::String : string with node names defined in SLURM ntasks_per_node::Integer : number of parallel tasks per node [default= 1 ] Returns: vector with names of compute nodes (hosts) source # Mads.partialof \u2014 Method . Compute the sum of squared residuals for observations that match a regular expression Methods Mads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:84 Arguments madsdata::Associative : MADS problem dictionary regex::Regex : regular expression resultdict::Associative : result dictionary Returns: the sum of squared residuals for observations that match the regular expression source # Mads.pkgversion \u2014 Method . Get package version Methods Mads.pkgversion(modulestr::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:445 Arguments modulestr::String Returns: package version source # Mads.plotgrid \u2014 Function . Plot a 3D grid solution based on model predictions in array s , initial parameters, or user provided parameter values Methods Mads.plotgrid(madsdata::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:56 Mads.plotgrid(madsdata::Associative, s::Array{Float64,N} where N; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:5 Mads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:61 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : dictionary with model parameters s::Array{Float64,N} where N : model predictions array Keywords addtitle : add plot title [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) title : plot title Examples: Mads . plotgrid ( madsdata , s ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata , parameters ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) source # Mads.plotlocalsa \u2014 Method . Plot local sensitivity analysis results Methods Mads.plotlocalsa(filenameroot::String; keyword, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1219 Arguments filenameroot::String : problem file name root Keywords filename : output file name format : output plot format ( png , pdf , etc.) keyword : keyword to be added in the filename root Dumps: filename : output plot file source # Mads.plotmadsproblem \u2014 Method . Plot contaminant sources and wells defined in MADS problem dictionary Methods Mads.plotmadsproblem(madsdata::Associative; format, filename, keyword, hsize, vsize, gm) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:77 Arguments madsdata::Associative : MADS problem dictionary Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] gm hsize keyword : to be added in the filename vsize Dumps: plot of contaminant sources and wells source # Mads.plotmass \u2014 Method . Plot injected/reduced contaminant mass Methods Mads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasolPlot.jl:19 Arguments filename::String : output filename for the generated plot lambda::Array{Float64,1} : array with all the lambda values mass_injected::Array{Float64,1} : array with associated total injected mass mass_reduced::Array{Float64,1} : array with associated total reduced mass Keywords format : output plot format ( png , pdf , etc.) Dumps: image file with name filename and in specified format source # Mads.plotmatches \u2014 Function . Plot the matches between model predictions and observations Methods Mads.plotmatches(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, rx::Regex; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, dict_in::Associative; plotdata, filename, format, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:189 Mads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; plotdata, filename, format, key2time, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:165 Arguments dict_in::Associative : dictionary with model parameters madsdata::Associative : MADS problem dictionary result::Associative : dictionary with model predictions rx::Regex : regular expression to filter the outputs Keywords colors : array with plot colors display : display plots [default= false ] dpi : graph resolution [default= Mads.dpi ] filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : graph horizontal size [default= 8Gadfly.inch ] key2time : user provided function to convert observation keys to observation times linewidth : line width [default= 2Gadfly.pt ] noise : random noise magnitude [default= 0 ; no noise] notitle obs_plot_dots : plot data as dots or line [default= true ] plotdata : plot data (if false model predictions are ploted only) [default= true ] pointsize : data dot size [default= 4Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] title : graph title vsize : graph vertical size [default= 4Gadfly.inch ] xtitle : x-axis title [default= \"Time\" ] ymax ymin ytitle : y-axis title [default= \"y\" ] Dumps: plot of the matches between model predictions and observations Examples: Mads . plotmatches ( madsdata ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , dict_in ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result , r\"NO3\" ; filename = \"\" , format = \"\" ) source # Mads.plotobsSAresults \u2014 Method . Plot the sensitivity analysis results for the observations Methods Mads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle, linewidth, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:571 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results Keywords debug : [default= false ] filename : output file name filter : string or regex to plot only observations containing filter format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] keyword : to be added in the auto-generated filename linewidth : line width [default= 2Gadfly.pt ] pointsize : point size [default= 2Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] xtitle : x-axis title ytitle : y-axis title Dumps: plot of the sensitivity analysis results for the observations source # Mads.plotrobustnesscurves \u2014 Method . Plot BIG-DT robustness curves Methods Mads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGapPlot.jl:20 Arguments bigdtresults::Dict : BIG-DT results madsdata::Associative : MADS problem dictionary Keywords filename : output file name used to dump plots format : output plot format ( png , pdf , etc.) maxhoriz : maximum horizon [default= Inf ] maxprob : maximum probability [default= 1.0 ] Dumps: image file with name filename and in specified format source # Mads.plotseries \u2014 Function . Create plots of data series Methods Mads.plotseries(X::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Mads.plotseries(X::Array{T,2} where T, filename::String; format, xtitle, ytitle, title, logx, logy, keytitle, name, names, combined, hsize, vsize, linewidth, dpi, colors, xmin, xmax, ymin, ymax, xaxis) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Arguments X::Array{T,2} where T : matrix with the series data filename::String : output file name Keywords colors : colors to use in plots combined : combine plots [default= true ] dpi : graph resolution [default= Mads.dpi ] format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : horizontal size [default= 8Gadfly.inch ] keytitle linewidth : width of the lines in plot [default= 2Gadfly.pt ] logx logy name : series name [default= Sources ] names title : plot title [default= Sources ] vsize : vertical size [default= 4Gadfly.inch ] xaxis xmax xmin xtitle : x-axis title [default= X ] ymax ymin ytitle : y-axis title [default= Y ] Dumps: Plots of data series source # Mads.plotwellSAresults \u2014 Function . Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected) Methods Mads.plotwellSAresults(madsdata::Associative, result::Associative; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:436 Mads.plotwellSAresults(madsdata::Associative, result::Associative, wellname::String; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:447 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results wellname::String : well name Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] xtitle : x-axis title ytitle : y-axis title Dumps: Plot of the sensitivity analysis results for all the wells in the MADS problem dictionary source # Mads.printSAresults \u2014 Method . Print sensitivity analysis results Methods Mads.printSAresults(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:921 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printSAresults2 \u2014 Method . Print sensitivity analysis results (method 2) Methods Mads.printSAresults2(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1003 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printerrormsg \u2014 Method . Print error message Methods Mads.printerrormsg(errmsg) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:382 Arguments errmsg : error message source # Mads.printobservations \u2014 Function . Print (emit) observations in the MADS problem dictionary Methods Mads.printobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, io::IO) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, filename::String; json) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:432 Arguments filename::String : output file name io::IO : output stream madsdata::Associative : MADS problem dictionary Keywords json source # Mads.pull \u2014 Function . Pull (checkout) the latest version of Mads modules Methods Mads.pull(modulename::String; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Mads.pull() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Arguments modulename::String : module name source # Mads.push \u2014 Function . Push the latest version of Mads modules in the default remote repository Methods Mads.push(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Mads.push() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Arguments modulename::String : module name source # Mads.quietoff \u2014 Method . Make MADS not quiet Methods Mads.quietoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:96 source # Mads.quieton \u2014 Method . Make MADS quiet Methods Mads.quieton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:87 source # Mads.readasciipredictions \u2014 Method . Read MADS predictions from an ASCII file Methods Mads.readasciipredictions(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:44 Arguments filename::String : ASCII file name Returns: MADS predictions source # Mads.readmodeloutput \u2014 Method . Read model outputs saved for MADS Methods Mads.readmodeloutput(madsdata::Associative; obskeys) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:724 Arguments madsdata::Associative : MADS problem dictionary Keywords obskeys : observation keys [default=getobskeys(madsdata)] source # Mads.readobservations \u2014 Function . Read observations Methods Mads.readobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Mads.readobservations(madsdata::Associative, obskeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Arguments madsdata::Associative : MADS problem dictionary obskeys::Array{T,1} where T : observation keys [default= getobskeys(madsdata) ] Returns: dictionary with Mads observations source # Mads.readobservations_cmads \u2014 Method . Read observations using C MADS dynamic library Methods Mads.readobservations_cmads(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:15 Arguments madsdata::Associative : Mads problem dictionary Returns: observations source # Mads.readyamlpredictions \u2014 Method . Read MADS model predictions from a YAML file filename Methods Mads.readyamlpredictions(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:137 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in yaml input file source # Mads.recursivemkdir \u2014 Method . Create directories recursively (if does not already exist) Methods Mads.recursivemkdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1291 Arguments s::String Keywords filename source # Mads.recursivermdir \u2014 Method . Remove directories recursively Methods Mads.recursivermdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1325 Arguments s::String Keywords filename source # Mads.regexs2obs \u2014 Method . Get observations for a set of regular expressions Methods Mads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:975 Arguments getparamhere::Array{Bool,1} : parameters obsline::String : observation line obsnames::Array{String,1} : observation names regexs::Array{Regex,1} : regular expressions Returns: obsdict : observations source # Mads.reload \u2014 Method . Reload Mads modules Methods Mads.reload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:38 source # Mads.removesource! \u2014 Function . Remove a contamination source Methods Mads.removesource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Mads.removesource!(madsdata::Associative, sourceid::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] source # Mads.removesourceparameters! \u2014 Method . Remove contaminant source parameters Methods Mads.removesourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:136 Arguments madsdata::Associative : MADS problem dictionary source # Mads.required \u2014 Function . Lists modules required by a module (Mads by default) Methods Mads.required(modulename::String, filtermodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Arguments filtermodule::String : filter module name modulename::String : module name [default= \"Mads\" ] Returns: filtered modules source # Mads.resetmodelruns \u2014 Method . Reset the model runs count to be equal to zero Methods Mads.resetmodelruns() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:207 source # Mads.residuals \u2014 Function . Compute residuals Methods Mads.residuals(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:32 Mads.residuals(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:6 Mads.residuals(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:29 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector Returns: source # Mads.restartoff \u2014 Method . MADS restart off Methods Mads.restartoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:68 source # Mads.restarton \u2014 Method . MADS restart on Methods Mads.restarton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:59 source # Mads.reweighsamples \u2014 Method . Reweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing Methods Mads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:325 Arguments madsdata::Associative : MADS problem dictionary oldllhoods::Array{T,1} where T : the log likelihoods of the parameters in the old distribution predictions::Array : the model predictions for each of the samples Returns: vector of log-likelihoods after reweighing source # Mads.rmdir \u2014 Method . Remove directory Methods Mads.rmdir(dir::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1151 Arguments dir::String : directory to be removed Keywords path : path of the directory [default= current path ] source # Mads.rmfile \u2014 Method . Remove file Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String : file to be removed Keywords path : path of the file [default= current path ] source # Mads.rmfiles \u2014 Method . Remove files Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String Keywords path : path of the file [default= current path ] source # Mads.rmfiles_ext \u2014 Method . Remove files with extension ext Methods Mads.rmfiles_ext(ext::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1196 Arguments ext::String : extension Keywords path : path of the files to be removed [default= . ] source # Mads.rmfiles_root \u2014 Method . Remove files with root root Methods Mads.rmfiles_root(root::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1209 Arguments root::String : root Keywords path : path of the files to be removed [default= . ] source # Mads.rosenbrock \u2014 Method . Rosenbrock test function Methods Mads.rosenbrock(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:43 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.rosenbrock2_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock2_gradient_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:24 Arguments x::Array{T,1} where T : parameter vector Returns: parameter gradients source # Mads.rosenbrock2_lm \u2014 Method . Rosenbrock test function (more difficult to solve) Methods Mads.rosenbrock2_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:10 Arguments x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient! \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock_gradient!(x::Array{T,1} where T, grad::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:68 Arguments grad::Array{T,1} where T : gradient vector x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separately) Methods Mads.rosenbrock_gradient_lm(x::Array{T,1} where T; dx, center) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:85 Arguments x::Array{T,1} where T : parameter vector Keywords center : array with parameter observations at the center applied to compute numerical derivatives [default= Array{Float64}(0) ] dx : apply parameter step to compute numerical derivatives [default= false ] Returns: parameter gradients source # Mads.rosenbrock_hessian! \u2014 Method . Parameter Hessian of the Rosenbrock test function Methods Mads.rosenbrock_hessian!(x::Array{T,1} where T, hess::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:101 Arguments hess::Array{T,2} where T : Hessian matrix x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_lm \u2014 Method . Rosenbrock test function for LM optimization (returns the 2 components separately) Methods Mads.rosenbrock_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:57 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.runcmd \u2014 Function . Run external command and pipe stdout and stderr Methods Mads.runcmd(cmdstring::String; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:97 Mads.runcmd(cmd::Cmd; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:42 Arguments cmd::Cmd : command (as a julia command; e.g. ls ) cmdstring::String : command (as a string; e.g. \"ls\") Keywords pipe : [default= false ] quiet : [default= Mads.quiet ] waittime : wait time is second [default= Mads.executionwaittime ] Returns: command output command error message source # Mads.runremote \u2014 Function . Run remote command on a series of servers Methods Mads.runremote(cmd::String, nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Mads.runremote(cmd::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Arguments cmd::String : remote command nodenames::Array{String,1} : names of machines/nodes [default= madsservers ] Returns: output of running remote command source # Mads.saltelli \u2014 Method . Saltelli sensitivity analysis Methods Mads.saltelli(madsdata::Associative; N, seed, restartdir, parallel, checkpointfrequency) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:638 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] parallel : set to true if the model runs should be performed in parallel [default= false ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibrute \u2014 Method . Saltelli sensitivity analysis (brute force) Methods Mads.saltellibrute(madsdata::Associative; N, seed, restartdir) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:450 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 1000 ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibruteparallel \u2014 Method . Parallel version of saltellibrute source # Mads.saltelliparallel \u2014 Method . Parallel version of saltelli source # Mads.sampling \u2014 Method . Methods Mads.sampling(param::Array{T,1} where T, J::Array, numsamples::Number; seed, scale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:274 Arguments J::Array : Jacobian matrix numsamples::Number : Number of samples param::Array{T,1} where T : Parameter vector Keywords scale : data scaling [default= 1 ] seed : random esee [default= 0 ] Returns: generated samples (vector or array) vector of log-likelihoods source # Mads.savemadsfile \u2014 Function . Save MADS problem dictionary madsdata in MADS input file filename Methods Mads.savemadsfile(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, filename::String; julia, observations_separate, filenameobs) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Mads.savemadsfile(madsdata::Associative, parameters::Associative, filename::String; julia, explicit, observations_separate) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Arguments filename::String : input file name (e.g. input_file_name.mads ) madsdata::Associative : MADS problem dictionary parameters::Associative : Dictionary with parameters (optional) Keywords explicit : if true ignores MADS YAML file modifications and rereads the original input file [default= false ] filenameobs julia : if true use Julia JSON module to save [default= false ] observations_separate Example: Mads . savemadsfile ( madsdata ) Mads . savemadsfile ( madsdata , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" , explicit = true ) source # Mads.savemcmcresults \u2014 Method . Save MCMC chain in a file Methods Mads.savemcmcresults(chain::Array, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:143 Arguments chain::Array : MCMC chain filename::String : file name Dumps: the file containing MCMC chain source # Mads.savesaltellirestart \u2014 Method . Save Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.savesaltellirestart(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:619 Arguments evalmat::Array : saved array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts source # Mads.scatterplotsamples \u2014 Method . Create histogram/scatter plots of model parameter samples Methods Mads.scatterplotsamples(madsdata::Associative, samples::Array{T,2} where T, filename::String; format, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:401 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary samples::Array{T,2} where T : matrix with model parameters Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] pointsize : point size [default= 0.9Gadfly.mm ] Dumps: histogram/scatter plots of model parameter samples source # Mads.searchdir \u2014 Function . Get files in the current directory or in a directory defined by path matching pattern key which can be a string or regular expression Methods Mads.searchdir(key::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:764 Mads.searchdir(key::Regex; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:763 Arguments key::Regex : matching pattern for Mads input files (string or regular expression accepted) key::String : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= . ] Returns: filename : an array with file names matching the pattern in the specified directory Examples: - `Mads.searchdir(\"a\")` - `Mads.searchdir(r\"[A-B]\"; path = \".\")` - `Mads.searchdir(r\".*.cov\"; path = \".\")` source # Mads.set_nprocs_per_task \u2014 Function . Set number of processors needed for each parallel task at each node Methods Mads.set_nprocs_per_task() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Mads.set_nprocs_per_task(local_nprocs_per_task::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Arguments local_nprocs_per_task::Integer source # Mads.setallparamsoff! \u2014 Method . Set all parameters OFF Methods Mads.setallparamsoff!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:474 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setallparamson! \u2014 Method . Set all parameters ON Methods Mads.setallparamson!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:460 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setdebuglevel \u2014 Method . Set MADS debug level Methods Mads.setdebuglevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:178 Arguments level::Int64 : debug level source # Mads.setdefaultplotformat \u2014 Method . Set the default plot format ( SVG is the default format) Methods Mads.setdefaultplotformat(format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:19 Arguments format::String : plot format source # Mads.setdir \u2014 Function . Set the working directory (for parallel environments) Methods Mads.setdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:252 Mads.setdir(dir) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:247 Arguments dir : directory Example: @everywhere Mads . setdir () @everywhere Mads . setdir ( \"/home/monty\" ) source # Mads.setexecutionwaittime \u2014 Method . Set maximum execution wait time for forward model runs in seconds Methods Mads.setexecutionwaittime(waitime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:198 Arguments waitime::Float64 : maximum execution wait time for forward model runs in seconds source # Mads.setmadsinputfile \u2014 Method . Set a default MADS input file Methods Mads.setmadsinputfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:351 Arguments filename::String : input file name (e.g. input_file_name.mads ) source # Mads.setmadsservers \u2014 Function . Generate a list of Mads servers Methods Mads.setmadsservers(first::Int64, last::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers(first::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Arguments first::Int64 : first [default= 0 ] last::Int64 : last [default= 18 ] Returns array string of mads servers source # Mads.setmodelinputs \u2014 Function . Set model input files; delete files where model output should be saved for MADS Methods Mads.setmodelinputs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Mads.setmodelinputs(madsdata::Associative, parameters::Associative; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords path : path for the files [default= . ] source # Mads.setnewmadsfilename \u2014 Function . Set new mads file name Methods Mads.setnewmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:505 Mads.setnewmadsfilename(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:502 Arguments filename::String : file name madsdata::Associative : MADS problem dictionary Returns: new file name source # Mads.setobservationtargets! \u2014 Method . Set observations (calibration targets) in the MADS problem dictionary based on a predictions dictionary Methods Mads.setobservationtargets!(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:528 Arguments madsdata::Associative : Mads problem dictionary predictions::Associative : dictionary with model predictions source # Mads.setobstime! \u2014 Function . Set observation time based on the observation name in the MADS problem dictionary Methods Mads.setobstime!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, separator::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:264 Arguments madsdata::Associative : MADS problem dictionary rx::Regex : regular expression to match separator::String : separator [default= _ ] Examples: Mads . setobstime! ( madsdata , \"_t\" ) Mads . setobstime! ( madsdata , r\"[A-x]*_t([0-9,.]+)\" ) source # Mads.setobsweights! \u2014 Method . Set observation weights in the MADS problem dictionary Methods Mads.setobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:299 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for observation weights source # Mads.setparamoff! \u2014 Method . Set a specific parameter with a key parameterkey OFF Methods Mads.setparamoff!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:499 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamon! \u2014 Method . Set a specific parameter with a key parameterkey ON Methods Mads.setparamon!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:488 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamsdistnormal! \u2014 Method . Set normal parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistnormal!(madsdata::Associative, mean::Array{T,1} where T, stddev::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:511 Arguments madsdata::Associative : MADS problem dictionary mean::Array{T,1} where T : array with the mean values stddev::Array{T,1} where T : array with the standard deviation values source # Mads.setparamsdistuniform! \u2014 Method . Set uniform parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistuniform!(madsdata::Associative, min::Array{T,1} where T, max::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:526 Arguments madsdata::Associative : MADS problem dictionary max::Array{T,1} where T : array with the maximum values min::Array{T,1} where T : array with the minimum values source # Mads.setparamsinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.setplotfileformat \u2014 Method . Set image file format based on the filename extension, or sets the filename extension based on the requested format . The default format is SVG . PNG , PDF , ESP , and PS are also supported. Methods Mads.setplotfileformat(filename::String, format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:39 Arguments filename::String : output file name format::String : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] Returns: output file name output plot format ( png , pdf , etc.) source # Mads.setprocs \u2014 Function . Set the available processors based on environmental variables (supports SLURM only at the moment) Methods Mads.setprocs(; ntasks_per_node, nprocs_per_task, nodenames, mads_servers, test, quiet, dir, exename) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:48 Mads.setprocs(np::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:45 Mads.setprocs(np::Integer, nt::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:32 Arguments np::Integer : number of processors [default= 1 ] nt::Integer : number of threads[default= 1 ] Keywords dir : common directory shared by all the jobs exename : location of the julia executable (the same version of julia is needed on all the workers) mads_servers : if true use MADS servers (LANL only) [default= false ] nodenames : array with names of machines/nodes to be invoked nprocs_per_task : number of processors needed for each parallel task at each node [default= Mads.nprocs_per_task ] ntasks_per_node : number of parallel tasks per node [default= 0 ] quiet : suppress output [default= Mads.quiet ] test : test the servers and connect to each one ones at a time [default= false ] Returns: vector with names of compute nodes (hosts) Example: Mads . setprocs () Mads . setprocs ( 4 ) Mads . setprocs ( 4 , 8 ) Mads . setprocs ( ntasks_per_node = 4 ) Mads . setprocs ( ntasks_per_node = 32 , mads_servers = true ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = madsservers ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = [ \"madsmax\" , \"madszem\" ]) Mads . setprocs ( ntasks_per_node = 64 , nodenames = \"wc[096-157,160,175]\" ) Mads . setprocs ( ntasks_per_node = 64 , mads_servers = true , exename = \"/home/monty/bin/julia\" , dir = \"/home/monty\" ) source # Mads.setseed \u2014 Function . Set / get current random seed. seed < 0 gets seed, anything else sets it. Methods Mads.setseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Arguments quiet::Bool : [default= true ] seed::Integer : random seed source # Mads.setsindx! \u2014 Method . Set sin-space dx Methods Mads.setsindx!(madsdata::Associative, sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:335 Arguments madsdata::Associative : MADS problem dictionary sindx::Number : sin-space dx value Returns: nothing source # Mads.setsindx \u2014 Method . Set sin-space dx Methods Mads.setsindx(sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:352 Arguments sindx::Number Returns: nothing source # Mads.setsourceinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary for the Source class Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.settarget! \u2014 Method . Set observation target Methods Mads.settarget!(o::Associative, target::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:243 Arguments o::Associative : observation data target::Number : observation target source # Mads.settime! \u2014 Method . Set observation time Methods Mads.settime!(o::Associative, time::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:165 Arguments o::Associative : observation data time::Number : observation time source # Mads.setverbositylevel \u2014 Method . Set MADS verbosity level Methods Mads.setverbositylevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:188 Arguments level::Int64 : debug level source # Mads.setweight! \u2014 Method . Set observation weight Methods Mads.setweight!(o::Associative, weight::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:204 Arguments o::Associative : observation data weight::Number : observation weight source # Mads.setwellweights! \u2014 Method . Set well weights in the MADS problem dictionary Methods Mads.setwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:344 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.showallparameters \u2014 Method . Show all parameters in the MADS problem dictionary Methods Mads.showallparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:610 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showobservations \u2014 Method . Show observations in the MADS problem dictionary Methods Mads.showobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:403 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showparameters \u2014 Method . Show parameters in the MADS problem dictionary Methods Mads.showparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:574 Arguments madsdata::Associative : MADS problem dictionary source # Mads.sinetransform \u2014 Function . Sine transformation of model parameters Methods Mads.sinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:36 Mads.sinetransform(sineparams::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:46 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T sineparams::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation of model parameters source # Mads.sinetransformfunction \u2014 Method . Sine transformation of a function Methods Mads.sinetransformfunction(f::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:80 Arguments f::Function : function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation source # Mads.sinetransformgradient \u2014 Method . Sine transformation of a gradient function Methods Mads.sinetransformgradient(g::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T; sindx) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:101 Arguments g::Function : gradient function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : vector with parameter lower bounds upperbounds::Array{T,1} where T : vector with parameter upper bounds Keywords sindx : sin-space parameter step applied to compute numerical derivatives [default= 0.1 ] Returns: Sine transformation of a gradient function source # Mads.spaghettiplot \u2014 Function . Generate a combined spaghetti plot for the selected ( type != null ) model parameter Methods Mads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:885 Mads.spaghettiplot(madsdata::Associative, dictarray::Associative; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:889 Mads.spaghettiplot(madsdata::Associative, array::Array; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:926 Arguments array::Array : data arrays to be plotted dictarray::Associative : dictionary array containing the data arrays to be plotted madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples Keywords filename : output file name used to output the produced plots format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots (if filename is not defined) linewidth : width of the lines in plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true [default] or false ) plotdata : plot data (if false model predictions are plotted only) [default= true ] pointsize : size of the markers in plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] yfit : fit vertical axis range [default= false ] ytitle : y axis title [default= Y ] Dumps: Image file with a spaghetti plot ( <mads_rootname>-<keyword>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplot ( madsdata , dictarray ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , array ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , number_of_samples ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.spaghettiplots \u2014 Function . Generate separate spaghetti plots for each selected ( type != null ) model parameter Methods Mads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:726 Mads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:731 Arguments madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples paramdictarray::DataStructures.OrderedDict : parameter dictionary containing the data arrays to be plotted Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots linewidth : width of the lines on the plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true (default) or false ) pointsize : size of the markers on the plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] ytitle : y axis title [default= Y ] Dumps: A series of image files with spaghetti plots for each selected ( type != null ) model parameter ( <mads_rootname>-<keyword>-<param_key>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplots ( madsdata , paramdictarray ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplots ( madsdata , number_of_samples ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.sphericalcov \u2014 Method . Spherical spatial covariance function Methods Mads.sphericalcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:43 Arguments h::Number : separation distance maxcov::Number : max covariance scale::Number : scale Returns: covariance source # Mads.sphericalvariogram \u2014 Method . Spherical variogram Methods Mads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:59 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Spherical variogram source # Mads.sprintf \u2014 Method . Convert @sprintf macro into sprintf function source # Mads.status \u2014 Function . Status of Mads modules Methods Mads.status(madsmodule::String; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:257 Mads.status(; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:252 Arguments madsmodule::String : mads module Keywords git : use git [default= true or Mads.madsgit ] gitmore : use even more git [default= false ] Returns: true or false source # Mads.stderrcaptureoff \u2014 Method . Restore STDERR Methods Mads.stderrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:140 Returns: standered error source # Mads.stderrcaptureon \u2014 Method . Redirect STDERR to a reader Methods Mads.stderrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:121 source # Mads.stdoutcaptureoff \u2014 Method . Restore STDOUT Methods Mads.stdoutcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:106 Returns: standered output source # Mads.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader Methods Mads.stdoutcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:87 source # Mads.stdouterrcaptureoff \u2014 Method . Restore STDOUT & STDERR Methods Mads.stdouterrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:171 Returns: standered output amd standered error source # Mads.stdouterrcaptureon \u2014 Method . Redirect STDOUT & STDERR to readers Methods Mads.stdouterrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:155 source # Mads.svrdump \u2014 Method . Dump SVR models in files Methods Mads.svrdump(svrmodel::Array{SVR.svmmodel,1}, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:141 Arguments numberofsamples::Int64 : number of samples rootname::String : root name svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrfree \u2014 Method . Free SVR Methods Mads.svrfree(svrmodel::Array{SVR.svmmodel,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:123 Arguments svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrload \u2014 Method . Load SVR models from files Methods Mads.svrload(npred::Int64, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:164 Arguments npred::Int64 : number of model predictions numberofsamples::Int64 : number of samples rootname::String : root name Returns: Array of SVR models for each model prediction source # Mads.svrpredict \u2014 Function . Predict SVR Methods Mads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,2}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:96 Arguments paramarray::Array{Float64,2} : parameter array svrmodel::Array{SVR.svmmodel,1} : array of SVR models Returns: SVR predicted observations (dependent variables) for a given set of parameters (independent variables) source # Mads.svrtrain \u2014 Function . Train SVR Methods Mads.svrtrain(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Mads.svrtrain(madsdata::Associative, paramarray::Array{Float64,2}; check, savesvr, addminmax, svm_type, kernel_type, degree, gamma, coef0, C, nu, cache_size, eps, shrinking, probability, verbose, tol) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:6 Mads.svrtrain(madsdata::Associative, numberofsamples::Integer; addminmax, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random samples in the training set [default= 100 ] paramarray::Array{Float64,2} Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: Array of SVR models source # Mads.symlinkdir \u2014 Method . Create a symbolic link of a file filename in a directory dirtarget Methods Mads.symlinkdir(filename::String, dirtarget::String, dirsource::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1137 Arguments dirsource::String dirtarget::String : target directory filename::String : file name source # Mads.symlinkdirfiles \u2014 Method . Create a symbolic link of all the files in a directory dirsource in a directory dirtarget Methods Mads.symlinkdirfiles(dirsource::String, dirtarget::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1119 Arguments dirsource::String : source directory dirtarget::String : target directory source # Mads.tag \u2014 Function . Tag Mads modules with a default argument :patch Methods Mads.tag(madsmodule::String, versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(madsmodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Mads.tag() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Arguments madsmodule::String : mads module name versionsym::Symbol : version symbol [default= :patch ] source # Mads.test \u2014 Function . Perform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace; reload(\"Mads.jl\") if needed) Methods Mads.test(testname::String; madstest) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Mads.test() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Arguments testname::String : name of the test to execute; module or example Keywords madstest : test Mads [default= true ] source # Mads.testj \u2014 Function . Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) Methods Mads.testj(coverage::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Mads.testj() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Arguments coverage::Bool : [default= false ] source # Mads.transposematrix \u2014 Method . Transpose non-numeric matrix Methods Mads.transposematrix(a::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:372 Arguments a::Array{T,2} where T : matrix source # Mads.transposevector \u2014 Method . Transpose non-numeric vector Methods Mads.transposevector(a::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:362 Arguments a::Array{T,1} where T : vector source # Mads.untag \u2014 Method . Untag specific version Methods Mads.untag(madsmodule::String, version::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:357 Arguments madsmodule::String : mads module name version::String : version source # Mads.vectoroff \u2014 Method . MADS vector calls off Methods Mads.vectoroff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:41 source # Mads.vectoron \u2014 Method . MADS vector calls on Methods Mads.vectoron() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:32 source # Mads.void2nan! \u2014 Method . Convert Void's into NaN's in a dictionary Methods Mads.void2nan!(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1043 Arguments dict::Associative : dictionary source # Mads.weightedstats \u2014 Method . Get weighted mean and variance samples Methods Mads.weightedstats(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:382 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: vector of sample means vector of sample variances source # Mads.welloff! \u2014 Method . Turn off a specific well in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Mads.wellon!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:585 Arguments madsdata::Associative : MADS problem dictionary rx::Regex wellname::String : name of the well to be turned on source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned on source # Mads.wells2observations! \u2014 Method . Convert Wells class to Observations class in the MADS problem dictionary Methods Mads.wells2observations!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:676 Arguments madsdata::Associative : MADS problem dictionary source # Mads.writeparameters \u2014 Function . Write model parameters Methods Mads.writeparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Mads.writeparameters(madsdata::Associative, parameters::Associative; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.writeparametersviatemplate \u2014 Method . Write parameters via MADS template ( templatefilename ) to an output file ( outputfilename ) Methods Mads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:829 Arguments outputfilename : output file name parameters : parameters templatefilename : tmplate file name Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.@stderrcapture \u2014 Macro . Capture STDERR of a block source # Mads.@stdoutcapture \u2014 Macro . Capture STDOUT of a block source # Mads.@stdouterrcapture \u2014 Macro . Capture STDERR & STDERR of a block source # Mads.@tryimport \u2014 Macro . Try to import a module source # Mads.MadsModel \u2014 Type . MadsModel type applied for MathProgBase analyses source","title":"Mads.jl"},{"location":"Modules/MetaProgTools/","text":"MetaProgTools.jl Module with Meta Programming Tools. MetaProgTools.jl module functions: # MetaProgTools.getsymbols \u2014 Method . Get symbols source # MetaProgTools.in \u2014 Method . Find a needle in a haystack source # MetaProgTools.populateexpression \u2014 Method . Populate Expression source # MetaProgTools.replacesymbol \u2014 Method . Replace Symbol source","title":"MetaProgTools"},{"location":"Modules/MetaProgTools/#metaprogtoolsjl","text":"Module with Meta Programming Tools. MetaProgTools.jl module functions: # MetaProgTools.getsymbols \u2014 Method . Get symbols source # MetaProgTools.in \u2014 Method . Find a needle in a haystack source # MetaProgTools.populateexpression \u2014 Method . Populate Expression source # MetaProgTools.replacesymbol \u2014 Method . Replace Symbol source","title":"MetaProgTools.jl"},{"location":"Modules/ReusableFunctions/","text":"ReusableFunctions.jl Module ReusableFunctions provides automated storage and retrieval of results for Julia function calls. ReusableFunctions.jl module functions: # ReusableFunctions.checkhashfilename \u2014 Method . Check if a file with a filename based on hash exists source # ReusableFunctions.gethashfilename \u2014 Method . Define a filename based on hash source # ReusableFunctions.loadresultfile \u2014 Method . Load JLD result file source # ReusableFunctions.maker3function \u2014 Method . Make a reusable function expecting both regular and keyword arguments source # ReusableFunctions.quietoff \u2014 Method . Make ReusableFunctions not quiet source # ReusableFunctions.quieton \u2014 Method . Make ReusableFunctions quiet source # ReusableFunctions.resetcomputes \u2014 Method . Reset computes counter source # ReusableFunctions.resetrestarts \u2014 Method . Reset restarts counter source # ReusableFunctions.saveresultfile \u2014 Method . Save JLD result file source","title":"ReusableFunctions"},{"location":"Modules/ReusableFunctions/#reusablefunctionsjl","text":"Module ReusableFunctions provides automated storage and retrieval of results for Julia function calls. ReusableFunctions.jl module functions: # ReusableFunctions.checkhashfilename \u2014 Method . Check if a file with a filename based on hash exists source # ReusableFunctions.gethashfilename \u2014 Method . Define a filename based on hash source # ReusableFunctions.loadresultfile \u2014 Method . Load JLD result file source # ReusableFunctions.maker3function \u2014 Method . Make a reusable function expecting both regular and keyword arguments source # ReusableFunctions.quietoff \u2014 Method . Make ReusableFunctions not quiet source # ReusableFunctions.quieton \u2014 Method . Make ReusableFunctions quiet source # ReusableFunctions.resetcomputes \u2014 Method . Reset computes counter source # ReusableFunctions.resetrestarts \u2014 Method . Reset restarts counter source # ReusableFunctions.saveresultfile \u2014 Method . Save JLD result file source","title":"ReusableFunctions.jl"},{"location":"Modules/RobustPmap/","text":"RobustPmap.jl Module RobustPmap provides robust pmap calls for efficient parallelization and high-performance computing in Julia. RobustPmap.jl module functions: # RobustPmap.checkexceptions \u2014 Function . Check for type exceptions source # RobustPmap.crpmap \u2014 Method . Robust pmap call with checkpoints source # RobustPmap.rpmap \u2014 Method . Robust pmap call source","title":"RobustPmap"},{"location":"Modules/RobustPmap/#robustpmapjl","text":"Module RobustPmap provides robust pmap calls for efficient parallelization and high-performance computing in Julia. RobustPmap.jl module functions: # RobustPmap.checkexceptions \u2014 Function . Check for type exceptions source # RobustPmap.crpmap \u2014 Method . Robust pmap call with checkpoints source # RobustPmap.rpmap \u2014 Method . Robust pmap call source","title":"RobustPmap.jl"},{"location":"Modules/SVR/","text":"SVR.jl Module SVR provides Support Vector Regression (SVR) using libSVM library. SVR.jl module functions: # SVR.apredict \u2014 Method . Predict based on a libSVM model Methods SVR.apredict(y::Array{T,1} where T, x::Array; kw...) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:269 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Return: predicted dependent variables source # SVR.freemodel \u2014 Method . Free a libSVM model Methods SVR.freemodel(pmodel::SVR.svmmodel) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:319 Arguments pmodel::SVR.svmmodel : svm model source # SVR.liboutput \u2014 Method . catch lib output Methods SVR.liboutput(str::Ptr{UInt8}) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:97 Arguments str::Ptr{UInt8} : string source # SVR.loadmodel \u2014 Method . Load a libSVM model Methods SVR.loadmodel(filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:285 Arguments filename::String : input file name Returns: SVM model source # SVR.mapnodes \u2014 Method . Methods SVR.mapnodes(x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:184 Arguments x::Array : source # SVR.mapparam \u2014 Method . Methods SVR.mapparam(; svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, nr_weight, weight_label, weight) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:161 Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1.0 ] kernel_type : kernel type [default= RBF ] nr_weight : [default= 0 ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] p : epsilon for EPSILON_SVR [default= 0.1 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] weight : [default= Ptr{Cdouble}(0x0000000000000000) ] weight_label : [default= Ptr{Cint}(0x0000000000000000) ] Returns: parameter source # SVR.predict \u2014 Method . Predict based on a libSVM model Methods SVR.predict(pmodel::SVR.svmmodel, x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:243 Arguments pmodel::SVR.svmmodel : the model that prediction is based on x::Array : array of independent variables Return: predicted dependent variables source # SVR.r2 \u2014 Method . Compute the coefficient of determination (r2) Methods SVR.r2(x, y) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:364 Arguments x : observed data y : predicted data Returns: coefficient of determination (r2) source # SVR.readlibsvmfile \u2014 Method . Read a libSVM file Methods SVR.readlibsvmfile(file::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:338 Arguments file::String : file name Returns: array of independent variables vector of dependent variables source # SVR.savemodel \u2014 Method . Save a libSVM model Methods SVR.savemodel(pmodel::SVR.svmmodel, filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:306 Arguments filename::String : output file name pmodel::SVR.svmmodel : svm model Dumps: file with saved model source # SVR.train \u2014 Method . Train based on a libSVM model Methods SVR.train(y::Array{T,1} where T, x::Array; svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:223 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.1 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/size(x, 1) ] kernel_type : kernel type [default= RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: SVM model source","title":"SVR"},{"location":"Modules/SVR/#svrjl","text":"Module SVR provides Support Vector Regression (SVR) using libSVM library. SVR.jl module functions: # SVR.apredict \u2014 Method . Predict based on a libSVM model Methods SVR.apredict(y::Array{T,1} where T, x::Array; kw...) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:269 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Return: predicted dependent variables source # SVR.freemodel \u2014 Method . Free a libSVM model Methods SVR.freemodel(pmodel::SVR.svmmodel) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:319 Arguments pmodel::SVR.svmmodel : svm model source # SVR.liboutput \u2014 Method . catch lib output Methods SVR.liboutput(str::Ptr{UInt8}) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:97 Arguments str::Ptr{UInt8} : string source # SVR.loadmodel \u2014 Method . Load a libSVM model Methods SVR.loadmodel(filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:285 Arguments filename::String : input file name Returns: SVM model source # SVR.mapnodes \u2014 Method . Methods SVR.mapnodes(x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:184 Arguments x::Array : source # SVR.mapparam \u2014 Method . Methods SVR.mapparam(; svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, nr_weight, weight_label, weight) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:161 Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1.0 ] kernel_type : kernel type [default= RBF ] nr_weight : [default= 0 ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] p : epsilon for EPSILON_SVR [default= 0.1 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] weight : [default= Ptr{Cdouble}(0x0000000000000000) ] weight_label : [default= Ptr{Cint}(0x0000000000000000) ] Returns: parameter source # SVR.predict \u2014 Method . Predict based on a libSVM model Methods SVR.predict(pmodel::SVR.svmmodel, x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:243 Arguments pmodel::SVR.svmmodel : the model that prediction is based on x::Array : array of independent variables Return: predicted dependent variables source # SVR.r2 \u2014 Method . Compute the coefficient of determination (r2) Methods SVR.r2(x, y) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:364 Arguments x : observed data y : predicted data Returns: coefficient of determination (r2) source # SVR.readlibsvmfile \u2014 Method . Read a libSVM file Methods SVR.readlibsvmfile(file::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:338 Arguments file::String : file name Returns: array of independent variables vector of dependent variables source # SVR.savemodel \u2014 Method . Save a libSVM model Methods SVR.savemodel(pmodel::SVR.svmmodel, filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:306 Arguments filename::String : output file name pmodel::SVR.svmmodel : svm model Dumps: file with saved model source # SVR.train \u2014 Method . Train based on a libSVM model Methods SVR.train(y::Array{T,1} where T, x::Array; svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:223 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.1 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/size(x, 1) ] kernel_type : kernel type [default= RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: SVM model source","title":"SVR.jl"},{"location":"Notebooks/","text":"Mads examples using Jupyter notebooks: Contaminant transport >>> download -:- view Blind Source Separation >>> download -:- view","title":"Notebooks"},{"location":"Notebooks/#mads-examples-using-jupyter-notebooks","text":"Contaminant transport >>> download -:- view Blind Source Separation >>> download -:- view","title":"Mads examples using Jupyter notebooks:"},{"location":"build/AffineInvariantMCMC/","text":"AffineInvariantMCMC.jl Module AffineInvariantMCMC.jl provides functions for Bayesian sampling using Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) based on a paper by Goodman & Weare, \"Ensemble samplers with affine invariance\" Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65 , 2010. AffineInvariantMCMC.jl module functions: # AffineInvariantMCMC.flattenmcmcarray \u2014 Method . Flatten MCMC arrays source # AffineInvariantMCMC.sample \u2014 Function . Bayesian sampling using Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) AffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1) Arguments: llhood : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood()) numwalkers : number of walkers x0 : normalized initial parameters (matrix of size (length(params), numwalkers)) thinning : removal of any thinning realization a : Returns: mcmcchain : final MCMC chain llhoodvals : log likelihoods of the final samples in the chain Reference: Goodman & Weare, \"Ensemble samplers with affine invariance\", Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65, 2010. source","title":"AffineInvariantMCMC"},{"location":"build/AffineInvariantMCMC/#affineinvariantmcmcjl","text":"Module AffineInvariantMCMC.jl provides functions for Bayesian sampling using Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) based on a paper by Goodman & Weare, \"Ensemble samplers with affine invariance\" Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65 , 2010. AffineInvariantMCMC.jl module functions: # AffineInvariantMCMC.flattenmcmcarray \u2014 Method . Flatten MCMC arrays source # AffineInvariantMCMC.sample \u2014 Function . Bayesian sampling using Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) AffineInvariantMCMC.sample(llhood, numwalkers=10, numsamples_perwalker=100, thinning=1) Arguments: llhood : function estimating loglikelihood (for example, generated using Mads.makearrayloglikelihood()) numwalkers : number of walkers x0 : normalized initial parameters (matrix of size (length(params), numwalkers)) thinning : removal of any thinning realization a : Returns: mcmcchain : final MCMC chain llhoodvals : log likelihoods of the final samples in the chain Reference: Goodman & Weare, \"Ensemble samplers with affine invariance\", Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65, 2010. source","title":"AffineInvariantMCMC.jl"},{"location":"build/Anasol/","text":"Anasol.jl Module Anasol.jl provides a series of analytical solutions for groundwater contaminant transport in 1, 2, and 3 dimensions. The provided solutions have: different source types - instantaneous contaminant release - continuous contaminant release with a unit flux - continuous contaminant release with a given constant flux different source shapes - constrained (within predefined limits) - distributed (assuming normal distribution) different dispersion models - classical (Fickian) - fractional Brownian different boundaries along each axis - infinite (no boundary) - reflecting - absorbing Functions have the following arguments: t : time to compute the concentration x : spatial coordinates of the point to compute the concentration x01 / x02 / x03 : contaminant source coordinates sigma01 / sigma02 / sigma01 : contaminant source sizes (if a constrained source) or standard deviations (if a distributed source) sourcestrength : user-provided function defining time-dependent source strength t0 / t1 : contaminant release times (source is released between t0 and t1 ) v1 / v2 / v3 : groundwater flow velocity components sigma1 / sigma2 / sigma3 : groundwater flow dispersion components lambda : half-life contaminant decay H1 / H2 / H3 : Hurst coefficients in the case of fractional Brownian dispersion xb1 / xb2 / xb3 : locations of the domain boundaries Anasol.jl module functions: # Anasol.documentationoff \u2014 Method . Do not make documentation Methods Anasol.documentationoff() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:236 source # Anasol.documentationon \u2014 Method . Make documentation Methods Anasol.documentationon() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:227 source # Anasol.@code \u2014 Macro . code the code macro is used to put a line of code (or a quote) onto the growing gen_code function. source # Anasol.@gen_code \u2014 Macro . gen_code rejigs the standard julia @generate macro so that it creates a code expression variable that can be extended using the @code macro. At the end of the function it automatically outputs the result. source","title":"Anasol"},{"location":"build/Anasol/#anasoljl","text":"Module Anasol.jl provides a series of analytical solutions for groundwater contaminant transport in 1, 2, and 3 dimensions. The provided solutions have: different source types - instantaneous contaminant release - continuous contaminant release with a unit flux - continuous contaminant release with a given constant flux different source shapes - constrained (within predefined limits) - distributed (assuming normal distribution) different dispersion models - classical (Fickian) - fractional Brownian different boundaries along each axis - infinite (no boundary) - reflecting - absorbing Functions have the following arguments: t : time to compute the concentration x : spatial coordinates of the point to compute the concentration x01 / x02 / x03 : contaminant source coordinates sigma01 / sigma02 / sigma01 : contaminant source sizes (if a constrained source) or standard deviations (if a distributed source) sourcestrength : user-provided function defining time-dependent source strength t0 / t1 : contaminant release times (source is released between t0 and t1 ) v1 / v2 / v3 : groundwater flow velocity components sigma1 / sigma2 / sigma3 : groundwater flow dispersion components lambda : half-life contaminant decay H1 / H2 / H3 : Hurst coefficients in the case of fractional Brownian dispersion xb1 / xb2 / xb3 : locations of the domain boundaries Anasol.jl module functions: # Anasol.documentationoff \u2014 Method . Do not make documentation Methods Anasol.documentationoff() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:236 source # Anasol.documentationon \u2014 Method . Make documentation Methods Anasol.documentationon() in Anasol : /Users/monty/.julia/v0.6/Anasol/src/Anasol.jl:227 source # Anasol.@code \u2014 Macro . code the code macro is used to put a line of code (or a quote) onto the growing gen_code function. source # Anasol.@gen_code \u2014 Macro . gen_code rejigs the standard julia @generate macro so that it creates a code expression variable that can be extended using the @code macro. At the end of the function it automatically outputs the result. source","title":"Anasol.jl"},{"location":"build/BIGUQ/","text":"BIGUQ.jl Module BIGUQ provides advanced techniques for Uncertainty Quantification, Experimental Design and Decision Analysis based on Bayesian Information Gap Decision Theory (BIGDT). References: O\u2019Malley, D., Vesselinov, V.V., A combined probabilistic/non-probabilistic decision analysis for contaminant remediation, Journal on Uncertainty Quantification, SIAM/ASA, 10.1137/140965132, 2014. O\u2019Malley, D., Vesselinov, V.V., Bayesian-Information-Gap decision theory with an application to CO2 sequestration, Water Resources Research, 10.1002/2015WR017413, 2015. Grasinger, M., O'Malley, D., Vesselinov, V.V., Karra, S., Decision Analysis for Robust CO2 Injection: Application of Bayesian-Information-Gap Decision Theory, International Journal of Greenhouse Gas Control, 10.1016/j.ijggc.2016.02.017, 2016. Relevant examples: Information Gap Analysis Decision Analysis BIGUQ.jl module functions: # BIGUQ.getmcmcchain \u2014 Method . Get MCMC chain source # BIGUQ.makebigdts \u2014 Method . Make BIGDT analyses for each possible decision assuming that the proposed observations proposedobs are observed source # BIGUQ.makebigdts \u2014 Method . Makes BIGDT analyses for each possible decision assuming that no more observations will be made source # BIGUQ.BigDT \u2014 Type . BigOED type source # BIGUQ.BigOED \u2014 Type . BigOED type source","title":"BIGUQ"},{"location":"build/BIGUQ/#biguqjl","text":"Module BIGUQ provides advanced techniques for Uncertainty Quantification, Experimental Design and Decision Analysis based on Bayesian Information Gap Decision Theory (BIGDT). References: O\u2019Malley, D., Vesselinov, V.V., A combined probabilistic/non-probabilistic decision analysis for contaminant remediation, Journal on Uncertainty Quantification, SIAM/ASA, 10.1137/140965132, 2014. O\u2019Malley, D., Vesselinov, V.V., Bayesian-Information-Gap decision theory with an application to CO2 sequestration, Water Resources Research, 10.1002/2015WR017413, 2015. Grasinger, M., O'Malley, D., Vesselinov, V.V., Karra, S., Decision Analysis for Robust CO2 Injection: Application of Bayesian-Information-Gap Decision Theory, International Journal of Greenhouse Gas Control, 10.1016/j.ijggc.2016.02.017, 2016. Relevant examples: Information Gap Analysis Decision Analysis BIGUQ.jl module functions: # BIGUQ.getmcmcchain \u2014 Method . Get MCMC chain source # BIGUQ.makebigdts \u2014 Method . Make BIGDT analyses for each possible decision assuming that the proposed observations proposedobs are observed source # BIGUQ.makebigdts \u2014 Method . Makes BIGDT analyses for each possible decision assuming that no more observations will be made source # BIGUQ.BigDT \u2014 Type . BigOED type source # BIGUQ.BigOED \u2014 Type . BigOED type source","title":"BIGUQ.jl"},{"location":"build/DocumentFunction/","text":"DocumentFunction.jl Module provides tools for documenting Julia functions providing information about function methods, arguments and keywords. DocumentFunction.jl module functions: # DocumentFunction.documentfunction \u2014 Function . Create function documentation Arguments: f : function to be documented\" Keywords: maintext : function description argtext : dictionary with text for each argument keytext : dictionary with text for each keyword location : show/hide function location on the disk source # DocumentFunction.getfunctionarguments \u2014 Function . Get function arguments Arguments: f : function to be documented\" m : function methods source # DocumentFunction.getfunctionkeywords \u2014 Function . Get function keywords Arguments: f : function to be documented m : function methods source # DocumentFunction.getfunctionmethods \u2014 Method . Get function methods Arguments: f : function to be documented Return: array with function methods source # DocumentFunction.stdoutcaptureoff \u2014 Method . Restore STDOUT source # DocumentFunction.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader source","title":"DocumentFunction"},{"location":"build/DocumentFunction/#documentfunctionjl","text":"Module provides tools for documenting Julia functions providing information about function methods, arguments and keywords. DocumentFunction.jl module functions: # DocumentFunction.documentfunction \u2014 Function . Create function documentation Arguments: f : function to be documented\" Keywords: maintext : function description argtext : dictionary with text for each argument keytext : dictionary with text for each keyword location : show/hide function location on the disk source # DocumentFunction.getfunctionarguments \u2014 Function . Get function arguments Arguments: f : function to be documented\" m : function methods source # DocumentFunction.getfunctionkeywords \u2014 Function . Get function keywords Arguments: f : function to be documented m : function methods source # DocumentFunction.getfunctionmethods \u2014 Method . Get function methods Arguments: f : function to be documented Return: array with function methods source # DocumentFunction.stdoutcaptureoff \u2014 Method . Restore STDOUT source # DocumentFunction.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader source","title":"DocumentFunction.jl"},{"location":"build/GeostatInversion/","text":"GeostatInversion.jl This package provides methods for inverse analysis using parameter fields that are represented using geostatistical (stochastic) methods. Currently, two geostatistical methods are implemented. One is the Principal Component Geostatistical Approach (PCGA) proposed by Kitanidis & Lee . The other utilizes a Randomized Geostatistical Approach (RGA) that builds on PCGA. Randomized Geostatistical Approach (RGA) references: O'Malley, D., Le, E., Vesselinov, V.V., Fast Geostatistical Inversion using Randomized Matrix Decompositions and Sketchings for Heterogeneous Aquifer Characterization, AGU Fall Meeting, San Francisco, CA, December 14\u201318, 2015. Lin, Y, Le, E.B, O'Malley, D., Vesselinov, V.V., Bui-Thanh, T., Large-Scale Inverse Model Analyses Employing Fast Randomized Data Reduction, 2016. Two versions of PCGA are implemented in this package pcgadirect , which uses full matrices and direct solvers during iterations pcgalsqr , which uses low rank representations of the matrices combined with iterative solvers during iterations The RGA method, rga , can use either of these approaches using the keyword argument. That is, by doing rga(...; pcgafunc=GeostatInversion.pcgadirect) or rga(...; pcgafunc=GeostatInversion.pcgalsqr) . GeostatInversion.jl module functions: # GeostatInversion.getxis \u2014 Function . Get the parameter subspace that will be explored during the inverse analysis getxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing) getxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing) Arguments: samplefield : a function that takes no arguments and returns a sample of the field Q : the covariance matrix of the parameter field numfields : the number of fields that will be used to find the subspace numxis : the dimension of the subspace p : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) q : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) seed : an optional seed to use when doing the randomized matrix factorization source # GeostatInversion.pcgadirect \u2014 Method . Direct principal component geostatistical approach pcgadirect ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 , callback =( s , obs_cal ) - > nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source # GeostatInversion.pcgalsqr \u2014 Method . Iterative principal component geostatistical approach pcgalsqr ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters source # GeostatInversion.rga \u2014 Method . Randomized (principal component) geostatistical approach Example: function rga ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array { Float64 , 1 }, 1 }, R , y :: Vector , S ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1 e - 6 , pcgafunc = pcgadirect , callback = ( s , obs_cal ) -> nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector S : sketching matrix maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerance for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source Module GeostatInversion.FDDerivatives GeostatInversion.FDDerivatives module functions: # GeostatInversion.FDDerivatives.makegradient \u2014 Function . Create Gradient function source # GeostatInversion.FDDerivatives.makejacobian \u2014 Function . Create Jacobian function source Module GeostatInversion.RandMatFact GeostatInversion.RandMatFact module functions: # GeostatInversion.RandMatFact.randsvd \u2014 Method . Random SVD based on algorithm 5.1 from Halko et al. source Module GeostatInversion.FFTRF GeostatInversion.FFTRF module functions: # GeostatInversion.FFTRF.reducek \u2014 Method . Reduce k source","title":"GeostatInversion"},{"location":"build/GeostatInversion/#geostatinversionjl","text":"This package provides methods for inverse analysis using parameter fields that are represented using geostatistical (stochastic) methods. Currently, two geostatistical methods are implemented. One is the Principal Component Geostatistical Approach (PCGA) proposed by Kitanidis & Lee . The other utilizes a Randomized Geostatistical Approach (RGA) that builds on PCGA. Randomized Geostatistical Approach (RGA) references: O'Malley, D., Le, E., Vesselinov, V.V., Fast Geostatistical Inversion using Randomized Matrix Decompositions and Sketchings for Heterogeneous Aquifer Characterization, AGU Fall Meeting, San Francisco, CA, December 14\u201318, 2015. Lin, Y, Le, E.B, O'Malley, D., Vesselinov, V.V., Bui-Thanh, T., Large-Scale Inverse Model Analyses Employing Fast Randomized Data Reduction, 2016. Two versions of PCGA are implemented in this package pcgadirect , which uses full matrices and direct solvers during iterations pcgalsqr , which uses low rank representations of the matrices combined with iterative solvers during iterations The RGA method, rga , can use either of these approaches using the keyword argument. That is, by doing rga(...; pcgafunc=GeostatInversion.pcgadirect) or rga(...; pcgafunc=GeostatInversion.pcgalsqr) . GeostatInversion.jl module functions: # GeostatInversion.getxis \u2014 Function . Get the parameter subspace that will be explored during the inverse analysis getxis(samplefield::Function, numfields::Int, numxis::Int, p::Int, q::Int=3, seed=nothing) getxis(Q::Matrix, numxis::Int, p::Int, q::Int=3, seed=nothing) Arguments: samplefield : a function that takes no arguments and returns a sample of the field Q : the covariance matrix of the parameter field numfields : the number of fields that will be used to find the subspace numxis : the dimension of the subspace p : oversampling parameter when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) q : number of power iterations when estimating the range of the covariance matrix (see Halko et al, SIAM Rev., 2011) seed : an optional seed to use when doing the randomized matrix factorization source # GeostatInversion.pcgadirect \u2014 Method . Direct principal component geostatistical approach pcgadirect ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 , callback =( s , obs_cal ) - > nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source # GeostatInversion.pcgalsqr \u2014 Method . Iterative principal component geostatistical approach pcgalsqr ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array{Float64, 1 } , 1 } , R , y :: Vector ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1e-6 ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerence for the parameters source # GeostatInversion.rga \u2014 Method . Randomized (principal component) geostatistical approach Example: function rga ( forwardmodel :: Function , s0 :: Vector , X :: Vector , xis :: Array { Array { Float64 , 1 }, 1 }, R , y :: Vector , S ; maxiters :: Int = 5 , delta :: Float64 = sqrt ( eps ( Float64 )), xtol :: Float64 = 1 e - 6 , pcgafunc = pcgadirect , callback = ( s , obs_cal ) -> nothing ) Arguments: forwardmodel : param to obs map h(s) s0 : initial guess X : mean of parameter prior (replace with B*X drift matrix later for p>1) xis : K columns of Z = randSVDzetas(Q,K,p,q) where Q is the parameter covariance matrix R : covariance of measurement error (data misfit term) y : data vector S : sketching matrix maxiters : maximum # of PCGA iterations delta : the finite difference step size xtol : convergence tolerance for the parameters callback : a function of the form (params, observations)->... that is called during each iteration source","title":"GeostatInversion.jl"},{"location":"build/GeostatInversion/#module-geostatinversionfdderivatives","text":"GeostatInversion.FDDerivatives module functions: # GeostatInversion.FDDerivatives.makegradient \u2014 Function . Create Gradient function source # GeostatInversion.FDDerivatives.makejacobian \u2014 Function . Create Jacobian function source","title":"Module GeostatInversion.FDDerivatives"},{"location":"build/GeostatInversion/#module-geostatinversionrandmatfact","text":"GeostatInversion.RandMatFact module functions: # GeostatInversion.RandMatFact.randsvd \u2014 Method . Random SVD based on algorithm 5.1 from Halko et al. source","title":"Module GeostatInversion.RandMatFact"},{"location":"build/GeostatInversion/#module-geostatinversionfftrf","text":"GeostatInversion.FFTRF module functions: # GeostatInversion.FFTRF.reducek \u2014 Method . Reduce k source","title":"Module GeostatInversion.FFTRF"},{"location":"build/Mads/","text":"Mads.jl MADS (Model Analysis & Decision Support) Mads.jl is MADS main module. Mads.jl module functions: # Mads.MFlm \u2014 Method . Matrix Factorization using Levenberg Marquardt Methods Mads.MFlm(X::Array{T,2}, range::Range{Int64}; kw...) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:103 Mads.MFlm(X::Array{T,2}, nk::Integer; method, log_W, log_H, retries, initW, initH, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, quiet) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:133 Arguments X::Array{T,2} : matrix to factorize nk::Integer : number of features to extract range::Range{Int64} Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix lambda lambda_mu log_H : log-transform H (feature) matrix[default= false ] log_W : log-transform W (weight) matrix [default= false ] maxEval maxIter maxJacobians method np_lambda quiet retries : number of solution retries [default= 1 ] show_trace tolG tolOF tolX Returns: NMF results source # Mads.NMFipopt \u2014 Function . Non-negative Matrix Factorization using JuMP/Ipopt Methods Mads.NMFipopt(X::Array{T,2} where T, nk::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Mads.NMFipopt(X::Array{T,2} where T, nk::Integer, retries::Integer; random, maxiter, maxguess, initW, initH, verbosity, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Arguments X::Array{T,2} where T : matrix to factorize nk::Integer : number of features to extract retries::Integer : number of solution retries [default= 1 ] Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix maxguess : guess about the maximum for the H (feature) matrix [default= 1 ] maxiter : maximum number of iterations [default= 100000 ] quiet : quiet [default= false ] random : random initial guesses [default= false ] verbosity : verbosity output level [default= 0 ] Returns: NMF results source # Mads.NMFm \u2014 Method . Non-negative Matrix Factorization using NMF Methods Mads.NMFm(X::Array, nk::Integer; retries, tol, maxiter) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:22 Arguments X::Array : matrix to factorize nk::Integer : number of features to extract Keywords maxiter : maximum number of iterations [default= 10000 ] retries : number of solution retries [default= 1 ] tol : solution tolerance [default= 1.0e-9 ] Returns: NMF results source # Mads.addkeyword! \u2014 Function . Add a keyword in a class within the Mads dictionary madsdata Methods Mads.addkeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:249 Mads.addkeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:253 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.addsource! \u2014 Function . Add an additional contamination source Methods Mads.addsource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Mads.addsource!(madsdata::Associative, sourceid::Int64; dict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] Keywords dict source # Mads.addsourceparameters! \u2014 Method . Add contaminant source parameters Methods Mads.addsourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:76 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellsoff! \u2014 Method . Turn off all the wells in the MADS problem dictionary Methods Mads.allwellsoff!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:607 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellson! \u2014 Method . Turn on all the wells in the MADS problem dictionary Methods Mads.allwellson!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:549 Arguments madsdata::Associative : MADS problem dictionary source # Mads.amanzi \u2014 Function . Execute Amanzi external groundwater flow and transport simulator Methods Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String, setup::String; amanzi_exe) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Arguments filename::String : amanzi input file name nproc::Int64 : number of processor to be used by Amanzi [default= Mads.nprocs_per_task_default ] observation_filename::String : Amanzi observation file name [default= \"observations.out\" ] quiet::Bool : suppress output [default= Mads.quiet ] setup::String : bash script to setup Amanzi environmental variables [default= \"source-amanzi-setup\" ] Keywords amanzi_exe : full path to the Amanzi executable source # Mads.amanzi_output_parser \u2014 Function . Parse Amanzi output provided in an external file ( filename ) Methods Mads.amanzi_output_parser(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Mads.amanzi_output_parser() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Arguments filename::String : external file name [default= \"observations.out\" ] Returns: dictionary with model observations following MADS requirements Example: Mads . amanzi_output_parser () Mads . amanzi_output_parser ( \"observations.out\" ) source # Mads.asinetransform \u2014 Function . Arcsine transformation of model parameters Methods Mads.asinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:4 Mads.asinetransform(params::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:14 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Arcsine transformation of model parameters source # Mads.bayessampling \u2014 Function . Bayesian Sampling Methods Mads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:78 Mads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:99 Arguments madsdata::Associative : MADS problem dictionary numsequences::Integer : number of sequences executed in parallel Keywords burnin : number of initial realizations before the MCMC are recorded [default= 100 ] nsteps : number of final realizations in the chain [default= 1000 ] seed : random seed [default= 0 ] thinning : removal of any thinning realization [default= 1 ] Returns: MCMC chain Examples: Mads . bayessampling ( madsdata ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) Mads . bayessampling ( madsdata , numsequences ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) source # Mads.calibrate \u2014 Method . Calibrate Mads model using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative : MADS problem dictionary Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results : save intermediate results [default= true ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.calibraterandom \u2014 Function . Calibrate with random initial guesses Methods Mads.calibraterandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Mads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords all : all model results are returned [default= false ] lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. bestresult[2].minimizer) Example: Mads . calibraterandom ( madsdata ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) Mads . calibraterandom ( madsdata , numberofsamples ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) source # Mads.calibraterandom_parallel \u2014 Function . Calibrate with random initial guesses in parallel Methods Mads.calibraterandom_parallel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Mads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : suppress output [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: vector with all objective function values boolean vector (converged/not converged) array with estimate model parameters source # Mads.captureoff \u2014 Method . Make MADS not capture Methods Mads.captureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:114 source # Mads.captureon \u2014 Method . Make MADS capture Methods Mads.captureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:105 source # Mads.checkmodeloutputdirs \u2014 Method . Check the directories where model outputs should be saved for MADS Methods Mads.checkmodeloutputdirs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:599 Arguments madsdata::Associative : MADS problem dictionary Returns: true or false source # Mads.checknodedir \u2014 Function . Check if a directory is readable Methods Mads.checknodedir(dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(node::String, dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Mads.checknodedir(node::String, dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Arguments dir::String : directory node::String : computational node name (e.g. madsmax.lanl.gov , wf03 , or 127.0.0.1 ) waittime::Float64 : wait time in seconds [default= 10 ] Returns: true if the directory is readable, false otherwise source # Mads.checkout \u2014 Function . Checkout (pull) the latest version of Mads modules Methods Mads.checkout(modulename::String; git, master, force, pull, required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Mads.checkout() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Arguments modulename::String : module name Keywords all : whether to checkout all the modules [default= false ] force : whether to overwrite local changes when checkout [default= false ] git : whether to use \"git checkout\" [default= true ] master : whether on master branch [default= false ] pull : whether to run \"git pull\" [default= true ] required : whether only checkout Mads.required modules [default= false ] source # Mads.checkparameterranges \u2014 Method . Check parameter ranges for model parameters Methods Mads.checkparameterranges(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:709 Arguments madsdata::Associative : MADS problem dictionary source # Mads.cleancoverage \u2014 Method . Remove Mads coverage files Methods Mads.cleancoverage() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:24 source # Mads.cmadsins_obs \u2014 Method . Call C MADS ins_obs() function from MADS dynamic library Methods Mads.cmadsins_obs(obsid::Array{T,1} where T, instructionfilename::String, inputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:40 Arguments inputfilename::String : input file name instructionfilename::String : instruction file name obsid::Array{T,1} where T : observation id Return: observations source # Mads.commit \u2014 Function . Commit the latest version of Mads modules in the repository Methods Mads.commit(commitmsg::String, modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Mads.commit(commitmsg::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Arguments commitmsg::String : commit message modulename::String : module name source # Mads.computemass \u2014 Function . Compute injected/reduced contaminant mass (for a given set of mads input files when \"path\" is provided) Methods Mads.computemass(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:459 Mads.computemass(madsfiles::Union{Regex, String}; time, path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:486 Arguments String} madsdata::Associative : MADS problem dictionary madsfiles::Union{Regex : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= \".\" ] time : computational time [default= 0 ] Returns: array with all the lambda values array with associated total injected mass array with associated total reduced mass Example: Mads . computemass ( madsfiles ; time = 0 , path = \".\" ) source # Mads.computeparametersensitities \u2014 Method . Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range Methods Mads.computeparametersensitities(madsdata::Associative, saresults::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:842 Arguments madsdata::Associative : MADS problem dictionary saresults::Associative : dictionary with sensitivity analysis results source # Mads.contamination \u2014 Method . Compute concentration for a point in space and time (x,y,z,t) Methods Mads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Array{T,1} where T, anasolfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:429 Arguments H::Number : Hurst coefficient for Fractional Brownian dispersion anasolfunction::Function ax::Number : dispersivity in X direction (longitudinal) ay::Number : dispersivity in Y direction (transverse horizontal) az::Number : dispersivity in Y direction (transverse vertical) dx::Number : source size (extent) in X direction dy::Number : source size (extent) in Y direction dz::Number : source size (extent) in Z direction f::Number : source mass flux lambda::Number : first-order reaction rate n::Number : porosity t0::Number : source starting time t1::Number : source termination time t::Array{T,1} where T : vector of times to compute concentration at the observation point theta::Number : groundwater flow direction vx::Number : advective transport velocity in X direction vy::Number : advective transport velocity in Y direction vz::Number : advective transport velocity in Z direction wellx::Number : observation point (well) X coordinate welly::Number : observation point (well) Y coordinate wellz::Number : observation point (well) Z coordinate x::Number : X coordinate of contaminant source location y::Number : Y coordinate of contaminant source location z::Number : Z coordinate of contaminant source location Returns: a vector of predicted concentration at (wellx, welly, wellz, t) source # Mads.copyaquifer2sourceparameters! \u2014 Method . Copy aquifer parameters to become contaminant source parameters Methods Mads.copyaquifer2sourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:115 Arguments madsdata::Associative : MADS problem dictionary source # Mads.copyright \u2014 Method . Produce MADS copyright information Methods Mads.copyright() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:18 source # Mads.create_documentation \u2014 Method . Create web documentation files for Mads functions Methods Mads.create_documentation() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:382 source # Mads.create_tests_off \u2014 Method . Turn off the generation of MADS tests (default) Methods Mads.create_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:150 source # Mads.create_tests_on \u2014 Method . Turn on the generation of MADS tests (dangerous) Methods Mads.create_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:141 source # Mads.createmadsobservations \u2014 Function . Create Mads dictionary of observations and instruction file Methods Mads.createmadsobservations(nrow::Int64, ncol::Int64; obstring, pretext, prestring, poststring, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Mads.createmadsobservations(nrow::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Arguments ncol::Int64 : number of columns [default 1] nrow::Int64 : number of rows Keywords filename : file name obstring : observation string poststring : post instruction file string prestring : pre instruction file string pretext : preamble instructions ) Returns: observation dictionary source # Mads.createmadsproblem \u2014 Function . Create a new Mads problem where the observation targets are computed based on the model predictions Methods Mads.createmadsproblem(infilename::String, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:26 Mads.createmadsproblem(madsdata::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:51 Mads.createmadsproblem(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:60 Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:56 Arguments infilename::String : input Mads file madsdata::Associative : MADS problem dictionary outfilename::String : output Mads file predictions::Associative : dictionary of model predictions Returns: new MADS problem dictionary source # Mads.createobservations! \u2014 Function . Create observations in the MADS problem dictionary based on time and observation vectors Methods Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T, observation::Array{T,1} where T; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, observation::Associative; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:488 Arguments madsdata::Associative : MADS problem dictionary observation::Array{T,1} where T : dictionary of observations observation::Associative : dictionary of observations time::Array{T,1} where T : vector of observation times Keywords logtransform : log transform observations [default= false ] weight : weight value [default= 1 ] weight_type : weight type [default= constant ] source # Mads.createtempdir \u2014 Method . Create temporary directory Methods Mads.createtempdir(tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1226 Arguments tempdirname::String : temporary directory name source # Mads.deleteNaN! \u2014 Method . Delete rows with NaN in a dataframe df Methods Mads.deleteNaN!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1068 Arguments df::DataFrames.DataFrame : dataframe source # Mads.deletekeyword! \u2014 Function . Delete a keyword in a class within the Mads dictionary madsdata Methods Mads.deletekeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:276 Mads.deletekeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:282 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.deleteoffwells! \u2014 Method . Delete all wells marked as being off in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.deletetimes! \u2014 Method . Delete all times in the MADS problem dictionary in a given list. Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.dependents \u2014 Function . Lists module dependents on a module (Mads by default) Methods Mads.dependents(modulename::String, filter::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Arguments filter::Bool : whether to filter modules [default= false ] modulename::String : module name [default= \"Mads\" ] Returns: modules that are dependents of the input module source # Mads.diff \u2014 Function . Diff the latest version of Mads modules in the repository Methods Mads.diff(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Mads.diff() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Arguments modulename::String : module name source # Mads.display \u2014 Function . Display image file Methods Mads.display(p::Compose.Context) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:71 Mads.display(p::Gadfly.Plot) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:65 Mads.display(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:8 Arguments filename::String : image file name p::Compose.Context : plotting object p::Gadfly.Plot : plotting object source # Mads.dobigdt \u2014 Method . Perform Bayesian Information Gap Decision Theory (BIG-DT) analysis Methods Mads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, maxHorizon, numlikelihoods) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:123 Arguments madsdata::Associative : MADS problem dictionary nummodelruns::Int64 : number of model runs Keywords maxHorizon : maximum info-gap horizons of uncertainty [default= 3 ] numhorizons : number of info-gap horizons of uncertainty [default= 100 ] numlikelihoods : number of Bayesian likelihoods [default= 25 ] Returns: dictionary with BIG-DT results source # Mads.dumpasciifile \u2014 Method . Dump ASCII file Methods Mads.dumpasciifile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:30 Arguments data : data to dump filename::String : ASCII file name Dumps: ASCII file with the name in \"filename\" source # Mads.dumpjsonfile \u2014 Method . Dump a JSON file Methods Mads.dumpjsonfile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:38 Arguments data : data to dump filename::String : JSON file name Dumps: JSON file with the name in \"filename\" source # Mads.dumpwelldata \u2014 Method . Dump well data from MADS problem dictionary into a ASCII file Methods Mads.dumpwelldata(madsdata::Associative, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1092 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Dumps: filename : a ASCII file source # Mads.dumpyamlfile \u2014 Method . Dump YAML file Methods Mads.dumpyamlfile(filename::String, data; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:55 Arguments data : YAML data filename::String : output file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) source # Mads.dumpyamlmadsfile \u2014 Method . Dump YAML Mads file Methods Mads.dumpyamlmadsfile(madsdata::Associative, filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:74 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Keywords julia : use julia YAML [default= false ] source # Mads.efast \u2014 Method . Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method Methods Mads.efast(md::Associative; N, M, gamma, seed, checkpointfrequency, restartdir, restart) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1111 Arguments md::Associative : MADS problem dictionary Keywords M : maximum number of harmonics [default= 6 ] N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] gamma : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) [default= 4 ] restart : save restart information [default= false ] restartdir : directory where files will be stored containing model results for the efast simulation restarts [default= \"efastcheckpoints\" ] seed : random seed [default= 0 ] source # Mads.emceesampling \u2014 Function . Bayesian sampling with Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) Methods Mads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:9 Mads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:32 Arguments madsdata::Associative : MADS problem dictionary p0::Array : initial parameters (matrix of size (number of parameters, number of walkers) or (length(Mads.getoptparamkeys(madsdata)), numwalkers)) Keywords burnin : number of initial realizations before the MCMC are recorded [default= 10 ] nsteps : number of final realizations in the chain [default= 100 ] numwalkers : number of walkers (if in parallel this can be the number of available processors; in general, the higher the number of walkers, the better the results and computational time [default= 10 ] seed : random seed [default= 0 ] sigma : a standard deviation parameter used to initialize the walkers [default= 0.01 ] thinning : removal of any thinning realization [default= 1 ] weightfactor : weight factor [default= 1.0 ] Returns: MCMC chain log likelihoods of the final samples in the chain Examples: Mads . emceesampling ( madsdata ; numwalkers = 10 , nsteps = 100 , burnin = 100 , thinning = 1 , seed = 2016 , sigma = 0.01 ) Mads . emceesampling ( madsdata , p0 ; numwalkers = 10 , nsteps = 100 , burnin = 10 , thinning = 1 , seed = 2016 ) source # Mads.estimationerror \u2014 Function . Estimate kriging error Methods Mads.estimationerror(w::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:197 Mads.estimationerror(w::Array{T,1} where T, covmat::Array{T,2} where T, covvec::Array{T,1} where T, cov0::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:204 Arguments X::Array{T,2} where T : observation matrix cov0::Number : zero-separation covariance cov::Function : spatial covariance function covmat::Array{T,2} where T : covariance matrix covvec::Array{T,1} where T : covariance vector w::Array{T,1} where T : kriging weights x0::Array{T,1} where T : estimated locations Returns: estimation kriging error source # Mads.evaluatemadsexpression \u2014 Method . Evaluate an expression string based on a parameter dictionary Methods Mads.evaluatemadsexpression(expressionstring::String, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:154 Arguments expressionstring::String : expression string parameters::Associative : parameter dictionary applied to evaluate the expression string Returns: dictionary containing the expression names as keys, and the values of the expression as values source # Mads.evaluatemadsexpressions \u2014 Method . Evaluate all the expressions in the Mads problem dictiorany based on a parameter dictionary Methods Mads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:173 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameter dictionary applied to evaluate the expression strings Returns: dictionary containing the parameter and expression names as keys, and the values of the expression as values source # Mads.expcov \u2014 Method . Exponential spatial covariance function Methods Mads.expcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:29 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.exponentialvariogram \u2014 Method . Exponential variogram Methods Mads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:82 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Exponential variogram source # Mads.filterkeys \u2014 Function . Filter dictionary keys based on a string or regular expression Methods Mads.filterkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Mads.filterkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:786 Mads.filterkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Arguments dict::Associative : dictionary key::Regex : the regular expression or string used to filter dictionary keys key::String : the regular expression or string used to filter dictionary keys source # Mads.forward \u2014 Function . Perform a forward run using the initial or provided values for the model parameters Methods Mads.forward(madsdata::Associative; all) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:6 Mads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:10 Mads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:44 Arguments madsdata::Associative : MADS problem dictionary paramarray::Array : array of model parameter values paramdict::Associative : dictionary of model parameter values Keywords all : all model results are returned [default= false ] checkpointfilename : check point file name [default=\"checkpoint_forward\"] checkpointfrequency : check point frequency for storing restart information [default= 0 ] Returns: dictionary of model predictions source # Mads.forwardgrid \u2014 Function . Perform a forward run over a 3D grid defined in madsdata using the initial or provided values for the model parameters Methods Mads.forwardgrid(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:132 Mads.forwardgrid(madsdatain::Associative, paramvalues::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:137 Arguments madsdata::Associative : MADS problem dictionary madsdatain::Associative : MADS problem dictionary paramvalues::Associative : dictionary of model parameter values Returns: 3D array with model predictions along a 3D grid source # Mads.free \u2014 Function . Free Mads modules Methods Mads.free(modulename::String; required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Mads.free() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Arguments modulename::String : module name Keywords all : free all the modules [default= false ] required : only free Mads.required modules [default= false ] source # Mads.functions \u2014 Function . List available functions in the MADS modules: Methods Mads.functions(string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions(re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:22 Mads.functions(m::Union{Module, Symbol}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Mads.functions(m::Union{Module, Symbol}, re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:40 Mads.functions(m::Union{Module, Symbol}, string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Arguments Symbol} m::Union{Module : MADS module re::Regex string::String : string to display functions with matching names Keywords quiet stdout Examples: Mads . functions () Mads . functions ( BIGUQ ) Mads . functions ( \"get\" ) Mads . functions ( Mads , \"get\" ) source # Mads.gaussiancov \u2014 Method . Gaussian spatial covariance function Methods Mads.gaussiancov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:15 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.gaussianvariogram \u2014 Method . Gaussian variogram Methods Mads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:103 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Gaussian variogram source # Mads.getcovmat \u2014 Method . Get spatial covariance matrix Methods Mads.getcovmat(X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:159 Arguments X::Array{T,2} where T : matrix with coordinates of the data points (x or y) cov::Function : spatial covariance function Returns: spatial covariance matrix source # Mads.getcovvec! \u2014 Method . Get spatial covariance vector Methods Mads.getcovvec!(covvec::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:185 Arguments X::Array{T,2} where T : matrix with coordinates of the data points cov::Function : spatial covariance function covvec::Array{T,1} where T : spatial covariance vector x0::Array{T,1} where T : vector with coordinates of the estimation points (x or y) Returns: spatial covariance vector source # Mads.getdictvalues \u2014 Function . Get dictionary values for keys based on a string or regular expression Methods Mads.getdictvalues(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Mads.getdictvalues(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:808 Mads.getdictvalues(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Arguments dict::Associative : dictionary key::Regex : the key to find value for key::String : the key to find value for source # Mads.getdir \u2014 Method . Get directory Methods Mads.getdir(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:407 Arguments filename::String : file name Returns: directory in file name Example: d = Mads . getdir ( \"a.mads\" ) # d = \".\" d = Mads . getdir ( \"test/a.mads\" ) # d = \"test\" source # Mads.getdistribution \u2014 Method . Parse parameter distribution from a string Methods Mads.getdistribution(dist::String, i::String, inputtype::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:202 Arguments dist::String : parameter distribution i::String inputtype::String : input type (parameter or observation) Returns: distribution source # Mads.getextension \u2014 Method . Get file name extension Methods Mads.getextension(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:579 Arguments filename::String : file name Returns: file name extension Example: ext = Mads . getextension ( \"a.mads\" ) # ext = \"mads\" source # Mads.getimportantsamples \u2014 Method . Get important samples Methods Mads.getimportantsamples(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:351 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: array of important samples source # Mads.getlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are log-transformed ( log ) source # Mads.getmadsdir \u2014 Method . Get the directory where currently Mads is running Methods Mads.getmadsdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:449 Example: problemdir = Mads . getmadsdir () Returns: Mads problem directory source # Mads.getmadsinputfile \u2014 Method . Get the default MADS input file set as a MADS global variable using setmadsinputfile(filename) Methods Mads.getmadsinputfile() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:364 Returns: input file name (e.g. input_file_name.mads ) source # Mads.getmadsproblemdir \u2014 Method . Get the directory where the Mads data file is located Methods Mads.getmadsproblemdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:430 Arguments madsdata::Associative : MADS problem dictionary Example: madsdata = Mads . loadmadsfile ( \"../../a.mads\" ) madsproblemdir = Mads . getmadsproblemdir ( madsdata ) where madsproblemdir = \"../../\" source # Mads.getmadsrootname \u2014 Method . Get the MADS problem root name Methods Mads.getmadsrootname(madsdata::Associative; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:386 Arguments madsdata::Associative : MADS problem dictionary Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Example: madsrootname = Mads . getmadsrootname ( madsdata ) Returns: root of file name source # Mads.getnextmadsfilename \u2014 Method . Get next mads file name Methods Mads.getnextmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:542 Arguments filename::String : file name Returns: next mads file name source # Mads.getnonlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT log-transformed ( log ) source # Mads.getnonoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT optimized ( opt ) source # Mads.getobsdist \u2014 Method . Get an array with dist values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsdist \u2014 Method . Get an array with dist values for all observations in the MADS problem dictionary source # Mads.getobskeys \u2014 Method . Get keys for all observations in the MADS problem dictionary Methods Mads.getobskeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:45 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all observations in the MADS problem dictionary source # Mads.getobslog \u2014 Method . Get an array with log values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobslog \u2014 Method . Get an array with log values for all observations in the MADS problem dictionary source # Mads.getobsmax \u2014 Method . Get an array with max values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmax \u2014 Method . Get an array with max values for all observations in the MADS problem dictionary source # Mads.getobsmin \u2014 Method . Get an array with min values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmin \u2014 Method . Get an array with min values for all observations in the MADS problem dictionary source # Mads.getobstarget \u2014 Method . Get an array with target values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstarget \u2014 Method . Get an array with target values for all observations in the MADS problem dictionary source # Mads.getobstime \u2014 Method . Get an array with time values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstime \u2014 Method . Get an array with time values for all observations in the MADS problem dictionary source # Mads.getobsweight \u2014 Method . Get an array with weight values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsweight \u2014 Method . Get an array with weight values for all observations in the MADS problem dictionary source # Mads.getoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are optimized ( opt ) source # Mads.getoptparams \u2014 Function . Get optimizable parameters Methods Mads.getoptparams(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:369 Mads.getoptparams(madsdata::Associative, parameterarray::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Mads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Arguments madsdata::Associative : MADS problem dictionary optparameterkey::Array : optimizable parameter keys parameterarray::Array : parameter array Returns: parameter array source # Mads.getparamdict \u2014 Method . Get dictionary with all parameters and their respective initial values Methods Mads.getparamdict(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:60 Arguments madsdata::Associative : MADS problem dictionary Returns: dictionary with all parameters and their respective initial values source # Mads.getparamdistributions \u2014 Method . Get probabilistic distributions of all parameters in the MADS problem dictionary Note: Probabilistic distribution of parameters can be defined only if dist or min / max model parameter fields are specified in the MADS problem dictionary madsdata . Methods Mads.getparamdistributions(madsdata::Associative; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:664 Arguments madsdata::Associative : MADS problem dictionary Keywords init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field [default= false ] Returns: probabilistic distributions source # Mads.getparamkeys \u2014 Method . Get keys of all parameters in the MADS problem dictionary Methods Mads.getparamkeys(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:44 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter Returns: array with the keys of all parameters in the MADS problem dictionary source # Mads.getparamrandom \u2014 Function . Get independent sampling of model parameters defined in the MADS problem dictionary Methods Mads.getparamrandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, paramdist, init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:404 Arguments madsdata::Associative : MADS problem dictionary numsamples::Integer : number of samples, [default= 1 ] parameterkey::String : model parameter key Keywords init_dist : if true use the distribution set for initialization in the MADS problem dictionary (defined using init_dist parameter field); if false (default) use the regular distribution set in the MADS problem dictionary (defined using dist parameter field) numsamples : number of samples paramdist : dictionary of parameter distributions Returns: generated sample source # Mads.getparamsinit \u2014 Method . Get an array with init values for parameters defined by paramkeys source # Mads.getparamsinit \u2014 Method . Get an array with init values for all the MADS model parameters source # Mads.getparamsinit_max \u2014 Function . Get an array with init_max values for parameters defined by paramkeys Methods Mads.getparamsinit_max(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:298 Mads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:264 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsinit_min \u2014 Function . Get an array with init_min values for parameters Methods Mads.getparamsinit_min(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:247 Mads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:213 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamslog \u2014 Method . Get an array with log values for parameters defined by paramkeys source # Mads.getparamslog \u2014 Method . Get an array with log values for all the MADS model parameters source # Mads.getparamslongname \u2014 Method . Get an array with longname values for parameters defined by paramkeys source # Mads.getparamslongname \u2014 Method . Get an array with longname values for all the MADS model parameters source # Mads.getparamsmax \u2014 Function . Get an array with max values for parameters defined by paramkeys Methods Mads.getparamsmax(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:196 Mads.getparamsmax(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:174 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: returns the parameter values source # Mads.getparamsmin \u2014 Function . Get an array with min values for parameters defined by paramkeys Methods Mads.getparamsmin(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:157 Mads.getparamsmin(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:135 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for parameters defined by paramkeys source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for all the MADS model parameters source # Mads.getparamsstep \u2014 Method . Get an array with step values for parameters defined by paramkeys source # Mads.getparamsstep \u2014 Method . Get an array with step values for all the MADS model parameters source # Mads.getparamstype \u2014 Method . Get an array with type values for parameters defined by paramkeys source # Mads.getparamstype \u2014 Method . Get an array with type values for all the MADS model parameters source # Mads.getprocs \u2014 Method . Get the number of processors Methods Mads.getprocs() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:28 source # Mads.getrestart \u2014 Method . Get MADS restart status Methods Mads.getrestart(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:78 Arguments madsdata::Associative : MADS problem dictionary source # Mads.getrestartdir \u2014 Function . Get the directory where Mads restarts will be stored Methods Mads.getrestartdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Mads.getrestartdir(madsdata::Associative, suffix::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Arguments madsdata::Associative : MADS problem dictionary suffix::String : Suffix to be added to the name of restart directory Returns: restart directory where reusable model results will be stored source # Mads.getrootname \u2014 Method . Get file name root Methods Mads.getrootname(filename::String; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:479 Arguments filename::String : file name Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Returns: root of file name Example: r = Mads . getrootname ( \"a.rnd.dat\" ) # r = \"a\" r = Mads . getrootname ( \"a.rnd.dat\" , first = false ) # r = \"a.rnd\" source # Mads.getseed \u2014 Method . Get and return current random seed. Methods Mads.getseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:432 source # Mads.getsindx \u2014 Method . Get sin-space dx Methods Mads.getsindx(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:314 Arguments madsdata::Associative : MADS problem dictionary Returns: sin-space dx value source # Mads.getsourcekeys \u2014 Method . Get keys of all source parameters in the MADS problem dictionary Methods Mads.getsourcekeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:78 Arguments madsdata::Associative : MADS problem dictionary Returns: array with keys of all source parameters in the MADS problem dictionary source # Mads.gettarget \u2014 Method . Get observation target Methods Mads.gettarget(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:224 Arguments o::Associative : observation data Returns: observation target source # Mads.gettargetkeys \u2014 Method . Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary Methods Mads.gettargetkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:59 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all targets in the MADS problem dictionary source # Mads.gettime \u2014 Method . Get observation time Methods Mads.gettime(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:146 Arguments o::Associative : observation data Returns: observation time (\"NaN\" it time is missing) source # Mads.getweight \u2014 Method . Get observation weight Methods Mads.getweight(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:185 Arguments o::Associative : observation data Returns: observation weight (\"NaN\" when weight is missing) source # Mads.getwelldata \u2014 Method . Get spatial and temporal data in the Wells class Methods Mads.getwelldata(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:716 Arguments madsdata::Associative : Mads problem dictionary Keywords time : get observation times [default= false ] Returns: array with spatial and temporal data in the Wells class source # Mads.getwellkeys \u2014 Method . Get keys for all wells in the MADS problem dictionary Methods Mads.getwellkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:76 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all wells in the MADS problem dictionary source # Mads.getwelltargets \u2014 Method . Methods Mads.getwelltargets(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:750 Arguments madsdata::Associative : Mads problem dictionary Returns: array with targets in the Wells class source # Mads.graphoff \u2014 Method . MADS graph output off Methods Mads.graphoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:132 source # Mads.graphon \u2014 Method . MADS graph output on Methods Mads.graphon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:123 source # Mads.haskeyword \u2014 Function . Check for a keyword in a class within the Mads dictionary madsdata Methods Mads.haskeyword(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:211 Mads.haskeyword(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:214 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary Returns: true or false Examples: - `Mads.haskeyword(madsdata, \"disp\")` ... searches in `Problem` class by default - `Mads.haskeyword(madsdata, \"Wells\", \"R-28\")` ... searches in `Wells` class for a keyword \"R-28\" source # Mads.help \u2014 Method . Produce MADS help information Methods Mads.help() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:9 source # Mads.importeverywhere \u2014 Method . Import Julia function everywhere from a file. The first function in the Julia input file is the one that will be called by Mads to perform the model simulations. Methods Mads.importeverywhere(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:373 Arguments filename::String : file name Returns: Julia function to execute the model source # Mads.indexkeys \u2014 Function . Find indexes for dictionary keys based on a string or regular expression Methods Mads.indexkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Mads.indexkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:797 Mads.indexkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Arguments dict::Associative : dictionary key::Regex : the key to find index for key::String : the key to find index for source # Mads.infogap_jump \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Mads.infogap_jump(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_jump_polinomial \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Mads.infogap_jump_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, quiet, plot, model, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] model : model id [default= 1 ] plot : activate plotting [default= false ] quiet : quiet [default= false ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] Returns: hmin, hmax source # Mads.infogap_mpb_lin \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_lin() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Mads.infogap_mpb_lin(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_mpb_polinomial \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Mads.infogap_mpb_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.ins_obs \u2014 Method . Apply Mads instruction file instructionfilename to read model output file modeloutputfilename Methods Mads.ins_obs(instructionfilename::String, modeloutputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1005 Arguments instructionfilename::String : instruction file name modeloutputfilename::String : model output file name Returns: obsdict : observation dictionary with the model outputs source # Mads.instline2regexs \u2014 Method . Convert an instruction line in the Mads instruction file into regular expressions Methods Mads.instline2regexs(instline::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:905 Arguments instline::String : instruction line Returns: regexs : regular expressions obsnames : observation names getparamhere : parameters source # Mads.invobsweights! \u2014 Method . Set inversely proportional observation weights in the MADS problem dictionary Methods Mads.invobsweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:327 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.invwellweights! \u2014 Method . Set inversely proportional well weights in the MADS problem dictionary Methods Mads.invwellweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:382 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.islog \u2014 Method . Is parameter with key parameterkey log-transformed? Methods Mads.islog(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:445 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if log-transformed, false otherwise source # Mads.isobs \u2014 Method . Is a dictionary containing all the observations Methods Mads.isobs(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:19 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary contain all the observations, false otherwise source # Mads.isopt \u2014 Method . Is parameter with key parameterkey optimizable? Methods Mads.isopt(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:425 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if optimizable, false if not source # Mads.isparam \u2014 Method . Check if a dictionary containing all the Mads model parameters Methods Mads.isparam(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:17 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary containing all the parameters, false otherwise source # Mads.ispkgavailable \u2014 Function . Checks if package is available Methods Mads.ispkgavailable(modulename::String; quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:468 Arguments modulename::String : module name Keywords quiet Returns: true or false source # Mads.krige \u2014 Method . Kriging Methods Mads.krige(x0mat::Array{T,2} where T, X::Array{T,2} where T, Z::Array{T,1} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:124 Arguments X::Array{T,2} where T : coordinates of the observation (conditioning) data Z::Array{T,1} where T : values for the observation (conditioning) data cov::Function : spatial covariance function x0mat::Array{T,2} where T : point coordinates at which to obtain kriging estimates Returns: kriging estimates at x0mat source # Mads.levenberg_marquardt \u2014 Function . Levenberg-Marquardt optimization Methods Mads.levenberg_marquardt(f::Function, g::Function, x0) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Mads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callbackiteration, callbackjacobian) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default= x->(x'*x)[1] ] x0 : initial parameter guess Keywords alwaysDoJacobian : computer Jacobian each iteration [default= false ] callbackiteration : call back function for each iteration [default= (best_x::Vector, of::Number, lambda::Number)->nothing ] callbackjacobian : call back function for each Jacobian [default= (x::Vector, J::Matrix)->nothing ] lambda : initial Levenberg-Marquardt lambda [default= eps(Float32) ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] lambda_nu : lambda multiplication factor \u03bd [default= 2 ] lambda_scale : lambda scaling factor [default= 1e-3, ] maxEval : maximum number of model evaluations [default= 1001 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] root : Mads problem root name show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function update tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] source # Mads.linktempdir \u2014 Method . Link files in a temporary directory Methods Mads.linktempdir(madsproblemdir::String, tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1252 Arguments madsproblemdir::String : Mads problem directory tempdirname::String : temporary directory name source # Mads.loadasciifile \u2014 Method . Load ASCII file Methods Mads.loadasciifile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:14 Arguments filename::String : ASCII file name Returns: data from the file source # Mads.loadbigyamlfile \u2014 Method . Load BIG YAML input file Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format julia Returns: MADS problem dictionary source # Mads.loadjsonfile \u2014 Method . Load a JSON file Methods Mads.loadjsonfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:16 Arguments filename::String : JSON file name Returns: data from the JSON file source # Mads.loadmadsfile \u2014 Method . Load MADS input file defining a MADS problem dictionary Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format : acceptable formats are yaml and json [default= yaml ] julia : if true , force using julia parsing functions; if false (default), use python parsing functions Returns: MADS problem dictionary Example: md = Mads . loadmadsfile ( \"input_file_name.mads\" ) source # Mads.loadmadsproblem \u2014 Method . Load a predefined Mads problem Methods Mads.loadmadsproblem(name::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:15 Arguments name::String : predefined MADS problem name Returns: MADS problem dictionary source # Mads.loadsaltellirestart! \u2014 Method . Load Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.loadsaltellirestart!(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:598 Arguments evalmat::Array : loaded array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts Returns: true when successfully loaded, false when it is not source # Mads.loadyamlfile \u2014 Method . Load YAML file Methods Mads.loadyamlfile(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:18 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in the yaml input file source # Mads.localsa \u2014 Method . Local sensitivity analysis based on eigen analysis of the parameter covariance matrix Methods Mads.localsa(madsdata::Associative; sinspace, keyword, filename, format, datafiles, imagefiles, par, obs, J) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:126 Arguments madsdata::Associative : MADS problem dictionary Keywords J : Jacobian matrix datafiles : flag to write data files [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) imagefiles : flag to create image files [default= Mads.graphoutput ] keyword : keyword to be added in the filename root obs : observations for the parameter set par : parameter set sinspace : apply sin transformation [default= true ] Dumps: filename : output plot file source # Mads.long_tests_off \u2014 Method . Turn off execution of long MADS tests (default) Methods Mads.long_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:168 source # Mads.long_tests_on \u2014 Method . Turn on execution of long MADS tests Methods Mads.long_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:159 source # Mads.madscores \u2014 Function . Check the number of processors on a series of servers Methods Mads.madscores(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Mads.madscores() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madscritical \u2014 Method . MADS critical error messages Methods Mads.madscritical(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:73 Arguments message::AbstractString : critical error message source # Mads.madsdebug \u2014 Function . MADS debug messages (controlled by quiet and debuglevel ) Methods Mads.madsdebug(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Mads.madsdebug(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : debug message source # Mads.madserror \u2014 Method . MADS error messages Methods Mads.madserror(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:63 Arguments message::AbstractString : error message source # Mads.madsinfo \u2014 Function . MADS information/status messages (controlled by quiet and verbositylevel`) Methods Mads.madsinfo(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Mads.madsinfo(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : information/status message source # Mads.madsload \u2014 Function . Check the load of a series of servers Methods Mads.madsload(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Mads.madsload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madsmathprogbase \u2014 Function . Define MadsModel type applied for Mads execution using MathProgBase Methods Mads.madsmathprogbase() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Mads.madsmathprogbase(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Arguments madsdata::Associative : MADS problem dictionary [default= Dict() ] source # Mads.madsoutput \u2014 Function . MADS output (controlled by quiet and verbositylevel ) Methods Mads.madsoutput(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Mads.madsoutput(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : output message source # Mads.madsup \u2014 Function . Check the uptime of a series of servers Methods Mads.madsup(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Mads.madsup() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madswarn \u2014 Method . MADS warning messages Methods Mads.madswarn(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:53 Arguments message::AbstractString : warning message source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make a conditional log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood : conditional log likelihood madsdata::Associative : MADS problem dictionary Returns: a conditional log likelihood function that accepts an array source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make array of conditional log-likelihoods Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:160 Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood madsdata::Associative : MADS problem dictionary Returns: array of conditional log-likelihoods source # Mads.makearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values Methods Mads.makearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Mads.makearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values source # Mads.makearrayloglikelihood \u2014 Method . Make a log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayloglikelihood(madsdata::Associative, loglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:127 Arguments loglikelihood : log likelihood madsdata::Associative : MADS problem dictionary Returns: a log likelihood function that accepts an array source # Mads.makebigdt! \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt!(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:35 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makebigdt \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:20 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makecomputeconcentrations \u2014 Method . Create a function to compute concentrations for all the observation points using Anasol Methods Mads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:179 Arguments madsdata::Associative : MADS problem dictionary Keywords calcpredictions : calculate zero weight predictions [default= true ] calczeroweightobs : calculate zero weight observations[default= false ] Returns: function to compute concentrations; the new function returns a dictionary of observations and model predicted concentrations Examples: computeconcentrations = Mads . makecomputeconcentrations ( madsdata ) paramkeys = Mads . getparamkeys ( madsdata ) paramdict = OrderedDict ( zip ( paramkeys , map ( key -> madsdata [ \"Parameters\" ][ key ][ \"init\" ], paramkeys ))) forward_preds = computeconcentrations ( paramdict ) source # Mads.makedixonprice \u2014 Method . Make dixon price Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price source # Mads.makedixonprice_gradient \u2014 Method . Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price gradient source # Mads.makedoublearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values, and returns an array of observations Methods Mads.makedoublearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Mads.makedoublearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values, and returning an array of observations source # Mads.makelmfunctions \u2014 Function . Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization Methods Mads.makelmfunctions(f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:100 Mads.makelmfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:121 Arguments f::Function : Function madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makelocalsafunction \u2014 Method . Make gradient function needed for local sensitivity analysis Methods Mads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:27 Arguments madsdata::Associative : MADS problem dictionary Keywords multiplycenterbyweights : multiply center by observation weights [default= true ] Returns: gradient function source # Mads.makelogprior \u2014 Method . Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata Methods Mads.makelogprior(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:396 Arguments madsdata::Associative : MADS problem dictionary Return: the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata source # Mads.makemadscommandfunction \u2014 Method . Make MADS function to execute the model defined in the input MADS problem dictionary Methods Mads.makemadscommandfunction(madsdata_in::Associative; obskeys, calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:60 Arguments madsdata_in::Associative : MADS problem dictionary Keywords calcpredictions : Calculate predictions [default= true ] calczeroweightobs : Calculate zero weight observations [default= false ] obskeys Example: Mads . makemadscommandfunction ( madsdata ) MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : execute a Julia function defined in an input Julia file. The function that should accept a parameter dictionary with all the model parameters as an input argument and should return an observation dictionary with all the model predicted observations. MADS will execute the first function defined in the file. MADS model : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Julia model : execute an internal Julia function that accepts a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Command : execute an external UNIX command or script that will execute an external model. Julia command : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an observation dictionary with model predictions. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at http://mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at http://mads.lanl.gov ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file Returns: Mads function to execute a forward model simulation source # Mads.makemadsconditionalloglikelihood \u2014 Method . Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary madsdata . Methods Mads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:419 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Return: the conditional log-likelihood source # Mads.makemadsloglikelihood \u2014 Method . Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under LogLikelihood or computed internally. Methods Mads.makemadsloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:454 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Returns: the log-likelihood for a given set of model parameters source # Mads.makemadsreusablefunction \u2014 Function . Make Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) Methods Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(paramkeys::Array{T,1} where T, obskeys::Array{T,1} where T, madsdatarestart::Union{Bool, String}, madscommandfunction::Function, restartdir::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:276 Arguments String} madscommandfunction::Function : Mads function to execute a forward model simulation madsdata::Associative : MADS problem dictionary madsdatarestart::Union{Bool : Restart type (memory/disk) or on/off status obskeys::Array{T,1} where T : Dictionary of observation keys paramkeys::Array{T,1} where T : Dictionary of parameter keys restartdir::String : Restart directory where the reusable model results are stored suffix::String : Suffix to be added to the name of restart directory Keywords usedict : Use dictionary [default= true ] Returns: Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) source # Mads.makempbfunctions \u2014 Method . Make forward model, gradient, objective functions needed for MathProgBase optimization Methods Mads.makempbfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:91 Arguments madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makepowell \u2014 Method . Make Powell test function for LM optimization Methods Mads.makepowell(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:163 Arguments n::Integer : number of observations Returns: Powell test function for LM optimization source # Mads.makepowell_gradient \u2014 Method . ake parameter gradients of the Powell test function for LM optimization Methods Mads.makepowell_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:187 Arguments n::Integer : number of observations Returns: arameter gradients of the Powell test function for LM optimization source # Mads.makerosenbrock \u2014 Method . Make Rosenbrock test function for LM optimization Methods Mads.makerosenbrock(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:118 Arguments n::Integer : number of observations Returns: Rosenbrock test function for LM optimization source # Mads.makerosenbrock_gradient \u2014 Method . Make parameter gradients of the Rosenbrock test function for LM optimization Methods Mads.makerosenbrock_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:140 Arguments n::Integer : number of observations Returns: parameter gradients of the Rosenbrock test function for LM optimization source # Mads.makerotatedhyperellipsoid \u2014 Method . Methods Mads.makerotatedhyperellipsoid(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:339 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid source # Mads.makerotatedhyperellipsoid_gradient \u2014 Method . Methods Mads.makerotatedhyperellipsoid_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:363 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid gradient source # Mads.makesphere \u2014 Method . Make sphere Methods Mads.makesphere(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:218 Arguments n::Integer : number of observations Returns: sphere source # Mads.makesphere_gradient \u2014 Method . Make sphere gradient Methods Mads.makesphere_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:239 Arguments n::Integer : number of observations Returns: sphere gradient source # Mads.makesumsquares \u2014 Method . Methods Mads.makesumsquares(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:301 Arguments n::Integer : number of observations Returns: sumsquares source # Mads.makesumsquares_gradient \u2014 Method . Methods Mads.makesumsquares_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:320 Arguments n::Integer : number of observations Returns: sumsquares gradient source # Mads.makesvrmodel \u2014 Function . Make SVR model functions (executor and cleaner) Methods Mads.makesvrmodel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Mads.makesvrmodel(madsdata::Associative, numberofsamples::Integer; check, addminmax, loadsvr, savesvr, svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of samples [default= 100 ] Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] loadsvr : load SVR models [default= false ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] seed : random seed [default= 0 ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: function performing SVR predictions function loading existing SVR models function saving SVR models function removing SVR models from the memory source # Mads.maxtorealmax! \u2014 Method . Scale down values larger than max(Float32) in a dataframe df so that Gadfly can plot the data Methods Mads.maxtorealmax!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1085 Arguments df::DataFrames.DataFrame : dataframe source # Mads.mdir \u2014 Method . Change the current directory to the Mads source dictionary Methods Mads.mdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:11 source # Mads.meshgrid \u2014 Method . Create mesh grid Methods Mads.meshgrid(x::Array{T,1} where T, y::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:402 Arguments x::Array{T,1} where T : vector of grid x coordinates y::Array{T,1} where T : vector of grid y coordinates Returns: 2D grid coordinates based on the coordinates contained in vectors x and y source # Mads.minimize \u2014 Method . Minimize Julia function using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive Returns: vector with the optimal parameter values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.mkdir \u2014 Method . Create a directory (if does not already exist) Methods Mads.mkdir(dirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1279 Arguments dirname::String : directory source # Mads.modelinformationcriteria \u2014 Function . Model section information criteria Methods Mads.modelinformationcriteria(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Mads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N} where N) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Arguments madsdata::Associative : MADS problem dictionary par::Array{Float64,N} where N : parameter array source # Mads.modobsweights! \u2014 Method . Modify (multiply) observation weights in the MADS problem dictionary Methods Mads.modobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:313 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for modifing observation weights source # Mads.modwellweights! \u2014 Method . Modify (multiply) well weights in the MADS problem dictionary Methods Mads.modwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:363 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.montecarlo \u2014 Method . Monte Carlo analysis Methods Mads.montecarlo(madsdata::Associative; N, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:188 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] filename : file name to save Monte-Carlo results Returns: parameter dictionary containing the data arrays Dumps: YAML output file with the parameter dictionary containing the data arrays Example: Mads . montecarlo ( madsdata ; N = 100 ) source # Mads.naive_get_deltax \u2014 Method . Naive Levenberg-Marquardt optimization: get the LM parameter space step Methods Mads.naive_get_deltax(JpJ::AbstractArray{Float64,2}, Jp::AbstractArray{Float64,2}, f0::Array{Float64,1}, lambda::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:246 Arguments Jp::AbstractArray{Float64,2} : Jacobian matrix times model parameters JpJ::AbstractArray{Float64,2} : Jacobian matrix times model parameters times transposed Jacobian matrix f0::Array{Float64,1} : initial model observations lambda::Number : Levenberg-Marquardt lambda Returns: the LM parameter space step source # Mads.naive_levenberg_marquardt \u2014 Function . Naive Levenberg-Marquardt optimization Methods Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, lambda, lambda_mu, np_lambda) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default=x->(x'*x)[1]] x0::Array{Float64,1} : initial parameter guess Keywords lambda : initial Levenberg-Marquardt lambda [default= 100 ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] maxEval : maximum number of model evaluations [default= 101 ] maxIter : maximum number of optimization iterations [default= 10 ] np_lambda : number of parallel lambda solves [default= 10 ] Returns: source # Mads.naive_lm_iteration \u2014 Method . Naive Levenberg-Marquardt optimization: perform LM iteration Methods Mads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:267 Arguments f0::Array{Float64,1} : initial model observations f::Function : forward model function g::Function : gradient function for the forward model lambdas::Array{Float64,1} : Levenberg-Marquardt lambdas o::Function : objective function x0::Array{Float64,1} : initial parameter guess Returns: source # Mads.noplot \u2014 Method . Disable MADS plotting Methods Mads.noplot() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:237 source # Mads.obslineismatch \u2014 Method . Match an instruction line in the Mads instruction file with model input file Methods Mads.obslineismatch(obsline::String, regexs::Array{Regex,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:954 Arguments obsline::String : instruction line regexs::Array{Regex,1} : regular expressions Returns: true or false source # Mads.of \u2014 Function . Compute objective function Methods Mads.of(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:58 Mads.of(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:51 Mads.of(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:55 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector source # Mads.paramarray2dict \u2014 Method . Convert a parameter array to a parameter dictionary of arrays Methods Mads.paramarray2dict(madsdata::Associative, array::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:242 Arguments array::Array : parameter array madsdata::Associative : MADS problem dictionary Returns: a parameter dictionary of arrays source # Mads.paramdict2array \u2014 Method . Convert a parameter dictionary of arrays to a parameter array Methods Mads.paramdict2array(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:261 Arguments dict::Associative : parameter dictionary of arrays Returns: a parameter array source # Mads.parsemadsdata! \u2014 Method . Parse loaded MADS problem dictionary Methods Mads.parsemadsdata!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:161 Arguments madsdata::Associative : MADS problem dictionary source # Mads.parsenodenames \u2014 Function . Parse string with node names defined in SLURM Methods Mads.parsenodenames(nodenames::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Mads.parsenodenames(nodenames::String, ntasks_per_node::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Arguments nodenames::String : string with node names defined in SLURM ntasks_per_node::Integer : number of parallel tasks per node [default= 1 ] Returns: vector with names of compute nodes (hosts) source # Mads.partialof \u2014 Method . Compute the sum of squared residuals for observations that match a regular expression Methods Mads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:84 Arguments madsdata::Associative : MADS problem dictionary regex::Regex : regular expression resultdict::Associative : result dictionary Returns: the sum of squared residuals for observations that match the regular expression source # Mads.pkgversion \u2014 Method . Get package version Methods Mads.pkgversion(modulestr::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:445 Arguments modulestr::String Returns: package version source # Mads.plotgrid \u2014 Function . Plot a 3D grid solution based on model predictions in array s , initial parameters, or user provided parameter values Methods Mads.plotgrid(madsdata::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:56 Mads.plotgrid(madsdata::Associative, s::Array{Float64,N} where N; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:5 Mads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:61 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : dictionary with model parameters s::Array{Float64,N} where N : model predictions array Keywords addtitle : add plot title [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) title : plot title Examples: Mads . plotgrid ( madsdata , s ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata , parameters ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) source # Mads.plotlocalsa \u2014 Method . Plot local sensitivity analysis results Methods Mads.plotlocalsa(filenameroot::String; keyword, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1219 Arguments filenameroot::String : problem file name root Keywords filename : output file name format : output plot format ( png , pdf , etc.) keyword : keyword to be added in the filename root Dumps: filename : output plot file source # Mads.plotmadsproblem \u2014 Method . Plot contaminant sources and wells defined in MADS problem dictionary Methods Mads.plotmadsproblem(madsdata::Associative; format, filename, keyword, hsize, vsize, gm) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:77 Arguments madsdata::Associative : MADS problem dictionary Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] gm hsize keyword : to be added in the filename vsize Dumps: plot of contaminant sources and wells source # Mads.plotmass \u2014 Method . Plot injected/reduced contaminant mass Methods Mads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasolPlot.jl:19 Arguments filename::String : output filename for the generated plot lambda::Array{Float64,1} : array with all the lambda values mass_injected::Array{Float64,1} : array with associated total injected mass mass_reduced::Array{Float64,1} : array with associated total reduced mass Keywords format : output plot format ( png , pdf , etc.) Dumps: image file with name filename and in specified format source # Mads.plotmatches \u2014 Function . Plot the matches between model predictions and observations Methods Mads.plotmatches(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, rx::Regex; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, dict_in::Associative; plotdata, filename, format, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:189 Mads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; plotdata, filename, format, key2time, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:165 Arguments dict_in::Associative : dictionary with model parameters madsdata::Associative : MADS problem dictionary result::Associative : dictionary with model predictions rx::Regex : regular expression to filter the outputs Keywords colors : array with plot colors display : display plots [default= false ] dpi : graph resolution [default= Mads.dpi ] filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : graph horizontal size [default= 8Gadfly.inch ] key2time : user provided function to convert observation keys to observation times linewidth : line width [default= 2Gadfly.pt ] noise : random noise magnitude [default= 0 ; no noise] notitle obs_plot_dots : plot data as dots or line [default= true ] plotdata : plot data (if false model predictions are ploted only) [default= true ] pointsize : data dot size [default= 4Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] title : graph title vsize : graph vertical size [default= 4Gadfly.inch ] xtitle : x-axis title [default= \"Time\" ] ymax ymin ytitle : y-axis title [default= \"y\" ] Dumps: plot of the matches between model predictions and observations Examples: Mads . plotmatches ( madsdata ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , dict_in ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result , r\"NO3\" ; filename = \"\" , format = \"\" ) source # Mads.plotobsSAresults \u2014 Method . Plot the sensitivity analysis results for the observations Methods Mads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle, linewidth, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:571 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results Keywords debug : [default= false ] filename : output file name filter : string or regex to plot only observations containing filter format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] keyword : to be added in the auto-generated filename linewidth : line width [default= 2Gadfly.pt ] pointsize : point size [default= 2Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] xtitle : x-axis title ytitle : y-axis title Dumps: plot of the sensitivity analysis results for the observations source # Mads.plotrobustnesscurves \u2014 Method . Plot BIG-DT robustness curves Methods Mads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGapPlot.jl:20 Arguments bigdtresults::Dict : BIG-DT results madsdata::Associative : MADS problem dictionary Keywords filename : output file name used to dump plots format : output plot format ( png , pdf , etc.) maxhoriz : maximum horizon [default= Inf ] maxprob : maximum probability [default= 1.0 ] Dumps: image file with name filename and in specified format source # Mads.plotseries \u2014 Function . Create plots of data series Methods Mads.plotseries(X::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Mads.plotseries(X::Array{T,2} where T, filename::String; format, xtitle, ytitle, title, logx, logy, keytitle, name, names, combined, hsize, vsize, linewidth, dpi, colors, xmin, xmax, ymin, ymax, xaxis) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Arguments X::Array{T,2} where T : matrix with the series data filename::String : output file name Keywords colors : colors to use in plots combined : combine plots [default= true ] dpi : graph resolution [default= Mads.dpi ] format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : horizontal size [default= 8Gadfly.inch ] keytitle linewidth : width of the lines in plot [default= 2Gadfly.pt ] logx logy name : series name [default= Sources ] names title : plot title [default= Sources ] vsize : vertical size [default= 4Gadfly.inch ] xaxis xmax xmin xtitle : x-axis title [default= X ] ymax ymin ytitle : y-axis title [default= Y ] Dumps: Plots of data series source # Mads.plotwellSAresults \u2014 Function . Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected) Methods Mads.plotwellSAresults(madsdata::Associative, result::Associative; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:436 Mads.plotwellSAresults(madsdata::Associative, result::Associative, wellname::String; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:447 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results wellname::String : well name Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] xtitle : x-axis title ytitle : y-axis title Dumps: Plot of the sensitivity analysis results for all the wells in the MADS problem dictionary source # Mads.printSAresults \u2014 Method . Print sensitivity analysis results Methods Mads.printSAresults(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:921 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printSAresults2 \u2014 Method . Print sensitivity analysis results (method 2) Methods Mads.printSAresults2(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1003 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printerrormsg \u2014 Method . Print error message Methods Mads.printerrormsg(errmsg) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:382 Arguments errmsg : error message source # Mads.printobservations \u2014 Function . Print (emit) observations in the MADS problem dictionary Methods Mads.printobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, io::IO) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, filename::String; json) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:432 Arguments filename::String : output file name io::IO : output stream madsdata::Associative : MADS problem dictionary Keywords json source # Mads.pull \u2014 Function . Pull (checkout) the latest version of Mads modules Methods Mads.pull(modulename::String; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Mads.pull() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Arguments modulename::String : module name source # Mads.push \u2014 Function . Push the latest version of Mads modules in the default remote repository Methods Mads.push(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Mads.push() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Arguments modulename::String : module name source # Mads.quietoff \u2014 Method . Make MADS not quiet Methods Mads.quietoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:96 source # Mads.quieton \u2014 Method . Make MADS quiet Methods Mads.quieton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:87 source # Mads.readasciipredictions \u2014 Method . Read MADS predictions from an ASCII file Methods Mads.readasciipredictions(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:44 Arguments filename::String : ASCII file name Returns: MADS predictions source # Mads.readmodeloutput \u2014 Method . Read model outputs saved for MADS Methods Mads.readmodeloutput(madsdata::Associative; obskeys) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:724 Arguments madsdata::Associative : MADS problem dictionary Keywords obskeys : observation keys [default=getobskeys(madsdata)] source # Mads.readobservations \u2014 Function . Read observations Methods Mads.readobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Mads.readobservations(madsdata::Associative, obskeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Arguments madsdata::Associative : MADS problem dictionary obskeys::Array{T,1} where T : observation keys [default= getobskeys(madsdata) ] Returns: dictionary with Mads observations source # Mads.readobservations_cmads \u2014 Method . Read observations using C MADS dynamic library Methods Mads.readobservations_cmads(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:15 Arguments madsdata::Associative : Mads problem dictionary Returns: observations source # Mads.readyamlpredictions \u2014 Method . Read MADS model predictions from a YAML file filename Methods Mads.readyamlpredictions(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:137 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in yaml input file source # Mads.recursivemkdir \u2014 Method . Create directories recursively (if does not already exist) Methods Mads.recursivemkdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1291 Arguments s::String Keywords filename source # Mads.recursivermdir \u2014 Method . Remove directories recursively Methods Mads.recursivermdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1325 Arguments s::String Keywords filename source # Mads.regexs2obs \u2014 Method . Get observations for a set of regular expressions Methods Mads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:975 Arguments getparamhere::Array{Bool,1} : parameters obsline::String : observation line obsnames::Array{String,1} : observation names regexs::Array{Regex,1} : regular expressions Returns: obsdict : observations source # Mads.reload \u2014 Method . Reload Mads modules Methods Mads.reload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:38 source # Mads.removesource! \u2014 Function . Remove a contamination source Methods Mads.removesource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Mads.removesource!(madsdata::Associative, sourceid::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] source # Mads.removesourceparameters! \u2014 Method . Remove contaminant source parameters Methods Mads.removesourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:136 Arguments madsdata::Associative : MADS problem dictionary source # Mads.required \u2014 Function . Lists modules required by a module (Mads by default) Methods Mads.required(modulename::String, filtermodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Arguments filtermodule::String : filter module name modulename::String : module name [default= \"Mads\" ] Returns: filtered modules source # Mads.resetmodelruns \u2014 Method . Reset the model runs count to be equal to zero Methods Mads.resetmodelruns() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:207 source # Mads.residuals \u2014 Function . Compute residuals Methods Mads.residuals(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:32 Mads.residuals(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:6 Mads.residuals(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:29 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector Returns: source # Mads.restartoff \u2014 Method . MADS restart off Methods Mads.restartoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:68 source # Mads.restarton \u2014 Method . MADS restart on Methods Mads.restarton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:59 source # Mads.reweighsamples \u2014 Method . Reweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing Methods Mads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:325 Arguments madsdata::Associative : MADS problem dictionary oldllhoods::Array{T,1} where T : the log likelihoods of the parameters in the old distribution predictions::Array : the model predictions for each of the samples Returns: vector of log-likelihoods after reweighing source # Mads.rmdir \u2014 Method . Remove directory Methods Mads.rmdir(dir::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1151 Arguments dir::String : directory to be removed Keywords path : path of the directory [default= current path ] source # Mads.rmfile \u2014 Method . Remove file Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String : file to be removed Keywords path : path of the file [default= current path ] source # Mads.rmfiles \u2014 Method . Remove files Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String Keywords path : path of the file [default= current path ] source # Mads.rmfiles_ext \u2014 Method . Remove files with extension ext Methods Mads.rmfiles_ext(ext::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1196 Arguments ext::String : extension Keywords path : path of the files to be removed [default= . ] source # Mads.rmfiles_root \u2014 Method . Remove files with root root Methods Mads.rmfiles_root(root::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1209 Arguments root::String : root Keywords path : path of the files to be removed [default= . ] source # Mads.rosenbrock \u2014 Method . Rosenbrock test function Methods Mads.rosenbrock(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:43 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.rosenbrock2_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock2_gradient_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:24 Arguments x::Array{T,1} where T : parameter vector Returns: parameter gradients source # Mads.rosenbrock2_lm \u2014 Method . Rosenbrock test function (more difficult to solve) Methods Mads.rosenbrock2_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:10 Arguments x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient! \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock_gradient!(x::Array{T,1} where T, grad::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:68 Arguments grad::Array{T,1} where T : gradient vector x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separately) Methods Mads.rosenbrock_gradient_lm(x::Array{T,1} where T; dx, center) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:85 Arguments x::Array{T,1} where T : parameter vector Keywords center : array with parameter observations at the center applied to compute numerical derivatives [default= Array{Float64}(0) ] dx : apply parameter step to compute numerical derivatives [default= false ] Returns: parameter gradients source # Mads.rosenbrock_hessian! \u2014 Method . Parameter Hessian of the Rosenbrock test function Methods Mads.rosenbrock_hessian!(x::Array{T,1} where T, hess::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:101 Arguments hess::Array{T,2} where T : Hessian matrix x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_lm \u2014 Method . Rosenbrock test function for LM optimization (returns the 2 components separately) Methods Mads.rosenbrock_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:57 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.runcmd \u2014 Function . Run external command and pipe stdout and stderr Methods Mads.runcmd(cmdstring::String; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:97 Mads.runcmd(cmd::Cmd; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:42 Arguments cmd::Cmd : command (as a julia command; e.g. ls ) cmdstring::String : command (as a string; e.g. \"ls\") Keywords pipe : [default= false ] quiet : [default= Mads.quiet ] waittime : wait time is second [default= Mads.executionwaittime ] Returns: command output command error message source # Mads.runremote \u2014 Function . Run remote command on a series of servers Methods Mads.runremote(cmd::String, nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Mads.runremote(cmd::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Arguments cmd::String : remote command nodenames::Array{String,1} : names of machines/nodes [default= madsservers ] Returns: output of running remote command source # Mads.saltelli \u2014 Method . Saltelli sensitivity analysis Methods Mads.saltelli(madsdata::Associative; N, seed, restartdir, parallel, checkpointfrequency) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:638 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] parallel : set to true if the model runs should be performed in parallel [default= false ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibrute \u2014 Method . Saltelli sensitivity analysis (brute force) Methods Mads.saltellibrute(madsdata::Associative; N, seed, restartdir) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:450 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 1000 ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibruteparallel \u2014 Method . Parallel version of saltellibrute source # Mads.saltelliparallel \u2014 Method . Parallel version of saltelli source # Mads.sampling \u2014 Method . Methods Mads.sampling(param::Array{T,1} where T, J::Array, numsamples::Number; seed, scale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:274 Arguments J::Array : Jacobian matrix numsamples::Number : Number of samples param::Array{T,1} where T : Parameter vector Keywords scale : data scaling [default= 1 ] seed : random esee [default= 0 ] Returns: generated samples (vector or array) vector of log-likelihoods source # Mads.savemadsfile \u2014 Function . Save MADS problem dictionary madsdata in MADS input file filename Methods Mads.savemadsfile(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, filename::String; julia, observations_separate, filenameobs) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Mads.savemadsfile(madsdata::Associative, parameters::Associative, filename::String; julia, explicit, observations_separate) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Arguments filename::String : input file name (e.g. input_file_name.mads ) madsdata::Associative : MADS problem dictionary parameters::Associative : Dictionary with parameters (optional) Keywords explicit : if true ignores MADS YAML file modifications and rereads the original input file [default= false ] filenameobs julia : if true use Julia JSON module to save [default= false ] observations_separate Example: Mads . savemadsfile ( madsdata ) Mads . savemadsfile ( madsdata , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" , explicit = true ) source # Mads.savemcmcresults \u2014 Method . Save MCMC chain in a file Methods Mads.savemcmcresults(chain::Array, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:143 Arguments chain::Array : MCMC chain filename::String : file name Dumps: the file containing MCMC chain source # Mads.savesaltellirestart \u2014 Method . Save Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.savesaltellirestart(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:619 Arguments evalmat::Array : saved array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts source # Mads.scatterplotsamples \u2014 Method . Create histogram/scatter plots of model parameter samples Methods Mads.scatterplotsamples(madsdata::Associative, samples::Array{T,2} where T, filename::String; format, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:401 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary samples::Array{T,2} where T : matrix with model parameters Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] pointsize : point size [default= 0.9Gadfly.mm ] Dumps: histogram/scatter plots of model parameter samples source # Mads.searchdir \u2014 Function . Get files in the current directory or in a directory defined by path matching pattern key which can be a string or regular expression Methods Mads.searchdir(key::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:764 Mads.searchdir(key::Regex; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:763 Arguments key::Regex : matching pattern for Mads input files (string or regular expression accepted) key::String : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= . ] Returns: filename : an array with file names matching the pattern in the specified directory Examples: - `Mads.searchdir(\"a\")` - `Mads.searchdir(r\"[A-B]\"; path = \".\")` - `Mads.searchdir(r\".*.cov\"; path = \".\")` source # Mads.set_nprocs_per_task \u2014 Function . Set number of processors needed for each parallel task at each node Methods Mads.set_nprocs_per_task() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Mads.set_nprocs_per_task(local_nprocs_per_task::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Arguments local_nprocs_per_task::Integer source # Mads.setallparamsoff! \u2014 Method . Set all parameters OFF Methods Mads.setallparamsoff!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:474 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setallparamson! \u2014 Method . Set all parameters ON Methods Mads.setallparamson!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:460 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setdebuglevel \u2014 Method . Set MADS debug level Methods Mads.setdebuglevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:178 Arguments level::Int64 : debug level source # Mads.setdefaultplotformat \u2014 Method . Set the default plot format ( SVG is the default format) Methods Mads.setdefaultplotformat(format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:19 Arguments format::String : plot format source # Mads.setdir \u2014 Function . Set the working directory (for parallel environments) Methods Mads.setdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:252 Mads.setdir(dir) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:247 Arguments dir : directory Example: @everywhere Mads . setdir () @everywhere Mads . setdir ( \"/home/monty\" ) source # Mads.setexecutionwaittime \u2014 Method . Set maximum execution wait time for forward model runs in seconds Methods Mads.setexecutionwaittime(waitime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:198 Arguments waitime::Float64 : maximum execution wait time for forward model runs in seconds source # Mads.setmadsinputfile \u2014 Method . Set a default MADS input file Methods Mads.setmadsinputfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:351 Arguments filename::String : input file name (e.g. input_file_name.mads ) source # Mads.setmadsservers \u2014 Function . Generate a list of Mads servers Methods Mads.setmadsservers(first::Int64, last::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers(first::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Arguments first::Int64 : first [default= 0 ] last::Int64 : last [default= 18 ] Returns array string of mads servers source # Mads.setmodelinputs \u2014 Function . Set model input files; delete files where model output should be saved for MADS Methods Mads.setmodelinputs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Mads.setmodelinputs(madsdata::Associative, parameters::Associative; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords path : path for the files [default= . ] source # Mads.setnewmadsfilename \u2014 Function . Set new mads file name Methods Mads.setnewmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:505 Mads.setnewmadsfilename(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:502 Arguments filename::String : file name madsdata::Associative : MADS problem dictionary Returns: new file name source # Mads.setobservationtargets! \u2014 Method . Set observations (calibration targets) in the MADS problem dictionary based on a predictions dictionary Methods Mads.setobservationtargets!(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:528 Arguments madsdata::Associative : Mads problem dictionary predictions::Associative : dictionary with model predictions source # Mads.setobstime! \u2014 Function . Set observation time based on the observation name in the MADS problem dictionary Methods Mads.setobstime!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, separator::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:264 Arguments madsdata::Associative : MADS problem dictionary rx::Regex : regular expression to match separator::String : separator [default= _ ] Examples: Mads . setobstime! ( madsdata , \"_t\" ) Mads . setobstime! ( madsdata , r\"[A-x]*_t([0-9,.]+)\" ) source # Mads.setobsweights! \u2014 Method . Set observation weights in the MADS problem dictionary Methods Mads.setobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:299 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for observation weights source # Mads.setparamoff! \u2014 Method . Set a specific parameter with a key parameterkey OFF Methods Mads.setparamoff!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:499 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamon! \u2014 Method . Set a specific parameter with a key parameterkey ON Methods Mads.setparamon!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:488 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamsdistnormal! \u2014 Method . Set normal parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistnormal!(madsdata::Associative, mean::Array{T,1} where T, stddev::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:511 Arguments madsdata::Associative : MADS problem dictionary mean::Array{T,1} where T : array with the mean values stddev::Array{T,1} where T : array with the standard deviation values source # Mads.setparamsdistuniform! \u2014 Method . Set uniform parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistuniform!(madsdata::Associative, min::Array{T,1} where T, max::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:526 Arguments madsdata::Associative : MADS problem dictionary max::Array{T,1} where T : array with the maximum values min::Array{T,1} where T : array with the minimum values source # Mads.setparamsinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.setplotfileformat \u2014 Method . Set image file format based on the filename extension, or sets the filename extension based on the requested format . The default format is SVG . PNG , PDF , ESP , and PS are also supported. Methods Mads.setplotfileformat(filename::String, format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:39 Arguments filename::String : output file name format::String : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] Returns: output file name output plot format ( png , pdf , etc.) source # Mads.setprocs \u2014 Function . Set the available processors based on environmental variables (supports SLURM only at the moment) Methods Mads.setprocs(; ntasks_per_node, nprocs_per_task, nodenames, mads_servers, test, quiet, dir, exename) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:48 Mads.setprocs(np::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:45 Mads.setprocs(np::Integer, nt::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:32 Arguments np::Integer : number of processors [default= 1 ] nt::Integer : number of threads[default= 1 ] Keywords dir : common directory shared by all the jobs exename : location of the julia executable (the same version of julia is needed on all the workers) mads_servers : if true use MADS servers (LANL only) [default= false ] nodenames : array with names of machines/nodes to be invoked nprocs_per_task : number of processors needed for each parallel task at each node [default= Mads.nprocs_per_task ] ntasks_per_node : number of parallel tasks per node [default= 0 ] quiet : suppress output [default= Mads.quiet ] test : test the servers and connect to each one ones at a time [default= false ] Returns: vector with names of compute nodes (hosts) Example: Mads . setprocs () Mads . setprocs ( 4 ) Mads . setprocs ( 4 , 8 ) Mads . setprocs ( ntasks_per_node = 4 ) Mads . setprocs ( ntasks_per_node = 32 , mads_servers = true ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = madsservers ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = [ \"madsmax\" , \"madszem\" ]) Mads . setprocs ( ntasks_per_node = 64 , nodenames = \"wc[096-157,160,175]\" ) Mads . setprocs ( ntasks_per_node = 64 , mads_servers = true , exename = \"/home/monty/bin/julia\" , dir = \"/home/monty\" ) source # Mads.setseed \u2014 Function . Set / get current random seed. seed < 0 gets seed, anything else sets it. Methods Mads.setseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Arguments quiet::Bool : [default= true ] seed::Integer : random seed source # Mads.setsindx! \u2014 Method . Set sin-space dx Methods Mads.setsindx!(madsdata::Associative, sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:335 Arguments madsdata::Associative : MADS problem dictionary sindx::Number : sin-space dx value Returns: nothing source # Mads.setsindx \u2014 Method . Set sin-space dx Methods Mads.setsindx(sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:352 Arguments sindx::Number Returns: nothing source # Mads.setsourceinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary for the Source class Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.settarget! \u2014 Method . Set observation target Methods Mads.settarget!(o::Associative, target::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:243 Arguments o::Associative : observation data target::Number : observation target source # Mads.settime! \u2014 Method . Set observation time Methods Mads.settime!(o::Associative, time::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:165 Arguments o::Associative : observation data time::Number : observation time source # Mads.setverbositylevel \u2014 Method . Set MADS verbosity level Methods Mads.setverbositylevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:188 Arguments level::Int64 : debug level source # Mads.setweight! \u2014 Method . Set observation weight Methods Mads.setweight!(o::Associative, weight::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:204 Arguments o::Associative : observation data weight::Number : observation weight source # Mads.setwellweights! \u2014 Method . Set well weights in the MADS problem dictionary Methods Mads.setwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:344 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.showallparameters \u2014 Method . Show all parameters in the MADS problem dictionary Methods Mads.showallparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:610 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showobservations \u2014 Method . Show observations in the MADS problem dictionary Methods Mads.showobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:403 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showparameters \u2014 Method . Show parameters in the MADS problem dictionary Methods Mads.showparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:574 Arguments madsdata::Associative : MADS problem dictionary source # Mads.sinetransform \u2014 Function . Sine transformation of model parameters Methods Mads.sinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:36 Mads.sinetransform(sineparams::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:46 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T sineparams::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation of model parameters source # Mads.sinetransformfunction \u2014 Method . Sine transformation of a function Methods Mads.sinetransformfunction(f::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:80 Arguments f::Function : function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation source # Mads.sinetransformgradient \u2014 Method . Sine transformation of a gradient function Methods Mads.sinetransformgradient(g::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T; sindx) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:101 Arguments g::Function : gradient function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : vector with parameter lower bounds upperbounds::Array{T,1} where T : vector with parameter upper bounds Keywords sindx : sin-space parameter step applied to compute numerical derivatives [default= 0.1 ] Returns: Sine transformation of a gradient function source # Mads.spaghettiplot \u2014 Function . Generate a combined spaghetti plot for the selected ( type != null ) model parameter Methods Mads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:885 Mads.spaghettiplot(madsdata::Associative, dictarray::Associative; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:889 Mads.spaghettiplot(madsdata::Associative, array::Array; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:926 Arguments array::Array : data arrays to be plotted dictarray::Associative : dictionary array containing the data arrays to be plotted madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples Keywords filename : output file name used to output the produced plots format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots (if filename is not defined) linewidth : width of the lines in plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true [default] or false ) plotdata : plot data (if false model predictions are plotted only) [default= true ] pointsize : size of the markers in plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] yfit : fit vertical axis range [default= false ] ytitle : y axis title [default= Y ] Dumps: Image file with a spaghetti plot ( <mads_rootname>-<keyword>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplot ( madsdata , dictarray ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , array ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , number_of_samples ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.spaghettiplots \u2014 Function . Generate separate spaghetti plots for each selected ( type != null ) model parameter Methods Mads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:726 Mads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:731 Arguments madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples paramdictarray::DataStructures.OrderedDict : parameter dictionary containing the data arrays to be plotted Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots linewidth : width of the lines on the plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true (default) or false ) pointsize : size of the markers on the plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] ytitle : y axis title [default= Y ] Dumps: A series of image files with spaghetti plots for each selected ( type != null ) model parameter ( <mads_rootname>-<keyword>-<param_key>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplots ( madsdata , paramdictarray ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplots ( madsdata , number_of_samples ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.sphericalcov \u2014 Method . Spherical spatial covariance function Methods Mads.sphericalcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:43 Arguments h::Number : separation distance maxcov::Number : max covariance scale::Number : scale Returns: covariance source # Mads.sphericalvariogram \u2014 Method . Spherical variogram Methods Mads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:59 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Spherical variogram source # Mads.sprintf \u2014 Method . Convert @sprintf macro into sprintf function source # Mads.status \u2014 Function . Status of Mads modules Methods Mads.status(madsmodule::String; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:257 Mads.status(; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:252 Arguments madsmodule::String : mads module Keywords git : use git [default= true or Mads.madsgit ] gitmore : use even more git [default= false ] Returns: true or false source # Mads.stderrcaptureoff \u2014 Method . Restore STDERR Methods Mads.stderrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:140 Returns: standered error source # Mads.stderrcaptureon \u2014 Method . Redirect STDERR to a reader Methods Mads.stderrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:121 source # Mads.stdoutcaptureoff \u2014 Method . Restore STDOUT Methods Mads.stdoutcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:106 Returns: standered output source # Mads.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader Methods Mads.stdoutcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:87 source # Mads.stdouterrcaptureoff \u2014 Method . Restore STDOUT & STDERR Methods Mads.stdouterrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:171 Returns: standered output amd standered error source # Mads.stdouterrcaptureon \u2014 Method . Redirect STDOUT & STDERR to readers Methods Mads.stdouterrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:155 source # Mads.svrdump \u2014 Method . Dump SVR models in files Methods Mads.svrdump(svrmodel::Array{SVR.svmmodel,1}, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:141 Arguments numberofsamples::Int64 : number of samples rootname::String : root name svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrfree \u2014 Method . Free SVR Methods Mads.svrfree(svrmodel::Array{SVR.svmmodel,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:123 Arguments svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrload \u2014 Method . Load SVR models from files Methods Mads.svrload(npred::Int64, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:164 Arguments npred::Int64 : number of model predictions numberofsamples::Int64 : number of samples rootname::String : root name Returns: Array of SVR models for each model prediction source # Mads.svrpredict \u2014 Function . Predict SVR Methods Mads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,2}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:96 Arguments paramarray::Array{Float64,2} : parameter array svrmodel::Array{SVR.svmmodel,1} : array of SVR models Returns: SVR predicted observations (dependent variables) for a given set of parameters (independent variables) source # Mads.svrtrain \u2014 Function . Train SVR Methods Mads.svrtrain(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Mads.svrtrain(madsdata::Associative, paramarray::Array{Float64,2}; check, savesvr, addminmax, svm_type, kernel_type, degree, gamma, coef0, C, nu, cache_size, eps, shrinking, probability, verbose, tol) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:6 Mads.svrtrain(madsdata::Associative, numberofsamples::Integer; addminmax, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random samples in the training set [default= 100 ] paramarray::Array{Float64,2} Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: Array of SVR models source # Mads.symlinkdir \u2014 Method . Create a symbolic link of a file filename in a directory dirtarget Methods Mads.symlinkdir(filename::String, dirtarget::String, dirsource::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1137 Arguments dirsource::String dirtarget::String : target directory filename::String : file name source # Mads.symlinkdirfiles \u2014 Method . Create a symbolic link of all the files in a directory dirsource in a directory dirtarget Methods Mads.symlinkdirfiles(dirsource::String, dirtarget::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1119 Arguments dirsource::String : source directory dirtarget::String : target directory source # Mads.tag \u2014 Function . Tag Mads modules with a default argument :patch Methods Mads.tag(madsmodule::String, versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(madsmodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Mads.tag() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Arguments madsmodule::String : mads module name versionsym::Symbol : version symbol [default= :patch ] source # Mads.test \u2014 Function . Perform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace; reload(\"Mads.jl\") if needed) Methods Mads.test(testname::String; madstest) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Mads.test() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Arguments testname::String : name of the test to execute; module or example Keywords madstest : test Mads [default= true ] source # Mads.testj \u2014 Function . Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) Methods Mads.testj(coverage::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Mads.testj() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Arguments coverage::Bool : [default= false ] source # Mads.transposematrix \u2014 Method . Transpose non-numeric matrix Methods Mads.transposematrix(a::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:372 Arguments a::Array{T,2} where T : matrix source # Mads.transposevector \u2014 Method . Transpose non-numeric vector Methods Mads.transposevector(a::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:362 Arguments a::Array{T,1} where T : vector source # Mads.untag \u2014 Method . Untag specific version Methods Mads.untag(madsmodule::String, version::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:357 Arguments madsmodule::String : mads module name version::String : version source # Mads.vectoroff \u2014 Method . MADS vector calls off Methods Mads.vectoroff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:41 source # Mads.vectoron \u2014 Method . MADS vector calls on Methods Mads.vectoron() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:32 source # Mads.void2nan! \u2014 Method . Convert Void's into NaN's in a dictionary Methods Mads.void2nan!(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1043 Arguments dict::Associative : dictionary source # Mads.weightedstats \u2014 Method . Get weighted mean and variance samples Methods Mads.weightedstats(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:382 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: vector of sample means vector of sample variances source # Mads.welloff! \u2014 Method . Turn off a specific well in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Mads.wellon!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:585 Arguments madsdata::Associative : MADS problem dictionary rx::Regex wellname::String : name of the well to be turned on source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned on source # Mads.wells2observations! \u2014 Method . Convert Wells class to Observations class in the MADS problem dictionary Methods Mads.wells2observations!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:676 Arguments madsdata::Associative : MADS problem dictionary source # Mads.writeparameters \u2014 Function . Write model parameters Methods Mads.writeparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Mads.writeparameters(madsdata::Associative, parameters::Associative; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.writeparametersviatemplate \u2014 Method . Write parameters via MADS template ( templatefilename ) to an output file ( outputfilename ) Methods Mads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:829 Arguments outputfilename : output file name parameters : parameters templatefilename : tmplate file name Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.@stderrcapture \u2014 Macro . Capture STDERR of a block source # Mads.@stdoutcapture \u2014 Macro . Capture STDOUT of a block source # Mads.@stdouterrcapture \u2014 Macro . Capture STDERR & STDERR of a block source # Mads.@tryimport \u2014 Macro . Try to import a module source # Mads.MadsModel \u2014 Type . MadsModel type applied for MathProgBase analyses source","title":"Mads"},{"location":"build/Mads/#madsjl","text":"MADS (Model Analysis & Decision Support) Mads.jl is MADS main module. Mads.jl module functions: # Mads.MFlm \u2014 Method . Matrix Factorization using Levenberg Marquardt Methods Mads.MFlm(X::Array{T,2}, range::Range{Int64}; kw...) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:103 Mads.MFlm(X::Array{T,2}, nk::Integer; method, log_W, log_H, retries, initW, initH, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, quiet) where T in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:133 Arguments X::Array{T,2} : matrix to factorize nk::Integer : number of features to extract range::Range{Int64} Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix lambda lambda_mu log_H : log-transform H (feature) matrix[default= false ] log_W : log-transform W (weight) matrix [default= false ] maxEval maxIter maxJacobians method np_lambda quiet retries : number of solution retries [default= 1 ] show_trace tolG tolOF tolX Returns: NMF results source # Mads.NMFipopt \u2014 Function . Non-negative Matrix Factorization using JuMP/Ipopt Methods Mads.NMFipopt(X::Array{T,2} where T, nk::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Mads.NMFipopt(X::Array{T,2} where T, nk::Integer, retries::Integer; random, maxiter, maxguess, initW, initH, verbosity, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:61 Arguments X::Array{T,2} where T : matrix to factorize nk::Integer : number of features to extract retries::Integer : number of solution retries [default= 1 ] Keywords initH : initial H (feature) matrix initW : initial W (weight) matrix maxguess : guess about the maximum for the H (feature) matrix [default= 1 ] maxiter : maximum number of iterations [default= 100000 ] quiet : quiet [default= false ] random : random initial guesses [default= false ] verbosity : verbosity output level [default= 0 ] Returns: NMF results source # Mads.NMFm \u2014 Method . Non-negative Matrix Factorization using NMF Methods Mads.NMFm(X::Array, nk::Integer; retries, tol, maxiter) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsBSS.jl:22 Arguments X::Array : matrix to factorize nk::Integer : number of features to extract Keywords maxiter : maximum number of iterations [default= 10000 ] retries : number of solution retries [default= 1 ] tol : solution tolerance [default= 1.0e-9 ] Returns: NMF results source # Mads.addkeyword! \u2014 Function . Add a keyword in a class within the Mads dictionary madsdata Methods Mads.addkeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:249 Mads.addkeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:253 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.addsource! \u2014 Function . Add an additional contamination source Methods Mads.addsource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Mads.addsource!(madsdata::Associative, sourceid::Int64; dict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:19 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] Keywords dict source # Mads.addsourceparameters! \u2014 Method . Add contaminant source parameters Methods Mads.addsourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:76 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellsoff! \u2014 Method . Turn off all the wells in the MADS problem dictionary Methods Mads.allwellsoff!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:607 Arguments madsdata::Associative : MADS problem dictionary source # Mads.allwellson! \u2014 Method . Turn on all the wells in the MADS problem dictionary Methods Mads.allwellson!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:549 Arguments madsdata::Associative : MADS problem dictionary source # Mads.amanzi \u2014 Function . Execute Amanzi external groundwater flow and transport simulator Methods Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String, setup::String; amanzi_exe) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool, observation_filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String, nproc::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Mads.amanzi(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsSimulators.jl:15 Arguments filename::String : amanzi input file name nproc::Int64 : number of processor to be used by Amanzi [default= Mads.nprocs_per_task_default ] observation_filename::String : Amanzi observation file name [default= \"observations.out\" ] quiet::Bool : suppress output [default= Mads.quiet ] setup::String : bash script to setup Amanzi environmental variables [default= \"source-amanzi-setup\" ] Keywords amanzi_exe : full path to the Amanzi executable source # Mads.amanzi_output_parser \u2014 Function . Parse Amanzi output provided in an external file ( filename ) Methods Mads.amanzi_output_parser(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Mads.amanzi_output_parser() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-external/MadsParsers.jl:22 Arguments filename::String : external file name [default= \"observations.out\" ] Returns: dictionary with model observations following MADS requirements Example: Mads . amanzi_output_parser () Mads . amanzi_output_parser ( \"observations.out\" ) source # Mads.asinetransform \u2014 Function . Arcsine transformation of model parameters Methods Mads.asinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:4 Mads.asinetransform(params::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:14 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Arcsine transformation of model parameters source # Mads.bayessampling \u2014 Function . Bayesian Sampling Methods Mads.bayessampling(madsdata::Associative; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:78 Mads.bayessampling(madsdata::Associative, numsequences::Integer; nsteps, burnin, thinning, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:99 Arguments madsdata::Associative : MADS problem dictionary numsequences::Integer : number of sequences executed in parallel Keywords burnin : number of initial realizations before the MCMC are recorded [default= 100 ] nsteps : number of final realizations in the chain [default= 1000 ] seed : random seed [default= 0 ] thinning : removal of any thinning realization [default= 1 ] Returns: MCMC chain Examples: Mads . bayessampling ( madsdata ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) Mads . bayessampling ( madsdata , numsequences ; nsteps = 1000 , burnin = 100 , thinning = 1 , seed = 2016 ) source # Mads.calibrate \u2014 Method . Calibrate Mads model using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative : MADS problem dictionary Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results : save intermediate results [default= true ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.calibraterandom \u2014 Function . Calibrate with random initial guesses Methods Mads.calibraterandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Mads.calibraterandom(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, all, save_results) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords all : all model results are returned [default= false ] lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: model parameter dictionary with the optimal values at the minimum optimization algorithm results (e.g. bestresult[2].minimizer) Example: Mads . calibraterandom ( madsdata ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) Mads . calibraterandom ( madsdata , numberofsamples ; tolX = 1e-3 , tolG = 1e-6 , maxEval = 1000 , maxIter = 100 , maxJacobians = 100 , lambda = 100.0 , lambda_mu = 10.0 , np_lambda = 10 , show_trace = false , usenaive = false ) source # Mads.calibraterandom_parallel \u2014 Function . Calibrate with random initial guesses in parallel Methods Mads.calibraterandom_parallel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Mads.calibraterandom_parallel(madsdata::Associative, numberofsamples::Integer; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, seed, quiet, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:106 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random initial samples [default= 1 ] Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa : perform local sensitivity analysis [default= false ] maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] quiet : suppress output [default= true ] save_results : save intermediate results [default= true ] seed : random seed [default= 0 ] show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive : use naive Levenberg-Marquardt solver [default= false ] Returns: vector with all objective function values boolean vector (converged/not converged) array with estimate model parameters source # Mads.captureoff \u2014 Method . Make MADS not capture Methods Mads.captureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:114 source # Mads.captureon \u2014 Method . Make MADS capture Methods Mads.captureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:105 source # Mads.checkmodeloutputdirs \u2014 Method . Check the directories where model outputs should be saved for MADS Methods Mads.checkmodeloutputdirs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:599 Arguments madsdata::Associative : MADS problem dictionary Returns: true or false source # Mads.checknodedir \u2014 Function . Check if a directory is readable Methods Mads.checknodedir(dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:13 Mads.checknodedir(node::String, dir::String, waittime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Mads.checknodedir(node::String, dir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:4 Arguments dir::String : directory node::String : computational node name (e.g. madsmax.lanl.gov , wf03 , or 127.0.0.1 ) waittime::Float64 : wait time in seconds [default= 10 ] Returns: true if the directory is readable, false otherwise source # Mads.checkout \u2014 Function . Checkout (pull) the latest version of Mads modules Methods Mads.checkout(modulename::String; git, master, force, pull, required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Mads.checkout() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:79 Arguments modulename::String : module name Keywords all : whether to checkout all the modules [default= false ] force : whether to overwrite local changes when checkout [default= false ] git : whether to use \"git checkout\" [default= true ] master : whether on master branch [default= false ] pull : whether to run \"git pull\" [default= true ] required : whether only checkout Mads.required modules [default= false ] source # Mads.checkparameterranges \u2014 Method . Check parameter ranges for model parameters Methods Mads.checkparameterranges(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:709 Arguments madsdata::Associative : MADS problem dictionary source # Mads.cleancoverage \u2014 Method . Remove Mads coverage files Methods Mads.cleancoverage() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:24 source # Mads.cmadsins_obs \u2014 Method . Call C MADS ins_obs() function from MADS dynamic library Methods Mads.cmadsins_obs(obsid::Array{T,1} where T, instructionfilename::String, inputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:40 Arguments inputfilename::String : input file name instructionfilename::String : instruction file name obsid::Array{T,1} where T : observation id Return: observations source # Mads.commit \u2014 Function . Commit the latest version of Mads modules in the repository Methods Mads.commit(commitmsg::String, modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Mads.commit(commitmsg::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:227 Arguments commitmsg::String : commit message modulename::String : module name source # Mads.computemass \u2014 Function . Compute injected/reduced contaminant mass (for a given set of mads input files when \"path\" is provided) Methods Mads.computemass(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:459 Mads.computemass(madsfiles::Union{Regex, String}; time, path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:486 Arguments String} madsdata::Associative : MADS problem dictionary madsfiles::Union{Regex : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= \".\" ] time : computational time [default= 0 ] Returns: array with all the lambda values array with associated total injected mass array with associated total reduced mass Example: Mads . computemass ( madsfiles ; time = 0 , path = \".\" ) source # Mads.computeparametersensitities \u2014 Method . Compute sensitivities for each model parameter; averaging the sensitivity indices over the entire observation range Methods Mads.computeparametersensitities(madsdata::Associative, saresults::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:842 Arguments madsdata::Associative : MADS problem dictionary saresults::Associative : dictionary with sensitivity analysis results source # Mads.contamination \u2014 Method . Compute concentration for a point in space and time (x,y,z,t) Methods Mads.contamination(wellx::Number, welly::Number, wellz::Number, n::Number, lambda::Number, theta::Number, vx::Number, vy::Number, vz::Number, ax::Number, ay::Number, az::Number, H::Number, x::Number, y::Number, z::Number, dx::Number, dy::Number, dz::Number, f::Number, t0::Number, t1::Number, t::Array{T,1} where T, anasolfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:429 Arguments H::Number : Hurst coefficient for Fractional Brownian dispersion anasolfunction::Function ax::Number : dispersivity in X direction (longitudinal) ay::Number : dispersivity in Y direction (transverse horizontal) az::Number : dispersivity in Y direction (transverse vertical) dx::Number : source size (extent) in X direction dy::Number : source size (extent) in Y direction dz::Number : source size (extent) in Z direction f::Number : source mass flux lambda::Number : first-order reaction rate n::Number : porosity t0::Number : source starting time t1::Number : source termination time t::Array{T,1} where T : vector of times to compute concentration at the observation point theta::Number : groundwater flow direction vx::Number : advective transport velocity in X direction vy::Number : advective transport velocity in Y direction vz::Number : advective transport velocity in Z direction wellx::Number : observation point (well) X coordinate welly::Number : observation point (well) Y coordinate wellz::Number : observation point (well) Z coordinate x::Number : X coordinate of contaminant source location y::Number : Y coordinate of contaminant source location z::Number : Z coordinate of contaminant source location Returns: a vector of predicted concentration at (wellx, welly, wellz, t) source # Mads.copyaquifer2sourceparameters! \u2014 Method . Copy aquifer parameters to become contaminant source parameters Methods Mads.copyaquifer2sourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:115 Arguments madsdata::Associative : MADS problem dictionary source # Mads.copyright \u2014 Method . Produce MADS copyright information Methods Mads.copyright() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:18 source # Mads.create_documentation \u2014 Method . Create web documentation files for Mads functions Methods Mads.create_documentation() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:382 source # Mads.create_tests_off \u2014 Method . Turn off the generation of MADS tests (default) Methods Mads.create_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:150 source # Mads.create_tests_on \u2014 Method . Turn on the generation of MADS tests (dangerous) Methods Mads.create_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:141 source # Mads.createmadsobservations \u2014 Function . Create Mads dictionary of observations and instruction file Methods Mads.createmadsobservations(nrow::Int64, ncol::Int64; obstring, pretext, prestring, poststring, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Mads.createmadsobservations(nrow::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:108 Arguments ncol::Int64 : number of columns [default 1] nrow::Int64 : number of rows Keywords filename : file name obstring : observation string poststring : post instruction file string prestring : pre instruction file string pretext : preamble instructions ) Returns: observation dictionary source # Mads.createmadsproblem \u2014 Function . Create a new Mads problem where the observation targets are computed based on the model predictions Methods Mads.createmadsproblem(infilename::String, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:26 Mads.createmadsproblem(madsdata::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:51 Mads.createmadsproblem(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:60 Mads.createmadsproblem(madsdata::Associative, predictions::Associative, outfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:56 Arguments infilename::String : input Mads file madsdata::Associative : MADS problem dictionary outfilename::String : output Mads file predictions::Associative : dictionary of model predictions Returns: new MADS problem dictionary source # Mads.createobservations! \u2014 Function . Create observations in the MADS problem dictionary based on time and observation vectors Methods Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, time::Array{T,1} where T, observation::Array{T,1} where T; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:444 Mads.createobservations!(madsdata::Associative, observation::Associative; logtransform, weight_type, weight) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:488 Arguments madsdata::Associative : MADS problem dictionary observation::Array{T,1} where T : dictionary of observations observation::Associative : dictionary of observations time::Array{T,1} where T : vector of observation times Keywords logtransform : log transform observations [default= false ] weight : weight value [default= 1 ] weight_type : weight type [default= constant ] source # Mads.createtempdir \u2014 Method . Create temporary directory Methods Mads.createtempdir(tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1226 Arguments tempdirname::String : temporary directory name source # Mads.deleteNaN! \u2014 Method . Delete rows with NaN in a dataframe df Methods Mads.deleteNaN!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1068 Arguments df::DataFrames.DataFrame : dataframe source # Mads.deletekeyword! \u2014 Function . Delete a keyword in a class within the Mads dictionary madsdata Methods Mads.deletekeyword!(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:276 Mads.deletekeyword!(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:282 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary source # Mads.deleteoffwells! \u2014 Method . Delete all wells marked as being off in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.deletetimes! \u2014 Method . Delete all times in the MADS problem dictionary in a given list. Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.dependents \u2014 Function . Lists module dependents on a module (Mads by default) Methods Mads.dependents(modulename::String, filter::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Mads.dependents() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:43 Arguments filter::Bool : whether to filter modules [default= false ] modulename::String : module name [default= \"Mads\" ] Returns: modules that are dependents of the input module source # Mads.diff \u2014 Function . Diff the latest version of Mads modules in the repository Methods Mads.diff(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Mads.diff() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:170 Arguments modulename::String : module name source # Mads.display \u2014 Function . Display image file Methods Mads.display(p::Compose.Context) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:71 Mads.display(p::Gadfly.Plot) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:65 Mads.display(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsDisplay.jl:8 Arguments filename::String : image file name p::Compose.Context : plotting object p::Gadfly.Plot : plotting object source # Mads.dobigdt \u2014 Method . Perform Bayesian Information Gap Decision Theory (BIG-DT) analysis Methods Mads.dobigdt(madsdata::Associative, nummodelruns::Int64; numhorizons, maxHorizon, numlikelihoods) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:123 Arguments madsdata::Associative : MADS problem dictionary nummodelruns::Int64 : number of model runs Keywords maxHorizon : maximum info-gap horizons of uncertainty [default= 3 ] numhorizons : number of info-gap horizons of uncertainty [default= 100 ] numlikelihoods : number of Bayesian likelihoods [default= 25 ] Returns: dictionary with BIG-DT results source # Mads.dumpasciifile \u2014 Method . Dump ASCII file Methods Mads.dumpasciifile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:30 Arguments data : data to dump filename::String : ASCII file name Dumps: ASCII file with the name in \"filename\" source # Mads.dumpjsonfile \u2014 Method . Dump a JSON file Methods Mads.dumpjsonfile(filename::String, data) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:38 Arguments data : data to dump filename::String : JSON file name Dumps: JSON file with the name in \"filename\" source # Mads.dumpwelldata \u2014 Method . Dump well data from MADS problem dictionary into a ASCII file Methods Mads.dumpwelldata(madsdata::Associative, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1092 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Dumps: filename : a ASCII file source # Mads.dumpyamlfile \u2014 Method . Dump YAML file Methods Mads.dumpyamlfile(filename::String, data; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:55 Arguments data : YAML data filename::String : output file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) source # Mads.dumpyamlmadsfile \u2014 Method . Dump YAML Mads file Methods Mads.dumpyamlmadsfile(madsdata::Associative, filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:74 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary Keywords julia : use julia YAML [default= false ] source # Mads.efast \u2014 Method . Sensitivity analysis using Saltelli's extended Fourier Amplitude Sensitivity Testing (eFAST) method Methods Mads.efast(md::Associative; N, M, gamma, seed, checkpointfrequency, restartdir, restart) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1111 Arguments md::Associative : MADS problem dictionary Keywords M : maximum number of harmonics [default= 6 ] N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] gamma : multiplication factor (Saltelli 1999 recommends gamma = 2 or 4) [default= 4 ] restart : save restart information [default= false ] restartdir : directory where files will be stored containing model results for the efast simulation restarts [default= \"efastcheckpoints\" ] seed : random seed [default= 0 ] source # Mads.emceesampling \u2014 Function . Bayesian sampling with Goodman & Weare's Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) Methods Mads.emceesampling(madsdata::Associative; numwalkers, nsteps, burnin, thinning, sigma, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:9 Mads.emceesampling(madsdata::Associative, p0::Array; numwalkers, nsteps, burnin, thinning, seed, weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:32 Arguments madsdata::Associative : MADS problem dictionary p0::Array : initial parameters (matrix of size (number of parameters, number of walkers) or (length(Mads.getoptparamkeys(madsdata)), numwalkers)) Keywords burnin : number of initial realizations before the MCMC are recorded [default= 10 ] nsteps : number of final realizations in the chain [default= 100 ] numwalkers : number of walkers (if in parallel this can be the number of available processors; in general, the higher the number of walkers, the better the results and computational time [default= 10 ] seed : random seed [default= 0 ] sigma : a standard deviation parameter used to initialize the walkers [default= 0.01 ] thinning : removal of any thinning realization [default= 1 ] weightfactor : weight factor [default= 1.0 ] Returns: MCMC chain log likelihoods of the final samples in the chain Examples: Mads . emceesampling ( madsdata ; numwalkers = 10 , nsteps = 100 , burnin = 100 , thinning = 1 , seed = 2016 , sigma = 0.01 ) Mads . emceesampling ( madsdata , p0 ; numwalkers = 10 , nsteps = 100 , burnin = 10 , thinning = 1 , seed = 2016 ) source # Mads.estimationerror \u2014 Function . Estimate kriging error Methods Mads.estimationerror(w::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:197 Mads.estimationerror(w::Array{T,1} where T, covmat::Array{T,2} where T, covvec::Array{T,1} where T, cov0::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:204 Arguments X::Array{T,2} where T : observation matrix cov0::Number : zero-separation covariance cov::Function : spatial covariance function covmat::Array{T,2} where T : covariance matrix covvec::Array{T,1} where T : covariance vector w::Array{T,1} where T : kriging weights x0::Array{T,1} where T : estimated locations Returns: estimation kriging error source # Mads.evaluatemadsexpression \u2014 Method . Evaluate an expression string based on a parameter dictionary Methods Mads.evaluatemadsexpression(expressionstring::String, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:154 Arguments expressionstring::String : expression string parameters::Associative : parameter dictionary applied to evaluate the expression string Returns: dictionary containing the expression names as keys, and the values of the expression as values source # Mads.evaluatemadsexpressions \u2014 Method . Evaluate all the expressions in the Mads problem dictiorany based on a parameter dictionary Methods Mads.evaluatemadsexpressions(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:173 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameter dictionary applied to evaluate the expression strings Returns: dictionary containing the parameter and expression names as keys, and the values of the expression as values source # Mads.expcov \u2014 Method . Exponential spatial covariance function Methods Mads.expcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:29 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.exponentialvariogram \u2014 Method . Exponential variogram Methods Mads.exponentialvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:82 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Exponential variogram source # Mads.filterkeys \u2014 Function . Filter dictionary keys based on a string or regular expression Methods Mads.filterkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Mads.filterkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:786 Mads.filterkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:787 Arguments dict::Associative : dictionary key::Regex : the regular expression or string used to filter dictionary keys key::String : the regular expression or string used to filter dictionary keys source # Mads.forward \u2014 Function . Perform a forward run using the initial or provided values for the model parameters Methods Mads.forward(madsdata::Associative; all) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:6 Mads.forward(madsdata::Associative, paramdict::Associative; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:10 Mads.forward(madsdata::Associative, paramarray::Array; all, checkpointfrequency, checkpointfilename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:44 Arguments madsdata::Associative : MADS problem dictionary paramarray::Array : array of model parameter values paramdict::Associative : dictionary of model parameter values Keywords all : all model results are returned [default= false ] checkpointfilename : check point file name [default=\"checkpoint_forward\"] checkpointfrequency : check point frequency for storing restart information [default= 0 ] Returns: dictionary of model predictions source # Mads.forwardgrid \u2014 Function . Perform a forward run over a 3D grid defined in madsdata using the initial or provided values for the model parameters Methods Mads.forwardgrid(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:132 Mads.forwardgrid(madsdatain::Associative, paramvalues::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsForward.jl:137 Arguments madsdata::Associative : MADS problem dictionary madsdatain::Associative : MADS problem dictionary paramvalues::Associative : dictionary of model parameter values Returns: 3D array with model predictions along a 3D grid source # Mads.free \u2014 Function . Free Mads modules Methods Mads.free(modulename::String; required, all) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Mads.free() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:203 Arguments modulename::String : module name Keywords all : free all the modules [default= false ] required : only free Mads.required modules [default= false ] source # Mads.functions \u2014 Function . List available functions in the MADS modules: Methods Mads.functions(string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:31 Mads.functions(re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:22 Mads.functions(m::Union{Module, Symbol}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Mads.functions(m::Union{Module, Symbol}, re::Regex; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:40 Mads.functions(m::Union{Module, Symbol}, string::String; stdout, quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:70 Arguments Symbol} m::Union{Module : MADS module re::Regex string::String : string to display functions with matching names Keywords quiet stdout Examples: Mads . functions () Mads . functions ( BIGUQ ) Mads . functions ( \"get\" ) Mads . functions ( Mads , \"get\" ) source # Mads.gaussiancov \u2014 Method . Gaussian spatial covariance function Methods Mads.gaussiancov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:15 Arguments h::Number : separation distance maxcov::Number : maximum covariance scale::Number : scale Returns: covariance source # Mads.gaussianvariogram \u2014 Method . Gaussian variogram Methods Mads.gaussianvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:103 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Gaussian variogram source # Mads.getcovmat \u2014 Method . Get spatial covariance matrix Methods Mads.getcovmat(X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:159 Arguments X::Array{T,2} where T : matrix with coordinates of the data points (x or y) cov::Function : spatial covariance function Returns: spatial covariance matrix source # Mads.getcovvec! \u2014 Method . Get spatial covariance vector Methods Mads.getcovvec!(covvec::Array{T,1} where T, x0::Array{T,1} where T, X::Array{T,2} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:185 Arguments X::Array{T,2} where T : matrix with coordinates of the data points cov::Function : spatial covariance function covvec::Array{T,1} where T : spatial covariance vector x0::Array{T,1} where T : vector with coordinates of the estimation points (x or y) Returns: spatial covariance vector source # Mads.getdictvalues \u2014 Function . Get dictionary values for keys based on a string or regular expression Methods Mads.getdictvalues(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Mads.getdictvalues(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:808 Mads.getdictvalues(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:809 Arguments dict::Associative : dictionary key::Regex : the key to find value for key::String : the key to find value for source # Mads.getdir \u2014 Method . Get directory Methods Mads.getdir(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:407 Arguments filename::String : file name Returns: directory in file name Example: d = Mads . getdir ( \"a.mads\" ) # d = \".\" d = Mads . getdir ( \"test/a.mads\" ) # d = \"test\" source # Mads.getdistribution \u2014 Method . Parse parameter distribution from a string Methods Mads.getdistribution(dist::String, i::String, inputtype::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:202 Arguments dist::String : parameter distribution i::String inputtype::String : input type (parameter or observation) Returns: distribution source # Mads.getextension \u2014 Method . Get file name extension Methods Mads.getextension(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:579 Arguments filename::String : file name Returns: file name extension Example: ext = Mads . getextension ( \"a.mads\" ) # ext = \"mads\" source # Mads.getimportantsamples \u2014 Method . Get important samples Methods Mads.getimportantsamples(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:351 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: array of important samples source # Mads.getlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are log-transformed ( log ) source # Mads.getmadsdir \u2014 Method . Get the directory where currently Mads is running Methods Mads.getmadsdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:449 Example: problemdir = Mads . getmadsdir () Returns: Mads problem directory source # Mads.getmadsinputfile \u2014 Method . Get the default MADS input file set as a MADS global variable using setmadsinputfile(filename) Methods Mads.getmadsinputfile() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:364 Returns: input file name (e.g. input_file_name.mads ) source # Mads.getmadsproblemdir \u2014 Method . Get the directory where the Mads data file is located Methods Mads.getmadsproblemdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:430 Arguments madsdata::Associative : MADS problem dictionary Example: madsdata = Mads . loadmadsfile ( \"../../a.mads\" ) madsproblemdir = Mads . getmadsproblemdir ( madsdata ) where madsproblemdir = \"../../\" source # Mads.getmadsrootname \u2014 Method . Get the MADS problem root name Methods Mads.getmadsrootname(madsdata::Associative; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:386 Arguments madsdata::Associative : MADS problem dictionary Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Example: madsrootname = Mads . getmadsrootname ( madsdata ) Returns: root of file name source # Mads.getnextmadsfilename \u2014 Method . Get next mads file name Methods Mads.getnextmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:542 Arguments filename::String : file name Returns: next mads file name source # Mads.getnonlogparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT log-transformed ( log ) source # Mads.getnonoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are NOT optimized ( opt ) source # Mads.getobsdist \u2014 Method . Get an array with dist values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsdist \u2014 Method . Get an array with dist values for all observations in the MADS problem dictionary source # Mads.getobskeys \u2014 Method . Get keys for all observations in the MADS problem dictionary Methods Mads.getobskeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:45 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all observations in the MADS problem dictionary source # Mads.getobslog \u2014 Method . Get an array with log values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobslog \u2014 Method . Get an array with log values for all observations in the MADS problem dictionary source # Mads.getobsmax \u2014 Method . Get an array with max values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmax \u2014 Method . Get an array with max values for all observations in the MADS problem dictionary source # Mads.getobsmin \u2014 Method . Get an array with min values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsmin \u2014 Method . Get an array with min values for all observations in the MADS problem dictionary source # Mads.getobstarget \u2014 Method . Get an array with target values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstarget \u2014 Method . Get an array with target values for all observations in the MADS problem dictionary source # Mads.getobstime \u2014 Method . Get an array with time values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobstime \u2014 Method . Get an array with time values for all observations in the MADS problem dictionary source # Mads.getobsweight \u2014 Method . Get an array with weight values for observations in the MADS problem dictionary defined by obskeys source # Mads.getobsweight \u2014 Method . Get an array with weight values for all observations in the MADS problem dictionary source # Mads.getoptparamkeys \u2014 Method . Get the keys in the MADS problem dictionary for parameters that are optimized ( opt ) source # Mads.getoptparams \u2014 Function . Get optimizable parameters Methods Mads.getoptparams(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:369 Mads.getoptparams(madsdata::Associative, parameterarray::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Mads.getoptparams(madsdata::Associative, parameterarray::Array, optparameterkey::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:372 Arguments madsdata::Associative : MADS problem dictionary optparameterkey::Array : optimizable parameter keys parameterarray::Array : parameter array Returns: parameter array source # Mads.getparamdict \u2014 Method . Get dictionary with all parameters and their respective initial values Methods Mads.getparamdict(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:60 Arguments madsdata::Associative : MADS problem dictionary Returns: dictionary with all parameters and their respective initial values source # Mads.getparamdistributions \u2014 Method . Get probabilistic distributions of all parameters in the MADS problem dictionary Note: Probabilistic distribution of parameters can be defined only if dist or min / max model parameter fields are specified in the MADS problem dictionary madsdata . Methods Mads.getparamdistributions(madsdata::Associative; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:664 Arguments madsdata::Associative : MADS problem dictionary Keywords init_dist : if true use the distribution defined for initialization in the MADS problem dictionary (defined using init_dist parameter field); else use the regular distribution defined in the MADS problem dictionary (defined using dist parameter field [default= false ] Returns: probabilistic distributions source # Mads.getparamkeys \u2014 Method . Get keys of all parameters in the MADS problem dictionary Methods Mads.getparamkeys(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:44 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter Returns: array with the keys of all parameters in the MADS problem dictionary source # Mads.getparamrandom \u2014 Function . Get independent sampling of model parameters defined in the MADS problem dictionary Methods Mads.getparamrandom(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, numsamples::Integer, parameterkey::String; init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:387 Mads.getparamrandom(madsdata::Associative, parameterkey::String; numsamples, paramdist, init_dist) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:404 Arguments madsdata::Associative : MADS problem dictionary numsamples::Integer : number of samples, [default= 1 ] parameterkey::String : model parameter key Keywords init_dist : if true use the distribution set for initialization in the MADS problem dictionary (defined using init_dist parameter field); if false (default) use the regular distribution set in the MADS problem dictionary (defined using dist parameter field) numsamples : number of samples paramdist : dictionary of parameter distributions Returns: generated sample source # Mads.getparamsinit \u2014 Method . Get an array with init values for parameters defined by paramkeys source # Mads.getparamsinit \u2014 Method . Get an array with init values for all the MADS model parameters source # Mads.getparamsinit_max \u2014 Function . Get an array with init_max values for parameters defined by paramkeys Methods Mads.getparamsinit_max(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:298 Mads.getparamsinit_max(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:264 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsinit_min \u2014 Function . Get an array with init_min values for parameters Methods Mads.getparamsinit_min(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:247 Mads.getparamsinit_min(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:213 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamslog \u2014 Method . Get an array with log values for parameters defined by paramkeys source # Mads.getparamslog \u2014 Method . Get an array with log values for all the MADS model parameters source # Mads.getparamslongname \u2014 Method . Get an array with longname values for parameters defined by paramkeys source # Mads.getparamslongname \u2014 Method . Get an array with longname values for all the MADS model parameters source # Mads.getparamsmax \u2014 Function . Get an array with max values for parameters defined by paramkeys Methods Mads.getparamsmax(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:196 Mads.getparamsmax(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:174 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: returns the parameter values source # Mads.getparamsmin \u2014 Function . Get an array with min values for parameters defined by paramkeys Methods Mads.getparamsmin(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:157 Mads.getparamsmin(madsdata::Associative, paramkeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:135 Arguments madsdata::Associative : MADS problem dictionary paramkeys::Array{T,1} where T : parameter keys Returns: the parameter values source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for parameters defined by paramkeys source # Mads.getparamsplotname \u2014 Method . Get an array with plotname values for all the MADS model parameters source # Mads.getparamsstep \u2014 Method . Get an array with step values for parameters defined by paramkeys source # Mads.getparamsstep \u2014 Method . Get an array with step values for all the MADS model parameters source # Mads.getparamstype \u2014 Method . Get an array with type values for parameters defined by paramkeys source # Mads.getparamstype \u2014 Method . Get an array with type values for all the MADS model parameters source # Mads.getprocs \u2014 Method . Get the number of processors Methods Mads.getprocs() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:28 source # Mads.getrestart \u2014 Method . Get MADS restart status Methods Mads.getrestart(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:78 Arguments madsdata::Associative : MADS problem dictionary source # Mads.getrestartdir \u2014 Function . Get the directory where Mads restarts will be stored Methods Mads.getrestartdir(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Mads.getrestartdir(madsdata::Associative, suffix::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:321 Arguments madsdata::Associative : MADS problem dictionary suffix::String : Suffix to be added to the name of restart directory Returns: restart directory where reusable model results will be stored source # Mads.getrootname \u2014 Method . Get file name root Methods Mads.getrootname(filename::String; first, version) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:479 Arguments filename::String : file name Keywords first : use the first . in filename as the seperator between root name and extention [default= true ] version : delete version information from filename for the returned rootname [default= false ] Returns: root of file name Example: r = Mads . getrootname ( \"a.rnd.dat\" ) # r = \"a\" r = Mads . getrootname ( \"a.rnd.dat\" , first = false ) # r = \"a.rnd\" source # Mads.getseed \u2014 Method . Get and return current random seed. Methods Mads.getseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:432 source # Mads.getsindx \u2014 Method . Get sin-space dx Methods Mads.getsindx(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:314 Arguments madsdata::Associative : MADS problem dictionary Returns: sin-space dx value source # Mads.getsourcekeys \u2014 Method . Get keys of all source parameters in the MADS problem dictionary Methods Mads.getsourcekeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:78 Arguments madsdata::Associative : MADS problem dictionary Returns: array with keys of all source parameters in the MADS problem dictionary source # Mads.gettarget \u2014 Method . Get observation target Methods Mads.gettarget(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:224 Arguments o::Associative : observation data Returns: observation target source # Mads.gettargetkeys \u2014 Method . Get keys for all targets (observations with weights greater than zero) in the MADS problem dictionary Methods Mads.gettargetkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:59 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all targets in the MADS problem dictionary source # Mads.gettime \u2014 Method . Get observation time Methods Mads.gettime(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:146 Arguments o::Associative : observation data Returns: observation time (\"NaN\" it time is missing) source # Mads.getweight \u2014 Method . Get observation weight Methods Mads.getweight(o::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:185 Arguments o::Associative : observation data Returns: observation weight (\"NaN\" when weight is missing) source # Mads.getwelldata \u2014 Method . Get spatial and temporal data in the Wells class Methods Mads.getwelldata(madsdata::Associative; time) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:716 Arguments madsdata::Associative : Mads problem dictionary Keywords time : get observation times [default= false ] Returns: array with spatial and temporal data in the Wells class source # Mads.getwellkeys \u2014 Method . Get keys for all wells in the MADS problem dictionary Methods Mads.getwellkeys(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:76 Arguments madsdata::Associative : MADS problem dictionary Returns: keys for all wells in the MADS problem dictionary source # Mads.getwelltargets \u2014 Method . Methods Mads.getwelltargets(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:750 Arguments madsdata::Associative : Mads problem dictionary Returns: array with targets in the Wells class source # Mads.graphoff \u2014 Method . MADS graph output off Methods Mads.graphoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:132 source # Mads.graphon \u2014 Method . MADS graph output on Methods Mads.graphon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:123 source # Mads.haskeyword \u2014 Function . Check for a keyword in a class within the Mads dictionary madsdata Methods Mads.haskeyword(madsdata::Associative, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:211 Mads.haskeyword(madsdata::Associative, class::String, keyword::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:214 Arguments class::String : dictionary class; if not provided searches for keyword in Problem class keyword::String : dictionary key madsdata::Associative : MADS problem dictionary Returns: true or false Examples: - `Mads.haskeyword(madsdata, \"disp\")` ... searches in `Problem` class by default - `Mads.haskeyword(madsdata, \"Wells\", \"R-28\")` ... searches in `Wells` class for a keyword \"R-28\" source # Mads.help \u2014 Method . Produce MADS help information Methods Mads.help() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelp.jl:9 source # Mads.importeverywhere \u2014 Method . Import Julia function everywhere from a file. The first function in the Julia input file is the one that will be called by Mads to perform the model simulations. Methods Mads.importeverywhere(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:373 Arguments filename::String : file name Returns: Julia function to execute the model source # Mads.indexkeys \u2014 Function . Find indexes for dictionary keys based on a string or regular expression Methods Mads.indexkeys(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Mads.indexkeys(dict::Associative, key::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:797 Mads.indexkeys(dict::Associative, key::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:798 Arguments dict::Associative : dictionary key::Regex : the key to find index for key::String : the key to find index for source # Mads.infogap_jump \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Mads.infogap_jump(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:22 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_jump_polinomial \u2014 Function . Information Gap Decision Analysis using JuMP Methods Mads.infogap_jump_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Mads.infogap_jump_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, quiet, plot, model, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:126 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] model : model id [default= 1 ] plot : activate plotting [default= false ] quiet : quiet [default= false ] random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] Returns: hmin, hmax source # Mads.infogap_mpb_lin \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_lin() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Mads.infogap_mpb_lin(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:423 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.infogap_mpb_polinomial \u2014 Function . Information Gap Decision Analysis using MathProgBase Methods Mads.infogap_mpb_polinomial() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Mads.infogap_mpb_polinomial(madsdata::Associative; horizons, retries, random, maxiter, verbosity, seed, pinit) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsInfoGap.jl:282 Arguments madsdata::Associative : Mads problem dictionary Keywords horizons : info-gap horizons of uncertainty [default= [0.05, 0.1, 0.2, 0.5] ] maxiter : maximum number of iterations [default= 3000 ] pinit : vector with initial parameters random : random initial guesses [default= false ] retries : number of solution retries [default= 1 ] seed : random seed [default= 0 ] verbosity : verbosity output level [default= 0 ] source # Mads.ins_obs \u2014 Method . Apply Mads instruction file instructionfilename to read model output file modeloutputfilename Methods Mads.ins_obs(instructionfilename::String, modeloutputfilename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1005 Arguments instructionfilename::String : instruction file name modeloutputfilename::String : model output file name Returns: obsdict : observation dictionary with the model outputs source # Mads.instline2regexs \u2014 Method . Convert an instruction line in the Mads instruction file into regular expressions Methods Mads.instline2regexs(instline::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:905 Arguments instline::String : instruction line Returns: regexs : regular expressions obsnames : observation names getparamhere : parameters source # Mads.invobsweights! \u2014 Method . Set inversely proportional observation weights in the MADS problem dictionary Methods Mads.invobsweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:327 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.invwellweights! \u2014 Method . Set inversely proportional well weights in the MADS problem dictionary Methods Mads.invwellweights!(madsdata::Associative, multiplier::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:382 Arguments madsdata::Associative : MADS problem dictionary multiplier::Number : weight multiplier source # Mads.islog \u2014 Method . Is parameter with key parameterkey log-transformed? Methods Mads.islog(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:445 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if log-transformed, false otherwise source # Mads.isobs \u2014 Method . Is a dictionary containing all the observations Methods Mads.isobs(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:19 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary contain all the observations, false otherwise source # Mads.isopt \u2014 Method . Is parameter with key parameterkey optimizable? Methods Mads.isopt(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:425 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key Returns: true if optimizable, false if not source # Mads.isparam \u2014 Method . Check if a dictionary containing all the Mads model parameters Methods Mads.isparam(madsdata::Associative, dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:17 Arguments dict::Associative : dictionary madsdata::Associative : MADS problem dictionary Returns: true if the dictionary containing all the parameters, false otherwise source # Mads.ispkgavailable \u2014 Function . Checks if package is available Methods Mads.ispkgavailable(modulename::String; quiet) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:468 Arguments modulename::String : module name Keywords quiet Returns: true or false source # Mads.krige \u2014 Method . Kriging Methods Mads.krige(x0mat::Array{T,2} where T, X::Array{T,2} where T, Z::Array{T,1} where T, cov::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:124 Arguments X::Array{T,2} where T : coordinates of the observation (conditioning) data Z::Array{T,1} where T : values for the observation (conditioning) data cov::Function : spatial covariance function x0mat::Array{T,2} where T : point coordinates at which to obtain kriging estimates Returns: kriging estimates at x0mat source # Mads.levenberg_marquardt \u2014 Function . Levenberg-Marquardt optimization Methods Mads.levenberg_marquardt(f::Function, g::Function, x0) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Mads.levenberg_marquardt(f::Function, g::Function, x0, o::Function; root, tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_scale, lambda_mu, lambda_nu, np_lambda, show_trace, alwaysDoJacobian, callbackiteration, callbackjacobian) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:358 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default= x->(x'*x)[1] ] x0 : initial parameter guess Keywords alwaysDoJacobian : computer Jacobian each iteration [default= false ] callbackiteration : call back function for each iteration [default= (best_x::Vector, of::Number, lambda::Number)->nothing ] callbackjacobian : call back function for each Jacobian [default= (x::Vector, J::Matrix)->nothing ] lambda : initial Levenberg-Marquardt lambda [default= eps(Float32) ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] lambda_nu : lambda multiplication factor \u03bd [default= 2 ] lambda_scale : lambda scaling factor [default= 1e-3, ] maxEval : maximum number of model evaluations [default= 1001 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] root : Mads problem root name show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function update tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] source # Mads.linktempdir \u2014 Method . Link files in a temporary directory Methods Mads.linktempdir(madsproblemdir::String, tempdirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1252 Arguments madsproblemdir::String : Mads problem directory tempdirname::String : temporary directory name source # Mads.loadasciifile \u2014 Method . Load ASCII file Methods Mads.loadasciifile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:14 Arguments filename::String : ASCII file name Returns: data from the file source # Mads.loadbigyamlfile \u2014 Method . Load BIG YAML input file Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format julia Returns: MADS problem dictionary source # Mads.loadjsonfile \u2014 Method . Load a JSON file Methods Mads.loadjsonfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsJSON.jl:16 Arguments filename::String : JSON file name Returns: data from the JSON file source # Mads.loadmadsfile \u2014 Method . Load MADS input file defining a MADS problem dictionary Methods Mads.loadmadsfile(filename::String; bigfile, julia, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:34 Arguments filename::String : input file name (e.g. input_file_name.mads ) Keywords bigfile format : acceptable formats are yaml and json [default= yaml ] julia : if true , force using julia parsing functions; if false (default), use python parsing functions Returns: MADS problem dictionary Example: md = Mads . loadmadsfile ( \"input_file_name.mads\" ) source # Mads.loadmadsproblem \u2014 Method . Load a predefined Mads problem Methods Mads.loadmadsproblem(name::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCreate.jl:15 Arguments name::String : predefined MADS problem name Returns: MADS problem dictionary source # Mads.loadsaltellirestart! \u2014 Method . Load Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.loadsaltellirestart!(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:598 Arguments evalmat::Array : loaded array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts Returns: true when successfully loaded, false when it is not source # Mads.loadyamlfile \u2014 Method . Load YAML file Methods Mads.loadyamlfile(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:18 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in the yaml input file source # Mads.localsa \u2014 Method . Local sensitivity analysis based on eigen analysis of the parameter covariance matrix Methods Mads.localsa(madsdata::Associative; sinspace, keyword, filename, format, datafiles, imagefiles, par, obs, J) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:126 Arguments madsdata::Associative : MADS problem dictionary Keywords J : Jacobian matrix datafiles : flag to write data files [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) imagefiles : flag to create image files [default= Mads.graphoutput ] keyword : keyword to be added in the filename root obs : observations for the parameter set par : parameter set sinspace : apply sin transformation [default= true ] Dumps: filename : output plot file source # Mads.long_tests_off \u2014 Method . Turn off execution of long MADS tests (default) Methods Mads.long_tests_off() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:168 source # Mads.long_tests_on \u2014 Method . Turn on execution of long MADS tests Methods Mads.long_tests_on() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:159 source # Mads.madscores \u2014 Function . Check the number of processors on a series of servers Methods Mads.madscores(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Mads.madscores() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:304 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madscritical \u2014 Method . MADS critical error messages Methods Mads.madscritical(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:73 Arguments message::AbstractString : critical error message source # Mads.madsdebug \u2014 Function . MADS debug messages (controlled by quiet and debuglevel ) Methods Mads.madsdebug(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Mads.madsdebug(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:26 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : debug message source # Mads.madserror \u2014 Method . MADS error messages Methods Mads.madserror(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:63 Arguments message::AbstractString : error message source # Mads.madsinfo \u2014 Function . MADS information/status messages (controlled by quiet and verbositylevel`) Methods Mads.madsinfo(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Mads.madsinfo(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:41 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : information/status message source # Mads.madsload \u2014 Function . Check the load of a series of servers Methods Mads.madsload(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Mads.madsload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:324 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madsmathprogbase \u2014 Function . Define MadsModel type applied for Mads execution using MathProgBase Methods Mads.madsmathprogbase() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Mads.madsmathprogbase(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:17 Arguments madsdata::Associative : MADS problem dictionary [default= Dict() ] source # Mads.madsoutput \u2014 Function . MADS output (controlled by quiet and verbositylevel ) Methods Mads.madsoutput(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Mads.madsoutput(message::AbstractString, level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:11 Arguments level::Int64 : output verbosity level [default= 0 ] message::AbstractString : output message source # Mads.madsup \u2014 Function . Check the uptime of a series of servers Methods Mads.madsup(nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Mads.madsup() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:314 Arguments nodenames::Array{String,1} : array with names of machines/nodes [default= madsservers ] source # Mads.madswarn \u2014 Method . MADS warning messages Methods Mads.madswarn(message::AbstractString) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLog.jl:53 Arguments message::AbstractString : warning message source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make a conditional log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood : conditional log likelihood madsdata::Associative : MADS problem dictionary Returns: a conditional log likelihood function that accepts an array source # Mads.makearrayconditionalloglikelihood \u2014 Method . Make array of conditional log-likelihoods Methods Mads.makearrayconditionalloglikelihood(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:160 Mads.makearrayconditionalloglikelihood(madsdata::Associative, conditionalloglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:104 Arguments conditionalloglikelihood madsdata::Associative : MADS problem dictionary Returns: array of conditional log-likelihoods source # Mads.makearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values Methods Mads.makearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Mads.makearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:32 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values source # Mads.makearrayloglikelihood \u2014 Method . Make a log likelihood function that accepts an array containing the optimal parameter values Methods Mads.makearrayloglikelihood(madsdata::Associative, loglikelihood) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:127 Arguments loglikelihood : log likelihood madsdata::Associative : MADS problem dictionary Returns: a log likelihood function that accepts an array source # Mads.makebigdt! \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt!(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:35 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makebigdt \u2014 Method . Setup Bayesian Information Gap Decision Theory (BIG-DT) problem Methods Mads.makebigdt(madsdata::Associative, choice::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGap.jl:20 Arguments choice::Associative : dictionary of BIG-DT choices (scenarios) madsdata::Associative : MADS problem dictionary Returns: BIG-DT problem type source # Mads.makecomputeconcentrations \u2014 Method . Create a function to compute concentrations for all the observation points using Anasol Methods Mads.makecomputeconcentrations(madsdata::Associative; calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:179 Arguments madsdata::Associative : MADS problem dictionary Keywords calcpredictions : calculate zero weight predictions [default= true ] calczeroweightobs : calculate zero weight observations[default= false ] Returns: function to compute concentrations; the new function returns a dictionary of observations and model predicted concentrations Examples: computeconcentrations = Mads . makecomputeconcentrations ( madsdata ) paramkeys = Mads . getparamkeys ( madsdata ) paramdict = OrderedDict ( zip ( paramkeys , map ( key -> madsdata [ \"Parameters\" ][ key ][ \"init\" ], paramkeys ))) forward_preds = computeconcentrations ( paramdict ) source # Mads.makedixonprice \u2014 Method . Make dixon price Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price source # Mads.makedixonprice_gradient \u2014 Method . Methods Mads.makedixonprice(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:260 Arguments n::Integer : number of observations Returns: dixon price gradient source # Mads.makedoublearrayfunction \u2014 Function . Make a version of the function f that accepts an array containing the optimal parameter values, and returns an array of observations Methods Mads.makedoublearrayfunction(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Mads.makedoublearrayfunction(madsdata::Associative, f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMisc.jl:77 Arguments f::Function : function [default= makemadscommandfunction(madsdata) ] madsdata::Associative : MADS problem dictionary Returns: function accepting an array containing the optimal parameter values, and returning an array of observations source # Mads.makelmfunctions \u2014 Function . Make forward model, gradient, objective functions needed for Levenberg-Marquardt optimization Methods Mads.makelmfunctions(f::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:100 Mads.makelmfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:121 Arguments f::Function : Function madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makelocalsafunction \u2014 Method . Make gradient function needed for local sensitivity analysis Methods Mads.makelocalsafunction(madsdata::Associative; multiplycenterbyweights) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:27 Arguments madsdata::Associative : MADS problem dictionary Keywords multiplycenterbyweights : multiply center by observation weights [default= true ] Returns: gradient function source # Mads.makelogprior \u2014 Method . Make a function to compute the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata Methods Mads.makelogprior(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:396 Arguments madsdata::Associative : MADS problem dictionary Return: the prior log-likelihood of the model parameters listed in the MADS problem dictionary madsdata source # Mads.makemadscommandfunction \u2014 Method . Make MADS function to execute the model defined in the input MADS problem dictionary Methods Mads.makemadscommandfunction(madsdata_in::Associative; obskeys, calczeroweightobs, calcpredictions) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:60 Arguments madsdata_in::Associative : MADS problem dictionary Keywords calcpredictions : Calculate predictions [default= true ] calczeroweightobs : Calculate zero weight observations [default= false ] obskeys Example: Mads . makemadscommandfunction ( madsdata ) MADS can be coupled with any internal or external model. The model coupling is defined in the MADS problem dictionary. The expectations is that for a given set of model inputs, the model will produce a model output that will be provided to MADS. The fields in the MADS problem dictionary that can be used to define the model coupling are: Model : execute a Julia function defined in an input Julia file. The function that should accept a parameter dictionary with all the model parameters as an input argument and should return an observation dictionary with all the model predicted observations. MADS will execute the first function defined in the file. MADS model : create a Julia function based on an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary. MADS will execute the first function defined in the file. This function should a create a Julia function that will accept a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Julia model : execute an internal Julia function that accepts a parameter dictionary with all the model parameters as an input argument and will return an observation dictionary with all the model predicted observations. Command : execute an external UNIX command or script that will execute an external model. Julia command : execute a Julia script that will execute an external model. The Julia script is defined in an input Julia file. The input file should contain a function that accepts as an argument the MADS problem dictionary; MADS will execute the first function defined in the file. The Julia script should be capable to (1) execute the model (making a system call of an external model), (2) parse the model outputs, (3) return an observation dictionary with model predictions. Both Command and Julia command can use different approaches to pass model parameters to the external model. Only Command uses different approaches to get back the model outputs. The script defined under Julia command parses the model outputs using Julia. The available options for writing model inputs and reading model outputs are as follows. Options for writing model inputs: Templates : template files for writing model input files as defined at http://mads.lanl.gov ASCIIParameters : model parameters written in a ASCII file JLDParameters : model parameters written in a JLD file YAMLParameters : model parameters written in a YAML file JSONParameters : model parameters written in a JSON file Options for reading model outputs: Instructions : instruction files for reading model output files as defined at http://mads.lanl.gov ASCIIPredictions : model predictions read from a ASCII file JLDPredictions : model predictions read from a JLD file YAMLPredictions : model predictions read from a YAML file JSONPredictions : model predictions read from a JSON file Returns: Mads function to execute a forward model simulation source # Mads.makemadsconditionalloglikelihood \u2014 Method . Make a function to compute the conditional log-likelihood of the model parameters conditioned on the model predictions/observations. Model parameters and observations are defined in the MADS problem dictionary madsdata . Methods Mads.makemadsconditionalloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:419 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Return: the conditional log-likelihood source # Mads.makemadsloglikelihood \u2014 Method . Make a function to compute the log-likelihood for a given set of model parameters, associated model predictions and existing observations. The function can be provided as an external function in the MADS problem dictionary under LogLikelihood or computed internally. Methods Mads.makemadsloglikelihood(madsdata::Associative; weightfactor) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:454 Arguments madsdata::Associative : MADS problem dictionary Keywords weightfactor : Weight factor [default= 1 ] Returns: the log-likelihood for a given set of model parameters source # Mads.makemadsreusablefunction \u2014 Function . Make Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) Methods Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(madsdata::Associative, madscommandfunction::Function, suffix::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:273 Mads.makemadsreusablefunction(paramkeys::Array{T,1} where T, obskeys::Array{T,1} where T, madsdatarestart::Union{Bool, String}, madscommandfunction::Function, restartdir::String; usedict) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsFunc.jl:276 Arguments String} madscommandfunction::Function : Mads function to execute a forward model simulation madsdata::Associative : MADS problem dictionary madsdatarestart::Union{Bool : Restart type (memory/disk) or on/off status obskeys::Array{T,1} where T : Dictionary of observation keys paramkeys::Array{T,1} where T : Dictionary of parameter keys restartdir::String : Restart directory where the reusable model results are stored suffix::String : Suffix to be added to the name of restart directory Keywords usedict : Use dictionary [default= true ] Returns: Reusable Mads function to execute a forward model simulation (automatically restarts if restart data exists) source # Mads.makempbfunctions \u2014 Method . Make forward model, gradient, objective functions needed for MathProgBase optimization Methods Mads.makempbfunctions(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-new/MadsMathProgBase.jl:91 Arguments madsdata::Associative : MADS problem dictionary Returns: forward model, gradient, objective functions source # Mads.makepowell \u2014 Method . Make Powell test function for LM optimization Methods Mads.makepowell(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:163 Arguments n::Integer : number of observations Returns: Powell test function for LM optimization source # Mads.makepowell_gradient \u2014 Method . ake parameter gradients of the Powell test function for LM optimization Methods Mads.makepowell_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:187 Arguments n::Integer : number of observations Returns: arameter gradients of the Powell test function for LM optimization source # Mads.makerosenbrock \u2014 Method . Make Rosenbrock test function for LM optimization Methods Mads.makerosenbrock(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:118 Arguments n::Integer : number of observations Returns: Rosenbrock test function for LM optimization source # Mads.makerosenbrock_gradient \u2014 Method . Make parameter gradients of the Rosenbrock test function for LM optimization Methods Mads.makerosenbrock_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:140 Arguments n::Integer : number of observations Returns: parameter gradients of the Rosenbrock test function for LM optimization source # Mads.makerotatedhyperellipsoid \u2014 Method . Methods Mads.makerotatedhyperellipsoid(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:339 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid source # Mads.makerotatedhyperellipsoid_gradient \u2014 Method . Methods Mads.makerotatedhyperellipsoid_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:363 Arguments n::Integer : number of observations Returns: rotated hyperellipsoid gradient source # Mads.makesphere \u2014 Method . Make sphere Methods Mads.makesphere(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:218 Arguments n::Integer : number of observations Returns: sphere source # Mads.makesphere_gradient \u2014 Method . Make sphere gradient Methods Mads.makesphere_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:239 Arguments n::Integer : number of observations Returns: sphere gradient source # Mads.makesumsquares \u2014 Method . Methods Mads.makesumsquares(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:301 Arguments n::Integer : number of observations Returns: sumsquares source # Mads.makesumsquares_gradient \u2014 Method . Methods Mads.makesumsquares_gradient(n::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:320 Arguments n::Integer : number of observations Returns: sumsquares gradient source # Mads.makesvrmodel \u2014 Function . Make SVR model functions (executor and cleaner) Methods Mads.makesvrmodel(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Mads.makesvrmodel(madsdata::Associative, numberofsamples::Integer; check, addminmax, loadsvr, savesvr, svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose, seed) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:210 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of samples [default= 100 ] Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] loadsvr : load SVR models [default= false ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] seed : random seed [default= 0 ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: function performing SVR predictions function loading existing SVR models function saving SVR models function removing SVR models from the memory source # Mads.maxtorealmax! \u2014 Method . Scale down values larger than max(Float32) in a dataframe df so that Gadfly can plot the data Methods Mads.maxtorealmax!(df::DataFrames.DataFrame) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1085 Arguments df::DataFrames.DataFrame : dataframe source # Mads.mdir \u2014 Method . Change the current directory to the Mads source dictionary Methods Mads.mdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:11 source # Mads.meshgrid \u2014 Method . Create mesh grid Methods Mads.meshgrid(x::Array{T,1} where T, y::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:402 Arguments x::Array{T,1} where T : vector of grid x coordinates y::Array{T,1} where T : vector of grid y coordinates Returns: 2D grid coordinates based on the coordinates contained in vectors x and y source # Mads.minimize \u2014 Method . Minimize Julia function using a constrained Levenberg-Marquardt technique Mads.calibrate(madsdata; tolX=1e-3, tolG=1e-6, maxEval=1000, maxIter=100, maxJacobians=100, lambda=100.0, lambda_mu=10.0, np_lambda=10, show_trace=false, usenaive=false) Methods Mads.calibrate(madsdata::Associative; tolX, tolG, tolOF, maxEval, maxIter, maxJacobians, lambda, lambda_mu, np_lambda, show_trace, usenaive, save_results, localsa) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCalibrate.jl:162 Arguments madsdata::Associative Keywords lambda : initial Levenberg-Marquardt lambda [default= 100.0 ] lambda_mu : lambda multiplication factor [default= 10.0 ] localsa maxEval : maximum number of model evaluations [default= 1000 ] maxIter : maximum number of optimization iterations [default= 100 ] maxJacobians : maximum number of Jacobian solves [default= 100 ] np_lambda : number of parallel lambda solves [default= 10 ] save_results show_trace : shows solution trace [default= false ] tolG : parameter space update tolerance [default= 1e-6 ] tolOF : objective function tolerance [default= 1e-3 ] tolX : parameter space tolerance [default= 1e-4 ] usenaive Returns: vector with the optimal parameter values at the minimum optimization algorithm results (e.g. results.minimizer) source # Mads.mkdir \u2014 Method . Create a directory (if does not already exist) Methods Mads.mkdir(dirname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1279 Arguments dirname::String : directory source # Mads.modelinformationcriteria \u2014 Function . Model section information criteria Methods Mads.modelinformationcriteria(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Mads.modelinformationcriteria(madsdata::Associative, par::Array{Float64,N} where N) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsModelSelection.jl:11 Arguments madsdata::Associative : MADS problem dictionary par::Array{Float64,N} where N : parameter array source # Mads.modobsweights! \u2014 Method . Modify (multiply) observation weights in the MADS problem dictionary Methods Mads.modobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:313 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for modifing observation weights source # Mads.modwellweights! \u2014 Method . Modify (multiply) well weights in the MADS problem dictionary Methods Mads.modwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:363 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.montecarlo \u2014 Method . Monte Carlo analysis Methods Mads.montecarlo(madsdata::Associative; N, filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:188 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] filename : file name to save Monte-Carlo results Returns: parameter dictionary containing the data arrays Dumps: YAML output file with the parameter dictionary containing the data arrays Example: Mads . montecarlo ( madsdata ; N = 100 ) source # Mads.naive_get_deltax \u2014 Method . Naive Levenberg-Marquardt optimization: get the LM parameter space step Methods Mads.naive_get_deltax(JpJ::AbstractArray{Float64,2}, Jp::AbstractArray{Float64,2}, f0::Array{Float64,1}, lambda::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:246 Arguments Jp::AbstractArray{Float64,2} : Jacobian matrix times model parameters JpJ::AbstractArray{Float64,2} : Jacobian matrix times model parameters times transposed Jacobian matrix f0::Array{Float64,1} : initial model observations lambda::Number : Levenberg-Marquardt lambda Returns: the LM parameter space step source # Mads.naive_levenberg_marquardt \u2014 Function . Naive Levenberg-Marquardt optimization Methods Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Mads.naive_levenberg_marquardt(f::Function, g::Function, x0::Array{Float64,1}, o::Function; maxIter, maxEval, lambda, lambda_mu, np_lambda) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:296 Arguments f::Function : forward model function g::Function : gradient function for the forward model o::Function : objective function [default=x->(x'*x)[1]] x0::Array{Float64,1} : initial parameter guess Keywords lambda : initial Levenberg-Marquardt lambda [default= 100 ] lambda_mu : lambda multiplication factor \u03bc [default= 10 ] maxEval : maximum number of model evaluations [default= 101 ] maxIter : maximum number of optimization iterations [default= 10 ] np_lambda : number of parallel lambda solves [default= 10 ] Returns: source # Mads.naive_lm_iteration \u2014 Method . Naive Levenberg-Marquardt optimization: perform LM iteration Methods Mads.naive_lm_iteration(f::Function, g::Function, o::Function, x0::Array{Float64,1}, f0::Array{Float64,1}, lambdas::Array{Float64,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:267 Arguments f0::Array{Float64,1} : initial model observations f::Function : forward model function g::Function : gradient function for the forward model lambdas::Array{Float64,1} : Levenberg-Marquardt lambdas o::Function : objective function x0::Array{Float64,1} : initial parameter guess Returns: source # Mads.noplot \u2014 Method . Disable MADS plotting Methods Mads.noplot() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:237 source # Mads.obslineismatch \u2014 Method . Match an instruction line in the Mads instruction file with model input file Methods Mads.obslineismatch(obsline::String, regexs::Array{Regex,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:954 Arguments obsline::String : instruction line regexs::Array{Regex,1} : regular expressions Returns: true or false source # Mads.of \u2014 Function . Compute objective function Methods Mads.of(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:58 Mads.of(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:51 Mads.of(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:55 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector source # Mads.paramarray2dict \u2014 Method . Convert a parameter array to a parameter dictionary of arrays Methods Mads.paramarray2dict(madsdata::Associative, array::Array) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:242 Arguments array::Array : parameter array madsdata::Associative : MADS problem dictionary Returns: a parameter dictionary of arrays source # Mads.paramdict2array \u2014 Method . Convert a parameter dictionary of arrays to a parameter array Methods Mads.paramdict2array(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:261 Arguments dict::Associative : parameter dictionary of arrays Returns: a parameter array source # Mads.parsemadsdata! \u2014 Method . Parse loaded MADS problem dictionary Methods Mads.parsemadsdata!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:161 Arguments madsdata::Associative : MADS problem dictionary source # Mads.parsenodenames \u2014 Function . Parse string with node names defined in SLURM Methods Mads.parsenodenames(nodenames::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Mads.parsenodenames(nodenames::String, ntasks_per_node::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:206 Arguments nodenames::String : string with node names defined in SLURM ntasks_per_node::Integer : number of parallel tasks per node [default= 1 ] Returns: vector with names of compute nodes (hosts) source # Mads.partialof \u2014 Method . Compute the sum of squared residuals for observations that match a regular expression Methods Mads.partialof(madsdata::Associative, resultdict::Associative, regex::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:84 Arguments madsdata::Associative : MADS problem dictionary regex::Regex : regular expression resultdict::Associative : result dictionary Returns: the sum of squared residuals for observations that match the regular expression source # Mads.pkgversion \u2014 Method . Get package version Methods Mads.pkgversion(modulestr::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:445 Arguments modulestr::String Returns: package version source # Mads.plotgrid \u2014 Function . Plot a 3D grid solution based on model predictions in array s , initial parameters, or user provided parameter values Methods Mads.plotgrid(madsdata::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:56 Mads.plotgrid(madsdata::Associative, s::Array{Float64,N} where N; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:5 Mads.plotgrid(madsdata::Associative, parameters::Associative; addtitle, title, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlotPy.jl:61 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : dictionary with model parameters s::Array{Float64,N} where N : model predictions array Keywords addtitle : add plot title [default= true ] filename : output file name format : output plot format ( png , pdf , etc.) title : plot title Examples: Mads . plotgrid ( madsdata , s ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) Mads . plotgrid ( madsdata , parameters ; addtitle = true , title = \"\" , filename = \"\" , format = \"\" ) source # Mads.plotlocalsa \u2014 Method . Plot local sensitivity analysis results Methods Mads.plotlocalsa(filenameroot::String; keyword, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1219 Arguments filenameroot::String : problem file name root Keywords filename : output file name format : output plot format ( png , pdf , etc.) keyword : keyword to be added in the filename root Dumps: filename : output plot file source # Mads.plotmadsproblem \u2014 Method . Plot contaminant sources and wells defined in MADS problem dictionary Methods Mads.plotmadsproblem(madsdata::Associative; format, filename, keyword, hsize, vsize, gm) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:77 Arguments madsdata::Associative : MADS problem dictionary Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] gm hsize keyword : to be added in the filename vsize Dumps: plot of contaminant sources and wells source # Mads.plotmass \u2014 Method . Plot injected/reduced contaminant mass Methods Mads.plotmass(lambda::Array{Float64,1}, mass_injected::Array{Float64,1}, mass_reduced::Array{Float64,1}, filename::String; format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasolPlot.jl:19 Arguments filename::String : output filename for the generated plot lambda::Array{Float64,1} : array with all the lambda values mass_injected::Array{Float64,1} : array with associated total injected mass mass_reduced::Array{Float64,1} : array with associated total reduced mass Keywords format : output plot format ( png , pdf , etc.) Dumps: image file with name filename and in specified format source # Mads.plotmatches \u2014 Function . Plot the matches between model predictions and observations Methods Mads.plotmatches(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, rx::Regex; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:157 Mads.plotmatches(madsdata::Associative, dict_in::Associative; plotdata, filename, format, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:189 Mads.plotmatches(madsdata::Associative, result::Associative, rx::Regex; plotdata, filename, format, key2time, title, xtitle, ytitle, ymin, ymax, separate_files, hsize, vsize, linewidth, pointsize, obs_plot_dots, noise, dpi, colors, display, notitle) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:165 Arguments dict_in::Associative : dictionary with model parameters madsdata::Associative : MADS problem dictionary result::Associative : dictionary with model predictions rx::Regex : regular expression to filter the outputs Keywords colors : array with plot colors display : display plots [default= false ] dpi : graph resolution [default= Mads.dpi ] filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : graph horizontal size [default= 8Gadfly.inch ] key2time : user provided function to convert observation keys to observation times linewidth : line width [default= 2Gadfly.pt ] noise : random noise magnitude [default= 0 ; no noise] notitle obs_plot_dots : plot data as dots or line [default= true ] plotdata : plot data (if false model predictions are ploted only) [default= true ] pointsize : data dot size [default= 4Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] title : graph title vsize : graph vertical size [default= 4Gadfly.inch ] xtitle : x-axis title [default= \"Time\" ] ymax ymin ytitle : y-axis title [default= \"y\" ] Dumps: plot of the matches between model predictions and observations Examples: Mads . plotmatches ( madsdata ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , dict_in ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result ; filename = \"\" , format = \"\" ) Mads . plotmatches ( madsdata , result , r\"NO3\" ; filename = \"\" , format = \"\" ) source # Mads.plotobsSAresults \u2014 Method . Plot the sensitivity analysis results for the observations Methods Mads.plotobsSAresults(madsdata::Associative, result::Associative; filter, keyword, filename, format, debug, separate_files, xtitle, ytitle, linewidth, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:571 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results Keywords debug : [default= false ] filename : output file name filter : string or regex to plot only observations containing filter format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] keyword : to be added in the auto-generated filename linewidth : line width [default= 2Gadfly.pt ] pointsize : point size [default= 2Gadfly.pt ] separate_files : plot data for multiple wells separately [default= false ] xtitle : x-axis title ytitle : y-axis title Dumps: plot of the sensitivity analysis results for the observations source # Mads.plotrobustnesscurves \u2014 Method . Plot BIG-DT robustness curves Methods Mads.plotrobustnesscurves(madsdata::Associative, bigdtresults::Dict; filename, format, maxprob, maxhoriz) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsBayesInfoGapPlot.jl:20 Arguments bigdtresults::Dict : BIG-DT results madsdata::Associative : MADS problem dictionary Keywords filename : output file name used to dump plots format : output plot format ( png , pdf , etc.) maxhoriz : maximum horizon [default= Inf ] maxprob : maximum probability [default= 1.0 ] Dumps: image file with name filename and in specified format source # Mads.plotseries \u2014 Function . Create plots of data series Methods Mads.plotseries(X::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Mads.plotseries(X::Array{T,2} where T, filename::String; format, xtitle, ytitle, title, logx, logy, keytitle, name, names, combined, hsize, vsize, linewidth, dpi, colors, xmin, xmax, ymin, ymax, xaxis) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:1116 Arguments X::Array{T,2} where T : matrix with the series data filename::String : output file name Keywords colors : colors to use in plots combined : combine plots [default= true ] dpi : graph resolution [default= Mads.dpi ] format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] hsize : horizontal size [default= 8Gadfly.inch ] keytitle linewidth : width of the lines in plot [default= 2Gadfly.pt ] logx logy name : series name [default= Sources ] names title : plot title [default= Sources ] vsize : vertical size [default= 4Gadfly.inch ] xaxis xmax xmin xtitle : x-axis title [default= X ] ymax ymin ytitle : y-axis title [default= Y ] Dumps: Plots of data series source # Mads.plotwellSAresults \u2014 Function . Plot the sensitivity analysis results for all the wells in the MADS problem dictionary (wells class expected) Methods Mads.plotwellSAresults(madsdata::Associative, result::Associative; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:436 Mads.plotwellSAresults(madsdata::Associative, result::Associative, wellname::String; xtitle, ytitle, filename, format) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:447 Arguments madsdata::Associative : MADS problem dictionary result::Associative : sensitivity analysis results wellname::String : well name Keywords filename : output file name format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] xtitle : x-axis title ytitle : y-axis title Dumps: Plot of the sensitivity analysis results for all the wells in the MADS problem dictionary source # Mads.printSAresults \u2014 Method . Print sensitivity analysis results Methods Mads.printSAresults(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:921 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printSAresults2 \u2014 Method . Print sensitivity analysis results (method 2) Methods Mads.printSAresults2(madsdata::Associative, results::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1003 Arguments madsdata::Associative : MADS problem dictionary results::Associative : dictionary with sensitivity analysis results source # Mads.printerrormsg \u2014 Method . Print error message Methods Mads.printerrormsg(errmsg) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:382 Arguments errmsg : error message source # Mads.printobservations \u2014 Function . Print (emit) observations in the MADS problem dictionary Methods Mads.printobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, io::IO) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:423 Mads.printobservations(madsdata::Associative, filename::String; json) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:432 Arguments filename::String : output file name io::IO : output stream madsdata::Associative : MADS problem dictionary Keywords json source # Mads.pull \u2014 Function . Pull (checkout) the latest version of Mads modules Methods Mads.pull(modulename::String; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Mads.pull() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:63 Arguments modulename::String : module name source # Mads.push \u2014 Function . Push the latest version of Mads modules in the default remote repository Methods Mads.push(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Mads.push() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:138 Arguments modulename::String : module name source # Mads.quietoff \u2014 Method . Make MADS not quiet Methods Mads.quietoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:96 source # Mads.quieton \u2014 Method . Make MADS quiet Methods Mads.quieton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:87 source # Mads.readasciipredictions \u2014 Method . Read MADS predictions from an ASCII file Methods Mads.readasciipredictions(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsASCII.jl:44 Arguments filename::String : ASCII file name Returns: MADS predictions source # Mads.readmodeloutput \u2014 Method . Read model outputs saved for MADS Methods Mads.readmodeloutput(madsdata::Associative; obskeys) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:724 Arguments madsdata::Associative : MADS problem dictionary Keywords obskeys : observation keys [default=getobskeys(madsdata)] source # Mads.readobservations \u2014 Function . Read observations Methods Mads.readobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Mads.readobservations(madsdata::Associative, obskeys::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1057 Arguments madsdata::Associative : MADS problem dictionary obskeys::Array{T,1} where T : observation keys [default= getobskeys(madsdata) ] Returns: dictionary with Mads observations source # Mads.readobservations_cmads \u2014 Method . Read observations using C MADS dynamic library Methods Mads.readobservations_cmads(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-old/MadsCMads.jl:15 Arguments madsdata::Associative : Mads problem dictionary Returns: observations source # Mads.readyamlpredictions \u2014 Method . Read MADS model predictions from a YAML file filename Methods Mads.readyamlpredictions(filename::String; julia) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsYAML.jl:137 Arguments filename::String : file name Keywords julia : if true , use julia YAML library (if available); if false (default), use python YAML library (if available) Returns: data in yaml input file source # Mads.recursivemkdir \u2014 Method . Create directories recursively (if does not already exist) Methods Mads.recursivemkdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1291 Arguments s::String Keywords filename source # Mads.recursivermdir \u2014 Method . Remove directories recursively Methods Mads.recursivermdir(s::String; filename) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1325 Arguments s::String Keywords filename source # Mads.regexs2obs \u2014 Method . Get observations for a set of regular expressions Methods Mads.regexs2obs(obsline::String, regexs::Array{Regex,1}, obsnames::Array{String,1}, getparamhere::Array{Bool,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:975 Arguments getparamhere::Array{Bool,1} : parameters obsline::String : observation line obsnames::Array{String,1} : observation names regexs::Array{Regex,1} : regular expressions Returns: obsdict : observations source # Mads.reload \u2014 Method . Reload Mads modules Methods Mads.reload() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:38 source # Mads.removesource! \u2014 Function . Remove a contamination source Methods Mads.removesource!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Mads.removesource!(madsdata::Associative, sourceid::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:51 Arguments madsdata::Associative : MADS problem dictionary sourceid::Int64 : source id [default= 0 ] source # Mads.removesourceparameters! \u2014 Method . Remove contaminant source parameters Methods Mads.removesourceparameters!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsAnasol.jl:136 Arguments madsdata::Associative : MADS problem dictionary source # Mads.required \u2014 Function . Lists modules required by a module (Mads by default) Methods Mads.required(modulename::String, filtermodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required(modulename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Mads.required() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:17 Arguments filtermodule::String : filter module name modulename::String : module name [default= \"Mads\" ] Returns: filtered modules source # Mads.resetmodelruns \u2014 Method . Reset the model runs count to be equal to zero Methods Mads.resetmodelruns() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:207 source # Mads.residuals \u2014 Function . Compute residuals Methods Mads.residuals(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:32 Mads.residuals(madsdata::Associative, resultvec::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:6 Mads.residuals(madsdata::Associative, resultdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsLevenbergMarquardt.jl:29 Arguments madsdata::Associative : MADS problem dictionary resultdict::Associative : result dictionary resultvec::Array{T,1} where T : result vector Returns: source # Mads.restartoff \u2014 Method . MADS restart off Methods Mads.restartoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:68 source # Mads.restarton \u2014 Method . MADS restart on Methods Mads.restarton() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:59 source # Mads.reweighsamples \u2014 Method . Reweigh samples using importance sampling \u2013 returns a vector of log-likelihoods after reweighing Methods Mads.reweighsamples(madsdata::Associative, predictions::Array, oldllhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:325 Arguments madsdata::Associative : MADS problem dictionary oldllhoods::Array{T,1} where T : the log likelihoods of the parameters in the old distribution predictions::Array : the model predictions for each of the samples Returns: vector of log-likelihoods after reweighing source # Mads.rmdir \u2014 Method . Remove directory Methods Mads.rmdir(dir::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1151 Arguments dir::String : directory to be removed Keywords path : path of the directory [default= current path ] source # Mads.rmfile \u2014 Method . Remove file Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String : file to be removed Keywords path : path of the file [default= current path ] source # Mads.rmfiles \u2014 Method . Remove files Methods Mads.rmfile(filename::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1167 Arguments filename::String Keywords path : path of the file [default= current path ] source # Mads.rmfiles_ext \u2014 Method . Remove files with extension ext Methods Mads.rmfiles_ext(ext::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1196 Arguments ext::String : extension Keywords path : path of the files to be removed [default= . ] source # Mads.rmfiles_root \u2014 Method . Remove files with root root Methods Mads.rmfiles_root(root::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1209 Arguments root::String : root Keywords path : path of the files to be removed [default= . ] source # Mads.rosenbrock \u2014 Method . Rosenbrock test function Methods Mads.rosenbrock(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:43 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.rosenbrock2_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock2_gradient_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:24 Arguments x::Array{T,1} where T : parameter vector Returns: parameter gradients source # Mads.rosenbrock2_lm \u2014 Method . Rosenbrock test function (more difficult to solve) Methods Mads.rosenbrock2_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:10 Arguments x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient! \u2014 Method . Parameter gradients of the Rosenbrock test function Methods Mads.rosenbrock_gradient!(x::Array{T,1} where T, grad::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:68 Arguments grad::Array{T,1} where T : gradient vector x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_gradient_lm \u2014 Method . Parameter gradients of the Rosenbrock test function for LM optimization (returns the gradients for the 2 components separately) Methods Mads.rosenbrock_gradient_lm(x::Array{T,1} where T; dx, center) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:85 Arguments x::Array{T,1} where T : parameter vector Keywords center : array with parameter observations at the center applied to compute numerical derivatives [default= Array{Float64}(0) ] dx : apply parameter step to compute numerical derivatives [default= false ] Returns: parameter gradients source # Mads.rosenbrock_hessian! \u2014 Method . Parameter Hessian of the Rosenbrock test function Methods Mads.rosenbrock_hessian!(x::Array{T,1} where T, hess::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:101 Arguments hess::Array{T,2} where T : Hessian matrix x::Array{T,1} where T : parameter vector source # Mads.rosenbrock_lm \u2014 Method . Rosenbrock test function for LM optimization (returns the 2 components separately) Methods Mads.rosenbrock_lm(x::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsTestFunctions.jl:57 Arguments x::Array{T,1} where T : parameter vector Returns: test result source # Mads.runcmd \u2014 Function . Run external command and pipe stdout and stderr Methods Mads.runcmd(cmdstring::String; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:97 Mads.runcmd(cmd::Cmd; quiet, pipe, waittime) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsExecute.jl:42 Arguments cmd::Cmd : command (as a julia command; e.g. ls ) cmdstring::String : command (as a string; e.g. \"ls\") Keywords pipe : [default= false ] quiet : [default= Mads.quiet ] waittime : wait time is second [default= Mads.executionwaittime ] Returns: command output command error message source # Mads.runremote \u2014 Function . Run remote command on a series of servers Methods Mads.runremote(cmd::String, nodenames::Array{String,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Mads.runremote(cmd::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:282 Arguments cmd::String : remote command nodenames::Array{String,1} : names of machines/nodes [default= madsservers ] Returns: output of running remote command source # Mads.saltelli \u2014 Method . Saltelli sensitivity analysis Methods Mads.saltelli(madsdata::Associative; N, seed, restartdir, parallel, checkpointfrequency) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:638 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 100 ] checkpointfrequency : check point frequency [default= N ] parallel : set to true if the model runs should be performed in parallel [default= false ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibrute \u2014 Method . Saltelli sensitivity analysis (brute force) Methods Mads.saltellibrute(madsdata::Associative; N, seed, restartdir) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:450 Arguments madsdata::Associative : MADS problem dictionary Keywords N : number of samples [default= 1000 ] restartdir : directory where files will be stored containing model results for fast simulation restarts seed : random seed [default= 0 ] source # Mads.saltellibruteparallel \u2014 Method . Parallel version of saltellibrute source # Mads.saltelliparallel \u2014 Method . Parallel version of saltelli source # Mads.sampling \u2014 Method . Methods Mads.sampling(param::Array{T,1} where T, J::Array, numsamples::Number; seed, scale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:274 Arguments J::Array : Jacobian matrix numsamples::Number : Number of samples param::Array{T,1} where T : Parameter vector Keywords scale : data scaling [default= 1 ] seed : random esee [default= 0 ] Returns: generated samples (vector or array) vector of log-likelihoods source # Mads.savemadsfile \u2014 Function . Save MADS problem dictionary madsdata in MADS input file filename Methods Mads.savemadsfile(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, filename::String; julia, observations_separate, filenameobs) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:274 Mads.savemadsfile(madsdata::Associative, parameters::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Mads.savemadsfile(madsdata::Associative, parameters::Associative, filename::String; julia, explicit, observations_separate) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:291 Arguments filename::String : input file name (e.g. input_file_name.mads ) madsdata::Associative : MADS problem dictionary parameters::Associative : Dictionary with parameters (optional) Keywords explicit : if true ignores MADS YAML file modifications and rereads the original input file [default= false ] filenameobs julia : if true use Julia JSON module to save [default= false ] observations_separate Example: Mads . savemadsfile ( madsdata ) Mads . savemadsfile ( madsdata , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" ) Mads . savemadsfile ( madsdata , parameters , \"test.mads\" , explicit = true ) source # Mads.savemcmcresults \u2014 Method . Save MCMC chain in a file Methods Mads.savemcmcresults(chain::Array, filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsMonteCarlo.jl:143 Arguments chain::Array : MCMC chain filename::String : file name Dumps: the file containing MCMC chain source # Mads.savesaltellirestart \u2014 Method . Save Saltelli sensitivity analysis results for fast simulation restarts Methods Mads.savesaltellirestart(evalmat::Array, matname::String, restartdir::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:619 Arguments evalmat::Array : saved array matname::String : matrix (array) name (defines the name of the loaded file) restartdir::String : directory where files will be stored containing model results for fast simulation restarts source # Mads.scatterplotsamples \u2014 Method . Create histogram/scatter plots of model parameter samples Methods Mads.scatterplotsamples(madsdata::Associative, samples::Array{T,2} where T, filename::String; format, pointsize) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:401 Arguments filename::String : output file name madsdata::Associative : MADS problem dictionary samples::Array{T,2} where T : matrix with model parameters Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] pointsize : point size [default= 0.9Gadfly.mm ] Dumps: histogram/scatter plots of model parameter samples source # Mads.searchdir \u2014 Function . Get files in the current directory or in a directory defined by path matching pattern key which can be a string or regular expression Methods Mads.searchdir(key::String; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:764 Mads.searchdir(key::Regex; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:763 Arguments key::Regex : matching pattern for Mads input files (string or regular expression accepted) key::String : matching pattern for Mads input files (string or regular expression accepted) Keywords path : search directory for the mads input files [default= . ] Returns: filename : an array with file names matching the pattern in the specified directory Examples: - `Mads.searchdir(\"a\")` - `Mads.searchdir(r\"[A-B]\"; path = \".\")` - `Mads.searchdir(r\".*.cov\"; path = \".\")` source # Mads.set_nprocs_per_task \u2014 Function . Set number of processors needed for each parallel task at each node Methods Mads.set_nprocs_per_task() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Mads.set_nprocs_per_task(local_nprocs_per_task::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:50 Arguments local_nprocs_per_task::Integer source # Mads.setallparamsoff! \u2014 Method . Set all parameters OFF Methods Mads.setallparamsoff!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:474 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setallparamson! \u2014 Method . Set all parameters ON Methods Mads.setallparamson!(madsdata::Associative; filter) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:460 Arguments madsdata::Associative : MADS problem dictionary Keywords filter : parameter filter source # Mads.setdebuglevel \u2014 Method . Set MADS debug level Methods Mads.setdebuglevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:178 Arguments level::Int64 : debug level source # Mads.setdefaultplotformat \u2014 Method . Set the default plot format ( SVG is the default format) Methods Mads.setdefaultplotformat(format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:19 Arguments format::String : plot format source # Mads.setdir \u2014 Function . Set the working directory (for parallel environments) Methods Mads.setdir() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:252 Mads.setdir(dir) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:247 Arguments dir : directory Example: @everywhere Mads . setdir () @everywhere Mads . setdir ( \"/home/monty\" ) source # Mads.setexecutionwaittime \u2014 Method . Set maximum execution wait time for forward model runs in seconds Methods Mads.setexecutionwaittime(waitime::Float64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:198 Arguments waitime::Float64 : maximum execution wait time for forward model runs in seconds source # Mads.setmadsinputfile \u2014 Method . Set a default MADS input file Methods Mads.setmadsinputfile(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:351 Arguments filename::String : input file name (e.g. input_file_name.mads ) source # Mads.setmadsservers \u2014 Function . Generate a list of Mads servers Methods Mads.setmadsservers(first::Int64, last::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers(first::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Mads.setmadsservers() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:337 Arguments first::Int64 : first [default= 0 ] last::Int64 : last [default= 18 ] Returns array string of mads servers source # Mads.setmodelinputs \u2014 Function . Set model input files; delete files where model output should be saved for MADS Methods Mads.setmodelinputs(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Mads.setmodelinputs(madsdata::Associative, parameters::Associative; path) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:646 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords path : path for the files [default= . ] source # Mads.setnewmadsfilename \u2014 Function . Set new mads file name Methods Mads.setnewmadsfilename(filename::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:505 Mads.setnewmadsfilename(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:502 Arguments filename::String : file name madsdata::Associative : MADS problem dictionary Returns: new file name source # Mads.setobservationtargets! \u2014 Method . Set observations (calibration targets) in the MADS problem dictionary based on a predictions dictionary Methods Mads.setobservationtargets!(madsdata::Associative, predictions::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:528 Arguments madsdata::Associative : Mads problem dictionary predictions::Associative : dictionary with model predictions source # Mads.setobstime! \u2014 Function . Set observation time based on the observation name in the MADS problem dictionary Methods Mads.setobstime!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, separator::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:253 Mads.setobstime!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:264 Arguments madsdata::Associative : MADS problem dictionary rx::Regex : regular expression to match separator::String : separator [default= _ ] Examples: Mads . setobstime! ( madsdata , \"_t\" ) Mads . setobstime! ( madsdata , r\"[A-x]*_t([0-9,.]+)\" ) source # Mads.setobsweights! \u2014 Method . Set observation weights in the MADS problem dictionary Methods Mads.setobsweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:299 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for observation weights source # Mads.setparamoff! \u2014 Method . Set a specific parameter with a key parameterkey OFF Methods Mads.setparamoff!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:499 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamon! \u2014 Method . Set a specific parameter with a key parameterkey ON Methods Mads.setparamon!(madsdata::Associative, parameterkey::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:488 Arguments madsdata::Associative : MADS problem dictionary parameterkey::String : parameter key source # Mads.setparamsdistnormal! \u2014 Method . Set normal parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistnormal!(madsdata::Associative, mean::Array{T,1} where T, stddev::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:511 Arguments madsdata::Associative : MADS problem dictionary mean::Array{T,1} where T : array with the mean values stddev::Array{T,1} where T : array with the standard deviation values source # Mads.setparamsdistuniform! \u2014 Method . Set uniform parameter distributions for all the model parameters in the MADS problem dictionary Methods Mads.setparamsdistuniform!(madsdata::Associative, min::Array{T,1} where T, max::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:526 Arguments madsdata::Associative : MADS problem dictionary max::Array{T,1} where T : array with the maximum values min::Array{T,1} where T : array with the minimum values source # Mads.setparamsinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.setplotfileformat \u2014 Method . Set image file format based on the filename extension, or sets the filename extension based on the requested format . The default format is SVG . PNG , PDF , ESP , and PS are also supported. Methods Mads.setplotfileformat(filename::String, format::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:39 Arguments filename::String : output file name format::String : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] Returns: output file name output plot format ( png , pdf , etc.) source # Mads.setprocs \u2014 Function . Set the available processors based on environmental variables (supports SLURM only at the moment) Methods Mads.setprocs(; ntasks_per_node, nprocs_per_task, nodenames, mads_servers, test, quiet, dir, exename) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:48 Mads.setprocs(np::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:45 Mads.setprocs(np::Integer, nt::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsParallel.jl:32 Arguments np::Integer : number of processors [default= 1 ] nt::Integer : number of threads[default= 1 ] Keywords dir : common directory shared by all the jobs exename : location of the julia executable (the same version of julia is needed on all the workers) mads_servers : if true use MADS servers (LANL only) [default= false ] nodenames : array with names of machines/nodes to be invoked nprocs_per_task : number of processors needed for each parallel task at each node [default= Mads.nprocs_per_task ] ntasks_per_node : number of parallel tasks per node [default= 0 ] quiet : suppress output [default= Mads.quiet ] test : test the servers and connect to each one ones at a time [default= false ] Returns: vector with names of compute nodes (hosts) Example: Mads . setprocs () Mads . setprocs ( 4 ) Mads . setprocs ( 4 , 8 ) Mads . setprocs ( ntasks_per_node = 4 ) Mads . setprocs ( ntasks_per_node = 32 , mads_servers = true ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = madsservers ) Mads . setprocs ( ntasks_per_node = 64 , nodenames = [ \"madsmax\" , \"madszem\" ]) Mads . setprocs ( ntasks_per_node = 64 , nodenames = \"wc[096-157,160,175]\" ) Mads . setprocs ( ntasks_per_node = 64 , mads_servers = true , exename = \"/home/monty/bin/julia\" , dir = \"/home/monty\" ) source # Mads.setseed \u2014 Function . Set / get current random seed. seed < 0 gets seed, anything else sets it. Methods Mads.setseed() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Mads.setseed(seed::Integer, quiet::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:417 Arguments quiet::Bool : [default= true ] seed::Integer : random seed source # Mads.setsindx! \u2014 Method . Set sin-space dx Methods Mads.setsindx!(madsdata::Associative, sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:335 Arguments madsdata::Associative : MADS problem dictionary sindx::Number : sin-space dx value Returns: nothing source # Mads.setsindx \u2014 Method . Set sin-space dx Methods Mads.setsindx(sindx::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:352 Arguments sindx::Number Returns: nothing source # Mads.setsourceinit! \u2014 Function . Set initial optimized parameter guesses in the MADS problem dictionary for the Source class Methods Mads.setparamsinit!(madsdata::Associative, paramdict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Mads.setparamsinit!(madsdata::Associative, paramdict::Associative, idx::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:324 Arguments idx::Int64 : index of the dictionary of arrays with initial model parameter values madsdata::Associative : MADS problem dictionary paramdict::Associative : dictionary with initial model parameter values source # Mads.settarget! \u2014 Method . Set observation target Methods Mads.settarget!(o::Associative, target::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:243 Arguments o::Associative : observation data target::Number : observation target source # Mads.settime! \u2014 Method . Set observation time Methods Mads.settime!(o::Associative, time::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:165 Arguments o::Associative : observation data time::Number : observation time source # Mads.setverbositylevel \u2014 Method . Set MADS verbosity level Methods Mads.setverbositylevel(level::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:188 Arguments level::Int64 : debug level source # Mads.setweight! \u2014 Method . Set observation weight Methods Mads.setweight!(o::Associative, weight::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:204 Arguments o::Associative : observation data weight::Number : observation weight source # Mads.setwellweights! \u2014 Method . Set well weights in the MADS problem dictionary Methods Mads.setwellweights!(madsdata::Associative, value::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:344 Arguments madsdata::Associative : MADS problem dictionary value::Number : value for well weights source # Mads.showallparameters \u2014 Method . Show all parameters in the MADS problem dictionary Methods Mads.showallparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:610 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showobservations \u2014 Method . Show observations in the MADS problem dictionary Methods Mads.showobservations(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:403 Arguments madsdata::Associative : MADS problem dictionary source # Mads.showparameters \u2014 Method . Show parameters in the MADS problem dictionary Methods Mads.showparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsParameters.jl:574 Arguments madsdata::Associative : MADS problem dictionary source # Mads.sinetransform \u2014 Function . Sine transformation of model parameters Methods Mads.sinetransform(madsdata::Associative, params::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:36 Mads.sinetransform(sineparams::Array{T,1} where T, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:46 Arguments indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds madsdata::Associative : MADS problem dictionary params::Array{T,1} where T sineparams::Array{T,1} where T : model parameters upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation of model parameters source # Mads.sinetransformfunction \u2014 Method . Sine transformation of a function Methods Mads.sinetransformfunction(f::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:80 Arguments f::Function : function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : lower bounds upperbounds::Array{T,1} where T : upper bounds Returns: Sine transformation source # Mads.sinetransformgradient \u2014 Method . Sine transformation of a gradient function Methods Mads.sinetransformgradient(g::Function, lowerbounds::Array{T,1} where T, upperbounds::Array{T,1} where T, indexlogtransformed::Array{T,1} where T; sindx) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSineTransformations.jl:101 Arguments g::Function : gradient function indexlogtransformed::Array{T,1} where T : index vector of log-transformed parameters lowerbounds::Array{T,1} where T : vector with parameter lower bounds upperbounds::Array{T,1} where T : vector with parameter upper bounds Keywords sindx : sin-space parameter step applied to compute numerical derivatives [default= 0.1 ] Returns: Sine transformation of a gradient function source # Mads.spaghettiplot \u2014 Function . Generate a combined spaghetti plot for the selected ( type != null ) model parameter Methods Mads.spaghettiplot(madsdata::Associative, number_of_samples::Integer; kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:885 Mads.spaghettiplot(madsdata::Associative, dictarray::Associative; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:889 Mads.spaghettiplot(madsdata::Associative, array::Array; plotdata, filename, keyword, format, xtitle, ytitle, yfit, obs_plot_dots, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:926 Arguments array::Array : data arrays to be plotted dictarray::Associative : dictionary array containing the data arrays to be plotted madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples Keywords filename : output file name used to output the produced plots format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots (if filename is not defined) linewidth : width of the lines in plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true [default] or false ) plotdata : plot data (if false model predictions are plotted only) [default= true ] pointsize : size of the markers in plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] yfit : fit vertical axis range [default= false ] ytitle : y axis title [default= Y ] Dumps: Image file with a spaghetti plot ( <mads_rootname>-<keyword>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplot ( madsdata , dictarray ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , array ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplot ( madsdata , number_of_samples ; filename = \"\" , keyword = \"\" , format = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.spaghettiplots \u2014 Function . Generate separate spaghetti plots for each selected ( type != null ) model parameter Methods Mads.spaghettiplots(madsdata::Associative, number_of_samples::Integer; seed, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:726 Mads.spaghettiplots(madsdata::Associative, paramdictarray::DataStructures.OrderedDict; format, keyword, xtitle, ytitle, obs_plot_dots, seed, linewidth, pointsize, grayscale) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsPlot.jl:731 Arguments madsdata::Associative : MADS problem dictionary number_of_samples::Integer : number of samples paramdictarray::DataStructures.OrderedDict : parameter dictionary containing the data arrays to be plotted Keywords format : output plot format ( png , pdf , etc.) [default= Mads.graphbackend ] grayscale keyword : keyword to be added in the file name used to output the produced plots linewidth : width of the lines on the plot [default= 2Gadfly.pt ] obs_plot_dots : plot observation as dots ( true (default) or false ) pointsize : size of the markers on the plot [default= 4Gadfly.pt ] seed : random seed [default= 0 ] xtitle : x axis title [default= X ] ytitle : y axis title [default= Y ] Dumps: A series of image files with spaghetti plots for each selected ( type != null ) model parameter ( <mads_rootname>-<keyword>-<param_key>-<number_of_samples>-spaghetti.<default_image_extension> ) Example: Mads . spaghettiplots ( madsdata , paramdictarray ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) Mads . spaghettiplots ( madsdata , number_of_samples ; format = \"\" , keyword = \"\" , xtitle = \"X\" , ytitle = \"Y\" , obs_plot_dots = true ) source # Mads.sphericalcov \u2014 Method . Spherical spatial covariance function Methods Mads.sphericalcov(h::Number, maxcov::Number, scale::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:43 Arguments h::Number : separation distance maxcov::Number : max covariance scale::Number : scale Returns: covariance source # Mads.sphericalvariogram \u2014 Method . Spherical variogram Methods Mads.sphericalvariogram(h::Number, sill::Number, range::Number, nugget::Number) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsKriging.jl:59 Arguments h::Number : separation distance nugget::Number : nugget range::Number : range sill::Number : sill Returns: Spherical variogram source # Mads.sprintf \u2014 Method . Convert @sprintf macro into sprintf function source # Mads.status \u2014 Function . Status of Mads modules Methods Mads.status(madsmodule::String; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:257 Mads.status(; git, gitmore) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:252 Arguments madsmodule::String : mads module Keywords git : use git [default= true or Mads.madsgit ] gitmore : use even more git [default= false ] Returns: true or false source # Mads.stderrcaptureoff \u2014 Method . Restore STDERR Methods Mads.stderrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:140 Returns: standered error source # Mads.stderrcaptureon \u2014 Method . Redirect STDERR to a reader Methods Mads.stderrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:121 source # Mads.stdoutcaptureoff \u2014 Method . Restore STDOUT Methods Mads.stdoutcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:106 Returns: standered output source # Mads.stdoutcaptureon \u2014 Method . Redirect STDOUT to a reader Methods Mads.stdoutcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:87 source # Mads.stdouterrcaptureoff \u2014 Method . Restore STDOUT & STDERR Methods Mads.stdouterrcaptureoff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:171 Returns: standered output amd standered error source # Mads.stdouterrcaptureon \u2014 Method . Redirect STDOUT & STDERR to readers Methods Mads.stdouterrcaptureon() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsCapture.jl:155 source # Mads.svrdump \u2014 Method . Dump SVR models in files Methods Mads.svrdump(svrmodel::Array{SVR.svmmodel,1}, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:141 Arguments numberofsamples::Int64 : number of samples rootname::String : root name svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrfree \u2014 Method . Free SVR Methods Mads.svrfree(svrmodel::Array{SVR.svmmodel,1}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:123 Arguments svrmodel::Array{SVR.svmmodel,1} : array of SVR models source # Mads.svrload \u2014 Method . Load SVR models from files Methods Mads.svrload(npred::Int64, rootname::String, numberofsamples::Int64) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:164 Arguments npred::Int64 : number of model predictions numberofsamples::Int64 : number of samples rootname::String : root name Returns: Array of SVR models for each model prediction source # Mads.svrpredict \u2014 Function . Predict SVR Methods Mads.svrpredict(svrmodel::Array{SVR.svmmodel,1}, paramarray::Array{Float64,2}) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:96 Arguments paramarray::Array{Float64,2} : parameter array svrmodel::Array{SVR.svmmodel,1} : array of SVR models Returns: SVR predicted observations (dependent variables) for a given set of parameters (independent variables) source # Mads.svrtrain \u2014 Function . Train SVR Methods Mads.svrtrain(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Mads.svrtrain(madsdata::Associative, paramarray::Array{Float64,2}; check, savesvr, addminmax, svm_type, kernel_type, degree, gamma, coef0, C, nu, cache_size, eps, shrinking, probability, verbose, tol) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:6 Mads.svrtrain(madsdata::Associative, numberofsamples::Integer; addminmax, kw...) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSVR.jl:39 Arguments madsdata::Associative : MADS problem dictionary numberofsamples::Integer : number of random samples in the training set [default= 100 ] paramarray::Array{Float64,2} Keywords C : cost; penalty parameter of the error term [default= 1000.0 ] addminmax : add parameter minimum / maximum range values in the training set [default= true ] cache_size : size of the kernel cache [default= 100.0 ] check : check SVR performance [default= false ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/numberofsamples ] kernel_type : kernel type[default= SVR.RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] savesvr : save SVR models [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= SVR.EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: Array of SVR models source # Mads.symlinkdir \u2014 Method . Create a symbolic link of a file filename in a directory dirtarget Methods Mads.symlinkdir(filename::String, dirtarget::String, dirsource::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1137 Arguments dirsource::String dirtarget::String : target directory filename::String : file name source # Mads.symlinkdirfiles \u2014 Method . Create a symbolic link of all the files in a directory dirsource in a directory dirtarget Methods Mads.symlinkdirfiles(dirsource::String, dirtarget::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:1119 Arguments dirsource::String : source directory dirtarget::String : target directory source # Mads.tag \u2014 Function . Tag Mads modules with a default argument :patch Methods Mads.tag(madsmodule::String, versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(madsmodule::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:322 Mads.tag(versionsym::Symbol) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Mads.tag() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:317 Arguments madsmodule::String : mads module name versionsym::Symbol : version symbol [default= :patch ] source # Mads.test \u2014 Function . Perform Mads tests (the tests will be in parallel if processors are defined; tests use the current Mads version in the workspace; reload(\"Mads.jl\") if needed) Methods Mads.test(testname::String; madstest) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Mads.test() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:52 Arguments testname::String : name of the test to execute; module or example Keywords madstest : test Mads [default= true ] source # Mads.testj \u2014 Function . Execute Mads tests using Julia Pkg.test (the default Pkg.test in Julia is executed in serial) Methods Mads.testj(coverage::Bool) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Mads.testj() in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsTest.jl:11 Arguments coverage::Bool : [default= false ] source # Mads.transposematrix \u2014 Method . Transpose non-numeric matrix Methods Mads.transposematrix(a::Array{T,2} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:372 Arguments a::Array{T,2} where T : matrix source # Mads.transposevector \u2014 Method . Transpose non-numeric vector Methods Mads.transposevector(a::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:362 Arguments a::Array{T,1} where T : vector source # Mads.untag \u2014 Method . Untag specific version Methods Mads.untag(madsmodule::String, version::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/../src-interactive/MadsPublish.jl:357 Arguments madsmodule::String : mads module name version::String : version source # Mads.vectoroff \u2014 Method . MADS vector calls off Methods Mads.vectoroff() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:41 source # Mads.vectoron \u2014 Method . MADS vector calls on Methods Mads.vectoron() in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsHelpers.jl:32 source # Mads.void2nan! \u2014 Method . Convert Void's into NaN's in a dictionary Methods Mads.void2nan!(dict::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:1043 Arguments dict::Associative : dictionary source # Mads.weightedstats \u2014 Method . Get weighted mean and variance samples Methods Mads.weightedstats(samples::Array, llhoods::Array{T,1} where T) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsSenstivityAnalysis.jl:382 Arguments llhoods::Array{T,1} where T : vector of log-likelihoods samples::Array : array of samples Returns: vector of sample means vector of sample variances source # Mads.welloff! \u2014 Method . Turn off a specific well in the MADS problem dictionary Methods Mads.welloff!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:621 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned off source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Mads.wellon!(madsdata::Associative, rx::Regex) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:585 Arguments madsdata::Associative : MADS problem dictionary rx::Regex wellname::String : name of the well to be turned on source # Mads.wellon! \u2014 Method . Turn on a specific well in the MADS problem dictionary Methods Mads.wellon!(madsdata::Associative, wellname::String) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:563 Arguments madsdata::Associative : MADS problem dictionary wellname::String : name of the well to be turned on source # Mads.wells2observations! \u2014 Method . Convert Wells class to Observations class in the MADS problem dictionary Methods Mads.wells2observations!(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsObservations.jl:676 Arguments madsdata::Associative : MADS problem dictionary source # Mads.writeparameters \u2014 Function . Write model parameters Methods Mads.writeparameters(madsdata::Associative) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Mads.writeparameters(madsdata::Associative, parameters::Associative; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:873 Arguments madsdata::Associative : MADS problem dictionary parameters::Associative : parameters Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.writeparametersviatemplate \u2014 Method . Write parameters via MADS template ( templatefilename ) to an output file ( outputfilename ) Methods Mads.writeparametersviatemplate(parameters, templatefilename, outputfilename; respect_space) in Mads : /Users/monty/.julia/v0.6/Mads/src/MadsIO.jl:829 Arguments outputfilename : output file name parameters : parameters templatefilename : tmplate file name Keywords respect_space : respect provided space in the template file to fit model parameters [default= false ] source # Mads.@stderrcapture \u2014 Macro . Capture STDERR of a block source # Mads.@stdoutcapture \u2014 Macro . Capture STDOUT of a block source # Mads.@stdouterrcapture \u2014 Macro . Capture STDERR & STDERR of a block source # Mads.@tryimport \u2014 Macro . Try to import a module source # Mads.MadsModel \u2014 Type . MadsModel type applied for MathProgBase analyses source","title":"Mads.jl"},{"location":"build/MetaProgTools/","text":"MetaProgTools.jl Module with Meta Programming Tools. MetaProgTools.jl module functions: # MetaProgTools.getsymbols \u2014 Method . Get symbols source # MetaProgTools.in \u2014 Method . Find a needle in a haystack source # MetaProgTools.populateexpression \u2014 Method . Populate Expression source # MetaProgTools.replacesymbol \u2014 Method . Replace Symbol source","title":"MetaProgTools"},{"location":"build/MetaProgTools/#metaprogtoolsjl","text":"Module with Meta Programming Tools. MetaProgTools.jl module functions: # MetaProgTools.getsymbols \u2014 Method . Get symbols source # MetaProgTools.in \u2014 Method . Find a needle in a haystack source # MetaProgTools.populateexpression \u2014 Method . Populate Expression source # MetaProgTools.replacesymbol \u2014 Method . Replace Symbol source","title":"MetaProgTools.jl"},{"location":"build/ReusableFunctions/","text":"ReusableFunctions.jl Module ReusableFunctions provides automated storage and retrieval of results for Julia function calls. ReusableFunctions.jl module functions: # ReusableFunctions.checkhashfilename \u2014 Method . Check if a file with a filename based on hash exists source # ReusableFunctions.gethashfilename \u2014 Method . Define a filename based on hash source # ReusableFunctions.loadresultfile \u2014 Method . Load JLD result file source # ReusableFunctions.maker3function \u2014 Method . Make a reusable function expecting both regular and keyword arguments source # ReusableFunctions.quietoff \u2014 Method . Make ReusableFunctions not quiet source # ReusableFunctions.quieton \u2014 Method . Make ReusableFunctions quiet source # ReusableFunctions.resetcomputes \u2014 Method . Reset computes counter source # ReusableFunctions.resetrestarts \u2014 Method . Reset restarts counter source # ReusableFunctions.saveresultfile \u2014 Method . Save JLD result file source","title":"ReusableFunctions"},{"location":"build/ReusableFunctions/#reusablefunctionsjl","text":"Module ReusableFunctions provides automated storage and retrieval of results for Julia function calls. ReusableFunctions.jl module functions: # ReusableFunctions.checkhashfilename \u2014 Method . Check if a file with a filename based on hash exists source # ReusableFunctions.gethashfilename \u2014 Method . Define a filename based on hash source # ReusableFunctions.loadresultfile \u2014 Method . Load JLD result file source # ReusableFunctions.maker3function \u2014 Method . Make a reusable function expecting both regular and keyword arguments source # ReusableFunctions.quietoff \u2014 Method . Make ReusableFunctions not quiet source # ReusableFunctions.quieton \u2014 Method . Make ReusableFunctions quiet source # ReusableFunctions.resetcomputes \u2014 Method . Reset computes counter source # ReusableFunctions.resetrestarts \u2014 Method . Reset restarts counter source # ReusableFunctions.saveresultfile \u2014 Method . Save JLD result file source","title":"ReusableFunctions.jl"},{"location":"build/RobustPmap/","text":"RobustPmap.jl Module RobustPmap provides robust pmap calls for efficient parallelization and high-performance computing in Julia. RobustPmap.jl module functions: # RobustPmap.checkexceptions \u2014 Function . Check for type exceptions source # RobustPmap.crpmap \u2014 Method . Robust pmap call with checkpoints source # RobustPmap.rpmap \u2014 Method . Robust pmap call source","title":"RobustPmap"},{"location":"build/RobustPmap/#robustpmapjl","text":"Module RobustPmap provides robust pmap calls for efficient parallelization and high-performance computing in Julia. RobustPmap.jl module functions: # RobustPmap.checkexceptions \u2014 Function . Check for type exceptions source # RobustPmap.crpmap \u2014 Method . Robust pmap call with checkpoints source # RobustPmap.rpmap \u2014 Method . Robust pmap call source","title":"RobustPmap.jl"},{"location":"build/SVR/","text":"SVR.jl Module SVR provides Support Vector Regression (SVR) using libSVM library. SVR.jl module functions: # SVR.apredict \u2014 Method . Predict based on a libSVM model Methods SVR.apredict(y::Array{T,1} where T, x::Array; kw...) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:269 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Return: predicted dependent variables source # SVR.freemodel \u2014 Method . Free a libSVM model Methods SVR.freemodel(pmodel::SVR.svmmodel) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:319 Arguments pmodel::SVR.svmmodel : svm model source # SVR.liboutput \u2014 Method . catch lib output Methods SVR.liboutput(str::Ptr{UInt8}) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:97 Arguments str::Ptr{UInt8} : string source # SVR.loadmodel \u2014 Method . Load a libSVM model Methods SVR.loadmodel(filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:285 Arguments filename::String : input file name Returns: SVM model source # SVR.mapnodes \u2014 Method . Methods SVR.mapnodes(x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:184 Arguments x::Array : source # SVR.mapparam \u2014 Method . Methods SVR.mapparam(; svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, nr_weight, weight_label, weight) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:161 Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1.0 ] kernel_type : kernel type [default= RBF ] nr_weight : [default= 0 ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] p : epsilon for EPSILON_SVR [default= 0.1 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] weight : [default= Ptr{Cdouble}(0x0000000000000000) ] weight_label : [default= Ptr{Cint}(0x0000000000000000) ] Returns: parameter source # SVR.predict \u2014 Method . Predict based on a libSVM model Methods SVR.predict(pmodel::SVR.svmmodel, x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:243 Arguments pmodel::SVR.svmmodel : the model that prediction is based on x::Array : array of independent variables Return: predicted dependent variables source # SVR.r2 \u2014 Method . Compute the coefficient of determination (r2) Methods SVR.r2(x, y) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:364 Arguments x : observed data y : predicted data Returns: coefficient of determination (r2) source # SVR.readlibsvmfile \u2014 Method . Read a libSVM file Methods SVR.readlibsvmfile(file::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:338 Arguments file::String : file name Returns: array of independent variables vector of dependent variables source # SVR.savemodel \u2014 Method . Save a libSVM model Methods SVR.savemodel(pmodel::SVR.svmmodel, filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:306 Arguments filename::String : output file name pmodel::SVR.svmmodel : svm model Dumps: file with saved model source # SVR.train \u2014 Method . Train based on a libSVM model Methods SVR.train(y::Array{T,1} where T, x::Array; svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:223 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.1 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/size(x, 1) ] kernel_type : kernel type [default= RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: SVM model source","title":"SVR"},{"location":"build/SVR/#svrjl","text":"Module SVR provides Support Vector Regression (SVR) using libSVM library. SVR.jl module functions: # SVR.apredict \u2014 Method . Predict based on a libSVM model Methods SVR.apredict(y::Array{T,1} where T, x::Array; kw...) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:269 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Return: predicted dependent variables source # SVR.freemodel \u2014 Method . Free a libSVM model Methods SVR.freemodel(pmodel::SVR.svmmodel) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:319 Arguments pmodel::SVR.svmmodel : svm model source # SVR.liboutput \u2014 Method . catch lib output Methods SVR.liboutput(str::Ptr{UInt8}) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:97 Arguments str::Ptr{UInt8} : string source # SVR.loadmodel \u2014 Method . Load a libSVM model Methods SVR.loadmodel(filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:285 Arguments filename::String : input file name Returns: SVM model source # SVR.mapnodes \u2014 Method . Methods SVR.mapnodes(x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:184 Arguments x::Array : source # SVR.mapparam \u2014 Method . Methods SVR.mapparam(; svm_type, kernel_type, degree, gamma, coef0, C, nu, p, cache_size, eps, shrinking, probability, nr_weight, weight_label, weight) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:161 Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.001 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1.0 ] kernel_type : kernel type [default= RBF ] nr_weight : [default= 0 ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] p : epsilon for EPSILON_SVR [default= 0.1 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] weight : [default= Ptr{Cdouble}(0x0000000000000000) ] weight_label : [default= Ptr{Cint}(0x0000000000000000) ] Returns: parameter source # SVR.predict \u2014 Method . Predict based on a libSVM model Methods SVR.predict(pmodel::SVR.svmmodel, x::Array) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:243 Arguments pmodel::SVR.svmmodel : the model that prediction is based on x::Array : array of independent variables Return: predicted dependent variables source # SVR.r2 \u2014 Method . Compute the coefficient of determination (r2) Methods SVR.r2(x, y) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:364 Arguments x : observed data y : predicted data Returns: coefficient of determination (r2) source # SVR.readlibsvmfile \u2014 Method . Read a libSVM file Methods SVR.readlibsvmfile(file::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:338 Arguments file::String : file name Returns: array of independent variables vector of dependent variables source # SVR.savemodel \u2014 Method . Save a libSVM model Methods SVR.savemodel(pmodel::SVR.svmmodel, filename::String) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:306 Arguments filename::String : output file name pmodel::SVR.svmmodel : svm model Dumps: file with saved model source # SVR.train \u2014 Method . Train based on a libSVM model Methods SVR.train(y::Array{T,1} where T, x::Array; svm_type, kernel_type, degree, gamma, coef0, C, nu, eps, cache_size, tol, shrinking, probability, verbose) in SVR : /Users/monty/.julia/v0.6/SVR/src/SVR.jl:223 Arguments x::Array : array of independent variables y::Array{T,1} where T : vector of dependent variables Keywords C : cost; penalty parameter of the error term [default= 1.0 ] cache_size : size of the kernel cache [default= 100.0 ] coef0 : independent term in kernel function; important only in POLY and SIGMOND kernel types [default= 0.0 ] degree : degree of the polynomial kernel [default= 3 ] eps : epsilon in the EPSILON_SVR model; defines an epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value [default= 0.1 ] gamma : coefficient for RBF, POLY and SIGMOND kernel types [default= 1/size(x, 1) ] kernel_type : kernel type [default= RBF ] nu : upper bound on the fraction of training errors / lower bound of the fraction of support vectors; acceptable range (0, 1]; applied if NU_SVR model [default= 0.5 ] probability : train to estimate probabilities [default= false ] shrinking : apply shrinking heuristic [default= true ] svm_type : SVM type [default= EPSILON_SVR ] tol : tolerance of termination criterion [default= 0.001 ] verbose : verbose output [default= false ] Returns: SVM model source","title":"SVR.jl"},{"location":"html/mads-comparisons/","text":"# **MADS** Comparisons ## **MADS** vs [PEST](http://www.pesthomepage.org/Home.php) * [Solving a source identification optimization problem](#test-1-solving-a-source-identification-optimization-problem) * [Identification of aquifer parameters based on pumping test data](#test-2-identification-of-aquifer-parameters-based-on-pumping-test-data): **MADS** is executed using PEST control files (*.pst, *.ins, *.tpl) **MADS** is distributed with a series of example files that can be used to compare **MADS** and [PEST](http://www.pesthomepage.org/Home.php) performance. The following executions can be performed after both codes have been successfully installed. **MADS** is applied using the build-in default values for various parameters controlling optimization process. [PEST](http://www.pesthomepage.org/Home.php) is applied using a set of commonly-used values for parameters controlling optimization process. The performance of both codes can change if different parameters are used. ## Test #1: Solving a source identification optimization problem Both codes are applied to solve a source identification optimization problem using the Levenberg-Marquardt (**LM**) optimization technique. **MADS** and [PEST](http://www.pesthomepage.org/Home.php) control files are located in directory **example/contamination**. Based on the runs presented below, **MADS** outperforms [PEST](http://www.pesthomepage.org/Home.php) in this case. $> _mads s02 ldebug_ MADS: Model Analyses & Decision Support (v1.1) 2011 \\--------------------------------------------------- Velimir Vesselinov (monty) vvv@lanl.gov http://www.ees.lanl.gov/staff/monty/mads.html Input file name: s02.mads Problem type: calibration Calibration technique: single calibration using initial guesses provided in the input file Optimization method: opt=lm | Levenberg-Marquardt optimization Number of Levenberg-Marquardt iterations = will be computed internally Eigen analysis will be performed of the final optimization results Global termination criteria: 1: Maximum number of evaluations = 5000 2: Objective function cutoff value: NOT implemented (ADD keyword cutoff=[value] to implement) 3: Observations within defined calibration ranges: NOT implemented (ADD keyword success to implement) Objective function: sum of squared residuals Sin transformation of the model parameters is applied! Debug level (general): debug=0 Model: internal | box contaminant source Number of model parameters: 19 Number of optimized parameters = 11 Number of flagged parameters = 0 Number of fixed parameters = 8 Number of calibration targets = 20 Execution date & time stamp: 20111107-211800 SINGLE CALIBRATION: single optimization based on initial guesses provided in the input file: Levenberg-Marquardt Optimization ... SVD decomposition Jacobians 1 Linear solves 0 Evaluations 12 OF 1.26022e+06 lambda 0.001 Computed initial lambda 10 OF 1.20597e+06 lambda 10 OF 1.27828e+06 lambda 16.9373 OF 1.27813e+06 lambda 33.8746 OF 1.2781e+06 lambda 135.498 lambda is constrained to be less than 1000 OF 1.27828e+06 lambda 1000 lambda has been already constrained; new iteration New Jacobian because: Lambda multiplication factor too large (nu = 32 > 16); Jacobians 2 Linear solves 5 Evaluations 28 OF 1.20597e+06 lambda 16000 OF 1.27826e+06 lambda 16000 lambda has been already constrained; new iteration OF 1.27647e+06 lambda 32000 lambda has been already constrained; new iteration OF 576613 lambda 128000 lambda has been already constrained; new iteration OF 936020 lambda 42666.7 lambda has been already constrained; new iteration New Jacobian because: OF declined substantially (576613 < < 1.20597e+06) ... ... Jacobians 24 Linear solves 233 Evaluations 498 OF 6788.97 lambda 333.333 OF 2.12603e+06 lambda 333.333 OF 27903.1 lambda 666.667 lambda is constrained to be less than 1000 OF 9289.75 lambda 1000 lambda has been already constrained; new iteration OF 6790.66 lambda 8000 lambda has been already constrained; new iteration OF 6789.2 lambda 128000 lambda has been already constrained; new iteration CONVERGED: Relative change in the OF is small (1.37775e-08 < 2.55948e-08) LM optimization is completed. Reason: small Dp (1.37775e-08) Eigen analysis ... Jacobian matrix stored (s02.jacobian) Covariance matrix stored (s02.covariance) Correlation matrix stored (s02.correlation) Eigen vectors and eigen values stored (s02.eigen) Obtained fit is not very good (chi^2/dof = 754.33 > 200) Optimized parameters: Source x coordinate [L] : 1105.04 stddev 98968.6 ( 210 - 1460) Estimated ranges are constrained by prior uncertainty bounds Source y coordinate [L] : 1468.33 stddev 87101.1 ( 1230 - 1930) Estimated ranges are constrained by prior uncertainty bounds Source x dimension [L] : 498.404 stddev 833.272 ( 1 - 500) Estimated ranges are constrained by prior uncertainty bounds Source y dimension [L] : 1.74075 stddev 13179 ( 1 - 500) Estimated ranges are constrained by prior uncertainty bounds Contaminant flux [M/T] : 41.7364 stddev 28026.9 ( 0.01 - 100) Estimated ranges are constrained by prior uncertainty bounds Start Time [T] : 1.28955e-08 stddev 90.0249 ( 0 - 43) Estimated ranges are constrained by prior uncertainty bounds Flow Angle [degrees] : 26.0742 stddev 28026.9 ( -30 - 30) Estimated ranges are constrained by prior uncertainty bounds Pore x velocity [L/T] : 11.5388 stddev 2.51973e-322 ( 0.01 - 200) Estimated ranges are constrained by prior uncertainty bounds Dispersivity x [L] : 138.142 stddev 3.95253e-323 ( 10 - 140) Estimated ranges are constrained by prior uncertainty bounds Dispersivity y [L] : 1.04174 stddev 2.12615e-314 ( 1 - 30) Estimated ranges are constrained by prior uncertainty bounds Dispersivity z [L] : 0.979763 stddev 2.12619e-314 ( 0.1 - 1) Estimated ranges are constrained by prior uncertainty bounds Model parameters: Source x coordinate [L] 1105.04 Source y coordinate [L] 1468.33 Source x dimension [L] 498.404 Source y dimension [L] 1.74075 Contaminant flux [M/T] 41.7364 Start Time [T] 1.28955e-08 Flow Angle [degrees] 26.0742 Pore x velocity [L/T] 11.5388 Dispersivity x [L] 138.142 Dispersivity y [L] 1.04174 Dispersivity z [L] 0.979763 Model predictions: W-1 ( 49): 0 - 4.5251e-11 = -4.5251e-11 ( -4.5251e-11) success 1 range 0 - 25 W-2 ( 49): 0 - 0 = 0 ( 0) success 1 range 0 - 10 W-3 ( 49): 0 - 1.65508e-05 = -1.65508e-05 (-1.65508e-05) success 1 range 0 - 25 W-4 ( 44): 350 - 350.17 = -0.169701 ( -0.169701) success 1 range 300 - 700 W-4 ( 49): 432 - 431.864 = 0.13567 ( 0.13567) success 1 range 300 - 700 W-5 ( 49): 0 - 0 = 0 ( 0) success 1 range 0 - 10 W-6 ( 49): 0 - 7.92453e-17 = -7.92453e-17 (-7.92453e-17) success 1 range 0 - 10 W-7 ( 49): 0 - 5.64583e-16 = -5.64583e-16 (-5.64583e-16) success 1 range 0 - 10 W-8 ( 49): 0 - 0.000445129 = -0.000445129 (-0.000445129) success 1 range 0 - 10 W-9 ( 49): 981 - 980.91 = 0.0899824 ( 0.0899824) success 1 range 600 - 1200 W-10#1 ( 49): 1.1 - 1.99515e-14 = 1.1 ( 1.1) success 1 range 0 - 5 W-10#2 ( 49): 0.1 - 1.53796e-14 = 0.1 ( 0.1) success 1 range 0 - 5 W-11#1 ( 49): 22 - 0 = 22 ( 22) success 0 range 3 - 25 W-11#2 ( 49): 0.3 - 0 = 0.3 ( 0.3) success 1 range 0 - 5 W-12#1 ( 49): 15 - 0.183405 = 14.8166 ( 14.8166) success 0 range 3 - 25 W-12#2 ( 49): 0.17 - 0.0990669 = 0.0709331 ( 0.0709331) success 1 range 0 - 5 W-13#1 ( 50): 72 - 0 = 72 ( 72) success 0 range 40 - 100 W-13#2 ( 50): 0.26 - 0 = 0.26 ( 0.26) success 1 range 0 - 20 W-14a ( 50): 0 - 0 = 0 ( 0) success 1 range 0 - 5 W-14b ( 50): 30 - 0 = 30 ( 30) success 1 range 0 - 50 Objective function: _6788.97_ Success: 0 At least one of the predictions is outside calibration ranges! Number of function evaluations = 505 Model predictions that are not calibration targets: W-14c ( 50): 10 - 3.76349 = 6.23651 ( 6.23651) success 1 range 0 - 20 Objective function: 38.894 Success: 1 All the predictions are within acceptable ranges! Simulation time = 8 seconds Functional evaluations = 506 Jacobian evaluations = 24 Levenberg-Marquardt optimizations = 1 Functional evaluations per second = 63 Execution started on Mon Nov 7 21:18:00 2011 Execution completed on Mon Nov 7 21:18:08 2011 Execution date & time stamp: 20111107-211800 [Back to top](#mads-comparisons) $>_pest s02pest_ PEST Version 12.1.0\\. Watermark Numerical Computing. PEST is running in parameter estimation mode. PEST run record: case s02pest (See file s02pest.rec for full details.) Model command line: mads s02pest.mads-input forward >& /dev/null Running model ..... Running model 1 time.... Sum of squared weighted residuals (ie phi) = 1.25945E+06 OPTIMISATION ITERATION NO. : 1 Model calls so far : 1 Starting phi for this iteration: 1.25945E+06 Calculating Jacobian matrix: running model 22 times ..... Lambda = 5.0000 -----> running model ..... Phi = 1.20406E+06 ( 0.956 of starting phi) Lambda = 2.5000 -----> running model ..... Phi = 1.20418E+06 ( 0.956 of starting phi) Lambda = 10.000 -----> running model ..... Phi = 1.20403E+06 ( 0.956 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 1.20403E+06 Maximum relative change: 1.0000E+30 [\"st\"] OPTIMISATION ITERATION NO. : 2 Model calls so far : 26 Starting phi for this iteration: 1.20403E+06 Calculating Jacobian matrix: running model 22 times ..... Lambda = 10.000 -----> running model ..... Phi = 1.27738E+06 ( 1.061 times starting phi) Lambda = 5.0000 -----> running model ..... Phi = 1.27735E+06 ( 1.061 times starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 1.27735E+06 Maximum relative change: 5.000 [\"st\"] ... ... OPTIMISATION ITERATION NO. : 10 Model calls so far : 221 Starting phi for this iteration: 1.27633E+06 All frozen parameters freed. Calculating Jacobian matrix: running model 22 times ..... parameter \"ax\" frozen: gradient and update vectors out of bounds parameter \"ay\" frozen: gradient and update vectors out of bounds parameter \"dx\" frozen: gradient and update vectors out of bounds parameter \"st\" frozen: - update vector out of bounds Lambda = 7.81250E-02 -----> running model ..... Phi = 1.27101E+06 ( 0.996 of starting phi) Lambda = 3.90625E-02 -----> running model ..... Phi = 1.27024E+06 ( 0.995 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: _1.27024E+06_ Maximum relative change: 5.000 [\"cf\"] Optimisation complete: 9 optimisation iterations have elapsed since lowest phi was achieved. Total model calls: 245 Running model one last time with best parameters..... Recording run statistics ..... See file s02pest.rec for full run details. See file s02pest.sen for parameter sensitivities. See file s02pest.seo for observation sensitivities. See file s02pest.res for residuals. [Back to top](#mads-comparisons) ## Test #2: Identification of aquifer parameters based on pumping test data Both codes are applied to identify aquifer parameters based on pumping test data using the Levenberg-Marquardt (**LM**) optimization technique. **MADS** and [PEST](http://www.pesthomepage.org/Home.php) control files are located in directory **example/contamination**. Based on the runs presented below, **MADS** outperforms [PEST](http://www.pesthomepage.org/Home.php) in this case. In the example presented below, **MADS** is executed using [PEST](http://www.pesthomepage.org/Home.php) control files (*.pst, *.ins, *.tpl). For this example, the code **WELLS** is needed; **WELLS** can be obtained at [wells.lanl.gov](http://wells.lanl.gov) $> _mads w01pest.pst ldebug_ MADS: Model Analyses & Decision Support (v1.1) 2011 \\--------------------------------------------------- Velimir Vesselinov (monty) vvv@lanl.gov http://www.ees.lanl.gov/staff/monty/mads.html Input file name: w01pest.pst PEST problem: Parameters = 2 (groups 1) Observations = 4951 (groups 1) Number of template files = 1 Number of instruction files = 1 Parameters = 2: k : init 1 min -10 max 10 S : init 1 min -10 max 10 Optimized parameters = 2 k : init 1 min -10 max 10 S : init 1 min -10 max 10 Calibration targets = 4951 o1 : value 0 weight 1 o2 : value 5.98511376 weight 1 o3 : value 8.023152254 weight 1 o4 : value 8.674032233 weight 1 o5 : value 8.970547769 weight 1 o6 : value 9.144774497 weight 1 o7 : value 9.253036409 weight 1 o8 : value 9.319347478 weight 1 o9 : value 9.376030219 weight 1 o10 : value 9.411309295 weight 1 o11 : value 9.454564987 weight 1 o12 : value 9.481477303 weight 1 o13 : value 9.511722912 weight 1 o14 : value 9.537635484 weight 1 o15 : value 9.552695957 weight 1 o16 : value 9.579276955 weight 1 o17 : value 9.593825974 weight 1 o18 : value 9.614616686 weight 1 o19 : value 9.629166924 weight 1 o20 : value 9.638577014 weight 1 ... o4933 : value 10.08850174 weight 0 o4934 : value 10.10152067 weight 0 o4935 : value 10.09287471 weight 0 o4936 : value 10.08117069 weight 0 o4937 : value 10.0769803 weight 0 o4938 : value 10.06021966 weight 0 o4939 : value 10.05550135 weight 0 o4940 : value 10.05995235 weight 0 o4941 : value 10.06315549 weight 0 o4942 : value 10.06027665 weight 0 o4943 : value 10.05642215 weight 0 o4944 : value 10.06040467 weight 0 o4945 : value 10.05720701 weight 0 o4946 : value 10.05537242 weight 0 o4947 : value 10.06296956 weight 0 o4948 : value 10.06336032 weight 0 o4949 : value 10.0650614 weight 0 o4950 : value 10.06270804 weight 0 o4951 : value 10.0699632 weight 0 Execution command: wells w01 >& /dev/null External files: - to provide current model parameters: w01.tpl -> w01.wells - to read current model predictions: w01.inst < - w01.s_point Problem type: calibration Calibration technique: single calibration using initial guesses provided in the input file Optimization method: opt=lm | Levenberg-Marquardt optimization Number of Levenberg-Marquardt iterations = will be computed internally Eigen analysis will be performed of the final optimization results Global termination criteria: 1: Maximum number of evaluations = 5000 2: Objective function cutoff value: NOT implemented (ADD keyword cutoff=[value] to implement) 3: Observations within defined calibration ranges: NOT implemented (ADD keyword success to implement) Objectve function: sum of squared residuals Sin transformation of the model parameters is applied! Debug level (general): debug=0 Execution date & time stamp: 20111110-205904 SINGLE CALIBRATION: single optimization based on initial guesses provided in the input file: Levenberg-Marquardt Optimization ... SVD decomposition Jacobians 1 Linear solves 0 Evaluations 3 OF 79661 lambda 0.001 Computed initial lambda 0.0183802 OF 79781.6 lambda 0.0183802 OF 79781.6 lambda 0.0367604 OF 79781.6 lambda 0.147042 OF 79781.6 lambda 1.17633 OF 3.01123e+13 lambda 18.8213 OF 79781.6 lambda 602.283 lambda is constrained to be less than 1000 OF 79781.6 lambda 1000 lambda has been already constrained; new iteration OF 79640.5 lambda 128000 lambda has been already constrained; new iteration OF 79549.5 lambda 42666.7 lambda has been already constrained; new iteration OF 78224.7 lambda 14222.2 lambda has been already constrained; new iteration OF 79781.6 lambda 4740.74 lambda has been already constrained; new iteration OF 79320.2 lambda 9481.48 lambda has been already constrained; new iteration OF 70921.3 lambda 37925.9 lambda has been already constrained; new iteration OF 79781.6 lambda 12642 lambda has been already constrained; new iteration OF 79531.6 lambda 25284 lambda has been already constrained; new iteration OF 75572.5 lambda 101136 lambda has been already constrained; new iteration OF 71400.5 lambda 809086 lambda has been already constrained; new iteration New Jacobian because: Lambda multiplication factor too large (nu = 32 > 16); Maximum number of lambda iteration is reached (10); Jacobians 2 Linear solves 17 Evaluations 22 OF 70921.3 lambda 1.29454e+07 OF 68146.2 lambda 1.29454e+07 lambda has been already constrained; new iteration OF 58714 lambda 4.31513e+06 lambda has been already constrained; new iteration OF 40661.7 lambda 1.43838e+06 lambda has been already constrained; new iteration OF 34366.6 lambda 479459 lambda has been already constrained; new iteration OF 33080.3 lambda 514288 lambda has been already constrained; new iteration New Jacobian because: OF declined substantially (33080.3 < < 70921.3) Jacobians 3 Linear solves 22 Evaluations 29 OF 33080.3 lambda 171429 OF 6122.85 lambda 171429 lambda has been already constrained; new iteration OF 3547.94 lambda 57143.1 lambda has been already constrained; new iteration New Jacobian because: OF declined substantially (3547.94 < < 33080.3) Jacobians 4 Linear solves 24 Evaluations 33 OF 3547.94 lambda 44564.7 OF 3212.13 lambda 44564.7 lambda has been already constrained; new iteration OF 2898.94 lambda 14854.9 lambda has been already constrained; new iteration OF 2897.37 lambda 4951.63 lambda has been already constrained; new iteration OF 2894.77 lambda 1650.54 OF 2863.37 lambda 550.181 OF 2846.55 lambda 183.394 OF 2844.7 lambda 61.1312 OF 2844.61 lambda 20.3771 OF 2844.61 lambda 6.79236 OF 2844.61 lambda 13.5847 New Jacobian because: Maximum number of lambda iteration is reached (10); Jacobians 5 Linear solves 34 Evaluations 45 OF 2844.61 lambda 4.52824 OF 2844.71 lambda 4.52824 OF 2844.71 lambda 9.05648 OF 2844.71 lambda 36.2259 OF 2844.71 lambda 289.807 lambda is constrained to be less than 1000 OF 2844.71 lambda 1000 lambda has been already constrained; new iteration OF 2844.71 lambda 32000 lambda has been already constrained; new iteration OF 2844.7 lambda 2.048e+06 lambda has been already constrained; new iteration OF 2844.6 lambda 2.62144e+08 lambda has been already constrained; new iteration CONVERGED: Relative change in the OF is small (4.06252e-13 < 1.18008e-11) LM optimization is completed. Reason: small Dp (4.06252e-13) Eigen analysis ... Jacobian matrix stored (w01pest.jacobian) Covariance matrix stored (w01pest.covariance) Correlation matrix stored (w01pest.correlation) Eigen vactors and eigen values stored (w01pest.eigen) Obtained fit is relatively good (chi^2/dof = 0.574782 < 200) Optimized parameters: k : -1.93341 stddev 0.000104654 ( -1.93341 - -1.93341) S : -2.79344 stddev 0.000151851 ( -2.79344 - -2.79344) Model parameters: k -1.93341 S -2.79344 Model predictions: o1 : 0 - 0 = 0 ( 0) success 1 range 0 - 0 o2 : 5.98511 - 0.858991 = 5.12612 ( 5.12612) success 1 range 0 - 11.9702 o3 : 8.02315 - 1.7258 = 6.29735 ( 6.29735) success 1 range 0 - 16.0463 o4 : 8.67403 - 2.33684 = 6.33719 ( 6.33719) success 1 range 0 - 17.3481 o5 : 8.97055 - 2.80368 = 6.16687 ( 6.16687) success 1 range 0 - 17.9411 o6 : 9.14477 - 3.1806 = 5.96417 ( 5.96417) success 1 range 0 - 18.2895 o7 : 9.25304 - 3.49644 = 5.7566 ( 5.7566) success 1 range 0 - 18.5061 o8 : 9.31935 - 3.76815 = 5.5512 ( 5.5512) success 1 range 0 - 18.6387 o9 : 9.37603 - 4.00652 = 5.36951 ( 5.36951) success 1 range 0 - 18.7521 o10 : 9.41131 - 4.21882 = 5.19249 ( 5.19249) success 1 range 0 - 18.8226 o11 : 9.45456 - 4.41019 = 5.04437 ( 5.04437) success 1 range 0 - 18.9091 o12 : 9.48148 - 4.58437 = 4.89711 ( 4.89711) success 1 range 0 - 18.963 o13 : 9.51172 - 4.7442 = 4.76752 ( 4.76752) success 1 range 0 - 19.0234 o14 : 9.53764 - 4.89186 = 4.64578 ( 4.64578) success 1 range 0 - 19.0753 o15 : 9.5527 - 5.02906 = 4.52364 ( 4.52364) success 1 range 0 - 19.1054 o16 : 9.57928 - 5.15721 = 4.42207 ( 4.42207) success 1 range 0 - 19.1586 o17 : 9.59383 - 5.27739 = 4.31644 ( 4.31644) success 1 range 0 - 19.1877 o18 : 9.61462 - 5.39058 = 4.22404 ( 4.22404) success 1 range 0 - 19.2292 o19 : 9.62917 - 5.4975 = 4.13167 ( 4.13167) success 1 range 0 - 19.2583 o20 : 9.63858 - 5.59884 = 4.03974 ( 4.03974) success 1 range 0 - 19.2772 ... Objective function: _2844.6_ Success: 1 All the predictions are within calibration ranges! Number of function evaluations = 55 Simulation time = 9 seconds Functional evaluations = 55 Jacobian evaluations = 5 Levenberg-Marquardt optimizations = 1 Functional evaluations per second = 6 Execution started on Mon Nov 7 21:29:52 2011 Execution completed on Mon Nov 7 21:29:55 2011 Execution date & time stamp: 20111107-212952 [Back to top](#mads-comparisons) $> _pest w01pest_ PEST Version 12.1.0\\. Watermark Numerical Computing. PEST is running in parameter estimation mode. PEST run record: case w01pest (See file w01pest.rec for full details.) Model command line: wells w01 >& /dev/null Running model ..... Running model 1 time.... Sum of squared weighted residuals (ie phi) = 79661\\. OPTIMISATION ITERATION NO. : 1 Model calls so far : 1 Starting phi for this iteration: 79661\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 5.0000 -----> running model ..... Phi = 77301\\. ( 0.970 of starting phi) Lambda = 2.5000 -----> running model ..... Phi = 1.39812E+05 ( 1.755 times starting phi) Lambda = 10.000 -----> running model ..... Phi = 79475\\. ( 0.998 of starting phi) No more lambdas: phi rising Lowest phi this iteration: 77301\\. Maximum relative change: 5.000 [\"k\"] OPTIMISATION ITERATION NO. : 2 Model calls so far : 8 Starting phi for this iteration: 77301\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 5.0000 -----> running model ..... Phi = 75501\\. ( 0.977 of starting phi) Lambda = 2.5000 -----> running model ..... Phi = 75495\\. ( 0.977 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 75495\\. Maximum relative change: 9.2185E-02 [\"s\"] OPTIMISATION ITERATION NO. : 3 Model calls so far : 14 Starting phi for this iteration: 75495\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 1.2500 -----> running model ..... Phi = 75262\\. ( 0.997 of starting phi) Lambda = 0.62500 -----> running model ..... Phi = 75244\\. ( 0.997 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 75244\\. Maximum relative change: 2.0766E-02 [\"s\"] OPTIMISATION ITERATION NO. : 4 Model calls so far : 20 Starting phi for this iteration: 75244\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 0.31250 -----> running model ..... Phi = 74985\\. ( 0.997 of starting phi) Lambda = 0.15625 -----> running model ..... Phi = 74648\\. ( 0.992 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 74648\\. Maximum relative change: 0.3539 [\"s\"] OPTIMISATION ITERATION NO. : 5 Model calls so far : 26 Starting phi for this iteration: 74648\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 7.81250E-02 -----> running model ..... Phi = 70501\\. ( 0.944 of starting phi) Lambda = 3.90625E-02 -----> running model ..... Phi = 69558\\. ( 0.932 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 69558\\. Maximum relative change: 0.5144 [\"s\"] OPTIMISATION ITERATION NO. : 6 Model calls so far : 32 Starting phi for this iteration: 69558\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 1.95313E-02 -----> running model ..... Phi = 78495\\. ( 1.128 times starting phi) Lambda = 9.76563E-03 -----> running model ..... Phi = 78599\\. ( 1.130 times starting phi) Lambda = 3.90625E-02 -----> running model ..... Phi = 78261\\. ( 1.125 times starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 78261\\. Maximum relative change: 1.021 [\"s\"] OPTIMISATION ITERATION NO. : 7 Model calls so far : 39 Starting phi for this iteration: 78261\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 3.90625E-02 -----> running model ..... Phi = 78255\\. ( 1.000 of starting phi) Lambda = 1.95313E-02 -----> running model ..... Phi = 78255\\. ( 1.000 of starting phi) Lambda = 7.81250E-02 -----> running model ..... Phi = 78254\\. ( 1.000 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: 78254\\. Maximum relative change: 0.5107 [\"s\"] OPTIMISATION ITERATION NO. : 8 Model calls so far : 46 Starting phi for this iteration: 78254\\. Calculating Jacobian matrix: running model 4 times ..... Lambda = 7.81250E-02 -----> running model ..... Phi = 78219\\. ( 1.000 of starting phi) Lambda = 3.90625E-02 -----> running model ..... Phi = 78222\\. ( 1.000 of starting phi) Lambda = 0.15625 -----> running model ..... Phi = 78213\\. ( 0.999 of starting phi) No more lambdas: relative phi reduction between lambdas less than 0.0300 Lowest phi this iteration: _78213_. Maximum relative change: 5.000 [\"s\"] Optimisation complete: 3 optimisation iterations have elapsed since lowest phi was achieved. Total model calls: 53 Running model one last time with best parameters..... Recording run statistics ..... See file w01pest.rec for full run details. See file w01pest.sen for parameter sensitivities. See file w01pest.seo for observation sensitivities. See file w01pest.res for residuals. [Back to top](#mads-comparisons)","title":"Mads comparisons"},{"location":"html/mads-demos/","text":"# **MADS** Demos * [ABAGUS](#abagus-agent-based-global-uncertainty-and-sensitivity-analysis) * [Squads](#squads-global-optimization-technique-coupling-particle-swarm-and-levenberg-marquardt-optimization-techniques) ## **ABAGUS**: Agent-based Global Uncertainty and Sensitivity analysis The movie above shows an animation of the hierarchical \u0435xploration of 2D parameter space by **ABAGUS** for the case of a simple parabola test model (keyword '**test=1**'). The acceptable parameter space solution is in the area with radius of about 14 from the global minimum at (0,0) with objective function (OF) cutoff value below 160 (keyword '**cutoff=160**'). The parameter space domain is [-100,100] (keyword '**pardomain=200**') for both model parameters. Only, [-20,20] range is shown in the figure below. **ABAGUS** performs a series of analyses with different discretization sizes: 10, 5, 2.5, 1.25, etc. The location of the agents is shown by cyan stars (the agents explore the parameter space outside of the shown domain as well. Response surface of the parabola test function: **ABAGUS** performance is compared to **MADS** Monte Carlo analysis using Improved Distributed Latin Hypercube Sampling (**IDLHS**). Comparison of both methods based on the number of functional evaluations: The results demonstrate that **ABAGUS** outperforms the Monte Carlo analysis using Improved Distributed Latin Hypercube Sampling (**IDLHS**). [Back to top](#mads-demos) ## **Squads**: Global Optimization technique coupling Particle Swarm and Levenberg-Marquardt optimization techniques Comparisons are performed between **LM** (Levenberg-Marquardt), [PSO](http://clerc.maurice.free.fr/pso/) (Particle Swarm Optimization), [TRIBES](http://www.particleswarm.info/Tribes_2006_Cooren.pdf) , [hPSO](http://www.mathworks.com/matlabcentral/fileexchange/6497-hybrid-particle-swarm-optimization/content/hPSOoptions.m) and **Squads** to solve **Rosenbrock** and **Griewank** test problem with different dimensionality (i.e. number of adjustable parameters). Figures below present boxplots for the number of function evaluations for successful runs for 2D, 5D, and 10D **Rosenbrock** and **Griewank** test functions, respectively. In the figures, the boxes represent the 25th to 75th percentile ranges, the bars inside of the boxes represent the median values, and the whiskers represent the minimum and maximum values. The fraction of successful runs out of the attempted runs are presented above the boxes. The **robustness** of the strategies is defined as the percentage of successful runs. The **efficiency** of the strategies is defined by the number of functional evaluations required to achieve the global minimum. **Squads** is as robust or more robust than the other tested strategies (**LM**, [PSO](http://clerc.maurice.free.fr/pso/), [TRIBES](http://www.particleswarm.info/Tribes_2006_Cooren.pdf), and [hPSO](http://www.mathworks.com/matlabcentral/fileexchange/6497-hybrid-particle-swarm-optimization/content/hPSOoptions.m)) in all cases. **Squads** is more efficient than [PSO](http://clerc.maurice.free.fr/pso/), [TRIBES](http://www.particleswarm.info/Tribes_2006_Cooren.pdf), and [hPSO](http://www.mathworks.com/matlabcentral/fileexchange/6497-hybrid-particle-swarm-optimization/content/hPSOoptions.m) in all cases. For the 2D, 5D, and 10D **Rosenbrock** test functions, **Squads** has comparable efficiency to **LM**. However, in these cases, the robustness of **Squads** (**100%**) is considerably better than the robustness of **LM** (less than **36%**). For the 2D, 5D, and 10D **Griewank** test functions, **Squads** is less efficient than **LM** but depending on the initial guesses may converge for the same number of functional evaluations as **LM**. However, in these cases, the robustness of **Squads** (grater than **80%**) is considerably better than the robustness of **LM** (less than **11%**). **Squads** is observed to have the best performance when both robustness and efficiency are taken into consideration than the other strategies. [Back to top](#mads-demos) ## **Rosenbrock** function [Back to top](#mads-demos) ## **Griewank** function [Back to top](#mads-demos)","title":"Mads demos"},{"location":"html/mads-features/","text":"# **MADS** Features **MADS** is characterized by several unique features: * Provides an integrated computational framework for a wide range of model-based analyses, and supports model-based decision making. * By design, works in an adaptive mode with minimum input from the user. For example, \u2018**mads s01**\u2019 is sufficient to perform calibration of problem \u2018**s01**\u2019 and \u2018**mads montecarlo s01**\u2019 is sufficient to perform uncertainty analysis of problem \u2018**s01**\u2019 ([MADS manual](mads-manual.md)). All the parameters controlling the performance of these analyses are estimated internally by **MADS**. Nevertheless, if needed, the user has the flexibility to specify a wide range of options (as demonstrated in **MADS** [manual](mads-manual.md) and [execution examples](#examples)). * The same problem input file(in the previous case, \u2018**s01.mads**\u2019)is sufficient and can be applied to perform all the possible model analyses supported by **MADS**. Different analyses can be invoked using different command-line keywords and options. If preferred, the keywords can be provided on the first line of the problem input file as well. * Most of the model analysis can be performed using a discretized parameter space (e.g. **PPSD**, **IGPD**, **ABAGUS**). This can substantially reduce the computational effort to perform model analyses of computationally intensive models and complex parameter spaces ([MADS manual](mads-manual.md)). * Highly-parameterized inversion where the number of model parameters is substantially greater than the number of model constraints (calibration targets or model observations); a similar approach is called [SVD assist](http://www.pesthomepage.org/Highly-paraameterized_inversion.php) in [PEST](http://www.pesthomepage.org) ([svdassist](http://www.pesthomepage.org/Highly-paraameterized_inversion.php)). * Permits the use of 'acceptable' calibration ranges for each optimization target. In this way, the model solutions can be constrained to produce predictions within acceptable calibration ranges. This feature is implemented using the keyword \u2018** obsrange **\u2019 ([MADS manual](mads-manual.md#calibration-termination-criteria)). * Allows the use of an acceptable calibration range for the objective function. In this way, acceptable model solutions can be identified as those producing objective functions below a predefined cutoff value. Once the objective function is decreased below the cutoff value, the optimization is terminated. This feature is implemented using the keyword \u2018** cutoff **\u2019 ([MADS manual](mads-manual.md#calibration-termination-criteria)). * Implements a series of alternative objective functions (OF). * By default, all the model parameters are internally normalized and transformed in a manner that substantially improves the optimization process. * Provides an option to perform a series of optimizations with random initial guesses for optimization parameters. * Provides an option to automatically retry the optimization process using a series of random initial guesses for optimization parameters until an acceptable calibration is achieved (keyword \u2018**retry\u2019**; [MADS manual](mads-manual.md#calibration-method-keywords)). * Automatically detects and utilizes the available multi-processor resources for parallelization of m. * Analyzes the runtime performance of the available parallel hosts (processors); hosts not capable of performing the requested parallel jobs are dynamically ignored. * Tracks the multiple model files during parallel execution automatically; for the user, there is no difference between serial (using single processor) and parallel modes of execution. * Performs automatic bookkeeping of all the model results for efficient restart and rerun of MADS jobs (e.g. if the previous job was not completed) and additional posterior analyses. * Allows the user to perform different types of analyses based on model results stored during previous MADS runs; for example, model runs obtained during model calibration can be utilized in posterior Monte Carlo analyses. * Provides a built-in protection against simultaneous execution of conflicting MADS runs in the same working directory. * Automatically renames the files obtained during previous MADS runs by default using unique date & time information in the file names to avoid overwriting. * Object-oriented design of MADS allows for relatively easy integration with other object-oriented optimization or sampling techniques.","title":"Mads features"},{"location":"html/mads-info/","text":"# **MADS** Overview **MADS** (Model Analysis & Decision Support) is an open-source code designed as an integrated high performance computational framework executing a wide range of model-based analyses. **MADS** is designed to be a user-friendly code utilizing adaptive rules and techniques which allows the model analyses to be performed with minimum user input. However, if needed, user can have full control on **MADS** performance by providing various keywords and control parameters. **MADS** can be executed under different computational modes, which include: * Sensitivity Analysis (**SA**) * Parameter Estimation (**PE**), Model Inversion and Calibration * Uncertainty Quantification (**UQ**) * Model Selection * Model Averaging * Decision Support (**DS**) **MADS** allows for coupled model parameters and regularization terms that are internally computed based on user-defined mathematical expressions (utilizing GNU library [libmatheval](http://www.gnu.org/software/libmatheval)). **MADS** can be externally coupled with any existing model simulator through integrated modules that generate input files required by the model simulator and parse output files generated by the model simulator. This is performed using a set of template and instruction files. **MADS** analyses can be performed directly using existing control (*.pst), template (*.tpl) and instruction (*.ins) files developed for the code [PEST](http://www.pesthomepage.org) without any modifications or adjustments ([example](mads-comparisons.md)). **MADS** provides internal coupling with a series of [analytical simulators of contaminant transport in aquifers](mads-methods.md#contaminant-transport-simulators) built in the code. **MADS** can internally coupled with any other simulators using object-oriented programming. **MADS** includes a series of [test functions](mads-methods.md#test-functions) built in the code for performance (robustness and efficiency) analysis of existing model-analyses techniques. **MADS** automatically detects and utilizes the available parallel resources; for the user, there is no difference between serial (using single processor) and parallel mode of execution. The automatic parallelization is performed using external system calls, MPI or POSIX threading. **MADS** performs automatic bookkeeping of all the model results for efficient restart and rerun of previous jobs; for example, if the previous jobs were not completed. **MADS** can perform different types of analyses based on model results accumulated and stored during previous **MADS** runs; for example, model runs obtained during model calibration can be utilized in Monte Carlo analyses. **MADS** includes a wide range of techniques for model-based analyses: * local and global sensitivity and uncertainty techniques, including Monte-Carlo Methods, [Sobol's global sensitivity indices](http://www.mlmatrix.com/uploadfile/200712418203522.pdf), and [ABAGUS](papers/Harp & Vesselinov ABAGUS 2011.pdf) * advanced [Latin-Hypercube sampling techniques](mads-methods.md#model-analyses), including [Improved Distributed Hypercube Sampling (IDHS)](http://people.sc.fsu.edu/~jburkardt/datasets/ihs/ihs.html) * alternative implementations of the Levenberg-Marquardt optimization technique including [GSL](http://www.gnu.org/s/gsl/), [IMSL](http://www.roguewave.com/products/imsl-numerical-libraries.aspx), [LevMar](http://www.ics.forth.gr/~lourakis/levmar/) libraries and the acceleration and delayed gratification approaches proposed by [Transtrum et al 2011](http://link.aps.org/doi/10.1103/PhysRevE.83.036701) ([presentation](presentations/Leif_LM_presentation_m.pdf)) * highly-parameterized inversion where the number of model parameters is substantially greater than the number of model constraints (calibration targets or model observations); a similar approach is called [SVD-assist](http://www.pesthomepage.org/Highly-parameterized_inversion.php) in [PEST](http://www.pesthomepage.org) * advanced local, global, and hybrid single- and multi-objective optimization techniques, including Multi-Start Levenberg-Marquardt (**MSLM**), Particle Swarm Optimization ([PSO](http://clerc.maurice.free.fr/pso/)), [TRIBES](http://www.particleswarm.info/Tribes_2006_Cooren.pdf), [SQUADS](papers/squads_v04.pdf) * Bayesian and non-Bayesian uncertainty analyses related to decision support, including [DREAM](http://www.biometris.wur.nl/UK/Staff/Cajo+ter+Braak/Software+and+Data/DE-MC+and+DREAM+software+page/), [info-gap](papers/Harp & Vesselinov infogap source 2011.pdf) analyses **MADS** is build using a well-designed object-oriented programing style that allows for easy integration of new techniques for model-based analyses; code changes and developments are welcome, and after testing, they will be integrated in future **MADS** releases. **MADS** is a unix-style code with command-line interface. All the analyses are performed by a single executable code; model analyses and their options are selected by command-line keywords ([MADS execution examples](mads-examples.md)). **MADS** is an open-source object-oriented code written in C/C++ and tested on various platforms (Unix, [Linux](https://www.linux.com/), [Mac OS X](http://www.apple.com/macosx/), [Microsoft Windows](http://windows.microsoft.com/en-US/windows/home) using [Cygwin](http://www.cygwin.com/)). **MADS** supports scientifically defensible decision making and risk management based on model predictions. **MADS** has been successfully applied to perform various model analyses related to environmental management of contamination sites. Examples include solutions of source identification problems, quantification of uncertainty, model calibration, and optimization of monitoring networks (see the lists of [publications](mads-research.md), [presentations](mads-research.md), [reports](mads-research.md), and [projects](mads-research.md)). **MADS** release includes a series of verification and test example problems. **MADS** current stable version (v 1.1) has been released in January 2013 ([download](mads-download.md)). Professional software & codes with somewhat similar but not equivalent capabilities: * [DAKOTA](http://dakota.sandia.gov/index.html) * [UCODE](http://igwmc.mines.edu/freeware/ucode/) * [PEST](http://www.pesthomepage.org) * [MPEST/MPRUN](http://www.ees.lanl.gov/staff/monty/codes/mpest) * [ASCEM/Agni](http://www.ascemdoe.org) **MADS** website: LA-UR-11-11967 **MADS** code: LA-CC-10-055, LA-CC-11-035","title":"Mads info"},{"location":"html/mads-manual/","text":"# **MADS** Manual * [Overview and Features](#overview-and-features) * [Execution](#mads-execution) * [Command-line keywords and options](#mads-command-line-keywords-and-options) * [Input and output files](#mads-input-and-output-files) * [Format of MADS input files](#format-of-mads-input-files) * [Compilation](#mads-compilation) * [Verification](#mads-verification) * [Test examples](#mads-test-examples) ### Overview and Features **MADS** (Model Analyses & Decision Support) is an object-oriented code that is capable of performing various types of model analyses, and supporting model-based decision making. The code can be executed under different computational modes, which include (1) sensitivity analysis, (2) model calibration (parameter estimation), (3) uncertainty quantification, (4) model selection, (5) model averaging, and (6) decision analysis. **MADS** can be externally coupled with any existing model simulator through integrated modules that read/write input and output files using a set of template and instruction files. **MADS** can also work with existing control, template and instruction files developed for the code [PEST (Doherty 2009)](http://www.pesthomepage.org/Home.php). **MADS** is internally coupled with a series of built-in analytical simulators (currently the analytical solutions are for contaminant transport in aquifer only). In addition, **MADS** can be used as a library (toolbox) for internal coupling with any existing object-oriented simulator using object-oriented programming. **MADS** provides (1) efficient parallelization, (2) runtime control, restart, and preemptive termination, (3) advanced Latin-Hypercube sampling techniques (including [Improved Distributed Sampling](http://people.sc.fsu.edu/~jburkardt/f_src/ihs/ihs.html)), (4) several gradient-based Levenberg-Marquardt optimization methods (including [LevMar](http://www.ics.forth.gr/~lourakis/levmar/)), (5) advanced single- and multi-objective global optimization methods (including Particle Swarm Optimization, [PSO](http://www.particleswarm.info/), [TRIBES](http://clerc.maurice.free.fr/pso/Tribes/Tribes_MO/Tribes_MO.html), and SQUADS), and (6) local and global sensitivity and uncertainty analyses (including ABAGUS), and (7) information gap remediation decision analyses (under development). **MADS** is written in C/C++ and tested on various Unix platforms (Linux, Mac OS X, Cygwin MS Windows). The **MADS** simulations are performed using command-line execution. A graphic user interface (GUI) using Java/Eclipse is currently under development as well. **MADS** is characterized by several unique features: * Provides an integrated computational framework for a wide range of model-based analyses, and supports model-based decision making. * **MADS** is designed to be capable to work in an adaptive mode with minimum input from the user. For example, \u2018**mads s01**\u2019 is sufficient to perform calibration of problem \u2018**s01**\u2019 and \u2018**mads montecarlo s01**\u2019 is sufficient to perform uncertainty analysis of problem \u2018**s01**\u2019. All the parameters controlling the performance of these analyses are estimated internally by **MADS**. Nevertheless, if needed, the user has the flexibility to specify a wide range of options. * The same problem input file(in the previous case, \u2018**s01.mads**\u2019)is sufficient and can be applied to perform all the possible model analyses supported by **MADS**. Different analyses can be invoked using different command-line keywords and options. If preferred, the keywords can be provided on the first line of the problem input file as well. * Most of the model analysis can be performed using a discretized parameter space (e.g. **PPSD**, **IGPD**, **ABAGUS**). This can substantially reduce the computational effort to perform various model analyses (e.g. calibration, uncertainty quantification, and sensitivity analysis, performance assessment). * Highly-parameterized inversion where the number of model parameters is substantially greater than the number of model constraints (calibration targets or model observations); a similar approach is called [SVD-assist](http://www.pesthomepage.org/Highly-parameterized_inversion.php) in [PEST](http://www.pesthomepage.org). * Permits the use of 'acceptable' calibration ranges for each optimization target. In this way, the model solutions can be constrained to produce predictions within acceptable calibration ranges. This feature is implemented using the keyword \u2018** [obsrange](#calibration-termination-criteria) **\u2019. * Allows the use of an acceptable calibration range for the objective function. In this way, acceptable model solutions can be identified as those producing objective functions below a predefined cutoff value. Once the objective function is decreased below the cutoff value, the optimization is terminated. This feature is implemented using the keyword \u2018** [cutoff](#calibration-termination-criteria) **\u2019. * Implements a series of alternative objective functions (OF). * By default, all the model parameters are internally normalized and transformed in a manner that substantially improves the optimization process. * Provides the option to perform a series of optimizations with random initial guesses for optimization parameters. * Provides the option to automatically retry the optimization process using a series of random initial guesses for optimization parameters until an acceptable calibration is achieved (keyword \u2018**[retry](#calibration-options)**\u2019). * Automatically detects and utilizes multi-processor resources for parallel execution. * Analyzes the runtime performance of the available parallel hosts (processors); hosts not capable of performing the requested parallel jobs are dynamically ignored. * Tracks the multiple model files during parallel execution automatically; for the user, there is no difference between serial (using single processor) and parallel modes of execution. * Performs automatic bookkeeping of all the model results for efficient restart and rerun of **MADS** jobs (e.g. if the previous job was not completed) and additional posterior analyses. * Allows the user to perform different types of analyses based on model results stored during previous **MADS** runs; for example, model runs obtained during model calibration can be utilized in posterior Monte Carlo analyses. * Provides a built-in protection against simultaneous execution of conflicting **MADS** runs in the same working directory. * Automatically renames the files obtained during previous **MADS** runs by default using unique date & time information in the file names to avoid overwriting. * Object-oriented design of **MADS** allows for relatively easy integration with other object-oriented optimization or sampling techniques. [Back to top](#mads-manual) ## **MADS** Execution: \u0002wzxhzdk:0\u0003 **MADS** execution requires at minimum either a **problem name (_problem_name_)** or **problem input file (_input_file_name_)**. **problem name (_problem_name_)**: Problem root name defines the file names of various **MADS** input and outputs files. A problem input file named **_problem_name_.mads** is expected to exist. **problem input file (_input_file_name_)**: an input file that can completely define the simulated problem. The file follows a predefined **MADS** format. It includes information about the simulation type, model parameters, and model observations (calibration targets). The root of the input file defines the **_problem_name_** used to specify file names of various files associated with simulation outputs. For example, the file named **_problem_name_.results** contains the model results, and the file named **_problem_name_-rerun.mads** contains information that allows the last simulation to be restarted with the previous runs calibration results. All the possible model analyses can be performed using the same problem input file **(_input_file_name_)**. **MADS** is compatible to work with [PEST](http://www.pesthomepage.org/Home.php) control, template and instruction files. To work with [PEST](http://www.pesthomepage.org/Home.php) files, **input_file_name** should be a [PEST](http://www.pesthomepage.org/Home.php) control file **_problem_name_.pst**. After the **_problem_name_** or the **_input_file_name_** a series of keywords and options can be provided (all optional). All the keywords are case insensitive. If there are no keywords or options, model calibration will be performed by default. The keywords and options can be provided to **MADS** either on the command-line or on the first line of the problem input file (**_problem_name_.mads**). The keywords and options can be specified in any order; if there are contradictions (for example both \u2018** montecarlo **\u2019 and \u2018** calibrate **\u2019 are provided), the priorities are defined by the keyword order in the problem input file followed by the command-line queue (e.g. the last command-line keyword can overwrite any previous definitions). Executing **MADS** without any arguments (\u2018**mads**\u2019) produces screen output describing **MADS** keywords and options for quick reference. [Back to top](#mads-manual) ## **MADS** Command-line keywords and options: ## Problem type keywords (all the keywords and options are case insensitive): ** forward **: Perform a single forward model simulation based on the model parameters provided in the input problem file. The results are stored in a file named **_problem_name_.results**. ** create **: Create a **MADS** input file with calibration targets based on current model parameters. If the keyword is specified, **MADS** will perform a single forward model simulation based on the model parameters provided in the input problem file. A file named **_problem_name_-truth.mads** is created with the simulated values inserted as calibration target values. The simulation results are stored in a file named **_problem_name_.results**. ** calibrate **: Perform a calibration run where the model parameters are calibrated against the calibration targets. This process can also be called model inversion or parameter estimation. This is the default **MADS** problem type (if no other problem type keywords are specified). The calibration results are stored in a file named **_problem_name_.results**. Calibration can be performed using various optimization techniques (global and local), objective functions, weighting schemes, and optimization constraints. The analyses can be performed using various schemes for computing the initial guesses for optimization parameters. The calibrations can be performed in parallel (available resources are automatically detected) and automatically restarted. ** montecarlo **: Perform an uncertainty analysis using Monte Carlo sampling. The sampling results are stored in files named (1) **_problem_name_.mcrnd*** (including all the Monte Carlo runs), and (2) **_problem_name_.results** (representing the result with the lowest objective function). Various alternative sampling techniques can be selected using the keyword \u2018** smp **\u2019. The sample runs can be performed in parallel (available resources are automatically detected) and automatically restarted. ** gsens **:Perform a global sensitivity analysis. Currently, the Sobol Non-linear Sensitivity method (Sobol. IM, 1993 [Global sensitivity indices for nonlinear mathematical models and their Monte Carlo estimates](http://linkinghub.elsevier.com/retrieve/pii/S0378475400002706) ) is implemented. **MADS** uses Monte Carlo estimation of the Sobol indices, requiring 2 independent random samples with equal dimensions. The number of model evaluations is _n_ * (_N_ + 1) where _n_ is the size of the samples and _N_ is the number of Sobol indices (model parameters). The global sensitivity analysis results are stored in files named **_problem_name_.gsens***. ** lsens ** : Perform a local sensitivity analysis computing the Jacobian matrix either for the initial values provided in the input file or for the final calibration results (depending on the combination of keywords). The local sensitivity analysis results are stored in files named **_problem_name_.sensitivity**. ** eigen ** : Perform an eigen analysis of the Jacobian matrix either for the initial values provided in the input file or for the final calibration results (depending on the combination of keywords). The eigen analysis results are stored in files named **_problem_name_.eigen**. ** abagus **: Perform an Agent-Based Global Uncertainty & Sensitivity Analysis (**ABAGUS**). The **ABAGUS** run identifies optimization parameter sets producing objective function values below a predefined cutoff value (keyword '**cutoff'**) or within predefined calibration ranges for each target (keyword **'[obsrange](#calibration-termination-criteria)**') on a discretized parameter space. The ABAGUS results, including optimization parameter values and their associated objective function value are stored in files named **_problem_name_.pssa**. ** postpua **: Perform an analysis of predictive uncertainties (currently processing **ABAGUS** outputs only; the Monte Carlo outputs will be added in the future). Desired predictions are identified as \u201c**observations**\u201d with weight>0\\. ** infogap **: Perform an information gap decision analysis. Results are stored in files named **_problem_name-pred_**k**_.igap_**, where k is the index of the performance metric prediction (one file is generated for each performance metric prediction). Performance metric predictions are identified in **_problem_name.mads_** as \u201c**observations**\u201d with weight=-1. Examples for executing different types of model-based analyses with **MADS** are presented in [Examples](mads-examples.md), [Demos](mads-demos.md), [Screenshots](mads-screenshots.md), and [Comparisons](mads-comparisons.md) sections. [Back to top](#mads-manual) ## Calibration method keywords: single **_single calibration using initial guesses provided in the input file_**; this type of calibration is performed by default; the keyword does not need to be provided igrnd **_sequential multi-start (multi-try) calibrations using a set of random initial values_**; the number of initial guess realizations is defined by **real**=X igpd **_sequential multi-start (multi-try) calibrations using a set of discretized initial values_**; the parameter space discretization is defined in the **MADS** input file ppsd **_sequential multi-start (multi-try) calibrations using Partial Parameter Space Discretization (**PPSD**) method_**; in this case, the discretized model parameters are kept fixed during each multi-start (multi-try) calibration; the parameter space discretization is defined in the **MADS** input file. ### Calibration termination criteria: eval=[integer] terminate calibration if the **_number of functional evaluations exceeds a predefined value_** [default eval=5000] cutoff=[real] terminate calibration (or collect solution in the case of **abagus**) if the **_objective function is below the cutoff value_** [default cutoff=0] parerror=[real] terminate calibration (or collect solution in the case of **abagus**) if the **_estimated model parameters are within a predefined absolute error_** range from their known true values applied in the case of test functions with known solution [default parerror=0; i.e. termination criteria is not applied] obsrange terminate calibration (or collect solution in the case of **abagus**) if **_model predictions are within predefined calibration ranges_** obserror=[real] terminate calibration (or collect solution in the case of **abagus**) if **_model predictions are within a predefined absolute error range from their observed values_** [default obserror=0; i.e. termination criteria is not applied] ### Calibration options: retry=[integer] number of retries in the case of multi-try (multi-start) model analyses [default retry=0] iter=[integer] number of Levenberg-Marquardt iterations [default iter=50] particles=[integer] number of initial particles or tribes [default particles=10+2*sqrt(Number_of_parameters)] lmfactor=[double] multiplier applied to compute when to initiate LM searches within **SQUADS** algorithm [default lmfactor=1] leigen OR eigen eigen analysis of the final optimized solution [Back to top](#mads-manual) ## Optimization method (**opt=**[string]; various combinations are possible, e.g. pso_std_lm_gsl): opt=lm Local Levenberg-Marquardt optimization [default] opt=lm_levmar Local Levenberg-Marquardt optimization using **LevMar** library opt=lm_gsl Local Levenberg-Marquardt optimization using **GSL** library opt=pso Global Particle Swarm optimization (default Standard2006) opt=apso Global Adaptive Particle Swarm optimization (default **TRIBES**) opt=swarm Global Particle Swarm optimization Standard2006 (also opt=pso_std) opt=tribes Global Particle Swarm optimization **TRIBES** (also opt=pso_tribes) opt=squads **SQUADS**: Adaptive hybrid optimization using coupled local and global optimization techniques ## Sampling method (**smp=**[string] OR **mslm=**[string] for Multi-Start Levenberg-Marquardt (**MSLM**) analysis using multiple retries with different random initial guesses for unknown model parameters): smp=olh Optimal Latin Hypercube Sampling [default] (if real = 1 **RANDOM**; if real > **IDLHS**; if real > 500 **LHS**) Sampling is performed using internally computed or user provided seed. smp=lhs Latin Hypercube Sampling (**LHS**) [default smp=lhs_random] smp=lhs_random Latin Hypercube Sampling (**LHS**) with random placement of the particles within hypercube cells smp=lhs_center Latin Hypercube Sampling (**LHS**) with particle placement at the center of the hypercube cells smp=lhs_edge Latin Hypercube Sampling (**LHS**) with particle placement at the edges of the hypercube cells smp=idlhs Improved Distributed Latin Hypercube Sampling (**IDLHS**; aka **IHS**) smp=random Random sampling ## Sampling options: real=[integer] number of random realizations (samples) [default real=100] case=[integer] execute a single case from all the realizations (samples) (applied in **PPSD**, **IGPD**, **IGRND**, **MONTECARLO** model-based analyses) seed=[integer] random seed value [randomly generated by default] ## Objective function options: ssr sum of the squared residuals [default] ssd0 sum of the squared discrepancies ssda sum of the squared discrepancies and absolute residuals ssdr sum of the squared discrepancies and squared residuals [Back to top](#mads-manual) ## Transformation of parameter space and observations (calibration targets): nosin Sin transformation of optimized parameters is not applied [parameters are sin transformed by default] plog=[-1,0,1] All (plog=1) or no (plog=0) optimization parameters are log-transformed [default: log transformation is designated for each parameter in the input file (plog=-1)] olog=[-1,0,1] All (olog=1) or no (olog=0) observations (simulated and measured) are log-transformed [default: log transformation is designated for each observation in the input file (olog=-1)] oweight=[-1,0,1,2] Weights for all the observation residuals in **_problem_name.mads_** are overwritten: 0 = zero weight, 1 = unit weight, 2 = weight inversely proportional to observation [default: designated weights in **_problem_name.mads_** are used (oweight=-1)] ## Parallelization: np=[integer] number of requested parallel jobs [optional] rstfile=[string] name of existing zip restart file to be used (created by previous Parallel **MADS** run) [optional] restart=[integer] restart=1 (default; automatic restart if possible); restart=0 (force no restart); restart=2 (force restart); by default the analyses will be restarted automatically (restart=1) ## **ABAGUS** (Agent-Based Global Uncertainty & Sensitivity Analysis) options (**abagus**): infile=[string] name of previous **ABAGUS** results file to be used to initialize KD-tree [default=NULL] energy=[integer] initial energy for swarm [default energy=10000] cutoff=[real] maximum objective function value for acceptable solutions to be collected obsrange collect solutions that produce simulations within predefined calibration ranges for each target ## Information gap decision analysis options (**infogap**): infile=[string] name of **ABAGUS** results file to perform information gap decision analysis ## Predictive uncertainty analysis options (**postpua**): infile=[string] name of **ABAGUS** results file to perform predictive uncertainty analysis [Back to top](#mads-manual) ## Build-in analytical solutions: point point contaminant source in 3D flow domain plane areal contaminant source in 3D flow domain box block contaminant source in 3D flow domain ## Built-in test problems for global optimization / uncertainty-quantification techniques (local techniques will not work): test=[integer] test problem ID [default=1]: 1: Parabola 2: Griewank 3: Rosenbrock 4: De Jong's Function #4 5: Step 6: Alpine function (Clerc's Function #1) 7: Rastrigin 8: Krishna Kumar 9: 2D Tripod function 10: Shekel's Foxholes 2D 11: Shekel's Foxholes 5D 12: Shekel's Foxholes 10D 20: Shekel's Foxholes 2D (alternative; global methods only) 21: Polynomial fitting (global methods only) 22: Ackley (global methods only) 23: Eason 2D (global methods only) 31: Rosenbrock (simplified) 32: Griewank (alternative) 33: Rosenbrock (alternative) 34: Powell's Quadratic 35: Booth 36: Beale 37: Parsopoulos Curve-fitting test functions: 40: Sin/Cos data fitting (2 parameters) 41: Sin/Cos data fitting (4 parameters) 42: Sin/Cos data fitting (2 parameters; simplified) 43: Exp data fitting I (5 parameters) 44: Exp data fitting II (11 parameters) dim=[integer] dimensionality of parameter space for the test problem (fixed for some of the problems) [default=2] npar=[integer] number of model parameters for the data fitting (fixed for some of the problems) [default=2] nobs=[integer] number of observations for the data fitting test problem (fixed for some of the problems) [default=2] pardomain=[float] parameter space domain size [default pardomain=100] ## Debugging / verbose levels: debug=[0-5] general debugging [default debug=0] fdebug=[0-5] model evaluation debugging [default fdebug=0] ldebug=[0-3] Levenberg-Marquardt (**LM**) optimization debugging [default ldebug=0] pdebug=[0-3] Particle Swarm optimization debugging [default pdebug=0] mdebug=[0-3] Random sampling debugging [default mdebug=0] odebug=[0-1] Objective function progress [default odebug=0] tpldebug=[0-3] Debug the writing of external files [default tpldebug=0] insdebug=[0-3] Debug the reading of external files [default insdebug=0] pardebug=[0-3] Debug the parallel execution [default pardebug=0] ## **MADS** Input and output files _problem_name_**.mads**: an input file that can completely define the analyzed problem. The file follows a predefined **MADS** input format. It includes information about the simulation type, model parameters, and model observations. _problem_name_**.results**: an output file containing the **MADS** results _problem_name_**.residuals**: an output file containing the residuals between model predictions and calibration targets (if applicable) _problem_name_**.jacobian**: an output file containing the Jacobian (local sensitivity) matrix _problem_name_**.covariance**: an output file containing the covariance matrix _problem_name_**.correlation**: an output file containing the correlation matrix _problem_name_**.eigen**: an output file containing the eigen matrix and eigen values _problem_name_**.phi**: an output file containing information about the final objective function _problem_name_**.ofe**: an output file containing information about the objective function minimization progress as a function of model evaluations _problem_name_**.mcrnd***: output files containing Monte Carlo (**MC**) analysis results _problem_name_**.igrnd***: output files containing Random Initial Guesses (**IGRND**) results _problem_name_**.igpd***: output files containing Partially Discretized Initial Guesses (**IGPD**) results _problem_name_**.ppsd***: output files containing Partial Parameter Space Discretization (**PPSD**) results _problem_name_**-rerun.mads**: an output file that can be used as a **MADS** input file. It contains all the information needed to restart the last calibration. The model parameters are modified to represent the current best estimates. The file follows a predefined **MADS** input format. _problem_name_**._igap_**: output files containing remediation information gap (**infogap**) results _problem_name_**._pssa_**: output files containing **ABAGUS** results _problem_name_**._pua_**: output files containing predictive uncertainty analysis (**postpua**) results [Back to top](#mads-manual) ## Format of **MADS** input files ## **MADS** Problem files (***.mads**) The **MADS** input problem files provide information about the model parameters needed to execute the model simulator and the model observations (calibration targets) that will be applied to evaluate the model performance. The input file typically has the following format (this example file called **w01.mads** is located in directory **example/wells-short**): [![](manual_images/mads-file-format.jpg)[click to enlarge]](manual_images/mads-file-format.jpg \"MADS File Format\") The key data blocks in the **MADS** problem file are defined above. The format associated with model parameters and observations is defined below. [![](manual_images/mads-file-format2.jpg)[click to enlarge]](manual_images/mads-file-format2.jpg \"MADS File Format: Model parameters\") [![](manual_images/mads-file-format3.jpg)[click to enlarge]](manual_images/mads-file-format3.jpg \"MADS File Format: Model observations\") Instead of **MADS** problem file, **MADS** can also read and work with the standard [PEST](http://www.pesthomepage.org/Home.php) control (problem) files (\u2018***.pst**\u2019) without any conversion. ## **MADS** Template files (***.tpl**) The **MADS** template files provide the current values of the model parameters to the external simulator. In this case, the file \u2018**w01.tpl**\u2019 is applied to create the model input file \u2018**w01.wells**\u2019. The file \u2018**w01.tpl**\u2019 is located in directory \u2018**example/wells-short**\u2019. The template input file typically has the following format: [![](manual_images/mads-file-format4.jpg)[click to enlarge]](manual_images/mads-file-format4.jpg \"MADS File Format: Template file\") In this case, the template file is based on the **WELLS** ([wells.lanl.gov](http://wells.lanl.gov)) input file where two of the input model parameters (\u2018**Permeability**\u2019 and \u2018**Storage coefficient**\u2019) will be replaced by **MADS** with the current values associated with these model parameters. The model parameters are defined in the **MADS** problem file \u2018**w01.mads**\u2019 and labeled as \u201c**k**\u201d and \u201c**S**\u201d. The first line with the keyword \u2018**template**\u2019 is optional. In this case, it defines the special variable symbol \u201c**%**\u201d that is going to be applied to define the fields where model parameters will be placed. If the first line is missing, the special variable symbol \u201c**#**\u201d is assumed by default. More than one template files can be applied to generate a series of model input files. Each model parameter can appear multiple times in the template files. The easiest way to create a template file is to take an existing model input file and replace the model parameters provided to **MADS** for analysis with the name of model parameters as defined in the **MADS** problem file. The model parameter names should be surrounded with the special variable symbol. The **MADS** template file format is similar to the format implemented in the code [PEST](http://www.pesthomepage.org/Home.php). In fact, **MADS** can use the standard [PEST](http://www.pesthomepage.org/Home.php) template files as well without any conversion. The template files can be debugged using the keyword \u2018**tpldebug**\u2019 (for example:\u2018**mads w01 tbldebug**\u2019). ## **MADS** Instruction files (***.inst**) The **MADS** instruction files are applied to read the current model observations (predictions) obtained from the external simulator based on the current model parameters. In this case, the file \u2018**w01.inst**\u2019 is applied to read the model output file \u2018**w01.s_point**\u2019. There are several alternative versions of the instruction file (\u2018__w01-v*.inst__\u2019) provided in directory \u2018**example/wells-short**\u2019. The instruction files typically have the following format: [![](manual_images/mads-file-format5.jpg)[click to enlarge]](manual_images/mads-file-format5.jpg \"MADS File Format: Instruction file\") The observation names are shown in \u2018**red**\u2019 and are specified in the **MADS** control file. All the instruction files presented above are equivalent in terms that all of them are extracting the same information from the model output file \u2018**w01.s_point**\u2019. The file format is somewhat similar to the format implemented in the code [PEST](http://www.pesthomepage.org/Home.php). In fact, **MADS** can use the standard [PEST](http://www.pesthomepage.org/Home.php) instruction files as well without any conversion. The first line with the keyword \u2018**instruction**\u2019 is optional. In the case of \u2018**w01-v1.inst**\u2019, it defines that the special search symbol \u201c**%**\u201d is going to be applied to search for numeric or character patterns in the model output file, the special observation symbol \u201c**!**\u201d is going to be applied to define the location of the observations within the model output file. If the first line is missing as in the case of \u2018**w01-v4.inst**\u2019, the symbols \u201c**@**\u201d and \u201c**!**\u201d are assumed by default for the search and observation tokens, respectively. Each consecutive instruction line in the instruction file starts with either (1) the letter \u201c**l**\u201d or (2) the special search symbol. In the case of \u201c**l**\u201d, the following number defines how many lines to be skipped (for example, \u201c**l1**\u201d means go to the next line; \u201c**l2**\u201d means skip one line). In the case of search symbol, the content of the model output file is skipped until search phrase is found. The letter \u201c**w**\u201d forces skipping of white-character spaces. The keyword \u201c**dum**\u201d defines dummy observations that are ignored. Note that the search phrase \u201c**@0@**\u201d in files \u2018**w01-v3.inst**\u2019 and \u2018**w01-v4.inst**\u2019 can be dangerous since the digit \u201c**0**\u201d can occur in many locations in the model output file. Comparing \u2018**w01-v3.inst**\u2019 and \u2018**w01-v4.inst**\u2019 it is clear that the search pattern does not need to include the entire number of characters that are expected to be in the model output file. The search pattern also does not need to be at the beginning of the line. The instruction files can be debugged using the keyword \u2018**insdebug**\u2019 (for example: \u2018**mads w01 insdebug**\u2019). ## **MADS** Compilation To compile, extract the provided **mads.tgz** file (**tar xvf mads.tgz**) and execute '**make**'. GSL, LAPACK and BLAS libraries are expected to be available. * [GSL](ftp://ftp.gnu.org/gnu/gsl/): ftp://ftp.gnu.org/gnu/gsl/ * [LAPACK](http://www.netlib.org/lapack/): http://www.netlib.org/lapack/ * [BLAS](http://www.netlib.org/blas/): http://www.netlib.org/blas/ If **macports** is installed ([www.macports.org](http://www.macports.org)), these packages can be installed on MAC OS X machines using the following commands (requiring administrative privileges): * sudo port install blas * sudo port install lapack * sudo port install gsl [Back to top](#mads-manual) ## **MADS** Verification To verify that **MADS** is running properly, execute '**make verify**'. ## **MADS** Test Examples To run some of the available **MADS** examples, execute '**make examples**'. [Back to top](#mads-manual)","title":"Mads manual"},{"location":"html/mads-methods/","text":"# **MADS** Methods * [Model analyses](#model-analyses) * [Decision support](#decision-support) * [Contaminant transport simulators](#contaminant-transport-simulators) * [Test functions](#test-functions) ### Model analyses **MADS** includes a wide range of techniques for model-based analyses that can perform local and global exploration of model parameter space: * Optimization techniques for Parameter Estimation (**PE**), Model Inversion, Model Calibration, and Decision Support (**DS**) * Several different implementations of the local Levenberg-Marquardt (**LM**) optimization technique: [GSL](http://www.gnu.org/s/gsl/), [IMSL](http://www.roguewave.com/products/imsl-numerical-libraries.aspx), [LevMar](http://www.ics.forth.gr/~lourakis/levmar/). The Levenberg-Marquardt (**LM**) optimization technique can be performed using [acceleration and delayed gratification approaches](http://link.aps.org/doi/10.1103/PhysRevE.83.036701). In **LM**, the inversion of Jacobian (sensitivity) matrix can be performed using a wide range of techniques: BK (Bunch and Kaufman), LU, QR, QRLS, Cholesky, and SVD (singular value) decompositions using LAPACK and SVDPACK libraries. **SVD decomposition** allows for highly-parameterized inversion where the number of model parameters is substantially greater than the number of model constraints (calibration targets or model observations); a similar approach is called [SVD-assist](http://www.pesthomepage.org/Highly-parameterized_inversion.php) in [PEST](http://www.pesthomepage.org). * Multi-Start Levenberg-Marquardt (**MSLM**) optimization technique * Global Particle Swarm Optimization ([PSO](http://clerc.maurice.free.fr/pso/)) * Global Adaptive Particle Swarm Optimization [TRIBES](http://www.particleswarm.info/Tribes_2006_Cooren.pdf) * Global Optimization technique coupling Particle Swarm and Levenberg-Marquardt optimization technique [SQUADS](papers/squads_v04.pdf) * Sensitivity Analysis (**SA**) techniques * Global Monte-Carlo based analysis * Local eigen analysis of Jacobian matrix of model parameters * [Sobol's global sensitivity indices](http://www.mlmatrix.com/uploadfile/200712418203522.pdf) * Agent-based Global Uncertainty and Sensitivity [ABAGUS](papers/Harp & Vesselinov ABAGUS 2011.pdf) analysis * Sampling (design of experiment) techniques (based on random or user provided seed): * Pseudo random sampling * Latin-Hypercube sampling techniques: random, center, edge * [Improved Distributed Hypercube Sampling](http://people.sc.fsu.edu/~jburkardt/datasets/ihs/ihs.html) (**IDLHS**; aka **IHS**) * Uncertainty Quantification (**UQ**) techniques * Global Monte-Carlo based analysis * Local analysis based on Jacobian matrix of model parameters * Agent-based Global Uncertainty and Sensitivity [ABAGUS](papers/Harp & Vesselinov ABAGUS 2011.pdf) analysis ### Decision support **MADS** includes methods for Model-based Decision Support (**DS**) * Bayesian analysis utilizing [DREAM](http://www.biometris.wur.nl/UK/Staff/Cajo+ter+Braak/Software+and+Data/DE-MC+and+DREAM+software+page/) * non-Bayesian analysis utilizing [minimax](http://www.sciencedirect.com/science/article/pii/S0004370206000245), [info-gap](papers/Harp & Vesselinov infogap source 2011.pdf) and [GLUE](http://www.sciencedirect.com/science/article/pii/S0022169401004218) * Global Optimization technique coupling Particle Swarm and Levenberg-Marquardt optimization techniques [SQUADS](papers/squads_v04.pdf) * Agent-based Global Uncertainty and Sensitivity [ABAGUS](papers/Harp & Vesselinov ABAGUS 2011.pdf) analysis ### Contaminant transport simulators **MADS** includes several analytical simulators for representation of 3D contaminant transport in aquifers. The analytical simulation is based on the solutions developed by [Wexler (1992)](http://pubs.usgs.gov/twri/twri3-b7/) and [Park & Zhan (2001)](http://www.sciencedirect.com/science/article/pii/S016977220100136X). The solutions are solved using [GSL](http://www.gnu.org/s/gsl/) subroutines. Alternative solutions are available for contaminant sources with different geometry: * point source * plane source (along the top of the aquifer) * 3D box (straight parallelepiped) source ### Test functions **MADS** includes a series of test functions that can be applied for efficient testing of model-analysis and decision support techniques. These test functions are commonly used in the practice. The list of all the test functions built-in in **MADS** are listed in the [manual](mads-manual.md)","title":"Mads methods"},{"location":"src/AffineInvariantMCMC/","text":"AffineInvariantMCMC.jl Module AffineInvariantMCMC.jl provides functions for Bayesian sampling using Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) based on a paper by Goodman & Weare, \"Ensemble samplers with affine invariance\" Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65 , 2010. AffineInvariantMCMC.jl module functions: @autodocs Modules = [AffineInvariantMCMC] Order = [:function, :macro, :type]","title":"AffineInvariantMCMC.jl"},{"location":"src/AffineInvariantMCMC/#affineinvariantmcmcjl","text":"Module AffineInvariantMCMC.jl provides functions for Bayesian sampling using Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler (aka Emcee) based on a paper by Goodman & Weare, \"Ensemble samplers with affine invariance\" Communications in Applied Mathematics and Computational Science, DOI: 10.2140/camcos.2010.5.65 , 2010. AffineInvariantMCMC.jl module functions: @autodocs Modules = [AffineInvariantMCMC] Order = [:function, :macro, :type]","title":"AffineInvariantMCMC.jl"},{"location":"src/Anasol/","text":"Anasol.jl Module Anasol.jl provides a series of analytical solutions for groundwater contaminant transport in 1, 2, and 3 dimensions. The provided solutions have: different source types instantaneous contaminant release continuous contaminant release with a unit flux continuous contaminant release with a given constant flux different source shapes constrained (within predefined limits) distributed (assuming normal distribution) different dispersion models classical (Fickian) fractional Brownian different boundaries along each axis infinite (no boundary) reflecting absorbing Functions have the following arguments: t : time to compute the concentration x : spatial coordinates of the point to compute the concentration x01 / x02 / x03 : contaminant source coordinates sigma01 / sigma02 / sigma01 : contaminant source sizes (if a constrained source) or standard deviations (if a distributed source) sourcestrength : user-provided function defining time-dependent source strength t0 / t1 : contaminant release times (source is released between t0 and t1 ) v1 / v2 / v3 : groundwater flow velocity components sigma1 / sigma2 / sigma3 : groundwater flow dispersion components lambda : half-life contaminant decay H1 / H2 / H3 : Hurst coefficients in the case of fractional Brownian dispersion xb1 / xb2 / xb3 : locations of the domain boundaries Anasol.jl module functions: @autodocs Modules = [Anasol] Order = [:function, :macro, :type]","title":"Anasol.jl"},{"location":"src/Anasol/#anasoljl","text":"Module Anasol.jl provides a series of analytical solutions for groundwater contaminant transport in 1, 2, and 3 dimensions. The provided solutions have: different source types instantaneous contaminant release continuous contaminant release with a unit flux continuous contaminant release with a given constant flux different source shapes constrained (within predefined limits) distributed (assuming normal distribution) different dispersion models classical (Fickian) fractional Brownian different boundaries along each axis infinite (no boundary) reflecting absorbing Functions have the following arguments: t : time to compute the concentration x : spatial coordinates of the point to compute the concentration x01 / x02 / x03 : contaminant source coordinates sigma01 / sigma02 / sigma01 : contaminant source sizes (if a constrained source) or standard deviations (if a distributed source) sourcestrength : user-provided function defining time-dependent source strength t0 / t1 : contaminant release times (source is released between t0 and t1 ) v1 / v2 / v3 : groundwater flow velocity components sigma1 / sigma2 / sigma3 : groundwater flow dispersion components lambda : half-life contaminant decay H1 / H2 / H3 : Hurst coefficients in the case of fractional Brownian dispersion xb1 / xb2 / xb3 : locations of the domain boundaries Anasol.jl module functions: @autodocs Modules = [Anasol] Order = [:function, :macro, :type]","title":"Anasol.jl"},{"location":"src/BIGUQ/","text":"BIGUQ.jl Module BIGUQ provides advanced techniques for Uncertainty Quantification, Experimental Design and Decision Analysis based on Bayesian Information Gap Decision Theory (BIGDT). References: O\u2019Malley, D., Vesselinov, V.V., A combined probabilistic/non-probabilistic decision analysis for contaminant remediation, Journal on Uncertainty Quantification, SIAM/ASA, 10.1137/140965132, 2014. O\u2019Malley, D., Vesselinov, V.V., Bayesian-Information-Gap decision theory with an application to CO2 sequestration, Water Resources Research, 10.1002/2015WR017413, 2015. Grasinger, M., O'Malley, D., Vesselinov, V.V., Karra, S., Decision Analysis for Robust CO2 Injection: Application of Bayesian-Information-Gap Decision Theory, International Journal of Greenhouse Gas Control, 10.1016/j.ijggc.2016.02.017, 2016. Relevant examples: Information Gap Analysis Decision Analysis BIGUQ.jl module functions: @autodocs Modules = [BIGUQ] Order = [:function, :macro, :type]","title":"BIGUQ.jl"},{"location":"src/BIGUQ/#biguqjl","text":"Module BIGUQ provides advanced techniques for Uncertainty Quantification, Experimental Design and Decision Analysis based on Bayesian Information Gap Decision Theory (BIGDT). References: O\u2019Malley, D., Vesselinov, V.V., A combined probabilistic/non-probabilistic decision analysis for contaminant remediation, Journal on Uncertainty Quantification, SIAM/ASA, 10.1137/140965132, 2014. O\u2019Malley, D., Vesselinov, V.V., Bayesian-Information-Gap decision theory with an application to CO2 sequestration, Water Resources Research, 10.1002/2015WR017413, 2015. Grasinger, M., O'Malley, D., Vesselinov, V.V., Karra, S., Decision Analysis for Robust CO2 Injection: Application of Bayesian-Information-Gap Decision Theory, International Journal of Greenhouse Gas Control, 10.1016/j.ijggc.2016.02.017, 2016. Relevant examples: Information Gap Analysis Decision Analysis BIGUQ.jl module functions: @autodocs Modules = [BIGUQ] Order = [:function, :macro, :type]","title":"BIGUQ.jl"},{"location":"src/DocumentFunction/","text":"DocumentFunction.jl Module provides tools for documenting Julia functions providing information about function methods, arguments and keywords. DocumentFunction.jl module functions: @autodocs Modules = [DocumentFunction] Order = [:function, :macro, :type]","title":"DocumentFunction.jl"},{"location":"src/DocumentFunction/#documentfunctionjl","text":"Module provides tools for documenting Julia functions providing information about function methods, arguments and keywords. DocumentFunction.jl module functions: @autodocs Modules = [DocumentFunction] Order = [:function, :macro, :type]","title":"DocumentFunction.jl"},{"location":"src/GeostatInversion/","text":"GeostatInversion.jl This package provides methods for inverse analysis using parameter fields that are represented using geostatistical (stochastic) methods. Currently, two geostatistical methods are implemented. One is the Principal Component Geostatistical Approach (PCGA) proposed by Kitanidis & Lee . The other utilizes a Randomized Geostatistical Approach (RGA) that builds on PCGA. Randomized Geostatistical Approach (RGA) references: O'Malley, D., Le, E., Vesselinov, V.V., Fast Geostatistical Inversion using Randomized Matrix Decompositions and Sketchings for Heterogeneous Aquifer Characterization, AGU Fall Meeting, San Francisco, CA, December 14\u201318, 2015. Lin, Y, Le, E.B, O'Malley, D., Vesselinov, V.V., Bui-Thanh, T., Large-Scale Inverse Model Analyses Employing Fast Randomized Data Reduction, 2016. Two versions of PCGA are implemented in this package pcgadirect , which uses full matrices and direct solvers during iterations pcgalsqr , which uses low rank representations of the matrices combined with iterative solvers during iterations The RGA method, rga , can use either of these approaches using the keyword argument. That is, by doing rga(...; pcgafunc=GeostatInversion.pcgadirect) or rga(...; pcgafunc=GeostatInversion.pcgalsqr) . GeostatInversion.jl module functions: ```@autodocs Modules = [GeostatInversion] Order = [:function, :macro, :type] ## Module GeostatInversion.FDDerivatives GeostatInversion . FDDerivatives module functions : ```@ autodocs Modules = [ GeostatInversion . FDDerivatives ] Order = [ : function , : macro , : type ] Module GeostatInversion.RandMatFact GeostatInversion.RandMatFact module functions: ```@autodocs Modules = [GeostatInversion.RandMatFact] Order = [:function, :macro, :type] ## Module GeostatInversion.FFTRF GeostatInversion . FFTRF module functions : ```@ autodocs Modules = [ GeostatInversion . FFTRF ] Order = [ : function , : macro , : type ]","title":"GeostatInversion.jl"},{"location":"src/GeostatInversion/#geostatinversionjl","text":"This package provides methods for inverse analysis using parameter fields that are represented using geostatistical (stochastic) methods. Currently, two geostatistical methods are implemented. One is the Principal Component Geostatistical Approach (PCGA) proposed by Kitanidis & Lee . The other utilizes a Randomized Geostatistical Approach (RGA) that builds on PCGA. Randomized Geostatistical Approach (RGA) references: O'Malley, D., Le, E., Vesselinov, V.V., Fast Geostatistical Inversion using Randomized Matrix Decompositions and Sketchings for Heterogeneous Aquifer Characterization, AGU Fall Meeting, San Francisco, CA, December 14\u201318, 2015. Lin, Y, Le, E.B, O'Malley, D., Vesselinov, V.V., Bui-Thanh, T., Large-Scale Inverse Model Analyses Employing Fast Randomized Data Reduction, 2016. Two versions of PCGA are implemented in this package pcgadirect , which uses full matrices and direct solvers during iterations pcgalsqr , which uses low rank representations of the matrices combined with iterative solvers during iterations The RGA method, rga , can use either of these approaches using the keyword argument. That is, by doing rga(...; pcgafunc=GeostatInversion.pcgadirect) or rga(...; pcgafunc=GeostatInversion.pcgalsqr) . GeostatInversion.jl module functions: ```@autodocs Modules = [GeostatInversion] Order = [:function, :macro, :type] ## Module GeostatInversion.FDDerivatives GeostatInversion . FDDerivatives module functions : ```@ autodocs Modules = [ GeostatInversion . FDDerivatives ] Order = [ : function , : macro , : type ]","title":"GeostatInversion.jl"},{"location":"src/GeostatInversion/#module-geostatinversionrandmatfact","text":"GeostatInversion.RandMatFact module functions: ```@autodocs Modules = [GeostatInversion.RandMatFact] Order = [:function, :macro, :type] ## Module GeostatInversion.FFTRF GeostatInversion . FFTRF module functions : ```@ autodocs Modules = [ GeostatInversion . FFTRF ] Order = [ : function , : macro , : type ]","title":"Module GeostatInversion.RandMatFact"},{"location":"src/Mads/","text":"Mads.jl MADS (Model Analysis & Decision Support) Mads.jl is MADS main module. Mads.jl module functions: @autodocs Modules = [Mads] Order = [:function, :macro, :type]","title":"Mads.jl"},{"location":"src/Mads/#madsjl","text":"MADS (Model Analysis & Decision Support) Mads.jl is MADS main module. Mads.jl module functions: @autodocs Modules = [Mads] Order = [:function, :macro, :type]","title":"Mads.jl"},{"location":"src/MetaProgTools/","text":"MetaProgTools.jl Module with Meta Programming Tools. MetaProgTools.jl module functions: @autodocs Modules = [MetaProgTools] Order = [:function, :macro, :type]","title":"MetaProgTools.jl"},{"location":"src/MetaProgTools/#metaprogtoolsjl","text":"Module with Meta Programming Tools. MetaProgTools.jl module functions: @autodocs Modules = [MetaProgTools] Order = [:function, :macro, :type]","title":"MetaProgTools.jl"},{"location":"src/ReusableFunctions/","text":"ReusableFunctions.jl Module ReusableFunctions provides automated storage and retrieval of results for Julia function calls. ReusableFunctions.jl module functions: @autodocs Modules = [ReusableFunctions] Order = [:function, :macro, :type]","title":"ReusableFunctions.jl"},{"location":"src/ReusableFunctions/#reusablefunctionsjl","text":"Module ReusableFunctions provides automated storage and retrieval of results for Julia function calls. ReusableFunctions.jl module functions: @autodocs Modules = [ReusableFunctions] Order = [:function, :macro, :type]","title":"ReusableFunctions.jl"},{"location":"src/RobustPmap/","text":"RobustPmap.jl Module RobustPmap provides robust pmap calls for efficient parallelization and high-performance computing in Julia. RobustPmap.jl module functions: @autodocs Modules = [RobustPmap] Order = [:function, :macro, :type]","title":"RobustPmap.jl"},{"location":"src/RobustPmap/#robustpmapjl","text":"Module RobustPmap provides robust pmap calls for efficient parallelization and high-performance computing in Julia. RobustPmap.jl module functions: @autodocs Modules = [RobustPmap] Order = [:function, :macro, :type]","title":"RobustPmap.jl"},{"location":"src/SVR/","text":"SVR.jl Module SVR provides Support Vector Regression (SVR) using libSVM library. SVR.jl module functions: @autodocs Modules = [SVR] Order = [:function, :macro, :type]","title":"SVR.jl"},{"location":"src/SVR/#svrjl","text":"Module SVR provides Support Vector Regression (SVR) using libSVM library. SVR.jl module functions: @autodocs Modules = [SVR] Order = [:function, :macro, :type]","title":"SVR.jl"}]}